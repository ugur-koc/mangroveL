===< 12789 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
5067d5066
< #   include <fcntl.h>
5068d5067
< #   include <sys/types.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
5105,5129d5104
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1216,1218c1216
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
361,429c361
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
507,596c507
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
732c732
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
733,741c733
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,814c811
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
816,830c816
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
1089,1092c1089
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
---
>          } else 
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
1593,1595d1592
< {
<    bzFile* bzf = NULL;
<    int     ret;
1597,1638d1593
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1978c1978
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1745c1745
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_include_includes :: 0 >===
===< pass_balanced :: curly-only >===
31c31
<    struct {
---
>    struct 
47c47
<    } 
---
>     
355c355
<    struct {
---
>    struct 
423c423
<    }
---
>    
501c501
<    struct {
---
>    struct 
590c590
<    }
---
>    
895c895
< {
---
> 
903c903
< }
---
> 
899c899
<       if (s->inUse[i]) {
---
>       if (s->inUse[i]) 
902c902
<       }
---
>       
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
(84.3 %, 32085 bytes)
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
939c939
<       } else {
---
>       } else 
956c956
<       }
---
>       
(84.3 %, 32083 bytes)
939c939
<        else {
---
>        else 
956c956
<       }
---
>       
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
(84.3 %, 32081 bytes)
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
1272c1272
< {
---
> 
1287c1287
< }
---
> 
1298c1298
<    struct {
---
>    struct 
1306c1306
<    }
---
>    
1321c1321
< {
---
> 
1358c1358
< }
---
> 
1368c1368
< {
---
> 
1398c1398
< }
---
> 
1386c1386
<    while (True) {
---
>    while (True) 
1397c1397
<    }
---
>    
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
1533c1533
< {
---
> 
1554c1554
< }
---
> 
1563c1563
< {
---
> 
1575c1575
< }
---
> 
(84.3 %, 32079 bytes)
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
1533c1533
< {
---
> 
1554c1554
< }
---
> 
1563c1563
< {
---
> 
1575c1575
< }
---
> 
1591c1591
< {
---
> 
1630c1630
< }
---
> 
1641c1641
< {
---
> 
1680c1680
< }
---
> 
1672c1672
<    if (strm.avail_out > 0) {
---
>    if (strm.avail_out > 0) 
1675c1675
<    } else ;      
---
>     else ;      
1690c1690
< {
---
> 
1692c1692
< }
---
> 
1711c1711
< {
---
> 
1713c1713
< }
---
> 
1720c1720
< {
---
> 
1722c1722
< }
---
> 
1727c1727
< {
---
> 
1736c1736
< }
---
> 
1731c1731
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
1733c1733
<    } else {
---
>     else {
1733c1733
<    } else {
---
>    } else 
1735c1735
<    }
---
>    
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
(84.3 %, 32077 bytes)
1733c1733
<     else {
---
>     else 
1735c1735
<    }
---
>    
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
(84.3 %, 32075 bytes)
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
1747c1747
<    }else{
---
>    }else
1749c1749
<    }
---
>    
(84.3 %, 32073 bytes)
1747c1747
<    else{
---
>    else
1749c1749
<    }
---
>    
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
(84.4 %, 32071 bytes)
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
(84.4 %, 32069 bytes)
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
(84.4 %, 32067 bytes)
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
(84.4 %, 32065 bytes)
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
===< pass_clang :: remove-nested-function >===
===< pass_clang :: return-void >===
628c628
< extern Int32 
---
> void  
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( DState* s )
1036,1037c1036
< static
< int bz_config_ok ( void )
---
> void  bz_config_ok ( void )
(84.4 %, 32058 bytes)
1036,1037c1036
< static
< int bz_config_ok ( void )
---
> void  bz_config_ok ( void )
1042,1043c1042
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
(84.4 %, 32053 bytes)
1041,1042c1041
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
1062,1063c1062
< static
< Bool isempty_RL ( EState* s )
---
> void  isempty_RL ( EState* s )
(84.4 %, 32046 bytes)
1061,1062c1061
< static
< Bool isempty_RL ( EState* s )
---
> void  isempty_RL ( EState* s )
1149,1150c1149
< static
< Bool handle_compress ( bz_stream* strm )
---
> void  handle_compress ( bz_stream* strm )
(84.4 %, 32040 bytes)
1148,1149c1148
< static
< Bool handle_compress ( bz_stream* strm )
---
> void  handle_compress ( bz_stream* strm )
1694,1695c1694
< static
< BZFILE * bzopen_or_bzdopen
---
> void  bzopen_or_bzdopen
2145c2145
< IntNative main ( IntNative argc, Char *argv[] )
---
> void  main ( IntNative argc, Char *argv[] )
(84.4 %, 32034 bytes)
1693,1694c1693
< static
< BZFILE * bzopen_or_bzdopen
---
> void  bzopen_or_bzdopen
2144c2144
< IntNative main ( IntNative argc, Char *argv[] )
---
> void  main ( IntNative argc, Char *argv[] )
(84.4 %, 32030 bytes)
===< pass_clang :: lift-assignment-expr >===
898c898,900
<    for (i = 0; i < 256; i++)
---
>    i = 0;
>    
>    for (i; i < 256; i++)
924c924,926
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i = 0;
>    
>    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
(84.4 %, 32040 bytes)
926c926,928
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i = 0;
>    
>    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
930c930,932
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    i = 0;
>    
>    for (i; i < s->nInUse; i++) yy[i] = (UChar) i;
(84.4 %, 32050 bytes)
932c932,934
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    i = 0;
>    
>    for (i; i < s->nInUse; i++) yy[i] = (UChar) i;
934c934,936
<    for (i = 0; i < s->nblock; i++) {
---
>    i = 0;
>    
>    for (i; i < s->nblock; i++) {
(84.4 %, 32060 bytes)
936c936,938
<    for (i = 0; i < s->nblock; i++) {
---
>    i = 0;
>    
>    for (i; i < s->nblock; i++) {
(84.4 %, 32070 bytes)
===< pass_clang :: copy-propagation >===
900,902c900,902
<    for (i; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (0; 0 < 256; i++)
>       if (s->inUse[0]) 
>          s->unseqToSeq[0] = s->nInUse;
928c928
<    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (0; 0 <= EOB; i++) s->mtfFreq[0] = 0;
(84.4 %, 32070 bytes)
928c928
<    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (0; 0 <= EOB; i++) s->mtfFreq[0] = 0;
934c934
<    for (i; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (0; 0 < s->nInUse; i++) yy[0] = (UChar) 0;
(84.4 %, 32070 bytes)
934c934
<    for (i; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (0; 0 < s->nInUse; i++) yy[0] = (UChar) 0;
938c938
<    for (i; i < s->nblock; i++) {
---
>    for (0; 0 < s->nblock; i++) {
941c941
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[0]-1; if (j < 0) j += s->nblock;
(84.4 %, 32070 bytes)
938c938
<    for (i; i < s->nblock; i++) {
---
>    for (0; 0 < s->nblock; i++) {
941c941
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[0]-1; if (j < 0) j += s->nblock;
942c942
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block[s->nblock]];
(84.4 %, 32070 bytes)
942c942
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block[s->nblock]];
949c949
<          if (zPend > 0) 
---
>          if (0 > 0) 
967c967
<    if (zPend > 0) 
---
>    if (0 > 0) 
(84.3 %, 32078 bytes)
949c949
<          if (zPend > 0) 
---
>          if (0 > 0) 
967c967
<    if (zPend > 0) 
---
>    if (0 > 0) 
958c958
<             while ( rll_i != rtmp ) ;
---
>             while ( ll_i != rtmp ) ;
(84.4 %, 32070 bytes)
958c958
<             while ( rll_i != rtmp ) ;
---
>             while ( ll_i != rtmp ) ;
961c961
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv[0] = j+1; wr++; s->mtfFreq[j+1]++;
969c969
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv[0] = EOB; wr++; s->mtfFreq[EOB]++;
971c971
<    s->nMTF = wr;
---
>    s->nMTF = 0;
(84.4 %, 32069 bytes)
961c961
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv[0] = j+1; wr++; s->mtfFreq[j+1]++;
969c969
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv[0] = EOB; wr++; s->mtfFreq[EOB]++;
971c971
<    s->nMTF = wr;
---
>    s->nMTF = 0;
1116c1116
<    s->workFactor        = workFactor;
---
>    s->workFactor        = 30;
(84.4 %, 32066 bytes)
1116c1116
<    s->workFactor        = workFactor;
---
>    s->workFactor        = 30;
1394c1394
<       if (ret != BZ_RUN_OK)
---
>       if (0 != BZ_RUN_OK)
(84.4 %, 32058 bytes)
1394c1394
<       if (ret != BZ_RUN_OK)
---
>       if (0 != BZ_RUN_OK)
1611c1611
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
(84.4 %, 32056 bytes)
1611c1611
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
1619,1620c1619,1620
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_FINISH_OK) goto output_overflow;
>    if (0 != BZ_STREAM_END) goto errhandler;
1633c1633
<    return ret;
---
>    return 0;
(84.4 %, 32052 bytes)
1619,1620c1619,1620
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_FINISH_OK) goto output_overflow;
>    if (0 != BZ_STREAM_END) goto errhandler;
1633c1633
<    return ret;
---
>    return 0;
1659c1659
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
(84.4 %, 32046 bytes)
1659c1659
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
1667,1668c1667,1668
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_OK) goto output_overflow_or_eof;
>    if (0 != BZ_STREAM_END) goto errhandler;
1683c1683
<    return ret; 
---
>    return 0; 
(84.4 %, 32042 bytes)
1667,1668c1667,1668
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_OK) goto output_overflow_or_eof;
>    if (0 != BZ_STREAM_END) goto errhandler;
1683c1683
<    return ret; 
---
>    return 0; 
1736c1736
<       return nread;
---
>       return 0;
(84.4 %, 32036 bytes)
1736c1736
<       return nread;
---
>       return 0;
1810c1810
<    if(err>0) err = 0;
---
>    if(((bzFile *)b)->lastErr>0) err = 0;
(84.4 %, 32032 bytes)
1810c1810
<    if(err>0) err = 0;
---
>    if(((bzFile *)b)->lastErr>0) err = 0;
1811,1812c1811,1812
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>    *errnum = 0;
>    return bzerrorstrings[0*-1];
1812c1812
<    return bzerrorstrings[err*-1];
---
>    return "OK";
(84.4 %, 32051 bytes)
1811,1812c1811,1812
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>    *errnum = 0;
>    return bzerrorstrings[0*-1];
1812c1812
<    return bzerrorstrings[err*-1];
---
>    return "OK";
(84.4 %, 32047 bytes)
1812c1812
<    return bzerrorstrings[0*-1];
---
>    return "OK";
(84.4 %, 32031 bytes)
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-simple-typedef >===
30,48c30
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> 
61c43
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
68c50
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
73c55
<       bz_stream* strm 
---
>       struct bz_stream* strm 
77c59
<       bz_stream *strm, 
---
>       struct bz_stream *strm, 
83c65
<       bz_stream* strm 
---
>       struct bz_stream* strm 
87c69
<       bz_stream *strm 
---
>       struct bz_stream *strm 
357c339
<       bz_stream* strm;
---
>       struct bz_stream* strm;
503c485
<       bz_stream* strm;
---
>       struct bz_stream* strm;
1075c1057
<                     ( bz_stream* strm, 
---
>                     ( struct bz_stream* strm, 
1156c1138
< void  handle_compress ( bz_stream* strm )
---
> void  handle_compress ( struct bz_stream* strm )
1161c1143
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( struct bz_stream *strm, int action )
1177c1159
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( struct bz_stream *strm )
1202c1184
<                      ( bz_stream* strm, 
---
>                      ( struct bz_stream* strm, 
1258c1240
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( struct bz_stream *strm )
1275c1257
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( struct bz_stream *strm )
1307c1289
<       bz_stream strm;
---
>       struct bz_stream strm;
1596c1578
<    bz_stream strm;
---
>    struct bz_stream strm;
1646c1628
<    bz_stream strm;
---
>    struct bz_stream strm;
240c240
< typedef char            Char;
---
> 
1304c1304
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
2152c2152
< void  main ( IntNative argc, Char *argv[] )
---
> void  main ( IntNative argc, char *argv[] )
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1229c1229
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1306c1306
<       Bool      writing;
---
>       unsigned char      writing;
1309c1309
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
912c912
<    UChar   yy[256];
---
>    unsigned char   yy[256];
920c920
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
934c934
<    for (0; 0 < s->nInUse; i++) yy[0] = (UChar) 0;
---
>    for (0; 0 < s->nInUse; i++) yy[0] = (unsigned char) 0;
939c939
<       UChar ll_i;
---
>       unsigned char ll_i;
951,953c951,953
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1118c1118
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
(84.4 %, 32002 bytes)
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1229c1229
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1306c1306
<       Bool      writing;
---
>       unsigned char      writing;
1309c1309
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
912c912
<    UChar   yy[256];
---
>    unsigned char   yy[256];
920c920
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
934c934
<    for (0; 0 < s->nInUse; i++) yy[0] = (UChar) 0;
---
>    for (0; 0 < s->nInUse; i++) yy[0] = (unsigned char) 0;
939c939
<       UChar ll_i;
---
>       unsigned char ll_i;
951,953c951,953
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1118c1118
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
896c896
<    Int32 i;
---
>    int i;
913,916c913,916
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1049c1049
< void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc ( void* opaque, int items, int size )
1080c1080
<    Int32   n;
---
>    int   n;
1305c1305
<       Int32     bufN;
---
>       int     bufN;
1308c1308
<       Int32     lastErr;
---
>       int     lastErr;
1373c1373
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
919c919
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1121c1121
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
(84.3 %, 32140 bytes)
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
896c896
<    Int32 i;
---
>    int i;
913,916c913,916
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1049c1049
< void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc ( void* opaque, int items, int size )
1080c1080
<    Int32   n;
---
>    int   n;
1305c1305
<       Int32     bufN;
---
>       int     bufN;
1308c1308
<       Int32     lastErr;
---
>       int     lastErr;
1373c1373
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
919c919
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1121c1121
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
921c921
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1119c1119
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
(84.3 %, 32110 bytes)
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
921c921
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1119c1119
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       UInt16*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
894c824
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( struct EState* s )
910c840
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( struct EState* s )
1059c989
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( struct EState* s )
1065c995
< void init_RL ( EState* s )
---
> void init_RL ( struct EState* s )
1069c999
< void  isempty_RL ( EState* s )
---
> void  isempty_RL ( struct EState* s )
1081c1011
<    EState* s;
---
>    struct EState* s;
1164c1094
<    EState* s;
---
>    struct EState* s;
1179c1109
<    EState* s;
---
>    struct EState* s;
500,562d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
564,591d500
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1020c929
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( struct DState* s )
1206c1115
<    DState* s;
---
>    struct DState* s;
1242c1151
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( struct DState* s )
1253c1162
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( struct DState* s )
1260c1169
<    DState* s;
---
>    struct DState* s;
1277c1186
<    DState* s;
---
>    struct DState* s;
1301,1311c1301
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1374c1364
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1428c1418
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1516c1506
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1539c1529
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1568c1558
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1733c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1808c1798
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1810c1800
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(((struct bzFile *)b)->lastErr>0) err = 0;
1893c1893
< typedef int IntNative;
---
> 
2152c2152
< void  main ( IntNative argc, char *argv[] )
---
> void  main ( int argc, char *argv[] )
(84.3 %, 32111 bytes)
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
894c824
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( struct EState* s )
910c840
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( struct EState* s )
1059c989
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( struct EState* s )
1065c995
< void init_RL ( EState* s )
---
> void init_RL ( struct EState* s )
1069c999
< void  isempty_RL ( EState* s )
---
> void  isempty_RL ( struct EState* s )
1081c1011
<    EState* s;
---
>    struct EState* s;
1164c1094
<    EState* s;
---
>    struct EState* s;
1179c1109
<    EState* s;
---
>    struct EState* s;
500,562d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
564,591d500
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1020c929
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( struct DState* s )
1206c1115
<    DState* s;
---
>    struct DState* s;
1242c1151
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( struct DState* s )
1253c1162
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( struct DState* s )
1260c1169
<    DState* s;
---
>    struct DState* s;
1277c1186
<    DState* s;
---
>    struct DState* s;
1301,1311c1301
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1374c1364
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1428c1418
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1516c1506
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1539c1529
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1568c1558
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1733c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1808c1798
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1810c1800
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(((struct bzFile *)b)->lastErr>0) err = 0;
1893c1893
< typedef int IntNative;
---
> 
2152c2152
< void  main ( IntNative argc, char *argv[] )
---
> void  main ( int argc, char *argv[] )
2128,2130c2128
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.3 %, 32083 bytes)
2128,2130c2128
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.4 %, 32051 bytes)
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: remove-array >===
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy;
934c934
<    for (0; 0 < s->nInUse; i++) yy[0] = (unsigned char) 0;
---
>    for (0; 0 < s->nInUse; i++) yy = (unsigned char) 0;
945c945
<       if (yy[0] == ll_i)  
---
>       if (yy == ll_i)  
954,956c954,956
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy;
>             yy = yy;
>             ryy_j = &(yy);
959,960c959,960
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy = rtmp;
>             j = ryy_j - &(yy);
(84.4 %, 32022 bytes)
===< pass_clang :: remove-addr-taken >===
===< pass_ints :: c >===
===< pass_ints :: d >===
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 66   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 90   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
(84.4 %, 32020 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 90   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
(84.4 %, 32018 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 48   
(84.4 %, 32017 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 48   
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 255);           \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 255);            \
(84.4 %, 32015 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 255);           \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 255);            \
(84.4 %, 32014 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 255);            \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 0xF)
(84.4 %, 32013 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 0xF)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 15)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 31)
(84.4 %, 32011 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 31)
(84.4 %, 32010 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 31)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 4294967040)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 255)
(84.4 %, 32007 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 4294967040)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 255)
(84.4 %, 32007 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 255)
(84.4 %, 32000 bytes)
===< pass_ints :: e >===
Termination check: size was 204936; now 32000
===< pass_balanced :: parens >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
(84.4 %, 31996 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
(84.4 %, 31992 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
(84.4 %, 31988 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
(84.4 %, 31984 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
76,80c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
82,84c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
98,105c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API ( 
107,110c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
112,117c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
119,124c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
126,132c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
134,139c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
141,147c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API ( 
149,157c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
162,170c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
172,179c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API (
184,186c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
188,191c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
193,196c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API (
198,202c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread) ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API (
204,208c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API (
210,212c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API (
214,216c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API (
218,221c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) ;
248c248
< #define True  ((Bool)1)
---
> #define True  
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
(84.4 %, 31978 bytes)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
(84.4 %, 31972 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
(84.4 %, 31958 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
(84.4 %, 31948 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
(84.4 %, 31944 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
(84.4 %, 31933 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
(84.4 %, 31925 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
(84.4 %, 31910 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(84.4 %, 31898 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
(84.4 %, 31879 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(84.5 %, 31863 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
(84.5 %, 31840 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
(84.5 %, 31820 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(84.5 %, 31793 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
(84.5 %, 31769 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
(84.5 %, 31738 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,,1)
(84.5 %, 31723 bytes)
272c272
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) 
272c272
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)
(84.5 %, 31709 bytes)
273c273
< #define BZFREE(ppp)  (strm->opaque,(ppp))
---
> #define BZFREE(ppp)  
273c273
< #define BZFREE(ppp)  (strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
(84.5 %, 31689 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ( ? 1 : 0)
(84.5 %, 31663 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
(84.6 %, 31647 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
(84.6 %, 31639 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(84.6 %, 31631 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(84.6 %, 31619 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
599c599
<     cccc = (UChar)(s->tPos & 255);           \
---
>     cccc = (s->tPos & 255);           \
599c599
<     cccc = (UChar)(s->tPos & 255);           \
---
>     cccc = (UChar);           \
(84.6 %, 31613 bytes)
599c599
<     cccc = (UChar)(s->tPos & 255);           \
---
>     cccc = (s->tPos & 255);           \
599c599
<     cccc = (UChar)(s->tPos & 255);           \
---
>     cccc = (UChar);           \
(84.6 %, 31606 bytes)
599c599
<     cccc = (s->tPos & 255);           \
---
>     cccc = ;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
604c604
<     cccc = (UChar)(c_tPos & 255);            \
---
>     cccc = (c_tPos & 255);            \
(84.6 %, 31591 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
604c604
<     cccc = (UChar)(c_tPos & 255);            \
---
>     cccc = (c_tPos & 255);            \
(84.6 %, 31585 bytes)
604c604
<     cccc = (UChar)(c_tPos & 255);            \
---
>     cccc = (c_tPos & 255);            \
604c604
<     cccc = (UChar)(c_tPos & 255);            \
---
>     cccc = (UChar);            \
(84.6 %, 31578 bytes)
604c604
<     cccc = (c_tPos & 255);            \
---
>     cccc = ;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
(84.6 %, 31564 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
(84.6 %, 31559 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15)
---
>    ( & 15)
(84.6 %, 31556 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15)
---
>    ( & 15)
(84.6 %, 31499 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LL                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
(84.6 %, 31494 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
(84.6 %, 31491 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ( | (GET_LL4(i) << 16))
(84.7 %, 31448 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
(84.7 %, 31442 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
(84.7 %, 31421 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
(84.7 %, 31412 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
(84.7 %, 31402 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
(84.7 %, 31385 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b)  ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ( < (b)) ? (a) : (b)
(84.7 %, 31380 bytes)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin  ? (a) : (b)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin ( < (b)) ? (a) : (b)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < ) ? (a) : (b)
(84.7 %, 31369 bytes)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ?  : (b)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ? (a) : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
(84.7 %, 31366 bytes)
665c665
< #define fmin  ?  : (b)
---
> #define fmin  ?  : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(84.7 %, 31363 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(84.7 %, 31356 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
(84.7 %, 31349 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= 
(84.7 %, 31345 bytes)
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= 
(84.7 %, 31341 bytes)
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= 
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << )
(84.7 %, 31323 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
(84.7 %, 31319 bytes)
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << )
(84.7 %, 31315 bytes)
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << )
(84.7 %, 31297 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  
(84.7 %, 31293 bytes)
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[ >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & )
(84.7 %, 31254 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[ >> 5]
(84.8 %, 31250 bytes)
692c692
< #define      WORD_BH  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[ >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 31)
---
> #define UNALIGNED_BH  ((zz) & 31)
(84.8 %, 31246 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 31)
---
> #define UNALIGNED_BH  ((zz) & 31)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 31)
---
> #define UNALIGNED_BH(zz)  
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 31)
---
> #define UNALIGNED_BH(zz)  ( & 31)
(84.8 %, 31242 bytes)
693c693
< #define UNALIGNED_BH  ((zz) & 31)
---
> #define UNALIGNED_BH  
693c693
< #define UNALIGNED_BH  ((zz) & 31)
---
> #define UNALIGNED_BH  ( & 31)
(84.8 %, 31231 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswap \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
(84.8 %, 31221 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
(84.8 %, 31204 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ( < (b)) ? (a) : (b)
(84.8 %, 31199 bytes)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin  ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ( < (b)) ? (a) : (b)
(84.8 %, 31188 bytes)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ?  : (b)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ? (a) : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(84.8 %, 31185 bytes)
732c732
< #define mmin  ?  : (b)
---
> #define mmin  ?  : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(84.8 %, 31182 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
(84.8 %, 31172 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
(84.8 %, 31162 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
(84.8 %, 31158 bytes)
739c739
< #define mnextsize (nextHi[az]-nextLo[az])
---
> #define mnextsize 
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
(84.8 %, 31135 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
(84.8 %, 31128 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
(84.8 %, 31103 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
(84.8 %, 31100 bytes)
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ 
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[ << 8] - ftab[(b) << 8])
(84.8 %, 31063 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(84.8 %, 31054 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(84.9 %, 31042 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 4294967040)
---
> #define WEIGHTOF  ((zz0) & 4294967040)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 4294967040)
---
> #define WEIGHTOF(zz0)  
(84.9 %, 31037 bytes)
793c793
< #define WEIGHTOF  ((zz0) & 4294967040)
---
> #define WEIGHTOF  
793c793
< #define WEIGHTOF  ((zz0) & 4294967040)
---
> #define WEIGHTOF  ( & 4294967040)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 255)
---
> #define DEPTHOF   ((zz1) & 255)
(84.9 %, 31017 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 255)
---
> #define DEPTHOF   ((zz1) & 255)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 255)
---
> #define DEPTHOF(zz1)   
(84.9 %, 31012 bytes)
794c794
< #define DEPTHOF   ((zz1) & 255)
---
> #define DEPTHOF   
794c794
< #define DEPTHOF   ((zz1) & 255)
---
> #define DEPTHOF   ( & 255)
(84.9 %, 30999 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) 
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) ( > (zz3) ? (zz2) : (zz3))
(84.9 %, 30990 bytes)
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX 
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ( > (zz3) ? (zz2) : (zz3))
(84.9 %, 30959 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTS                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
(84.9 %, 30950 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
(84.9 %, 30921 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOF,DEPTHOF(zw2)))
(84.9 %, 30883 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAP                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
(84.9 %, 30880 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
(84.9 %, 30877 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
<    for (0; 0 < 256; i++)
---
>    for 
901c901
<       if (s->inUse[0]) 
---
>       if  
910c910
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
928c928
<    for (0; 0 <= EOB; i++) s->mtfFreq[0] = 0;
---
>    for  s->mtfFreq[0] = 0;
934c934
<    for (0; 0 < s->nInUse; i++) yy = (unsigned char) 0;
---
>    for  yy = (unsigned char) 0;
934c934
<    for (0; 0 < s->nInUse; i++) yy = (unsigned char) 0;
---
>    for (0; 0 < s->nInUse; i++) yy =  0;
(84.9 %, 30873 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
<    for (0; 0 < 256; i++)
---
>    for 
901c901
<       if (s->inUse[0]) 
---
>       if  
910c910
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
928c928
<    for (0; 0 <= EOB; i++) s->mtfFreq[0] = 0;
---
>    for  s->mtfFreq[0] = 0;
934c934
<    for (0; 0 < s->nInUse; i++) yy = (unsigned char) 0;
---
>    for  yy = (unsigned char) 0;
934c934
<    for (0; 0 < s->nInUse; i++) yy = (unsigned char) 0;
---
>    for (0; 0 < s->nInUse; i++) yy =  0;
938c938
<    for (0; 0 < s->nblock; i++) {
---
>    for  {
940c940
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ;
(84.9 %, 30858 bytes)
938c938
<    for (0; 0 < s->nblock; i++) {
---
>    for  {
940c940
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ;
940c940
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr <= i, "generateMTFValues" );
(85.0 %, 30823 bytes)
941c941
<       j = ptr[0]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[0]-1; if  j += s->nblock;
943c943
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ;
943c943
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues" );
(85.0 %, 30778 bytes)
945c945
<       if (yy == ll_i)  
---
>       if   
949c949
<          if (0 > 0) 
---
>          if  
956c956
<             ryy_j = &(yy);
---
>             ryy_j = &;
958c958
<             while ( ll_i != rtmp ) ;
---
>             while  ;
960c960
<             j = ryy_j - &(yy);
---
>             j = ryy_j - &;
967c967
<    if (0 > 0) 
---
>    if  
1001c1001
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
1004c1004
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
(85.0 %, 30773 bytes)
1004c1004
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
1006c1006
<    while (True) 
---
>    while  
(85.0 %, 30760 bytes)
1006c1006
<    while (True) 
---
>    while  
1008c1008
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
1009c1009
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(85.0 %, 30754 bytes)
1008c1008
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
1009c1009
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(85.0 %, 30745 bytes)
1009c1009
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
1011c1011
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
(85.0 %, 30734 bytes)
1011c1011
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
1012c1012
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
1015c1015
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
(85.0 %, 30725 bytes)
1012c1012
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
1015c1015
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
1020c1020
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress 
1039c1039
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
(85.0 %, 30714 bytes)
1015c1015
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
1020c1020
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress 
1039c1039
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
1044c1044
< void  bz_config_ok ( void )
---
> void  bz_config_ok 
1049c1049
< void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc 
1053c1053
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
1059c1059
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
1065c1065
< void init_RL ( EState* s )
---
> void init_RL 
1069c1069
< void  isempty_RL ( EState* s )
---
> void  isempty_RL 
1074c1074
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1075,1078c1075
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1083c1083
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1085,1087c1085
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
---
>    if 
1090c1090
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1091c1091
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1092c1092
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1094c1094
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC;
(85.0 %, 30694 bytes)
1020c1020
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress 
1039c1039
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
1044c1044
< void  bz_config_ok ( void )
---
> void  bz_config_ok 
1049c1049
< void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void  default_bzalloc 
1053c1053
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
1059c1059
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
1065c1065
< void init_RL ( EState* s )
---
> void init_RL 
1069c1069
< void  isempty_RL ( EState* s )
---
> void  isempty_RL 
1074c1074
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1075,1078c1075
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1083c1083
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1085,1087c1085
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
---
>    if 
1090c1090
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1091c1091
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1092c1092
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1094c1094
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC;
1094c1094
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeof );
1095c1095
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  return BZ_MEM_ERROR;
1103c1103
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC;
1103c1103
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC( n                  * sizeof );
1104c1104
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC;
1104c1104
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC(  * sizeof(UInt32) );
1104c1104
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof );
1105c1105
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC;
1105c1105
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 65537              * sizeof );
1107c1107
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if  
1118c1118
<    s->block             = (unsigned char*)s->arr2;
---
>    s->block             = s->arr2;
1119c1119
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->mtfv              = s->arr1;
1121c1121
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
(85.0 %, 30678 bytes)
1119c1119
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->mtfv              = s->arr1;
1121c1121
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
(85.0 %, 30661 bytes)
1121c1121
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
1143c1143
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
1156c1156
< void  handle_compress ( bz_stream* strm )
---
> void  handle_compress 
(85.0 %, 30652 bytes)
1143c1143
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
1156c1156
< void  handle_compress ( bz_stream* strm )
---
> void  handle_compress 
1161c1161
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1161c1161
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1165c1165
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1167c1167
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1168c1168
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1171c1171
<    switch (s->mode) 
---
>    switch  
1177c1177
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1177c1177
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1180c1180
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1182c1182
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1183c1183
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1185c1185
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if  BZFREE(s->arr1);
1185c1185
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREE;
1186c1186
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if  BZFREE(s->arr2);
1186c1186
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREE;
1187c1187
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if  BZFREE(s->ftab);
(85.0 %, 30642 bytes)
1156c1156
< void  handle_compress ( bz_stream* strm )
---
> void  handle_compress 
1161c1161
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1161c1161
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1165c1165
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1167c1167
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1168c1168
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1171c1171
<    switch (s->mode) 
---
>    switch  
1177c1177
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1177c1177
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1180c1180
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1182c1182
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1183c1183
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1185c1185
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if  BZFREE(s->arr1);
1185c1185
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREE;
1186c1186
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if  BZFREE(s->arr2);
1186c1186
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREE;
1187c1187
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if  BZFREE(s->ftab);
1187c1187
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREE;
1188c1188
<    BZFREE(strm->state);
---
>    BZFREE;
1201c1201
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1202,1204c1202
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
1208c1208
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1210c1210
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1211c1211
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1212c1212
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1214c1214
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1215c1215
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1217c1217
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC;
1217c1217
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeof );
1218c1218
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  return BZ_MEM_ERROR;
1229c1229
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = small;
1242c1242
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1253c1253
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1258c1258
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1258c1258
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1261c1261
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1263c1263
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1264c1264
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1266c1266
<    while (True) 
---
>    while  
(85.1 %, 30636 bytes)
1242c1242
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1253c1253
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1258c1258
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1258c1258
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1261c1261
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1263c1263
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1264c1264
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1266c1266
<    while (True) 
---
>    while  
1268c1268
<    AssertH ( 0, 6001 );
---
>    AssertH ;
(85.1 %, 30630 bytes)
1268c1268
<    AssertH ( 0, 6001 );
---
>    AssertH ;
1275c1275
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1275c1275
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  
1278c1278
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1280c1280
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1281c1281
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1283c1283
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if  BZFREE(s->tt);
1283c1283
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREE;
1284c1284
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if  BZFREE(s->ll16);
1284c1284
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREE;
1285c1285
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if  BZFREE(s->ll4);
1285c1285
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREE;
1287c1287
<    BZFREE(strm->state);
---
>    BZFREE;
1298c1298
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR                    \
1319c1319
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1320,1324c1320
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1329c1329
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1331,1334c1331
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1332c1332
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1333c1333
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1334c1334
<        (verbosity < 0 || verbosity > 4))
---
>        )
1337c1337
<    if (ferror(f))
---
>    if 
1337c1337
<    if (ferror(f))
---
>    if (ferror)
(85.1 %, 30625 bytes)
1319c1319
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1320,1324c1320
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1329c1329
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1331,1334c1331
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1332c1332
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1333c1333
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1334c1334
<        (verbosity < 0 || verbosity > 4))
---
>        )
1337c1337
<    if (ferror(f))
---
>    if 
1337c1337
<    if (ferror(f))
---
>    if (ferror)
(85.1 %, 30618 bytes)
1331,1334c1331
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1332c1332
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1333c1333
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1334c1334
<        (verbosity < 0 || verbosity > 4))
---
>        )
1337c1337
<    if (ferror(f))
---
>    if 
1337c1337
<    if (ferror(f))
---
>    if (ferror)
1340c1340
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
(85.1 %, 30615 bytes)
1340c1340
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
1340c1340
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeof );
1341c1341
<    if (bzf == NULL)
---
>    if 
1344c1344
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.1 %, 30597 bytes)
1341c1341
<    if (bzf == NULL)
---
>    if 
1344c1344
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1353c1353
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1354,1355c1354
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit ;
(85.1 %, 30590 bytes)
1353c1353
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1354,1355c1354
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit ;
1354c1354
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &, blockSize100k, 
1356c1356
<    if (ret != BZ_OK)
---
>    if 
1367c1367
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1368,1371c1368
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1374c1374
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.1 %, 30505 bytes)
1355c1355
<    if (ret != BZ_OK)
---
>    if 
1366c1366
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1367,1370c1367
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1373c1373
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1375c1375
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.1 %, 30496 bytes)
1375c1375
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1376c1376
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1378c1378
<    if (!(bzf->writing))
---
>    if 
1378c1378
<    if (!(bzf->writing))
---
>    if (!)
1380c1380
<    if (ferror(bzf->handle))
---
>    if 
1380c1380
<    if (ferror(bzf->handle))
---
>    if (ferror)
(85.1 %, 30489 bytes)
1376c1376
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1378c1378
<    if (!(bzf->writing))
---
>    if 
1378c1378
<    if (!(bzf->writing))
---
>    if (!)
1380c1380
<    if (ferror(bzf->handle))
---
>    if 
1380c1380
<    if (ferror(bzf->handle))
---
>    if (ferror)
1383c1383
<    if (len == 0)
---
>    if 
1389c1389
<    while (True) 
---
>    while  
1393c1393
<       if (0 != BZ_RUN_OK)
---
>       if 
1396c1396
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if  
1398c1398
<       if (bzf->strm.avail_in == 0)
---
>       if 
1405c1405
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1406,1410c1406
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1412,1413c1412
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
(85.1 %, 30476 bytes)
1383c1383
<    if (len == 0)
---
>    if 
1389c1389
<    while (True) 
---
>    while  
1393c1393
<       if (0 != BZ_RUN_OK)
---
>       if 
1396c1396
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if  
1398c1398
<       if (bzf->strm.avail_in == 0)
---
>       if 
1405c1405
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1406,1410c1406
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1412,1413c1412
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
1417c1417
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1418,1424c1418
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1427c1427
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30393 bytes)
1416c1416
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1417,1423c1417
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1426c1426
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1428c1428
<    if (bzf == NULL)
---
>    if 
1430c1430
<    if (!(bzf->writing))
---
>    if 
1430c1430
<    if (!(bzf->writing))
---
>    if (!)
1432c1432
<    if (ferror(bzf->handle))
---
>    if 
1432c1432
<    if (ferror(bzf->handle))
---
>    if (ferror)
(85.2 %, 30384 bytes)
1428c1428
<    if (bzf == NULL)
---
>    if 
1430c1430
<    if (!(bzf->writing))
---
>    if 
1430c1430
<    if (!(bzf->writing))
---
>    if (!)
1432c1432
<    if (ferror(bzf->handle))
---
>    if 
1432c1432
<    if (ferror(bzf->handle))
---
>    if (ferror)
1435c1435
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  *nbytes_in_lo32 = 0;
1436c1436
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  *nbytes_in_hi32 = 0;
1437c1437
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  *nbytes_out_lo32 = 0;
1438c1438
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  *nbytes_out_hi32 = 0;
1440c1440
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if  
1440c1440
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1442c1442
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  
1442c1442
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  ) 
(85.2 %, 30371 bytes)
1435c1435
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  *nbytes_in_lo32 = 0;
1436c1436
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  *nbytes_in_hi32 = 0;
1437c1437
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  *nbytes_out_lo32 = 0;
1438c1438
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  *nbytes_out_hi32 = 0;
1440c1440
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if  
1440c1440
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1442c1442
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  
1442c1442
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  ) 
1444c1444
<    if (nbytes_in_lo32 != NULL)
---
>    if 
1446c1446
<    if (nbytes_in_hi32 != NULL)
---
>    if 
1448c1448
<    if (nbytes_out_lo32 != NULL)
---
>    if 
1450c1450
<    if (nbytes_out_hi32 != NULL)
---
>    if 
1453c1453
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30356 bytes)
1444c1444
<    if (nbytes_in_lo32 != NULL)
---
>    if 
1446c1446
<    if (nbytes_in_hi32 != NULL)
---
>    if 
1448c1448
<    if (nbytes_out_lo32 != NULL)
---
>    if 
1450c1450
<    if (nbytes_out_hi32 != NULL)
---
>    if 
1453c1453
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1460c1460
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1461,1466c1461
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1471c1471
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30349 bytes)
1460c1460
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1461,1466c1461
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1471c1471
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1473,1477c1473
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if 
1474c1474
<        (small != 0 && small != 1) ||
---
>         ||
1475c1475
<        (verbosity < 0 || verbosity > 4) ||
---
>         ||
1476c1476
<        (unused == NULL && nUnused != 0) ||
---
>         ||
1477c1477
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
1477c1477
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && ))
1480c1480
<    if (ferror(f))
---
>    if 
1480c1480
<    if (ferror(f))
---
>    if (ferror)
(85.2 %, 30342 bytes)
1473,1477c1473
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if 
1474c1474
<        (small != 0 && small != 1) ||
---
>         ||
1475c1475
<        (verbosity < 0 || verbosity > 4) ||
---
>         ||
1476c1476
<        (unused == NULL && nUnused != 0) ||
---
>         ||
1477c1477
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
1477c1477
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && ))
1480c1480
<    if (ferror(f))
---
>    if 
1480c1480
<    if (ferror(f))
---
>    if (ferror)
1483c1483
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
(85.2 %, 30339 bytes)
1483c1483
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
1483c1483
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeof );
1484c1484
<    if (bzf == NULL) 
---
>    if  
1487c1487
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30321 bytes)
1484c1484
<    if (bzf == NULL) 
---
>    if  
1487c1487
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1497c1497
<    while (nUnused > 0) 
---
>    while  
1499c1499
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ;
1499c1499
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &, verbosity, small );
(85.2 %, 30314 bytes)
1497c1497
<    while (nUnused > 0) 
---
>    while  
1499c1499
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ;
1499c1499
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &, verbosity, small );
1500c1500
<    if (ret != BZ_OK)
---
>    if 
1512c1512
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1512c1512
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1514c1514
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30280 bytes)
1500c1500
<    if (ret != BZ_OK)
---
>    if 
1512c1512
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1512c1512
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1514c1514
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1516c1516
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30271 bytes)
1516c1516
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1517c1517
<    if (bzf == NULL)
---
>    if 
1520c1520
<    if (bzf->writing)
---
>    if 
1523c1523
<    if (bzf->initialisedOk)
---
>    if 
1524c1524
<       (void)0;
---
>       0;
1530c1530
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1531,1534c1531
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1537c1537
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30264 bytes)
1517c1517
<    if (bzf == NULL)
---
>    if 
1520c1520
<    if (bzf->writing)
---
>    if 
1523c1523
<    if (bzf->initialisedOk)
---
>    if 
1524c1524
<       (void)0;
---
>       0;
1530c1530
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1531,1534c1531
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1537c1537
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30258 bytes)
1530c1530
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1531,1534c1531
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1537c1537
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1539c1539
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30249 bytes)
1539c1539
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1541c1541
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1544c1544
<    if (bzf->writing)
---
>    if 
1547c1547
<    if (len == 0)
---
>    if 
1553c1553
<    while (True) 
---
>    while  
1560c1560
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1561,1564c1561
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1566c1566
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30242 bytes)
1541c1541
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1544c1544
<    if (bzf->writing)
---
>    if 
1547c1547
<    if (len == 0)
---
>    if 
1553c1553
<    while (True) 
---
>    while  
1560c1560
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1561,1564c1561
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1566c1566
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1567c1567
<    if (bzf == NULL)
---
>    if 
1569c1569
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if 
1571c1571
<    if (unused == NULL || nUnused == NULL)
---
>    if 
1574c1574
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30233 bytes)
1567c1567
<    if (bzf == NULL)
---
>    if 
1569c1569
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if 
1571c1571
<    if (unused == NULL || nUnused == NULL)
---
>    if 
1574c1574
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1585c1585
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1586,1592c1586
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1597,1601c1597
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>    if  
1604c1604
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1609c1609
<    if (0 != BZ_OK) return 0;
---
>    if  return 0;
1617c1617
<    if (0 == BZ_FINISH_OK) goto output_overflow;
---
>    if  goto output_overflow;
1618c1618
<    if (0 != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1636c1636
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1637,1642c1637
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
1647,1650c1647
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if  
1649c1649
<        (small != 0 && small != 1) ||
---
>         ||
1657c1657
<    if (0 != BZ_OK) return 0;
---
>    if  return 0;
1665c1665
<    if (0 == BZ_OK) goto output_overflow_or_eof;
---
>    if  goto output_overflow_or_eof;
1666c1666
<    if (0 != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
(85.3 %, 30226 bytes)
1585c1585
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1586,1592c1586
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1597,1601c1597
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>    if  
1604c1604
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1609c1609
<    if (0 != BZ_OK) return 0;
---
>    if  return 0;
1617c1617
<    if (0 == BZ_FINISH_OK) goto output_overflow;
---
>    if  goto output_overflow;
1618c1618
<    if (0 != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1636c1636
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1637,1642c1637
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
1647,1650c1647
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if  
1649c1649
<        (small != 0 && small != 1) ||
---
>         ||
1657c1657
<    if (0 != BZ_OK) return 0;
---
>    if  return 0;
1665c1665
<    if (0 == BZ_OK) goto output_overflow_or_eof;
---
>    if  goto output_overflow_or_eof;
1666c1666
<    if (0 != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1674c1674
<    if (strm.avail_out > 0) {
---
>    if  {
1691c1691
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(void)
1691c1691
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)
1701,1704c1701
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                      
1710c1710
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1711,1712c1711
<                ( const char *path,
<                  const char *mode )
---
>                
1719c1719
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1720,1721c1720
<                ( int fd,
<                  const char *mode )
---
>                
1723c1723
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen;
1728c1728
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1728c1728
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1733c1733
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if  
1742c1742
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1742c1742
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1747c1747
<    if(bzerr == BZ_OK)
---
>    if
1756c1756
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1756c1756
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
1764c1764
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API (BZFILE* b)
1764c1764
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) 
(85.3 %, 30210 bytes)
1728c1728
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1728c1728
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1731c1731
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1733c1733
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if  
1742c1742
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1742c1742
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1747c1747
<    if(bzerr == BZ_OK)
---
>    if
1756c1756
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1756c1756
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
1764c1764
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API (BZFILE* b)
1764c1764
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) 
1767c1767
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ->handle;
1767c1767
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (b)->handle;
1769c1769
<    if (b==NULL) 
---
>    if  
1770c1770
<    if(((bzFile*)b)->writing)
---
>    if
1770c1770
<    if(((bzFile*)b)->writing)
---
>    if(->writing)
1770c1770
<    if(((bzFile*)b)->writing)
---
>    if((b)->writing)
1771c1771
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose;
1772c1772
<       if(bzerr != BZ_OK)
---
>       if
1773c1773
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteClose;
1776c1776
<    if(fp!=stdin && fp!=stdout)
---
>    if
(85.3 %, 30188 bytes)
1772c1772
<       if(bzerr != BZ_OK)
---
>       if
1773c1773
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteClose;
1776c1776
<    if(fp!=stdin && fp!=stdout)
---
>    if
1777c1777
<       fclose(fp);
---
>       fclose;
(85.3 %, 30168 bytes)
1776c1776
<    if(fp!=stdin && fp!=stdout)
---
>    if
1777c1777
<       fclose(fp);
---
>       fclose;
1804c1804
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1804c1804
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1806c1806
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ->lastErr;
1806c1806
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (b)->lastErr;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if err = 0;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(->lastErr>0) err = 0;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if((b)->lastErr>0) err = 0;
1852c1852
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
(85.3 %, 30164 bytes)
1804c1804
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1804c1804
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1806c1806
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ->lastErr;
1806c1806
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (b)->lastErr;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if err = 0;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(->lastErr>0) err = 0;
1808c1808
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if((b)->lastErr>0) err = 0;
1852c1852
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
1853c1853
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
(85.3 %, 30161 bytes)
1853c1853
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1854c1854
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
(85.3 %, 30158 bytes)
1854c1854
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1870c1870
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(85.3 %, 30155 bytes)
1870c1870
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
1871c1871
<       root=snocString((root), (name))
---
>       root=snocString
1871c1871
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
(85.3 %, 30143 bytes)
1871c1871
<       root=snocString((root), (name))
---
>       root=snocString
1871c1871
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
(85.3 %, 30127 bytes)
1873c1873
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAG \
1874c1874
<       root=snocString((root), (name))
---
>       root=snocString
(85.3 %, 30115 bytes)
1874c1874
<       root=snocString((root), (name))
---
>       root=snocString
1874c1874
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
1874c1874
<       root=snocString((root), (name))
---
>       root=snocString((root), )
(85.3 %, 30099 bytes)
1876c1876
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE 
1887c1887
< #define True  ((Bool)1)
---
> #define True  
(85.3 %, 30095 bytes)
1887c1887
< #define True  ((Bool)1)
---
> #define True  
1887c1887
< #define True  ((Bool)1)
---
> #define True  (1)
(85.3 %, 30086 bytes)
1888c1888
< #define False ((Bool)0)
---
> #define False 
1888c1888
< #define False ((Bool)0)
---
> #define False (0)
(85.3 %, 30077 bytes)
2146c2146
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
2146c2146
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) 
(85.3 %, 30074 bytes)
2146c2146
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG 
2146c2146
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp==0)
2146c2146
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, )==0)
(85.3 %, 30048 bytes)
2148c2148
< void  main ( int argc, char *argv[] )
---
> void  main 
===< pass_clang :: copy-propagation >===
945c945
<       if (yy == ll_i)  
---
>       if (0 == ll_i)  
954c954
<             rtmp  = yy;
---
>             rtmp  = 0;
958,959c958,959
<             while ( ll_i != rtmp ) ;
<             yy = rtmp;
---
>             while ( ll_i != yy ) ;
>             yy = yy;
(85.3 %, 30046 bytes)
958,959c958,959
<             while ( ll_i != rtmp ) ;
<             yy = rtmp;
---
>             while ( ll_i != 0 ) ;
>             yy = 0;
1355c1355
<    if (ret != BZ_OK)
---
>    if (BZ2_bzCompressInit != BZ_OK)
(85.3 %, 30040 bytes)
1355c1355
<    if (ret != BZ_OK)
---
>    if (BZ2_bzCompressInit != BZ_OK)
1500c1500
<    if (ret != BZ_OK)
---
>    if (BZ2_bzDecompressInit != BZ_OK)
(85.3 %, 30055 bytes)
1500c1500
<    if (ret != BZ_OK)
---
>    if (BZ2_bzDecompressInit != BZ_OK)
1507c1507
<    return bzf;   
---
>    return malloc;   
(85.3 %, 30072 bytes)
1507c1507
<    return bzf;   
---
>    return malloc;   
(85.3 %, 30075 bytes)
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: move-function-body >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: simplify-struct >===
===< pass_comments :: 0 >===
===< pass_indent :: regular >===
1,6d0
<  
< 
< 
< 
< 
< 
11,50c5,40
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
---
> #define BZ_RUN 0
> #define BZ_FLUSH 1
> #define BZ_FINISH 2
> 
> #define BZ_OK 0
> #define BZ_RUN_OK 1
> #define BZ_FLUSH_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> #define BZ_SEQUENCE_ERROR
> #define BZ_PARAM_ERROR (-2)
> #define BZ_MEM_ERROR (-3)
> #define BZ_DATA_ERROR
> #define BZ_DATA_ERROR_MAGIC
> #define BZ_IO_ERROR
> #define BZ_UNEXPECTED_EOF (-7)
> #define BZ_OUTBUFF_FULL (-8)
> #define BZ_CONFIG_ERROR (-9)
> 
> typedef struct {
>   char *next_in;
>   unsigned int avail_in;
>   unsigned int total_in_lo32;
>   unsigned int total_in_hi32;
> 
>   char *next_out;
>   unsigned int avail_out;
>   unsigned int total_out_lo32;
>   unsigned int total_out_hi32;
> 
>   void *state;
> 
>   void *(*bzalloc)(void *, int, int);
>   void (*bzfree)(void *, void *);
>   void *opaque;
> } bz_stream;
54,56c44,45
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
---
> #define BZ_API(func) func
> #define BZ_EXTERN extern
57a47,48
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                          int verbosity, int workFactor);
58a50
> BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
60,89c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
90a54,55
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
>                                            int small);
91a57
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
92a59
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
98,221c65,66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
>                                          int small, void *unused, int nUnused);
222a68
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
223a70,71
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
>                                            void **unused, int *nUnused);
224a73
> BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
225a75,77
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
>                                           int blockSize100k, int verbosity,
>                                           int workFactor);
226a79
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
227a81,83
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                                         unsigned int *nbytes_in,
>                                         unsigned int *nbytes_out);
228a85,89
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                           unsigned int *nbytes_in_lo32,
>                                           unsigned int *nbytes_in_hi32,
>                                           unsigned int *nbytes_out_lo32,
>                                           unsigned int *nbytes_out_hi32);
229a91,93
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
>     int blockSize100k, int verbosity, int workFactor);
231c95,99
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
>                                                  unsigned int *destLen,
>                                                  char *source,
>                                                  unsigned int sourceLen,
>                                                  int small, int verbosity);
233c101
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
234a103
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
235a105
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
236a107
> BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
238c109
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
239a111
> BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
241c113
< typedef unsigned char   Bool;
---
> BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
243,244c115
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
245a117
> #define _BZLIB_PRIVATE_H
246a119
> #include <stdlib.h>
248,249c121
< #define True  (1)
< #define False (0)
---
> #define BZ_VERSION "1.0.2, 30-Dec-2001"
251c123
< #define __inline__  
---
> typedef unsigned char Bool;
253,273c125,126
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH \
<    
< #define AssertD \
<    
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
< 
< 
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
< #define BZFREE(ppp)  
---
> typedef int Int32;
> typedef unsigned int UInt32;
274a128,129
> #define True (1)
> #define False (0)
275a131
> #define __inline__
276a133,134
> extern void BZ2_bz__AssertH__fail(int errcode);
> #define AssertH
278,282c136
< #define BZ_HDR_B 66   
< #define BZ_HDR_Z 90   
< #define BZ_HDR_h 104   
< #define BZ_HDR_0 48   
<   
---
> #define AssertD
283a138,151
> #define VPrintf0 fprintf
> #define VPrintf1 fprintf
> #define VPrintf2 fprintf
> #define VPrintf3 fprintf
> #define VPrintf4 fprintf
> #define VPrintf5 fprintf
> 
> #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
> #define BZFREE(ppp)
> 
> #define BZ_HDR_B 66
> #define BZ_HDR_Z 90
> #define BZ_HDR_h 104
> #define BZ_HDR_0 48
286c154
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN 23
292,293c160,161
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE 50
> #define BZ_N_ITERS 4
296a165,167
> #define BZ_RAND_DECLS                                                          \
>   Int32 rNToGo;                                                                \
>   Int32 rTPos
297a169,171
> #define BZ_RAND_INIT_MASK                                                      \
>   s->rNToGo = 0;                                                               \
>   s->rTPos = 0
298a173
> #define BZ_RAND_MASK
299a175,177
> #define BZ_RAND_UPD_MASK                                                       \
>   if                                                                           \
>     s->rNToGo--;
300a179
> #define BZ_INITIALISE_CRC
301a181
> #define BZ_FINALISE_CRC
303,326c183
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 
< 
< #define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
---
> #define BZ_UPDATE_CRC
328,338c185,187
< 
< #define BZ_UPDATE_CRC              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_IDLE 1
> #define BZ_M_RUNNING 2
> #define BZ_M_FLUSHING 3
341,342c190,191
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_S_OUTPUT 1
> #define BZ_S_INPUT 2
348a198
> typedef struct {
349a200
>   bz_stream *strm;
350a202,203
>   Int32 mode;
>   Int32 state;
351a205
>   UInt32 avail_in_expect;
352a207,210
>   UInt32 *arr1;
>   UInt32 *arr2;
>   UInt32 *ftab;
>   Int32 origPtr;
354,432c212,215
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>   UInt32 *ptr;
>   unsigned char *block;
>   unsigned short *mtfv;
>   unsigned char *zbits;
434c217
< ;
---
>   Int32 workFactor;
435a219,221
>   UInt32 state_in_ch;
>   Int32 state_in_len;
>   BZ_RAND_DECLS;
436a223,226
>   Int32 nblock;
>   Int32 nblockMAX;
>   Int32 numZ;
>   Int32 state_out_pos;
437a228,230
>   Int32 nInUse;
>   Bool inUse[256];
>   unsigned char unseqToSeq[256];
438a232,233
>   UInt32 bsBuff;
>   Int32 bsLive;
439a235,236
>   UInt32 blockCRC;
>   UInt32 combinedCRC;
440a238,240
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
441a242,245
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   unsigned char selector[BZ_MAX_SELECTORS];
>   unsigned char selectorMtf[BZ_MAX_SELECTORS];
442a247,249
>   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
444,445c251
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
447,487c253
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> } EState;
488a255
> ;
489a257
> ;
490a259,260
> #define BZ_X_IDLE 1
> #define BZ_X_OUTPUT 2
491a262,302
> #define BZ_X_MAGIC_1 10
> #define BZ_X_MAGIC_2 11
> #define BZ_X_MAGIC_3 12
> #define BZ_X_MAGIC_4 13
> #define BZ_X_BLKHDR_1 14
> #define BZ_X_BLKHDR_2 15
> #define BZ_X_BLKHDR_3 16
> #define BZ_X_BLKHDR_4 17
> #define BZ_X_BLKHDR_5 18
> #define BZ_X_BLKHDR_6 19
> #define BZ_X_BCRC_1 20
> #define BZ_X_BCRC_2 21
> #define BZ_X_BCRC_3 22
> #define BZ_X_BCRC_4 23
> #define BZ_X_RANDBIT 24
> #define BZ_X_ORIGPTR_1 25
> #define BZ_X_ORIGPTR_2 26
> #define BZ_X_ORIGPTR_3 27
> #define BZ_X_MAPPING_1 28
> #define BZ_X_MAPPING_2 29
> #define BZ_X_SELECTOR_1 30
> #define BZ_X_SELECTOR_2 31
> #define BZ_X_SELECTOR_3 32
> #define BZ_X_CODING_1 33
> #define BZ_X_CODING_2 34
> #define BZ_X_CODING_3 35
> #define BZ_X_MTF_1 36
> #define BZ_X_MTF_2 37
> #define BZ_X_MTF_3 38
> #define BZ_X_MTF_4 39
> #define BZ_X_MTF_5 40
> #define BZ_X_MTF_6 41
> #define BZ_X_ENDHDR_2 42
> #define BZ_X_ENDHDR_3 43
> #define BZ_X_ENDHDR_4 44
> #define BZ_X_ENDHDR_5 45
> #define BZ_X_ENDHDR_6 46
> #define BZ_X_CCRC_1 47
> #define BZ_X_CCRC_2 48
> #define BZ_X_CCRC_3 49
> #define BZ_X_CCRC_4 50
495a307
> typedef struct {
496a309
>   bz_stream *strm;
497a311
>   Int32 state;
498a313,411
>   unsigned char state_out_ch;
>   Int32 state_out_len;
>   Bool blockRandomised;
>   BZ_RAND_DECLS;
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   Int32 blockSize100k;
>   Bool smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
> 
>   Int32 origPtr;
>   UInt32 tPos;
>   Int32 k0;
>   Int32 unzftab[256];
>   Int32 nblock_used;
>   Int32 cftab[257];
>   Int32 cftabCopy[257];
> 
>   UInt32 *tt;
> 
>   unsigned short *ll16;
>   unsigned char *ll4;
> 
>   UInt32 storedBlockCRC;
>   UInt32 storedCombinedCRC;
>   UInt32 calculatedBlockCRC;
>   UInt32 calculatedCombinedCRC;
> 
>   Int32 nInUse;
>   Bool inUse[256];
>   Bool inUse16[16];
>   unsigned char seqToUnseq[256];
> 
>   unsigned char mtfa[MTFA_SIZE];
>   Int32 mtfbase[256 / MTFL_SIZE];
>   unsigned char selector[BZ_MAX_SELECTORS];
>   unsigned char selectorMtf[BZ_MAX_SELECTORS];
>   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 minLens[BZ_N_GROUPS];
> 
>   Int32 save_i;
>   Int32 save_j;
>   Int32 save_t;
>   Int32 save_alphaSize;
>   Int32 save_nGroups;
>   Int32 save_nSelectors;
>   Int32 save_EOB;
>   Int32 save_groupNo;
>   Int32 save_groupPos;
>   Int32 save_nextSym;
>   Int32 save_nblockMAX;
>   Int32 save_nblock;
>   Int32 save_es;
>   Int32 save_N;
>   Int32 save_curr;
>   Int32 save_zt;
>   Int32 save_zn;
>   Int32 save_zvec;
>   Int32 save_zj;
>   Int32 save_gSel;
>   Int32 save_gMinlen;
>   Int32 *save_gLimit;
>   Int32 *save_gBase;
>   Int32 *save_gPerm;
> 
> } DState;
> 
> #define BZ_GET_FAST                                                            \
>   s->tPos = s->tt[s->tPos];                                                    \
>   cccc = ;                                                                     \
>   s->tPos >>= 8;
> 
> #define BZ_GET_FAST_C                                                          \
>   c_tPos = c_tt[c_tPos];                                                       \
>   cccc = ;                                                                     \
>   c_tPos >>= 8;
> 
> #define SET_LL4
> 
> #define GET_LL4
> 
> #define SET_LL
> 
> #define GET_LL
> 
> #define BZ_GET_SMALL                                                           \
>   cccc = BZ2_indexIntoF;                                                       \
>   s->tPos = GET_LL;
> 
> void BZ2_decompress(DState *);
> 
> #define fswap
500,591c413
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
> #define fvswap
592a415
> #define fmin ?:
593a417
> #define fpush
595,669c419
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = ;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
<    
< 
< #define GET_LL4                             \
<    
< 
< #define SET_LL                          \
<    
< 
< #define GET_LL \
<    
< 
< #define BZ_GET_SMALL                            \
<       cccc = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
< 
< 
< 
< 
< 
< 
< void  
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap \
<    
< 
< #define fvswap       \
< 
< 
< 
< #define fmin  ?  : 
< 
< #define fpush 
< 
< #define fpop 
---
> #define fpop
672,675c422
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
---
> #define FALLBACK_QSORT_STACK_SIZE 100
685,700c432,441
< 
< 
< 
< 
< #define       SET_BH  bhtab[ >> 5] |= 
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
< #define     ISSET_BH  
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define SET_BH bhtab[ >> 5] |=
> #define CLEAR_BH bhtab[ >> 5] &= ~
> #define ISSET_BH
> #define WORD_BH bhtab[ >> 5]
> #define UNALIGNED_BH
> 
> #undef SET_BH
> #undef CLEAR_BH
> #undef ISSET_BH
> #undef WORD_BH
702a444
> #define mswap
703a446
> #define mvswap
704a448
> #define mmin ?:
705a450
> #define mpush
706a452
> #define mpop
707a454
> #define mnextsize
709,743c456
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap \
<    
< 
< #define mvswap       \
< 
< 
< 
< 
< #define mmin  ?  : 
< 
< #define mpush 
< 
< #define mpop 
< 
< 
< #define mnextsize 
< 
< #define mnextswap                                        \
<    
< 
---
> #define mnextswap
746c459
< #define MAIN_QSORT_DEPTH_THRESH 
---
> #define MAIN_QSORT_DEPTH_THRESH
749,750d461
< 
< 
762,770c473,475
< 
< 
< 
< 
< #define BIGFREQ 
< #define SETMASK 
< #define CLEARMASK 
< 
< 
---
> #define BIGFREQ
> #define SETMASK
> #define CLEARMASK
775a481,567
> #define WEIGHTOF
> #define DEPTHOF
> #define MYMAX
> 
> #define ADDWEIGHTS |
> 
> #define UPHEAP
> 
> #define DOWNHEAP
> 
> #define bsNEEDW
> 
> static void makeMaps_e(EState *s) {
>   Int32 i;
>   s->nInUse = 0;
>   i = 0;
> 
>   for (0; 0 < 256; i++)
>     if (s->inUse[0])
>       s->unseqToSeq[0] = s->nInUse;
>   s->nInUse++;
> }
> 
> static void generateMTFValues(EState *s) {
>   unsigned char yy;
>   Int32 i, j;
>   Int32 zPend;
>   Int32 wr;
>   Int32 EOB;
> 
>   UInt32 *ptr = s->ptr;
>   unsigned char *block = s->block;
>   unsigned short *mtfv = s->mtfv;
> 
>   ;
>   EOB = s->nInUse + 1;
> 
>   i = 0;
> 
>   for (0; 0 <= EOB; i++)
>     s->mtfFreq[0] = 0;
> 
>   wr = 0;
>   zPend = 0;
>   i = 0;
> 
>   for (0; 0 < s->nInUse; i++)
>     yy = 0;
> 
>   i = 0;
> 
>   for (0; 0 < s->nblock; i++) {
>     unsigned char ll_i;
>     AssertD;
>     j = ptr[0] - 1;
>     if (j < 0)
>       j += s->nblock;
>     ll_i = s->unseqToSeq[block[s->nblock]];
>     AssertD;
> 
>     if (0 == ll_i)
>       zPend++;
>     else
> 
>         if (0 > 0) {
>       register unsigned char rtmp;
>       register unsigned char *ryy_j;
>       register unsigned char rll_i;
>       rtmp = 0;
>       yy = yy;
>       ryy_j = &(yy);
>       rll_i = ll_i;
>       while (ll_i != 0)
>         ;
>       yy = 0;
>       j = ryy_j - &(yy);
>       mtfv[0] = j + 1;
>       wr++;
>       s->mtfFreq[j + 1]++;
>     }
>   }
> 
>   if (0 > 0)
> 
>     mtfv[0] = EOB;
>   wr++;
>   s->mtfFreq[EOB]++;
776a569,570
>   s->nMTF = 0;
> }
777a572,573
> #define BZ_LESSER_ICOST 0
> #define BZ_GREATER_ICOST 15
778a575
> #define RETURN ;
779a577,580
> #define GET_BITS                                                               \
>   case lll:                                                                    \
>     s->state = lll;                                                            \
>     while
780a582
> #define GET_UCHAR GET_BITS
781a584
> #define GET_BIT GET_BITS
782a586
> #define GET_MTF_VAL
783a588
> void BZ2_decompress(DState *s);
784a590
> void BZ2_bz__AssertH__fail(int errcode);
785a592
> void bz_config_ok(void);
786a594
> void default_bzalloc(void *opaque, Int32 items, Int32 size);
787a596
> static void default_bzfree(void *opaque, void *addr);
788a598
> static void prepare_new_block(EState *s);
789a600
> static void init_RL(EState *s);
790a602
> void isempty_RL(EState *s);
791a604,607
> int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                int verbosity, int workFactor) {
>   Int32 n;
>   EState *s;
793,847c609,610
< #define WEIGHTOF  
< #define DEPTHOF   
< #define MYMAX 
< 
< #define ADDWEIGHTS                           \
<     |                    \
<    
< 
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>   if (!0)
>     return BZ_CONFIG_ERROR;
848a612,614
>   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
>       workFactor < 0 || workFactor > 250)
>     return BZ_PARAM_ERROR;
849a616,621
>   if (workFactor == 0)
>     workFactor = 30;
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
850a623,626
>   s = BZALLOC(sizeof(EState));
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s->strm = strm;
851a628,630
>   s->arr1 = NULL;
>   s->arr2 = NULL;
>   s->ftab = NULL;
852a632,635
>   n = 100000 * blockSize100k;
>   s->arr1 = BZALLOC(n * sizeof(UInt32));
>   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
>   s->ftab = BZALLOC(65537 * sizeof(UInt32));
853a637
>   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
854a639,646
>     s->blockNo = 0;
>   s->state = BZ_S_INPUT;
>   s->mode = BZ_M_RUNNING;
>   s->combinedCRC = 0;
>   s->blockSize100k = blockSize100k;
>   s->nblockMAX = 100000 * blockSize100k - 19;
>   s->verbosity = verbosity;
>   s->workFactor = 30;
855a648,651
>   s->block = s->arr2;
>   s->mtfv = s->arr1;
>   s->zbits = NULL;
>   s->ptr = s->arr1;
856a653,661
>   strm->state = s;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   ;
>   ;
>   return BZ_OK;
> }
857a663
> #define ADD_CHAR_TO_BLOCK
858a665
> void handle_compress(bz_stream *strm);
859a667
> int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
860a669,676
>   EState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (s->strm != strm)
>     return BZ_PARAM_ERROR;
861a678,681
> preswitch:
>   switch (s->mode)
>     return BZ_OK;
> }
862a683,691
> int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
>   EState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (s->strm != strm)
>     return BZ_PARAM_ERROR;
863a693,699
>   if (s->arr1 != NULL)
>     BZFREE(s->arr1);
>   if (s->arr2 != NULL)
>     BZFREE(s->arr2);
>   if (s->ftab != NULL)
>     BZFREE(s->ftab);
>   BZFREE(strm->state);
864a701
>   strm->state = NULL;
865a703,704
>   return BZ_OK;
> }
866a706,707
> int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
>   DState *s;
867a709,710
>   if (!0)
>     return BZ_CONFIG_ERROR;
868a712,717
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   if (small != 0 && small != 1)
>     return BZ_PARAM_ERROR;
>   if (verbosity < 0 || verbosity > 4)
>     return BZ_PARAM_ERROR;
869a719,722
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
870a724,742
>   s = BZALLOC(sizeof(DState));
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s->strm = strm;
>   strm->state = s;
>   s->state = BZ_X_MAGIC_1;
>   s->bsLive = 0;
>   s->bsBuff = 0;
>   s->calculatedCombinedCRC = 0;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   s->smallDecompress = small;
>   s->ll4 = NULL;
>   s->ll16 = NULL;
>   s->tt = NULL;
>   s->currBlockNo = 0;
>   s->verbosity = verbosity;
872c744,745
< #define bsNEEDW                           \
---
>   return BZ_OK;
> }
873a747
> static void unRLE_obuf_to_output_FAST(DState *s);
874a749
> static void unRLE_obuf_to_output_SMALL(DState *s);
875a751,759
> int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
>   DState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (s->strm != strm)
>     return BZ_PARAM_ERROR;
876a761
>   while
877a763
>     AssertH(0, 6001);
878a765,766
>   return 0;
> }
879a768,776
> int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
>   DState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (s->strm != strm)
>     return BZ_PARAM_ERROR;
880a778,783
>   if (s->tt != NULL)
>     BZFREE(s->tt);
>   if (s->ll16 != NULL)
>     BZFREE(s->ll16);
>   if (s->ll4 != NULL)
>     BZFREE(s->ll4);
881a785,786
>   BZFREE(strm->state);
>   strm->state = NULL;
882a788,789
>   return BZ_OK;
> }
883a791
> #define BZ_SETERR
884a793,801
> typedef struct {
>   FILE *handle;
>   char buf[BZ_MAX_UNUSED];
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> } bzFile;
885a803,806
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
>                                 int verbosity, int workFactor) {
>   Int32 ret;
>   bzFile *bzf = NULL;
886a808
>   BZ_SETERR;
887a810,812
>   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
>       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
>     ;
888a814,815
>   if (ferror)
>     ;
889a817,819
>   bzf = malloc;
>   if (bzf == NULL)
>     ;
890a821,828
>   BZ_SETERR;
>   bzf->initialisedOk = False;
>   bzf->bufN = 0;
>   bzf->handle = f;
>   bzf->writing = True;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
891a830,834
>   if (workFactor == 0)
>     workFactor = 30;
>   ret = BZ2_bzCompressInit;
>   if (BZ2_bzCompressInit != BZ_OK)
>     ;
893,904c836,838
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    i = 0;
<    
<    for (0; 0 < 256; i++)
<       if (s->inUse[0]) 
<          s->unseqToSeq[0] = s->nInUse;
<          s->nInUse++;
<       
---
>   bzf->strm.avail_in = 0;
>   bzf->initialisedOk = True;
>   return bzf;
906a841,843
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
>   Int32 ret;
>   bzFile *bzf = b;
907a845,851
>   BZ_SETERR;
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
>   if (!(bzf->writing))
>     ;
>   if (ferror)
>     ;
909,943c853,854
< static
< void generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    i = 0;
<    
<    for (0; 0 <= EOB; i++) s->mtfFreq[0] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    i = 0;
<    
<    for (0; 0 < s->nInUse; i++) yy =  0;
< 
<    i = 0;
<    
<    for (0; 0 < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ;
<       j = ptr[0]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[s->nblock]];
<       AssertD ;
---
>   if (len == 0)
>     ;
945,947c856,857
<       if (0 == ll_i)  
<          zPend++;
<        else 
---
>   bzf->strm.avail_in = len;
>   bzf->strm.next_in = buf;
949,962c859,864
<          if (0 > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = 0;
<             yy = yy;
<             ryy_j = &(yy);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy = 0;
<             j = ryy_j - &(yy);
<             mtfv[0] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>   while (True)
>     bzf->strm.avail_out = BZ_MAX_UNUSED;
>   bzf->strm.next_out = bzf->buf;
>   ret = 0;
>   if (0 != BZ_RUN_OK)
>     ;
964,965c866
<       
<    }
---
>   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
967,971c868,869
<    if (0 > 0) 
< 
<    mtfv[0] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = 0;
---
>     if (bzf->strm.avail_in == 0)
>       ;
973a872,876
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                               unsigned int *nbytes_in,
>                               unsigned int *nbytes_out) {
>   BZ2_bzWriteClose64;
> }
974a878,882
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                 unsigned int *nbytes_in_lo32,
>                                 unsigned int *nbytes_in_hi32,
>                                 unsigned int *nbytes_out_lo32,
>                                 unsigned int *nbytes_out_hi32) {
976,983c884
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
---
>   bzFile *bzf = b;
984a886,891
>   if (bzf == NULL)
>     ;
>   if (!(bzf->writing))
>     ;
>   if (ferror)
>     ;
985a893,900
>   if (nbytes_in_lo32 != NULL)
>     *nbytes_in_lo32 = 0;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = 0;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = 0;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = 0;
986a902
>   if ((!abandon) && bzf->lastErr == BZ_OK)
987a904
>     if (!abandon && !ferror)
988a906,913
>       if (nbytes_in_lo32 != NULL)
>         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
989a915,918
>   BZ_SETERR;
>   0;
>   0;
> }
990a920,923
> BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
>                                void *unused, int nUnused) {
>   bzFile *bzf = NULL;
>   int ret;
991a925
>   BZ_SETERR;
992a927,930
>   if (f == NULL || (small != 0 && small != 1) ||
>       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
>       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
>     ;
993a932,933
>   if (ferror)
>     ;
994a935,937
>   bzf = malloc;
>   if (bzf == NULL)
>     ;
995a939
>   BZ_SETERR;
996a941,947
>   bzf->initialisedOk = False;
>   bzf->handle = f;
>   bzf->bufN = 0;
>   bzf->writing = False;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
997a949
>   while (nUnused > 0)
998a951,953
>     ret = BZ2_bzDecompressInit;
>   if (BZ2_bzDecompressInit != BZ_OK)
>     ;
999a955,956
>   bzf->strm.avail_in = bzf->bufN;
>   bzf->strm.next_in = bzf->buf;
1001,1002c958,960
< #define RETURN                               \
<    ;
---
>   bzf->initialisedOk = True;
>   return malloc;
> }
1004,1006c962,963
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
<    while  
---
> void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
>   bzFile *bzf = b;
1008,1009c965,967
< #define GET_UCHAR                        \
<    GET_BITS
---
>   BZ_SETERR;
>   if (bzf == NULL)
>     ;
1011,1012c969,970
< #define GET_BIT                          \
<    GET_BITS
---
>   if (bzf->writing)
>     ;
1013a972,975
>   if (bzf->initialisedOk)
>     0;
>   0;
> }
1015c977
< #define GET_MTF_VAL           \
---
> int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
1016a979
>   bzFile *bzf = b;
1017a981
>   BZ_SETERR;
1018a983,984
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
1020,1021c986,987
< void  BZ2_decompress ( DState* s )
< ;
---
>   if (bzf->writing)
>     ;
1022a989,990
>   if (len == 0)
>     ;
1023a992,993
>   bzf->strm.avail_out = len;
>   bzf->strm.next_out = buf;
1024a995
>   while (True)
1025a997,998
>     return 0;
> }
1026a1000,1008
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
>                                  int *nUnused) {
>   bzFile *bzf = b;
>   if (bzf == NULL)
>     ;
>   if (bzf->lastErr != BZ_STREAM_END)
>     ;
>   if (unused == NULL || nUnused == NULL)
>     ;
1027a1010,1013
>   BZ_SETERR;
>   *nUnused = bzf->strm.avail_in;
>   *unused = bzf->strm.next_in;
> }
1028a1015,1020
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
>                                      char *source, unsigned int sourceLen,
>                                      int blockSize100k, int verbosity,
>                                      int workFactor) {
>   bz_stream strm;
>   int ret;
1029a1022,1025
>   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
>       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
>       workFactor > 250)
>     return BZ_PARAM_ERROR;
1030a1027,1034
>   if (workFactor == 0)
>     workFactor = 30;
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   ret = 0;
>   if (0 != BZ_OK)
>     return 0;
1031a1036,1039
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
1032a1041,1045
>   ret = 0;
>   if (0 == BZ_FINISH_OK)
>     goto output_overflow;
>   if (0 != BZ_STREAM_END)
>     goto errhandler;
1033a1047,1049
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
1034a1051,1053
> output_overflow:
>   0;
>   return BZ_OUTBUFF_FULL;
1035a1055,1058
> errhandler:
>   0;
>   return 0;
> }
1036a1060,1064
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
>                                        char *source, unsigned int sourceLen,
>                                        int small, int verbosity) {
>   bz_stream strm;
>   int ret;
1037a1066,1068
>   if (dest == NULL || destLen == NULL || source == NULL ||
>       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
>     return BZ_PARAM_ERROR;
1039,1040c1070,1075
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   ret = 0;
>   if (0 != BZ_OK)
>     return 0;
1041a1077,1080
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
1042a1082,1086
>   ret = 0;
>   if (0 == BZ_OK)
>     goto output_overflow_or_eof;
>   if (0 != BZ_STREAM_END)
>     goto errhandler;
1044,1045c1088,1090
< void  bz_config_ok ( void )
< ;
---
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
1046a1092,1097
> output_overflow_or_eof:
>   if (strm.avail_out > 0) {
>     0;
>     return BZ_UNEXPECTED_EOF;
>   } else
>     ;
1047a1099,1102
> errhandler:
>   0;
>   return 0;
> }
1049,1050c1104
< void  default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1052,1054c1106,1107
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
---
> static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode,
>                                  int open_mode);
1055a1109
> BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1056a1111,1113
> BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
>   return bzopen_or_bzdopen;
> }
1058,1060c1115,1124
< static
< void prepare_new_block ( EState* s )
< ;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
>   int bzerr, nread;
>   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
>     return 0;
>   nread = 0;
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
>     return 0;
>   else
>     return -1;
> }
1061a1126,1127
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
>   int bzerr;
1062a1129,1134
>   ;
>   if (bzerr == BZ_OK)
>     return len;
>   else
>     return -1;
> }
1064,1066c1136
< static
< void init_RL ( EState* s )
< ;
---
> int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1067a1138,1140
> void BZ_API(BZ2_bzclose)(BZFILE *b) {
>   int bzerr;
>   FILE *fp = ((bzFile *)b)->handle;
1069,1070c1142,1146
< void  isempty_RL ( EState* s )
< ;
---
>   if (b == NULL)
>     if (((bzFile *)b)->writing)
>       BZ2_bzWriteClose;
>   if (bzerr != BZ_OK)
>     BZ2_bzWriteClose;
1071a1148,1150
>   else if (fp != stdin && fp != stdout)
>     fclose;
> }
1072a1152,1159
> static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
>                                  "PARAM_ERROR",  "MEM_ERROR",
>                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
>                                  "IO_ERROR",     "UNEXPECTED_EOF",
>                                  "OUTBUFF_FULL", "CONFIG_ERROR",
>                                  "???",          "???",
>                                  "???",          "???",
>                                  "???",          "???"};
1074,1081c1161,1162
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
> const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
>   int err = ((bzFile *)b)->lastErr;
1083c1164,1168
<    if (!0) return BZ_CONFIG_ERROR;
---
>   if (((bzFile *)b)->lastErr > 0)
>     err = 0;
>   *errnum = 0;
>   return "OK";
> }
1085,1088c1170
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
---
> #define BZ_UNIX 1
1090,1092c1172
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
> #define BZ_LCCWIN32 0
1094,1096c1174,1175
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
> #include <signal.h>
> #include <errno.h>
1098,1100c1177,1179
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
> #define ERROR_IF_EOF
> #define ERROR_IF_NOT_ZERO
> #define ERROR_IF_MINUS_ONE
1102,1105c1181,1183
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
> #if BZ_UNIX
> #include <fcntl.h>
> #include <utime.h>
1107,2076c1185,1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = 30;
< 
<    s->block             = s->arr2;
<    s->mtfv              = s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void  handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while  
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR;
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR;
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ;
<    if (BZ2_bzCompressInit != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (0 != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror  ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR;
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR;
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ;
<    if (BZ2_bzDecompressInit != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return malloc;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR;
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_FINISH_OK) goto output_overflow;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return 0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_OK) goto output_overflow_or_eof;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return 0; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen;
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return 0;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose;
<       if(bzerr != BZ_OK)
<          BZ2_bzWriteClose;
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(((bzFile *)b)->lastErr>0) err = 0;
<    *errnum = 0;
<    return "OK";
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
---
> #define PATH_SEP '/'
> #define MY_LSTAT lstat
> #define MY_STAT stat
> #define MY_S_ISREG S_ISREG
> #define MY_S_ISDIR S_ISDIR
2077a1191
> #define APPEND_FILESPEC root = snocString
2078a1193
> #define APPEND_FLAG root = snocString
2079a1195
> #define SET_BINARY_MODE
2080a1197
> #define NORETURN
2081a1199
> #endif
2082a1201,1202
> #define True
> #define False
2083a1204,1210
> #define SM_I2O 1
> #define SM_F2O 2
> #define SM_F2F 3
> 
> #define OM_Z 1
> #define OM_UNZ 2
> #define OM_TEST 3
2084a1212
> #define FILE_NAME_LEN 1034
2085a1214
> typedef struct UInt64;
2086a1216
> #if BZ_UNIX
2087a1218
> #endif
2090a1222
> #define ISFLAG
2092,2154c1224
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG 
< 
< void  main ( int argc, char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> void main(int argc, char *argv[]);
(87.5 %, 25551 bytes)
Termination check: size was 32000; now 25551
===< pass_balanced :: angles-only >===
1c1
< 
---
>  
42c42
< #include <stdio.h>
---
> #include stdio.h
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
119c119
< #include <stdlib.h>
---
> #include stdlib.h
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
498,499c498,499
<   for (0; 0 < 256; i++)
<     if (s->inUse[0])
---
>   for (0; 0  256; i++)
>     if (s-inUse[0])
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
520,521c520,521
<   for (0; 0 <= EOB; i++)
<     s->mtfFreq[0] = 0;
---
>   for (0; 0 = EOB; i++)
>     s-mtfFreq[0] = 0;
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
527c527
<   for (0; 0 < s->nInUse; i++)
---
>   for (0; 0  s-nInUse; i++)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
532c532
<   for (0; 0 < s->nblock; i++) {
---
>   for (0; 0  s-nblock; i++) {
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
536,537c536,537
<     if (j < 0)
<       j += s->nblock;
---
>     if (j  0)
>       j += s-nblock;
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
612c612
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (strm == NULL || blockSize100k  1 || blockSize100k  9 ||
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
613c613
<       workFactor < 0 || workFactor > 250)
---
>       workFactor  0 || workFactor  250)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
716c716
<   if (verbosity < 0 || verbosity > 4)
---
>   if (verbosity  0 || verbosity  4)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
810c810
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>   if (f == NULL || (blockSize100k  1 || blockSize100k  9) ||
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
811c811
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>       (workFactor  0 || workFactor  250) || (verbosity < 0 || verbosity > 4))
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
811c811
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>       (workFactor < 0 || workFactor > 250) || (verbosity  0 || verbosity  4))
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
846c846
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if (bzf == NULL || buf == NULL || len  0)
848c848
<   if (!(bzf->writing))
---
>   if (!(bzf-writing))
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
866c866
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->strm.avail_out  BZ_MAX_UNUSED)
868c868
<     if (bzf->strm.avail_in == 0)
---
>     if (bzf-strm.avail_in == 0)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
928c928
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>       (verbosity  0 || verbosity  4) || (unused == NULL && nUnused != 0) ||
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
929c929
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>       (unused != NULL && (nUnused  0 || nUnused  BZ_MAX_UNUSED)))
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
983c983
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if (bzf == NULL || buf == NULL || len  0)
986c986
<   if (bzf->writing)
---
>   if (bzf-writing)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1022,1023c1022,1023
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k  1 ||
>       blockSize100k  9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1023c1023
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>       blockSize100k > 9 || verbosity  0 || verbosity  4 || workFactor < 0 ||
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1023,1024c1023,1024
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
<       workFactor > 250)
---
>       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor  0 ||
>       workFactor  250)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1067c1067
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (small != 0 && small != 1) || verbosity  0 || verbosity  4)
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1174c1174
< #include <signal.h>
---
> #include signal.h
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1175c1175
< #include <errno.h>
---
> #include errno.h
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1182c1182
< #include <fcntl.h>
---
> #include fcntl.h
1224a1225
>  
\ No newline at end of file
1c1
< 
---
>  
1183c1183
< #include <utime.h>
---
> #include utime.h
1224a1225
>  
\ No newline at end of file
===< pass_clang :: param-to-global >===
133c133
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> extern void BZ2_bz__AssertH__fail(void);
590c590
< void BZ2_bz__AssertH__fail(int errcode);
---
> void BZ2_bz__AssertH__fail(void);
493c493,494
< static void makeMaps_e(EState *s) {
---
> EState * makeMaps_e_s;
> static void makeMaps_e(void) {
495c496
<   s->nInUse = 0;
---
>   makeMaps_e_s->nInUse = 0;
499,501c500,502
<     if (s->inUse[0])
<       s->unseqToSeq[0] = s->nInUse;
<   s->nInUse++;
---
>     if (makeMaps_e_s->inUse[0])
>       makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
>   makeMaps_e_s->nInUse++;
(87.5 %, 25537 bytes)
493c493,494
< static void makeMaps_e(EState *s) {
---
> EState * makeMaps_e_s;
> static void makeMaps_e(void) {
495c496
<   s->nInUse = 0;
---
>   makeMaps_e_s->nInUse = 0;
499,501c500,502
<     if (s->inUse[0])
<       s->unseqToSeq[0] = s->nInUse;
<   s->nInUse++;
---
>     if (makeMaps_e_s->inUse[0])
>       makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
>   makeMaps_e_s->nInUse++;
504c504,505
< static void generateMTFValues(EState *s) {
---
> EState * generateMTFValues_s;
> static void generateMTFValues(void) {
511,513c512,514
<   UInt32 *ptr = s->ptr;
<   unsigned char *block = s->block;
<   unsigned short *mtfv = s->mtfv;
---
>   UInt32 *ptr = generateMTFValues_s->ptr;
>   unsigned char *block = generateMTFValues_s->block;
>   unsigned short *mtfv = generateMTFValues_s->mtfv;
516c517
<   EOB = s->nInUse + 1;
---
>   EOB = generateMTFValues_s->nInUse + 1;
521c522
<     s->mtfFreq[0] = 0;
---
>     generateMTFValues_s->mtfFreq[0] = 0;
527c528
<   for (0; 0 < s->nInUse; i++)
---
>   for (0; 0 < generateMTFValues_s->nInUse; i++)
532c533
<   for (0; 0 < s->nblock; i++) {
---
>   for (0; 0 < generateMTFValues_s->nblock; i++) {
537,538c538,539
<       j += s->nblock;
<     ll_i = s->unseqToSeq[block[s->nblock]];
---
>       j += generateMTFValues_s->nblock;
>     ll_i = generateMTFValues_s->unseqToSeq[block[generateMTFValues_s->nblock]];
559c560
<       s->mtfFreq[j + 1]++;
---
>       generateMTFValues_s->mtfFreq[j + 1]++;
567c568
<   s->mtfFreq[EOB]++;
---
>   generateMTFValues_s->mtfFreq[EOB]++;
569c570
<   s->nMTF = 0;
---
>   generateMTFValues_s->nMTF = 0;
(87.5 %, 25610 bytes)
505c505,506
< static void generateMTFValues(EState *s) {
---
> EState * generateMTFValues_s;
> static void generateMTFValues(void) {
512,514c513,515
<   UInt32 *ptr = s->ptr;
<   unsigned char *block = s->block;
<   unsigned short *mtfv = s->mtfv;
---
>   UInt32 *ptr = generateMTFValues_s->ptr;
>   unsigned char *block = generateMTFValues_s->block;
>   unsigned short *mtfv = generateMTFValues_s->mtfv;
517c518
<   EOB = s->nInUse + 1;
---
>   EOB = generateMTFValues_s->nInUse + 1;
522c523
<     s->mtfFreq[0] = 0;
---
>     generateMTFValues_s->mtfFreq[0] = 0;
528c529
<   for (0; 0 < s->nInUse; i++)
---
>   for (0; 0 < generateMTFValues_s->nInUse; i++)
533c534
<   for (0; 0 < s->nblock; i++) {
---
>   for (0; 0 < generateMTFValues_s->nblock; i++) {
538,539c539,540
<       j += s->nblock;
<     ll_i = s->unseqToSeq[block[s->nblock]];
---
>       j += generateMTFValues_s->nblock;
>     ll_i = generateMTFValues_s->unseqToSeq[block[generateMTFValues_s->nblock]];
560c561
<       s->mtfFreq[j + 1]++;
---
>       generateMTFValues_s->mtfFreq[j + 1]++;
568c569
<   s->mtfFreq[EOB]++;
---
>   generateMTFValues_s->mtfFreq[EOB]++;
570c571
<   s->nMTF = 0;
---
>   generateMTFValues_s->nMTF = 0;
595c595
< void default_bzalloc(void *opaque, Int32 items, Int32 size);
---
> void default_bzalloc( Int32 items, Int32 size);
(87.4 %, 25869 bytes)
596c596
< void default_bzalloc(void *opaque, Int32 items, Int32 size);
---
> void default_bzalloc( Int32 items, Int32 size);
596c596
< void default_bzalloc(void *opaque, Int32 items, Int32 size);
---
> void default_bzalloc(void *opaque,  Int32 size);
596c596
< void default_bzalloc(void *opaque, Int32 items, Int32 size);
---
> void default_bzalloc(void *opaque, Int32 items);
(87.4 %, 25856 bytes)
596c596
< void default_bzalloc( Int32 items, Int32 size);
---
> void default_bzalloc(  Int32 size);
596c596
< void default_bzalloc( Int32 items, Int32 size);
---
> void default_bzalloc( Int32 items);
(87.4 %, 25844 bytes)
596c596
< void default_bzalloc(  Int32 size);
---
> void default_bzalloc(  void);
598c598
< static void default_bzfree(void *opaque, void *addr);
---
> static void default_bzfree( void *addr);
(87.4 %, 25838 bytes)
598c598
< static void default_bzfree(void *opaque, void *addr);
---
> static void default_bzfree( void *addr);
598c598
< static void default_bzfree(void *opaque, void *addr);
---
> static void default_bzfree(void *opaque);
(87.4 %, 25825 bytes)
598c598
< static void default_bzfree( void *addr);
---
> static void default_bzfree( void);
600c600
< static void prepare_new_block(EState *s);
---
> static void prepare_new_block(void);
(87.4 %, 25819 bytes)
600c600
< static void prepare_new_block(EState *s);
---
> static void prepare_new_block(void);
602c602
< static void init_RL(EState *s);
---
> static void init_RL(void);
(87.4 %, 25814 bytes)
602c602
< static void init_RL(EState *s);
---
> static void init_RL(void);
604c604
< void isempty_RL(EState *s);
---
> void isempty_RL(void);
(87.4 %, 25809 bytes)
604c604
< void isempty_RL(EState *s);
---
> void isempty_RL(void);
667c667
< void handle_compress(bz_stream *strm);
---
> void handle_compress(void);
(87.4 %, 25804 bytes)
667c667
< void handle_compress(bz_stream *strm);
---
> void handle_compress(void);
749c749
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> static void unRLE_obuf_to_output_FAST(void);
(87.4 %, 25793 bytes)
749c749
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> static void unRLE_obuf_to_output_FAST(void);
751c751
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static void unRLE_obuf_to_output_SMALL(void);
(87.4 %, 25788 bytes)
751c751
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static void unRLE_obuf_to_output_SMALL(void);
1108c1108
< static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen( int fd, const char *mode,
(87.4 %, 25783 bytes)
1108c1108
< static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen( int fd, const char *mode,
1108c1108
< static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen(const char *path,  const char *mode,
1108c1108
< static BZFILE *bzopen_or_bzdopen(const char *path, int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen(const char *path, int fd, 
(87.4 %, 25766 bytes)
1108c1108
< static BZFILE *bzopen_or_bzdopen( int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen(  const char *mode,
1108c1108
< static BZFILE *bzopen_or_bzdopen( int fd, const char *mode,
---
> static BZFILE *bzopen_or_bzdopen( int fd, 
(87.4 %, 25759 bytes)
1108c1108
< static BZFILE *bzopen_or_bzdopen(  const char *mode,
---
> static BZFILE *bzopen_or_bzdopen(  
1108,1109c1108
< static BZFILE *bzopen_or_bzdopen(  const char *mode,
<                                  int open_mode);
---
> static BZFILE *bzopen_or_bzdopen(  const char *mode);
(87.4 %, 25742 bytes)
1109c1109
<                                  int open_mode);
---
>                                  void);
1226c1226
< void main(int argc, char *argv[]);
---
> void main( char *argv[]);
(87.4 %, 25733 bytes)
1226c1226
< void main(int argc, char *argv[]);
---
> void main( char *argv[]);
1226c1226
< void main(int argc, char *argv[]);
---
> void main(int argc);
(87.5 %, 25719 bytes)
===< pass_clang :: reduce-pointer-level >===
1154,1161c1154
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
<                                  "???",          "???",
<                                  "???",          "???",
<                                  "???",          "???"};
---
> static char bzerrorstrings[] = {a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a};
383c383
<   Int32 *save_gPerm;
---
>   Int32 save_gPerm;
513c513
<   UInt32 *ptr = generateMTFValues_s->ptr;
---
>   UInt32 ptr = *(generateMTFValues_s->ptr);
537c537
<     j = ptr[0] - 1;
---
>     j = &ptr[0] - 1;
671c671
<   EState *s;
---
>   EState s;
674c674
<   s = strm->state;
---
>   s = *strm->state;
677c677
<   if (s->strm != strm)
---
>   if (s.strm != strm)
681c681
<   switch (s->mode)
---
>   switch (s.mode)
965c965
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
971c971
<   if (bzf->writing)
---
>   if (bzf.writing)
974c974
<   if (bzf->initialisedOk)
---
>   if (bzf.initialisedOk)
213c213
<   unsigned char *block;
---
>   unsigned char block;
514c514
<   unsigned char *block = generateMTFValues_s->block;
---
>   unsigned char *block = &generateMTFValues_s->block;
650c650
<   s->block = s->arr2;
---
>   s->block = *s->arr2;
(87.5 %, 25718 bytes)
1004c1004
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
1007c1007
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if (bzf.lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<   *nUnused = bzf->strm.avail_in;
<   *unused = bzf->strm.next_in;
---
>   *nUnused = bzf.strm.avail_in;
>   *unused = bzf.strm.next_in;
1004c1004
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
1007c1007
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if (bzf.lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<   *nUnused = bzf->strm.avail_in;
<   *unused = bzf->strm.next_in;
---
>   *nUnused = bzf.strm.avail_in;
>   *unused = bzf.strm.next_in;
200c200
<   bz_stream *strm;
---
>   bz_stream strm;
628c628
<   s->strm = strm;
---
>   s->strm = *strm;
677c677
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
692c692
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
965c965
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
971c971
<   if (bzf->writing)
---
>   if (bzf.writing)
974c974
<   if (bzf->initialisedOk)
---
>   if (bzf.initialisedOk)
515c515
<   unsigned short *mtfv = generateMTFValues_s->mtfv;
---
>   unsigned short mtfv = *(generateMTFValues_s->mtfv);
559c559
<       mtfv[0] = j + 1;
---
>       mtfv = j + 1;
567c567
<     mtfv[0] = EOB;
---
>     mtfv = EOB;
(87.4 %, 25720 bytes)
1004c1004
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
1007c1007
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if (bzf.lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<   *nUnused = bzf->strm.avail_in;
<   *unused = bzf->strm.next_in;
---
>   *nUnused = bzf.strm.avail_in;
>   *unused = bzf.strm.next_in;
515c515
<   unsigned short *mtfv = generateMTFValues_s->mtfv;
---
>   unsigned short mtfv = *(generateMTFValues_s->mtfv);
559c559
<       mtfv[0] = j + 1;
---
>       mtfv = j + 1;
567c567
<     mtfv[0] = EOB;
---
>     mtfv = EOB;
886c886
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
890c890
<   if (!(bzf->writing))
---
>   if (!(bzf.writing))
30c30
<   char *next_out;
---
>   char next_out;
863c863
<   bzf->strm.next_out = bzf->buf;
---
>   bzf->strm.next_out = *bzf->buf;
995c995
<   bzf->strm.next_out = buf;
---
>   bzf->strm.next_out = *buf;
1039c1039
<   strm.next_out = dest;
---
>   strm.next_out = *dest;
1080c1080
<   strm.next_out = dest;
---
>   strm.next_out = *dest;
337c337
<   unsigned char *ll4;
---
>   unsigned char ll4;
(87.5 %, 25716 bytes)
214c214
<   unsigned short *mtfv;
---
>   unsigned short mtfv;
515c515
<   unsigned short mtfv = *(generateMTFValues_s->mtfv);
---
>   unsigned short mtfv = (&generateMTFValues_s->mtfv);
651c651
<   s->mtfv = s->arr1;
---
>   s->mtfv = *s->arr1;
381c381
<   Int32 *save_gLimit;
---
>   Int32 save_gLimit;
(87.5 %, 25716 bytes)
505c505
< EState * generateMTFValues_s;
---
> EState  generateMTFValues_s;
513,515c513,515
<   UInt32 *ptr = generateMTFValues_s->ptr;
<   unsigned char *block = generateMTFValues_s->block;
<   unsigned short mtfv = (&generateMTFValues_s->mtfv);
---
>   UInt32 *ptr = generateMTFValues_s.ptr;
>   unsigned char *block = generateMTFValues_s.block;
>   unsigned short mtfv = (&generateMTFValues_s.mtfv);
518c518
<   EOB = generateMTFValues_s->nInUse + 1;
---
>   EOB = generateMTFValues_s.nInUse + 1;
523c523
<     generateMTFValues_s->mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0] = 0;
529c529
<   for (0; 0 < generateMTFValues_s->nInUse; i++)
---
>   for (0; 0 < generateMTFValues_s.nInUse; i++)
534c534
<   for (0; 0 < generateMTFValues_s->nblock; i++) {
---
>   for (0; 0 < generateMTFValues_s.nblock; i++) {
539,540c539,540
<       j += generateMTFValues_s->nblock;
<     ll_i = generateMTFValues_s->unseqToSeq[block[generateMTFValues_s->nblock]];
---
>       j += generateMTFValues_s.nblock;
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
561c561
<       generateMTFValues_s->mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[j + 1]++;
569c569
<   generateMTFValues_s->mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[EOB]++;
571c571
<   generateMTFValues_s->nMTF = 0;
---
>   generateMTFValues_s.nMTF = 0;
38c38
<   void (*bzfree)(void *, void *);
---
>   void (bzfree)(void *, void *);
796c796
<   FILE *handle;
---
>   FILE handle;
381c381
<   Int32 *save_gLimit;
---
>   Int32 save_gLimit;
(87.5 %, 25702 bytes)
513c513
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = *(generateMTFValues_s.ptr);
537c537
<     j = ptr[0] - 1;
---
>     j = &ptr[0] - 1;
337c337
<   unsigned char *ll4;
---
>   unsigned char ll4;
213c213
<   unsigned char *block;
---
>   unsigned char block;
514c514
<   unsigned char *block = generateMTFValues_s.block;
---
>   unsigned char *block = &generateMTFValues_s.block;
650c650
<   s->block = s->arr2;
---
>   s->block = *s->arr2;
(87.5 %, 25701 bytes)
213c213
<   unsigned char *block;
---
>   unsigned char block;
514c514
<   unsigned char *block = generateMTFValues_s.block;
---
>   unsigned char *block = &generateMTFValues_s.block;
650c650
<   s->block = s->arr2;
---
>   s->block = *s->arr2;
215c215
<   unsigned char *zbits;
---
>   unsigned char zbits;
(87.5 %, 25702 bytes)
215c215
<   unsigned char *zbits;
---
>   unsigned char zbits;
309c309
<   bz_stream *strm;
---
>   bz_stream strm;
729c729
<   s->strm = strm;
---
>   s->strm = *strm;
760c760
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
777c777
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
(87.5 %, 25701 bytes)
309c309
<   bz_stream *strm;
---
>   bz_stream strm;
729c729
<   s->strm = strm;
---
>   s->strm = *strm;
760c760
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
777c777
<   if (s->strm != strm)
---
>   if (&s->strm != strm)
334c334
<   UInt32 *tt;
---
>   UInt32 tt;
(87.5 %, 25703 bytes)
334c334
<   UInt32 *tt;
---
>   UInt32 tt;
336c336
<   unsigned short *ll16;
---
>   unsigned short ll16;
(87.5 %, 25702 bytes)
336c336
<   unsigned short *ll16;
---
>   unsigned short ll16;
381c381
<   Int32 *save_gLimit;
---
>   Int32 save_gLimit;
(87.5 %, 25701 bytes)
381c381
<   Int32 *save_gLimit;
---
>   Int32 save_gLimit;
382c382
<   Int32 *save_gBase;
---
>   Int32 save_gBase;
(87.5 %, 25700 bytes)
382c382
<   Int32 *save_gBase;
---
>   Int32 save_gBase;
493c493
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s;
496c496
<   makeMaps_e_s->nInUse = 0;
---
>   makeMaps_e_s.nInUse = 0;
500,502c500,502
<     if (makeMaps_e_s->inUse[0])
<       makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
<   makeMaps_e_s->nInUse++;
---
>     if (makeMaps_e_s.inUse[0])
>       makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
>   makeMaps_e_s.nInUse++;
(87.5 %, 25699 bytes)
493c493
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s;
496c496
<   makeMaps_e_s->nInUse = 0;
---
>   makeMaps_e_s.nInUse = 0;
500,502c500,502
<     if (makeMaps_e_s->inUse[0])
<       makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
<   makeMaps_e_s->nInUse++;
---
>     if (makeMaps_e_s.inUse[0])
>       makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
>   makeMaps_e_s.nInUse++;
513c513
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = *(generateMTFValues_s.ptr);
537c537
<     j = ptr[0] - 1;
---
>     j = &ptr[0] - 1;
514c514
<   unsigned char *block = &generateMTFValues_s.block;
---
>   unsigned char block = generateMTFValues_s.block;
540c540
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[&block[generateMTFValues_s.nblock]];
549c549
<       register unsigned char *ryy_j;
---
>       register unsigned char ryy_j;
553c553
<       ryy_j = &(yy);
---
>       ryy_j = (yy);
558c558
<       j = ryy_j - &(yy);
---
>       j = &ryy_j - &(yy);
671c671
<   EState *s;
---
>   EState s;
674c674
<   s = strm->state;
---
>   s = *strm->state;
677c677
<   if (&s->strm != strm)
---
>   if (&s.strm != strm)
681c681
<   switch (s->mode)
---
>   switch (s.mode)
(87.5 %, 25693 bytes)
513c513
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = *(generateMTFValues_s.ptr);
537c537
<     j = ptr[0] - 1;
---
>     j = &ptr[0] - 1;
514c514
<   unsigned char *block = &generateMTFValues_s.block;
---
>   unsigned char block = generateMTFValues_s.block;
540c540
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[&block[generateMTFValues_s.nblock]];
549c549
<       register unsigned char *ryy_j;
---
>       register unsigned char ryy_j;
553c553
<       ryy_j = &(yy);
---
>       ryy_j = (yy);
558c558
<       j = ryy_j - &(yy);
---
>       j = &ryy_j - &(yy);
671c671
<   EState *s;
---
>   EState s;
674c674
<   s = strm->state;
---
>   s = *strm->state;
677c677
<   if (&s->strm != strm)
---
>   if (&s.strm != strm)
681c681
<   switch (s->mode)
---
>   switch (s.mode)
686c686
<   EState *s;
---
>   EState s;
689c689
<   s = strm->state;
---
>   s = *strm->state;
692c692
<   if (&s->strm != strm)
---
>   if (&s.strm != strm)
754c754
<   DState *s;
---
>   DState s;
757c757
<   s = strm->state;
---
>   s = *strm->state;
760c760
<   if (&s->strm != strm)
---
>   if (&s.strm != strm)
771c771
<   DState *s;
---
>   DState s;
774c774
<   s = strm->state;
---
>   s = *strm->state;
777c777
<   if (&s->strm != strm)
---
>   if (&s.strm != strm)
796c796
<   FILE *handle;
---
>   FILE handle;
845c845
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
850c850
<   if (!(bzf->writing))
---
>   if (!(bzf.writing))
858,859c858,859
<   bzf->strm.avail_in = len;
<   bzf->strm.next_in = buf;
---
>   bzf.strm.avail_in = len;
>   bzf.strm.next_in = buf;
862,863c862,863
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
<   bzf->strm.next_out = bzf->buf;
---
>     bzf.strm.avail_out = BZ_MAX_UNUSED;
>   bzf.strm.next_out = bzf.buf;
868c868
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf.strm.avail_out < BZ_MAX_UNUSED)
870c870
<     if (bzf->strm.avail_in == 0)
---
>     if (bzf.strm.avail_in == 0)
886c886
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
890c890
<   if (!(bzf->writing))
---
>   if (!(bzf.writing))
965c965
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
971c971
<   if (bzf->writing)
---
>   if (bzf.writing)
974c974
<   if (bzf->initialisedOk)
---
>   if (bzf.initialisedOk)
981c981
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
988c988
<   if (bzf->writing)
---
>   if (bzf.writing)
994,995c994,995
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   bzf.strm.avail_out = len;
>   bzf.strm.next_out = buf;
1004c1004
<   bzFile *bzf = b;
---
>   bzFile bzf = *b;
1007c1007
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if (bzf.lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<   *nUnused = bzf->strm.avail_in;
<   *unused = bzf->strm.next_in;
---
>   *nUnused = bzf.strm.avail_in;
>   *unused = bzf.strm.next_in;
1154,1161c1154
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
<                                  "???",          "???",
<                                  "???",          "???",
<                                  "???",          "???"};
---
> static char bzerrorstrings[] = {a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a};
===< pass_clang :: copy-propagation >===
===< pass_clang :: simplify-if >===
500,501c500,504
<     if (makeMaps_e_s.inUse[0])
<       makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>     {
>     makeMaps_e_s.inUse[0];
>     
>      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
>     }
538,539c538,540
<     if (j < 0)
<       j += generateMTFValues_s.nblock;
---
>     j < 0;
>     
>      j += generateMTFValues_s.nblock;
(87.5 %, 25705 bytes)
541,542c541,543
<     if (j < 0)
<       j += generateMTFValues_s.nblock;
---
>     j < 0;
>     
>      j += generateMTFValues_s.nblock;
546,548c546,549
<     if (0 == ll_i)
<       zPend++;
<     else
---
>     0 == ll_i;
>     
>      zPend++;
>     
550c550,553
<         if (0 > 0) {
---
>         {
>         0 > 0;
>         
>          {
565a569
>         }
(87.5 %, 25705 bytes)
547,549c547,550
<     if (0 == ll_i)
<       zPend++;
<     else
---
>     0 == ll_i;
>     
>      zPend++;
>     
551c551,554
<         if (0 > 0) {
---
>         {
>         0 > 0;
>         
>          {
566a570
>         }
(87.5 %, 25701 bytes)
552c552,554
<         if (0 > 0) {
---
>         0 > 0;
>         
>          {
570,572c570,572
<   if (0 > 0)
< 
<     mtfv = EOB;
---
>   0 > 0;
>   
>    mtfv = EOB;
(87.5 %, 25715 bytes)
572,574c572,574
<   if (0 > 0)
< 
<     mtfv = EOB;
---
>   0 > 0;
>   
>    mtfv = EOB;
(87.5 %, 25712 bytes)
===< pass_clang :: replace-simple-typedef >===
24,40c24
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
< 
<   void *(*bzalloc)(void *, int, int);
<   void (*bzfree)(void *, void *);
<   void *opaque;
< } bz_stream;
---
> 
47c31
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(struct bz_stream *strm, int blockSize100k,
50c34
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)(struct bz_stream *strm, int action);
52c36
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(struct bz_stream *strm);
54c38
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(struct bz_stream *strm, int verbosity,
57c41
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)(struct bz_stream *strm);
59c43
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(struct bz_stream *strm);
200c184
<   bz_stream strm;
---
>   struct bz_stream strm;
309c293
<   bz_stream strm;
---
>   struct bz_stream strm;
613c597
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> int BZ_API(BZ2_bzCompressInit)(struct bz_stream *strm, int blockSize100k,
676c660
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ_API(BZ2_bzCompress)(struct bz_stream *strm, int action) {
692c676
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> int BZ_API(BZ2_bzCompressEnd)(struct bz_stream *strm) {
715c699
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> int BZ_API(BZ2_bzDecompressInit)(struct bz_stream *strm, int verbosity, int small) {
760c744
< int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
---
> int BZ_API(BZ2_bzDecompress)(struct bz_stream *strm) {
777c761
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> int BZ_API(BZ2_bzDecompressEnd)(struct bz_stream *strm) {
807c791
<   bz_stream strm;
---
>   struct bz_stream strm;
1028c1012
<   bz_stream strm;
---
>   struct bz_stream strm;
1072c1056
<   bz_stream strm;
---
>   struct bz_stream strm;
123c123
< typedef unsigned char Bool;
---
> 
229c229
<   Bool inUse[256];
---
>   unsigned char inUse[256];
315c315
<   Bool blockRandomised;
---
>   unsigned char blockRandomised;
322c322
<   Bool smallDecompress;
---
>   unsigned char smallDecompress;
345,346c345,346
<   Bool inUse[256];
<   Bool inUse16[16];
---
>   unsigned char inUse[256];
>   unsigned char inUse16[16];
806c806
<   Bool writing;
---
>   unsigned char writing;
809c809
<   Bool initialisedOk;
---
>   unsigned char initialisedOk;
125c125
< typedef int Int32;
---
> 
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   int mode;
>   int state;
210c210
<   Int32 origPtr;
---
>   int origPtr;
217c217
<   Int32 workFactor;
---
>   int workFactor;
220c220
<   Int32 state_in_len;
---
>   int state_in_len;
223,226c223,226
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
---
>   int nblock;
>   int nblockMAX;
>   int numZ;
>   int state_out_pos;
228c228
<   Int32 nInUse;
---
>   int nInUse;
233c233
<   Int32 bsLive;
---
>   int bsLive;
238,240c238,240
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   int verbosity;
>   int blockNo;
>   int blockSize100k;
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   int nMTF;
>   int mtfFreq[BZ_MAX_ALPHA_SIZE];
248,249c248,249
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   int code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
311c311
<   Int32 state;
---
>   int state;
314c314
<   Int32 state_out_len;
---
>   int state_out_len;
319c319
<   Int32 bsLive;
---
>   int bsLive;
321c321
<   Int32 blockSize100k;
---
>   int blockSize100k;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   int currBlockNo;
>   int verbosity;
326c326
<   Int32 origPtr;
---
>   int origPtr;
328,332c328,332
<   Int32 k0;
<   Int32 unzftab[256];
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
---
>   int k0;
>   int unzftab[256];
>   int nblock_used;
>   int cftab[257];
>   int cftabCopy[257];
344c344
<   Int32 nInUse;
---
>   int nInUse;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   int mtfbase[256 / MTFL_SIZE];
355,383c355,383
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
<   Int32 save_gLimit;
<   Int32 save_gBase;
<   Int32 save_gPerm;
---
>   int limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int minLens[BZ_N_GROUPS];
> 
>   int save_i;
>   int save_j;
>   int save_t;
>   int save_alphaSize;
>   int save_nGroups;
>   int save_nSelectors;
>   int save_EOB;
>   int save_groupNo;
>   int save_groupPos;
>   int save_nextSym;
>   int save_nblockMAX;
>   int save_nblock;
>   int save_es;
>   int save_N;
>   int save_curr;
>   int save_zt;
>   int save_zn;
>   int save_zvec;
>   int save_zj;
>   int save_gSel;
>   int save_gMinlen;
>   int save_gLimit;
>   int save_gBase;
>   int save_gPerm;
495c495
<   Int32 i;
---
>   int i;
511,514c511,514
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
---
>   int, j;
>   int zPend;
>   int wr;
>   int EOB;
615c615
<   Int32 n;
---
>   int n;
805c805
<   Int32 bufN;
---
>   int bufN;
808c808
<   Int32 lastErr;
---
>   int lastErr;
851c851
<   Int32 ret;
---
>   int ret;
126c126
< typedef unsigned int UInt32;
---
> 
205c205
<   UInt32 avail_in_expect;
---
>   unsigned int avail_in_expect;
207,209c207,209
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   unsigned int *arr1;
>   unsigned int *arr2;
>   unsigned int *ftab;
212c212
<   UInt32 *ptr;
---
>   unsigned int *ptr;
219c219
<   UInt32 state_in_ch;
---
>   unsigned int state_in_ch;
232c232
<   UInt32 bsBuff;
---
>   unsigned int bsBuff;
235,236c235,236
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
---
>   unsigned int blockCRC;
>   unsigned int combinedCRC;
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   unsigned int len_pack[BZ_MAX_ALPHA_SIZE][4];
318c318
<   UInt32 bsBuff;
---
>   unsigned int bsBuff;
327c327
<   UInt32 tPos;
---
>   unsigned int tPos;
334c334
<   UInt32 tt;
---
>   unsigned int tt;
339,342c339,342
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
---
>   unsigned int storedBlockCRC;
>   unsigned int storedCombinedCRC;
>   unsigned int calculatedBlockCRC;
>   unsigned int calculatedCombinedCRC;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   unsigned int *ptr = generateMTFValues_s.ptr;
198,251d197
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
< 
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
<   Int32 origPtr;
< 
<   UInt32 *ptr;
<   unsigned char block;
<   unsigned short mtfv;
<   unsigned char zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
< 
<   Int32 nInUse;
<   Bool inUse[256];
<   unsigned char unseqToSeq[256];
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
< 
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
253d198
< } EState;
493c438
< EState  makeMaps_e_s;
---
> struct EState  makeMaps_e_s;
508c453
< EState  generateMTFValues_s;
---
> struct EState  generateMTFValues_s;
616c561
<   EState *s;
---
>   struct EState *s;
678c623
<   EState *s;
---
>   struct EState *s;
693c638
<   EState *s;
---
>   struct EState *s;
307d306
< typedef struct {
309,385d307
<   bz_stream strm;
< 
<   Int32 state;
< 
<   unsigned char state_out_ch;
<   Int32 state_out_len;
<   Bool blockRandomised;
<   BZ_RAND_DECLS;
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   Int32 blockSize100k;
<   Bool smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
< 
<   Int32 origPtr;
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
< 
<   UInt32 tt;
< 
<   unsigned short ll16;
<   unsigned char ll4;
< 
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
<   Int32 nInUse;
<   Bool inUse[256];
<   Bool inUse16[16];
<   unsigned char seqToUnseq[256];
< 
<   unsigned char mtfa[MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
<   Int32 save_gLimit;
<   Int32 save_gBase;
<   Int32 save_gPerm;
< 
< } DState;
409c331
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(struct DState *);
597c519
< void BZ2_decompress(DState *s);
---
> void BZ2_decompress(struct DState *s);
716c638
<   DState *s;
---
>   struct DState *s;
761c683
<   DState *s;
---
>   struct DState *s;
778c700
<   DState *s;
---
>   struct DState *s;
(87.4 %, 25748 bytes)
125c125
< typedef int Int32;
---
> 
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   int mode;
>   int state;
210c210
<   Int32 origPtr;
---
>   int origPtr;
217c217
<   Int32 workFactor;
---
>   int workFactor;
220c220
<   Int32 state_in_len;
---
>   int state_in_len;
223,226c223,226
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
---
>   int nblock;
>   int nblockMAX;
>   int numZ;
>   int state_out_pos;
228c228
<   Int32 nInUse;
---
>   int nInUse;
233c233
<   Int32 bsLive;
---
>   int bsLive;
238,240c238,240
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   int verbosity;
>   int blockNo;
>   int blockSize100k;
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   int nMTF;
>   int mtfFreq[BZ_MAX_ALPHA_SIZE];
248,249c248,249
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   int code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
311c311
<   Int32 state;
---
>   int state;
314c314
<   Int32 state_out_len;
---
>   int state_out_len;
319c319
<   Int32 bsLive;
---
>   int bsLive;
321c321
<   Int32 blockSize100k;
---
>   int blockSize100k;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   int currBlockNo;
>   int verbosity;
326c326
<   Int32 origPtr;
---
>   int origPtr;
328,332c328,332
<   Int32 k0;
<   Int32 unzftab[256];
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
---
>   int k0;
>   int unzftab[256];
>   int nblock_used;
>   int cftab[257];
>   int cftabCopy[257];
344c344
<   Int32 nInUse;
---
>   int nInUse;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   int mtfbase[256 / MTFL_SIZE];
355,383c355,383
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
<   Int32 save_gLimit;
<   Int32 save_gBase;
<   Int32 save_gPerm;
---
>   int limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   int minLens[BZ_N_GROUPS];
> 
>   int save_i;
>   int save_j;
>   int save_t;
>   int save_alphaSize;
>   int save_nGroups;
>   int save_nSelectors;
>   int save_EOB;
>   int save_groupNo;
>   int save_groupPos;
>   int save_nextSym;
>   int save_nblockMAX;
>   int save_nblock;
>   int save_es;
>   int save_N;
>   int save_curr;
>   int save_zt;
>   int save_zn;
>   int save_zvec;
>   int save_zj;
>   int save_gSel;
>   int save_gMinlen;
>   int save_gLimit;
>   int save_gBase;
>   int save_gPerm;
495c495
<   Int32 i;
---
>   int i;
511,514c511,514
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
---
>   int, j;
>   int zPend;
>   int wr;
>   int EOB;
615c615
<   Int32 n;
---
>   int n;
805c805
<   Int32 bufN;
---
>   int bufN;
808c808
<   Int32 lastErr;
---
>   int lastErr;
851c851
<   Int32 ret;
---
>   int ret;
126c126
< typedef unsigned int UInt32;
---
> 
205c205
<   UInt32 avail_in_expect;
---
>   unsigned int avail_in_expect;
207,209c207,209
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   unsigned int *arr1;
>   unsigned int *arr2;
>   unsigned int *ftab;
212c212
<   UInt32 *ptr;
---
>   unsigned int *ptr;
219c219
<   UInt32 state_in_ch;
---
>   unsigned int state_in_ch;
232c232
<   UInt32 bsBuff;
---
>   unsigned int bsBuff;
235,236c235,236
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
---
>   unsigned int blockCRC;
>   unsigned int combinedCRC;
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   unsigned int len_pack[BZ_MAX_ALPHA_SIZE][4];
318c318
<   UInt32 bsBuff;
---
>   unsigned int bsBuff;
327c327
<   UInt32 tPos;
---
>   unsigned int tPos;
334c334
<   UInt32 tt;
---
>   unsigned int tt;
339,342c339,342
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
---
>   unsigned int storedBlockCRC;
>   unsigned int storedCombinedCRC;
>   unsigned int calculatedBlockCRC;
>   unsigned int calculatedCombinedCRC;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   unsigned int *ptr = generateMTFValues_s.ptr;
198,251d197
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
< 
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
<   Int32 origPtr;
< 
<   UInt32 *ptr;
<   unsigned char block;
<   unsigned short mtfv;
<   unsigned char zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
< 
<   Int32 nInUse;
<   unsigned char inUse[256];
<   unsigned char unseqToSeq[256];
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
< 
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
253d198
< } EState;
493c438
< EState  makeMaps_e_s;
---
> struct EState  makeMaps_e_s;
508c453
< EState  generateMTFValues_s;
---
> struct EState  generateMTFValues_s;
616c561
<   EState *s;
---
>   struct EState *s;
678c623
<   EState *s;
---
>   struct EState *s;
693c638
<   EState *s;
---
>   struct EState *s;
307d306
< typedef struct {
309,385d307
<   bz_stream strm;
< 
<   Int32 state;
< 
<   unsigned char state_out_ch;
<   Int32 state_out_len;
<   unsigned char blockRandomised;
<   BZ_RAND_DECLS;
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   Int32 blockSize100k;
<   unsigned char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
< 
<   Int32 origPtr;
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
< 
<   UInt32 tt;
< 
<   unsigned short ll16;
<   unsigned char ll4;
< 
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
<   Int32 nInUse;
<   unsigned char inUse[256];
<   unsigned char inUse16[16];
<   unsigned char seqToUnseq[256];
< 
<   unsigned char mtfa[MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
<   Int32 save_gLimit;
<   Int32 save_gBase;
<   Int32 save_gPerm;
< 
< } DState;
409c331
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(struct DState *);
597c519
< void BZ2_decompress(DState *s);
---
> void BZ2_decompress(struct DState *s);
716c638
<   DState *s;
---
>   struct DState *s;
761c683
<   DState *s;
---
>   struct DState *s;
778c700
<   DState *s;
---
>   struct DState *s;
802,810c802
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
<   unsigned char writing;
<   bz_stream strm;
<   Int32 lastErr;
<   unsigned char initialisedOk;
< } bzFile;
---
> 
852c844
<   bzFile *bzf = b;
---
>   struct bzFile *bzf = b;
893c885
<   bzFile *bzf = b;
---
>   struct bzFile *bzf = b;
972c964
<   bzFile *bzf = b;
---
>   struct bzFile *bzf = b;
988c980
<   bzFile *bzf = b;
---
>   struct bzFile *bzf = b;
1011c1003
<   bzFile *bzf = b;
---
>   struct bzFile *bzf = b;
1126c1118
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((struct bzFile *)b)->lastErr == BZ_STREAM_END)
1171c1163
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((struct bzFile *)b)->lastErr;
1173c1165
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((struct bzFile *)b)->lastErr > 0)
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: replace-dependent-name >===
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
3c3
< #define _BZLIB_H
---
> define 
3c3
< #define _BZLIB_H
---
>  
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
> define 
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
>  
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
> # _BZLIB_H
3c3
< #define _BZLIB_H
---
> # 
(87.4 %, 25733 bytes)
5c5
< #define BZ_RUN 0
---
>   0
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 
5c5
< #define BZ_RUN 0
---
>  BZ_RUN 
5c5
< #define BZ_RUN 0
---
> define  
5c5
< #define BZ_RUN 0
---
>   
5c5
< #define BZ_RUN 0
---
> # BZ_RUN 0
5c5
< #define BZ_RUN 0
---
> #  0
(87.5 %, 25719 bytes)
6c6
< #define BZ_FLUSH 1
---
>   
6c6
< #define BZ_FLUSH 1
---
> # BZ_FLUSH 1
6c6
< #define BZ_FLUSH 1
---
> #  1
(87.5 %, 25703 bytes)
7c7
< #define BZ_FINISH 2
---
>   
7c7
< #define BZ_FINISH 2
---
> # BZ_FINISH 2
7c7
< #define BZ_FINISH 2
---
> #  2
(87.5 %, 25686 bytes)
9c9
< #define BZ_OK 0
---
>   
9c9
< #define BZ_OK 0
---
> # BZ_OK 0
9c9
< #define BZ_OK 0
---
> #  0
9c9
< #define BZ_OK 0
---
> # BZ_OK 
9c9
< #define BZ_OK 0
---
> #  
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> # BZ_OK 0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #  0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> # BZ_OK 
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #  
> define BZ_RUN_OK 1
9c9
< #define BZ_OK 0
---
> #define  0
9c9
< #define BZ_OK 0
---
> #define  
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
>  BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
>  BZ_RUN_OK 1
9c9
< #define BZ_OK 0
---
> #define BZ_OK 
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
>  BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> #define  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> define  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> #  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
>   1
10c10
< #define BZ_RUN_OK 1
---
> define BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
>  BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
> define  1
10c10
< #define BZ_RUN_OK 1
---
>   1
10c10
< #define BZ_RUN_OK 1
---
> define BZ_RUN_OK 
10c10
< #define BZ_RUN_OK 1
---
>  BZ_RUN_OK 
10c10
< #define BZ_RUN_OK 1
---
> define  
10c10
< #define BZ_RUN_OK 1
---
>   
10c10
< #define BZ_RUN_OK 1
---
> # BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
> #  1
10c10
< #define BZ_RUN_OK 1
---
> # BZ_RUN_OK 
10c10
< #define BZ_RUN_OK 1
---
> #  
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> # BZ_RUN_OK 1
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #  1
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> # BZ_RUN_OK 
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #  
> define BZ_FLUSH_OK 2
10c10
< #define BZ_RUN_OK 1
---
> #define  1
10c10
< #define BZ_RUN_OK 1
---
> #define  
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  1
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  1
> # BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  
> # BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  1
>  BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define  
>  BZ_FLUSH_OK 2
10c10
< #define BZ_RUN_OK 1
---
> #define BZ_RUN_OK 
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
> define BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
> # BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
>  BZ_FLUSH_OK 2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
> #define  2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
> define  2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
> #  2
10,11c10,11
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
---
> #define BZ_RUN_OK 
>   2
11c11
< #define BZ_FLUSH_OK 2
---
> define BZ_FLUSH_OK 2
11c11
< #define BZ_FLUSH_OK 2
---
>  BZ_FLUSH_OK 2
11c11
< #define BZ_FLUSH_OK 2
---
> define  2
11c11
< #define BZ_FLUSH_OK 2
---
>   2
11c11
< #define BZ_FLUSH_OK 2
---
> define BZ_FLUSH_OK 
11c11
< #define BZ_FLUSH_OK 2
---
>  BZ_FLUSH_OK 
11c11
< #define BZ_FLUSH_OK 2
---
> define  
11c11
< #define BZ_FLUSH_OK 2
---
>   
11c11
< #define BZ_FLUSH_OK 2
---
> # BZ_FLUSH_OK 2
11c11
< #define BZ_FLUSH_OK 2
---
> #  2
(87.5 %, 25667 bytes)
12c12
< #define BZ_FINISH_OK 3
---
>   
12c12
< #define BZ_FINISH_OK 3
---
> # BZ_FINISH_OK 3
12c12
< #define BZ_FINISH_OK 3
---
> #  3
12c12
< #define BZ_FINISH_OK 3
---
> # BZ_FINISH_OK 
12c12
< #define BZ_FINISH_OK 3
---
> #  
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> # BZ_FINISH_OK 3
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #  3
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> # BZ_FINISH_OK 
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #  
> define BZ_STREAM_END 4
12c12
< #define BZ_FINISH_OK 3
---
> #define  3
12c12
< #define BZ_FINISH_OK 3
---
> #define  
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  3
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  3
> # BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  
> # BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  3
>  BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define  
>  BZ_STREAM_END 4
12c12
< #define BZ_FINISH_OK 3
---
> #define BZ_FINISH_OK 
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
> define BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
> # BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
>  BZ_STREAM_END 4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
> #define  4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
> define  4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
> #  4
12,13c12,13
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK 
>   4
13c13
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
13c13
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 4
13c13
< #define BZ_STREAM_END 4
---
> define  4
13c13
< #define BZ_STREAM_END 4
---
>   4
13c13
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 
13c13
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 
13c13
< #define BZ_STREAM_END 4
---
> define  
13c13
< #define BZ_STREAM_END 4
---
>   
13c13
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
13c13
< #define BZ_STREAM_END 4
---
> #  4
13c13
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 
13c13
< #define BZ_STREAM_END 4
---
> #  
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> # BZ_STREAM_END 4
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #  4
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> # BZ_STREAM_END 
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #  
> define BZ_SEQUENCE_ERROR
13c13
< #define BZ_STREAM_END 4
---
> #define  4
13c13
< #define BZ_STREAM_END 4
---
> #define  
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  4
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  4
> # BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  
> # BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  4
>  BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define  
>  BZ_SEQUENCE_ERROR
13c13
< #define BZ_STREAM_END 4
---
> #define BZ_STREAM_END 
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
> define BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
> # BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
>  BZ_SEQUENCE_ERROR
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
> #define 
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
> define 
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
> # 
13,14c13,14
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
---
> #define BZ_STREAM_END 
>  
14c14
< #define BZ_SEQUENCE_ERROR
---
> define BZ_SEQUENCE_ERROR
14c14
< #define BZ_SEQUENCE_ERROR
---
>  BZ_SEQUENCE_ERROR
14c14
< #define BZ_SEQUENCE_ERROR
---
> define 
14c14
< #define BZ_SEQUENCE_ERROR
---
>  
14,15c14,15
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR (-2)
---
> define BZ_SEQUENCE_ERROR
> define BZ_PARAM_ERROR (-2)
14,15c14,15
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR (-2)
---
>  BZ_SEQUENCE_ERROR
> define BZ_PARAM_ERROR (-2)
14,15c14,15
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR (-2)
---
> define 
> define BZ_PARAM_ERROR (-2)
14,15c14,15
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR (-2)
---
>  
> define BZ_PARAM_ERROR (-2)
14c14
< #define BZ_SEQUENCE_ERROR
---
> # BZ_SEQUENCE_ERROR
14c14
< #define BZ_SEQUENCE_ERROR
---
> # 
(87.5 %, 25643 bytes)
15c15
< #define BZ_PARAM_ERROR (-2)
---
>   (-2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> define BZ_PARAM_ERROR -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
>  BZ_PARAM_ERROR -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> define  -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
>   -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> # BZ_PARAM_ERROR (-2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #  (-2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> # BZ_PARAM_ERROR -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #  -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> # BZ_PARAM_ERROR (2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #  (2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> # BZ_PARAM_ERROR 2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #  2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  (-2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  (2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  (-)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  -)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  ()
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define  )
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR -2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR 2)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR -)
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR )
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR -2
15c15
< #define BZ_PARAM_ERROR (-2)
---
> #define BZ_PARAM_ERROR 2
(87.5 %, 25641 bytes)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR 2
> # BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR 
> # BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR 2
>  BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR 
>  BZ_MEM_ERROR (-3)
15c15
< #define BZ_PARAM_ERROR -2
---
> #define BZ_PARAM_ERROR -
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
> define BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
> # BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
>  BZ_MEM_ERROR (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
> #define  (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
> define  (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
> #  (-3)
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_PARAM_ERROR -
>   (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> define BZ_MEM_ERROR (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
>  BZ_MEM_ERROR (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> define  (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
>   (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> define BZ_MEM_ERROR -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
>  BZ_MEM_ERROR -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> define  -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
>   -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> # BZ_MEM_ERROR (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #  (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> # BZ_MEM_ERROR -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #  -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> # BZ_MEM_ERROR (3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #  (3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> # BZ_MEM_ERROR 3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #  3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  (-3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  (3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  (-)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  -)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  ()
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define  )
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR -3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR 3)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR -)
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR )
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR -3
16c16
< #define BZ_MEM_ERROR (-3)
---
> #define BZ_MEM_ERROR 3
(87.5 %, 25639 bytes)
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR 3
> # BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR 
> # BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR 3
>  BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR 
>  BZ_DATA_ERROR
16c16
< #define BZ_MEM_ERROR -3
---
> #define BZ_MEM_ERROR -
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
> define BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
> # BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
>  BZ_DATA_ERROR
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
> #define 
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
> define 
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
> # 
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR
---
> #define BZ_MEM_ERROR -
>  
17c17
< #define BZ_DATA_ERROR
---
> define BZ_DATA_ERROR
17c17
< #define BZ_DATA_ERROR
---
>  BZ_DATA_ERROR
17c17
< #define BZ_DATA_ERROR
---
> define 
17c17
< #define BZ_DATA_ERROR
---
>  
17,18c17,18
< #define BZ_DATA_ERROR
< #define BZ_DATA_ERROR_MAGIC
---
> define BZ_DATA_ERROR
> define BZ_DATA_ERROR_MAGIC
17,18c17,18
< #define BZ_DATA_ERROR
< #define BZ_DATA_ERROR_MAGIC
---
>  BZ_DATA_ERROR
> define BZ_DATA_ERROR_MAGIC
17,18c17,18
< #define BZ_DATA_ERROR
< #define BZ_DATA_ERROR_MAGIC
---
> define 
> define BZ_DATA_ERROR_MAGIC
17,18c17,18
< #define BZ_DATA_ERROR
< #define BZ_DATA_ERROR_MAGIC
---
>  
> define BZ_DATA_ERROR_MAGIC
17c17
< #define BZ_DATA_ERROR
---
> # BZ_DATA_ERROR
17c17
< #define BZ_DATA_ERROR
---
> # 
(87.5 %, 25619 bytes)
18c18
< #define BZ_DATA_ERROR_MAGIC
---
>  
18,19c18,19
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
---
> define BZ_DATA_ERROR_MAGIC
> define BZ_IO_ERROR
18,19c18,19
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
---
>  BZ_DATA_ERROR_MAGIC
> define BZ_IO_ERROR
18,19c18,19
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
---
> define 
> define BZ_IO_ERROR
18,19c18,19
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
---
>  
> define BZ_IO_ERROR
18c18
< #define BZ_DATA_ERROR_MAGIC
---
> # BZ_DATA_ERROR_MAGIC
18c18
< #define BZ_DATA_ERROR_MAGIC
---
> # 
(87.5 %, 25593 bytes)
19c19
< #define BZ_IO_ERROR
---
>  
19,20c19,20
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF (-7)
---
> define BZ_IO_ERROR
> define BZ_UNEXPECTED_EOF (-7)
19,20c19,20
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF (-7)
---
>  BZ_IO_ERROR
> define BZ_UNEXPECTED_EOF (-7)
19,20c19,20
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF (-7)
---
> define 
> define BZ_UNEXPECTED_EOF (-7)
19,20c19,20
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF (-7)
---
>  
> define BZ_UNEXPECTED_EOF (-7)
19c19
< #define BZ_IO_ERROR
---
> # BZ_IO_ERROR
19c19
< #define BZ_IO_ERROR
---
> # 
(87.5 %, 25575 bytes)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
>   (-7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> define BZ_UNEXPECTED_EOF -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
>  BZ_UNEXPECTED_EOF -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> define  -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
>   -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> # BZ_UNEXPECTED_EOF (-7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #  (-7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> # BZ_UNEXPECTED_EOF -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #  -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> # BZ_UNEXPECTED_EOF (7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #  (7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> # BZ_UNEXPECTED_EOF 7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #  7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  (-7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  (7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  (-)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  -)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  ()
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define  )
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF -7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF 7)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF -)
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF )
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF -7
20c20
< #define BZ_UNEXPECTED_EOF (-7)
---
> #define BZ_UNEXPECTED_EOF 7
(87.5 %, 25573 bytes)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF 7
> # BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF 
> # BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF 7
>  BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF 
>  BZ_OUTBUFF_FULL (-8)
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define BZ_UNEXPECTED_EOF -
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
> define BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
> # BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
>  BZ_OUTBUFF_FULL (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
> #define  (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
> define  (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
> #  (-8)
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_UNEXPECTED_EOF -
>   (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> define BZ_OUTBUFF_FULL (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
>  BZ_OUTBUFF_FULL (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> define  (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
>   (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> define BZ_OUTBUFF_FULL -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
>  BZ_OUTBUFF_FULL -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> define  -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
>   -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> # BZ_OUTBUFF_FULL (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #  (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> # BZ_OUTBUFF_FULL -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #  -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> # BZ_OUTBUFF_FULL (8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #  (8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> # BZ_OUTBUFF_FULL 8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #  8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  (-8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  (8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  (-)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  -)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  ()
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define  )
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL -8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL 8)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL -)
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL )
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL -8
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL 8
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL -
21c21
< #define BZ_OUTBUFF_FULL (-8)
---
> #define BZ_OUTBUFF_FULL 
(87.5 %, 25571 bytes)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL 8
> # BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL 
> # BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL 8
>  BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL 
>  BZ_CONFIG_ERROR (-9)
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_OUTBUFF_FULL -
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
> define BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
> # BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
>  BZ_CONFIG_ERROR (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
> #define  (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
> define  (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
> #  (-9)
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_OUTBUFF_FULL -
>   (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> define BZ_CONFIG_ERROR (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
>  BZ_CONFIG_ERROR (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> define  (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
>   (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> define BZ_CONFIG_ERROR -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
>  BZ_CONFIG_ERROR -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> define  -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
>   -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> # BZ_CONFIG_ERROR (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #  (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> # BZ_CONFIG_ERROR -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #  -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> # BZ_CONFIG_ERROR (9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #  (9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> # BZ_CONFIG_ERROR 9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #  9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  (-9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  (9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  (-)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  -)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  ()
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define  )
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR -9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR 9)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR -)
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR )
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR -9
22c22
< #define BZ_CONFIG_ERROR (-9)
---
> #define BZ_CONFIG_ERROR 9
(87.5 %, 25569 bytes)
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 9
24c24
< typedef struct {
---
> typedef  {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
> typedef  {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 9
24c24
< typedef struct {
---
>   {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>   {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
> typedef  {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
>   {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
> typedef struct 
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
>  struct 
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
> typedef  
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR -
24c24
< typedef struct {
---
>   
24c24
< typedef struct {
---
>  struct {
24c24
< typedef struct {
---
>   {
24c24
< typedef struct {
---
>  struct 
24c24
< typedef struct {
---
>   
24,25c24,25
< typedef struct {
<   char *next_in;
---
>  struct {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>   {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>  struct 
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>   
>    *next_in;
24c24
< typedef struct {
---
> typedef  {
24c24
< typedef struct {
---
> typedef  
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>    next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>    next_in;
24c24
< typedef struct {
---
> typedef struct 
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char *;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    *;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char ;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    ;
25c25
<   char *next_in;
---
>    *next_in;
25c25
<   char *next_in;
---
>    next_in;
25c25
<   char *next_in;
---
>    *;
25c25
<   char *next_in;
---
>    ;
25c25
<   char *next_in;
---
>    *next_in
25c25
<   char *next_in;
---
>    next_in
25c25
<   char *next_in;
---
>    *
25c25
<   char *next_in;
---
>    
25c25
<   char *next_in;
---
>   char next_in;
25c25
<   char *next_in;
---
>   char ;
25c25
<   char *next_in;
---
>   char next_in
25c25
<   char *next_in;
---
>   char 
25,26c25,26
<   char *next_in;
<   unsigned int avail_in;
---
>   char next_in;
>    int avail_in;
(87.5 %, 25568 bytes)
25c25
<   char next_in;
---
>   char ;
25c25
<   char next_in;
---
>   char 
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char ;
>    int avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char 
>    int avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char ;
>   unsigned  avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char 
>   unsigned  avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char ;
>     avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char 
>     avail_in;
25c25
<   char next_in;
---
>   char next_in
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>    int avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>   unsigned  avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>     avail_in;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>   unsigned int ;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>    int ;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>   unsigned  ;
25,26c25,26
<   char next_in;
<   unsigned int avail_in;
---
>   char next_in
>     ;
26c26
<   unsigned int avail_in;
---
>    int avail_in;
26c26
<   unsigned int avail_in;
---
>     avail_in;
26c26
<   unsigned int avail_in;
---
>    int ;
26c26
<   unsigned int avail_in;
---
>     ;
26c26
<   unsigned int avail_in;
---
>    int avail_in
26c26
<   unsigned int avail_in;
---
>     avail_in
26c26
<   unsigned int avail_in;
---
>    int 
26c26
<   unsigned int avail_in;
---
>     
26c26
<   unsigned int avail_in;
---
>   unsigned  avail_in;
(87.5 %, 25560 bytes)
26c26
<    int avail_in;
---
>     avail_in;
26c26
<    int avail_in;
---
>     ;
26c26
<    int avail_in;
---
>     avail_in
26c26
<    int avail_in;
---
>     
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     avail_in;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     ;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     avail_in
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     
>    int total_in_lo32;
26c26
<    int avail_in;
---
>    int ;
26c26
<    int avail_in;
---
>    int 
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>     total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>     total_in_lo32;
26c26
<    int avail_in;
---
>    int avail_in
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>     total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned int ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>    int ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned  ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>     ;
27c27
<   unsigned int total_in_lo32;
---
>    int total_in_lo32;
27c27
<   unsigned int total_in_lo32;
---
>     total_in_lo32;
27c27
<   unsigned int total_in_lo32;
---
>    int ;
27c27
<   unsigned int total_in_lo32;
---
>     ;
27c27
<   unsigned int total_in_lo32;
---
>    int total_in_lo32
27c27
<   unsigned int total_in_lo32;
---
>     total_in_lo32
27c27
<   unsigned int total_in_lo32;
---
>    int 
27c27
<   unsigned int total_in_lo32;
---
>     
27c27
<   unsigned int total_in_lo32;
---
>   unsigned  total_in_lo32;
(87.5 %, 25552 bytes)
27c27
<    int total_in_lo32;
---
>     total_in_lo32;
27c27
<    int total_in_lo32;
---
>     ;
27c27
<    int total_in_lo32;
---
>     total_in_lo32
27c27
<    int total_in_lo32;
---
>     
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     total_in_lo32;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     ;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     total_in_lo32
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     
>    int total_in_hi32;
27c27
<    int total_in_lo32;
---
>    int ;
27c27
<    int total_in_lo32;
---
>    int 
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>     total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>     total_in_hi32;
27c27
<    int total_in_lo32;
---
>    int total_in_lo32
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>     total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned int ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>    int ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned  ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>     ;
28c28
<   unsigned int total_in_hi32;
---
>    int total_in_hi32;
28c28
<   unsigned int total_in_hi32;
---
>     total_in_hi32;
28c28
<   unsigned int total_in_hi32;
---
>    int ;
28c28
<   unsigned int total_in_hi32;
---
>     ;
28c28
<   unsigned int total_in_hi32;
---
>    int total_in_hi32
28c28
<   unsigned int total_in_hi32;
---
>     total_in_hi32
28c28
<   unsigned int total_in_hi32;
---
>    int 
28c28
<   unsigned int total_in_hi32;
---
>     
28c28
<   unsigned int total_in_hi32;
---
>   unsigned  total_in_hi32;
(87.5 %, 25544 bytes)
28c28
<    int total_in_hi32;
---
>     total_in_hi32;
28c28
<    int total_in_hi32;
---
>     ;
28c28
<    int total_in_hi32;
---
>     total_in_hi32
28c28
<    int total_in_hi32;
---
>     
28c28
<    int total_in_hi32;
---
>     total_in_hi32;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     ;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     total_in_hi32
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int ;
28c28
<    int total_in_hi32;
---
>    int 
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char *;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    *;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char ;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    ;
30c30
<   char *next_out;
---
>    *next_out;
30c30
<   char *next_out;
---
>    next_out;
30c30
<   char *next_out;
---
>    *;
30c30
<   char *next_out;
---
>    ;
30c30
<   char *next_out;
---
>    *next_out
30c30
<   char *next_out;
---
>    next_out
30c30
<   char *next_out;
---
>    *
30c30
<   char *next_out;
---
>    
30c30
<   char *next_out;
---
>   char next_out;
30c30
<   char *next_out;
---
>   char ;
30c30
<   char *next_out;
---
>   char next_out
30c30
<   char *next_out;
---
>   char 
30,31c30,31
<   char *next_out;
<   unsigned int avail_out;
---
>   char next_out;
>    int avail_out;
(87.5 %, 25543 bytes)
30c30
<   char next_out;
---
>   char ;
30c30
<   char next_out;
---
>   char 
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char ;
>    int avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char 
>    int avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char ;
>   unsigned  avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char 
>   unsigned  avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char ;
>     avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char 
>     avail_out;
30c30
<   char next_out;
---
>   char next_out
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>    int avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>   unsigned  avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>     avail_out;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>   unsigned int ;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>    int ;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>   unsigned  ;
30,31c30,31
<   char next_out;
<   unsigned int avail_out;
---
>   char next_out
>     ;
31c31
<   unsigned int avail_out;
---
>    int avail_out;
31c31
<   unsigned int avail_out;
---
>     avail_out;
31c31
<   unsigned int avail_out;
---
>    int ;
31c31
<   unsigned int avail_out;
---
>     ;
31c31
<   unsigned int avail_out;
---
>    int avail_out
31c31
<   unsigned int avail_out;
---
>     avail_out
31c31
<   unsigned int avail_out;
---
>    int 
31c31
<   unsigned int avail_out;
---
>     
31c31
<   unsigned int avail_out;
---
>   unsigned  avail_out;
(87.5 %, 25535 bytes)
31c31
<    int avail_out;
---
>     avail_out;
31c31
<    int avail_out;
---
>     ;
31c31
<    int avail_out;
---
>     avail_out
31c31
<    int avail_out;
---
>     
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>     avail_out;
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>     ;
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>     avail_out
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>     
>    int total_out_lo32;
31c31
<    int avail_out;
---
>    int ;
31c31
<    int avail_out;
---
>    int 
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int ;
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int 
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int ;
>   unsigned  total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int 
>   unsigned  total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int ;
>     total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int 
>     total_out_lo32;
31c31
<    int avail_out;
---
>    int avail_out
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>    int total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>   unsigned  total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>     total_out_lo32;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>   unsigned int ;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>    int ;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>   unsigned  ;
31,32c31,32
<    int avail_out;
<   unsigned int total_out_lo32;
---
>    int avail_out
>     ;
32c32
<   unsigned int total_out_lo32;
---
>    int total_out_lo32;
32c32
<   unsigned int total_out_lo32;
---
>     total_out_lo32;
32c32
<   unsigned int total_out_lo32;
---
>    int ;
32c32
<   unsigned int total_out_lo32;
---
>     ;
32c32
<   unsigned int total_out_lo32;
---
>    int total_out_lo32
32c32
<   unsigned int total_out_lo32;
---
>     total_out_lo32
32c32
<   unsigned int total_out_lo32;
---
>    int 
32c32
<   unsigned int total_out_lo32;
---
>     
32c32
<   unsigned int total_out_lo32;
---
>   unsigned  total_out_lo32;
(87.5 %, 25527 bytes)
32c32
<    int total_out_lo32;
---
>     total_out_lo32;
32c32
<    int total_out_lo32;
---
>     ;
32c32
<    int total_out_lo32;
---
>     total_out_lo32
32c32
<    int total_out_lo32;
---
>     
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     total_out_lo32;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     ;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     total_out_lo32
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     
>    int total_out_hi32;
32c32
<    int total_out_lo32;
---
>    int ;
32c32
<    int total_out_lo32;
---
>    int 
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>     total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>     total_out_hi32;
32c32
<    int total_out_lo32;
---
>    int total_out_lo32
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>     total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned int ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>    int ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned  ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>     ;
33c33
<   unsigned int total_out_hi32;
---
>    int total_out_hi32;
33c33
<   unsigned int total_out_hi32;
---
>     total_out_hi32;
33c33
<   unsigned int total_out_hi32;
---
>    int ;
33c33
<   unsigned int total_out_hi32;
---
>     ;
33c33
<   unsigned int total_out_hi32;
---
>    int total_out_hi32
33c33
<   unsigned int total_out_hi32;
---
>     total_out_hi32
33c33
<   unsigned int total_out_hi32;
---
>    int 
33c33
<   unsigned int total_out_hi32;
---
>     
33c33
<   unsigned int total_out_hi32;
---
>   unsigned  total_out_hi32;
(87.5 %, 25519 bytes)
33c33
<    int total_out_hi32;
---
>     total_out_hi32;
33c33
<    int total_out_hi32;
---
>     ;
33c33
<    int total_out_hi32;
---
>     total_out_hi32
33c33
<    int total_out_hi32;
---
>     
33c33
<    int total_out_hi32;
---
>     total_out_hi32;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     ;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     total_out_hi32
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int ;
33c33
<    int total_out_hi32;
---
>    int 
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void *;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    *;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void ;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    ;
35c35
<   void *state;
---
>    *state;
35c35
<   void *state;
---
>    state;
35c35
<   void *state;
---
>    *;
35c35
<   void *state;
---
>    ;
35c35
<   void *state;
---
>    *state
35c35
<   void *state;
---
>    state
35c35
<   void *state;
---
>    *
35c35
<   void *state;
---
>    
35c35
<   void *state;
---
>   void state;
35c35
<   void *state;
---
>   void ;
35c35
<   void *state;
---
>   void state
35c35
<   void *state;
---
>   void 
35c35
<   void *state;
---
>   void state;
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void ;
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void 
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *;
35c35
<   void *state;
---
>   void *
35c35
<   void *state;
---
>   void *;
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *;
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *;
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    (*bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void **bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    **bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *bzalloc)(void *, int, int);
35c35
<   void *state;
---
>   void *state
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(*bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    (*bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    **bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *(bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    (bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    *bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>    bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void (*)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void ()(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void )(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void **bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *bzalloc)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void **)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *)(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void **bzalloc(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *bzalloc(void *, int, int);
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void **(void *, int, int);
(87.5 %, 25518 bytes)
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void *bzalloc)(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void bzalloc)(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void *)(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void )(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void *bzalloc(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void bzalloc(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void *(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (bzalloc)(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void ()(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (bzalloc(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void ((void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (bzalloc)void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void ()void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (bzallocvoid *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*)(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*)void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*)( *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*( *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*) *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (* *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc(void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzallocvoid *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc( *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc(void , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzallocvoid , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc( , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)void *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc) *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)void , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc) , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)void * int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc) * int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)void  int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)  int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( *, int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( * int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(  int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( *, , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( , , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)( * , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(  , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void , int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void  int, int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void , , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void  , int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void , int int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void  int int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void ,  int);
37c37
<   void (*bzalloc)(void *, int, int);
---
>   void (*bzalloc)(void   int);
(87.6 %, 25512 bytes)
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(   );
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(  , int;
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(   int;
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(  , ;
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(   ;
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(  int int);
37c37
<   void (*bzalloc)(  int, int);
---
>   void (*bzalloc)(  int );
(87.6 %, 25505 bytes)
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   
>    (*bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   ;
>   void *bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   
>   void *bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   ;
>    *bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   
>    *bzfree)(void *, void *);
37c37
<   void (*bzalloc)(   );
---
>   void (*bzalloc)(   )
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>    (*bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>   void *bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>    *bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>   void (bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>    (bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>   void bzfree)(void *, void *);
37,38c37,38
<   void (*bzalloc)(   );
<   void (*bzfree)(void *, void *);
---
>   void (*bzalloc)(   )
>    bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    (*bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    *bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    (bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    (*)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    *)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    ()(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>    )(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void *bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void *)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void )(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void *bzfree(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void bzfree(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void *(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (bzfree)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void ()(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (bzfree(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void ((void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (bzfree)void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void ()void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (bzfreevoid *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*)(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*)void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*)( *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*( *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*) *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (* *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree(void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfreevoid *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree( *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree(void , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfreevoid , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree( , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree) *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)void , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree) , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)void * void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree) * void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)void  void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)  void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( * void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(  void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( *,  *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( ,  *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)( *  *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(   *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(void , void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(void  void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(void ,  *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree)(void   *);
(87.6 %, 25499 bytes)
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(   ;
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(   *)
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(   )
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(   *
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(   
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void );
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void ;
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void )
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void 
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void );
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void ;
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void )
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void 
>    *opaque;
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void *;
38c38
<   void (*bzfree)(  void *);
---
>   void (*bzfree)(  void *
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *;
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *;
>   void opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *
>   void opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *;
>    opaque;
38,39c38,39
<   void (*bzfree)(  void *);
<   void *opaque;
---
>   void (*bzfree)(  void *
>    opaque;
(87.6 %, 25498 bytes)
38c38
<   void (*bzfree)(  void );
---
>   void (*bzfree)(  void ;
38c38
<   void (*bzfree)(  void );
---
>   void (*bzfree)(  void 
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void ;
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void 
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void ;
>   void opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void 
>   void opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void ;
>    opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void 
>    opaque;
38c38
<   void (*bzfree)(  void );
---
>   void (*bzfree)(  void )
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>    *opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>   void opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>    opaque;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>   void *;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>    *;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>   void ;
38,39c38,39
<   void (*bzfree)(  void );
<   void *opaque;
---
>   void (*bzfree)(  void )
>    ;
39c39
<   void *opaque;
---
>    *opaque;
39c39
<   void *opaque;
---
>    opaque;
39c39
<   void *opaque;
---
>    *;
39c39
<   void *opaque;
---
>    ;
39c39
<   void *opaque;
---
>    *opaque
39c39
<   void *opaque;
---
>    opaque
39c39
<   void *opaque;
---
>    *
39c39
<   void *opaque;
---
>    
39c39
<   void *opaque;
---
>   void opaque;
39c39
<   void *opaque;
---
>   void ;
39c39
<   void *opaque;
---
>   void opaque
39c39
<   void *opaque;
---
>   void 
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void opaque;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void ;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void opaque
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void 
>  bz_stream;
39c39
<   void *opaque;
---
>   void *;
39c39
<   void *opaque;
---
>   void *
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
>  ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
>  ;
39c39
<   void *opaque;
---
>   void *opaque
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } bz_stream
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  bz_stream
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } 
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  
40c40
< } bz_stream;
---
>  bz_stream;
40c40
< } bz_stream;
---
>  ;
40c40
< } bz_stream;
---
>  bz_stream
40c40
< } bz_stream;
---
>  
40c40
< } bz_stream;
---
>  bz_stream;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } ;
(87.6 %, 25497 bytes)
40c40
< } bz_stream;
---
>  bz_stream;
40c40
< } bz_stream;
---
>  ;
40c40
< } bz_stream;
---
>  bz_stream
40c40
< } bz_stream;
---
>  
40c40
< } bz_stream;
---
>  bz_stream;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } ;
40c40
< } bz_stream;
---
> } 
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> #include stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> include stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> # stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
>  stdio.h>
42c42
< #include <stdio.h>
---
> include <stdio.h>
42c42
< #include <stdio.h>
---
>  <stdio.h>
42c42
< #include <stdio.h>
---
> include stdio.h>
42c42
< #include <stdio.h>
---
>  stdio.h>
42c42
< #include <stdio.h>
---
> include <.h>
42c42
< #include <stdio.h>
---
>  <.h>
42c42
< #include <stdio.h>
---
> include .h>
42c42
< #include <stdio.h>
---
>  .h>
42c42
< #include <stdio.h>
---
> # <stdio.h>
42c42
< #include <stdio.h>
---
> # stdio.h>
42c42
< #include <stdio.h>
---
> # <.h>
42c42
< #include <stdio.h>
---
> # .h>
42c42
< #include <stdio.h>
---
> # <stdioh>
42c42
< #include <stdio.h>
---
> # stdioh>
42c42
< #include <stdio.h>
---
> # <h>
42c42
< #include <stdio.h>
---
> # h>
42c42
< #include <stdio.h>
---
> #include stdio.h>
42c42
< #include <stdio.h>
---
> #include .h>
42c42
< #include <stdio.h>
---
> #include stdioh>
42c42
< #include <stdio.h>
---
> #include h>
42c42
< #include <stdio.h>
---
> #include stdio.>
42c42
< #include <stdio.h>
---
> #include .>
42c42
< #include <stdio.h>
---
> #include stdio>
42c42
< #include <stdio.h>
---
> #include >
42c42
< #include <stdio.h>
---
> #include <.h>
42c42
< #include <stdio.h>
---
> #include <h>
42c42
< #include <stdio.h>
---
> #include <.>
42c42
< #include <stdio.h>
---
> #include <>
42c42
< #include <stdio.h>
---
> #include <.h
42c42
< #include <stdio.h>
---
> #include <h
42c42
< #include <stdio.h>
---
> #include <.
42c42
< #include <stdio.h>
---
> #include <
42c42
< #include <stdio.h>
---
> #include <stdioh>
42c42
< #include <stdio.h>
---
> #include <stdio>
42c42
< #include <stdio.h>
---
> #include <stdioh
42c42
< #include <stdio.h>
---
> #include <stdio
42c42
< #include <stdio.h>
---
> #include <stdioh>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdioh
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
42c42
< #include <stdio.h>
---
> #include <stdio.
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> #define (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> define (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> # (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
>  (func) func
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
44c44
< #define BZ_API(func) func
---
> define (func) func
44c44
< #define BZ_API(func) func
---
>  (func) func
44c44
< #define BZ_API(func) func
---
> define BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
>  BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> define func) func
44c44
< #define BZ_API(func) func
---
>  func) func
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
44c44
< #define BZ_API(func) func
---
> # (func) func
44c44
< #define BZ_API(func) func
---
> # BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> # func) func
44c44
< #define BZ_API(func) func
---
> # BZ_API() func
44c44
< #define BZ_API(func) func
---
> # () func
44c44
< #define BZ_API(func) func
---
> # BZ_API) func
44c44
< #define BZ_API(func) func
---
> # ) func
44c44
< #define BZ_API(func) func
---
> #define (func) func
44c44
< #define BZ_API(func) func
---
> #define func) func
44c44
< #define BZ_API(func) func
---
> #define () func
44c44
< #define BZ_API(func) func
---
> #define ) func
44c44
< #define BZ_API(func) func
---
> #define (func func
44c44
< #define BZ_API(func) func
---
> #define func func
44c44
< #define BZ_API(func) func
---
> #define ( func
44c44
< #define BZ_API(func) func
---
> #define  func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> #define BZ_API) func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
44c44
< #define BZ_API(func) func
---
> #define BZ_API func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc) 
44c44
< #define BZ_API(func) func
---
> #define BZ_API) 
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc 
44c44
< #define BZ_API(func) func
---
> #define BZ_API 
44c44
< #define BZ_API(func) func
---
> #define BZ_API() func
44c44
< #define BZ_API(func) func
---
> #define BZ_API( func
44c44
< #define BZ_API(func) func
---
> #define BZ_API() 
44c44
< #define BZ_API(func) func
---
> #define BZ_API( 
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() func
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API( func
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() 
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API( 
> define BZ_EXTERN extern
44c44
< #define BZ_API(func) func
---
> #define BZ_API(func func
44c44
< #define BZ_API(func) func
---
> #define BZ_API(func 
(87.6 %, 25487 bytes)
45c45
< #define BZ_EXTERN extern
---
>   
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN extern
45c45
< #define BZ_EXTERN extern
---
> #  extern
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN 
45c45
< #define BZ_EXTERN extern
---
> #  
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN extern
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #  extern
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN 
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #  
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  extern
45c45
< #define BZ_EXTERN extern
---
> #define  
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45c45
< #define BZ_EXTERN extern
---
> #define BZ_EXTERN 
45c45
< #define BZ_EXTERN extern
---
> #define BZ_EXTERN 
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(87.6 %, 25481 bytes)
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  int (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(87.6 %, 25472 bytes)
47c47
<  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
<  int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(87.6 %, 25469 bytes)
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ()(bz_stream *strm, int blockSize100k,
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   )(bz_stream *strm, int blockSize100k,
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
47c47
<   BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
(87.6 %, 25463 bytes)
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   )(bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   )bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInitbz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ()(bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ((bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ()bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (bz_stream *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ()( *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   (( *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   () *strm, int blockSize100k,
47c47
<   (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>   ( *strm, int blockSize100k,
(87.6 %, 25461 bytes)
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   ( *strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>    *strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   (bz_stream strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   bz_stream strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   ( strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>    strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInitbz_stream *strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit *strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInitbz_stream strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInitbz_stream *, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit *, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInitbz_stream , int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit , int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( *strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( *, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( , int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( *strm int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( strm int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit( * int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(  int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream strm, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream , int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream strm int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream  int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream strm,  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream ,  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream strm  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream   blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream * int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *,  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *, int ,
(87.6 %, 25457 bytes)
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream * int blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream * int ,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *  ,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream * int blockSize100k
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *  blockSize100k
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream * int 
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *  
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *,  blockSize100k,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *,  ,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *,  blockSize100k
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *,  
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *,  blockSize100k,
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *,  ,
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *,  blockSize100k
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *,  
>                                           verbosity, int workFactor);
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *, int ,
47c47
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
---
>   BZ2_bzCompressInit(bz_stream *, int 
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int ,
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int ,
>                                          int , int workFactor);
(87.6 %, 25444 bytes)
47c47
<   BZ2_bzCompressInit(bz_stream *, int ,
---
>   BZ2_bzCompressInit(bz_stream *, int 
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                           verbosity, int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                          int , int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                           , int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                          int verbosity int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                           verbosity int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                          int  int workFactor);
47,48c47,48
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
>   BZ2_bzCompressInit(bz_stream *, int 
>                                            int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           verbosity, int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           , int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           verbosity int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                            int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           verbosity,  workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           ,  workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                           verbosity  workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                             workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                          int , int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                          int  int workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                          int ,  workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                          int   workFactor);
48c48
<                                          int verbosity, int workFactor);
---
>                                          int , int );
(87.6 %, 25435 bytes)
48c48
<                                          int , int workFactor);
---
>                                          int  int workFactor);
48c48
<                                          int , int workFactor);
---
>                                          int   workFactor);
48c48
<                                          int , int workFactor);
---
>                                          int  int );
48c48
<                                          int , int workFactor);
---
>                                          int   );
48c48
<                                          int , int workFactor);
---
>                                          int  int workFactor;
48c48
<                                          int , int workFactor);
---
>                                          int   workFactor;
48c48
<                                          int , int workFactor);
---
>                                          int  int ;
48c48
<                                          int , int workFactor);
---
>                                          int   ;
48c48
<                                          int , int workFactor);
---
>                                          int ,  workFactor);
48c48
<                                          int , int workFactor);
---
>                                          int ,  );
48c48
<                                          int , int workFactor);
---
>                                          int ,  workFactor;
48c48
<                                          int , int workFactor);
---
>                                          int ,  ;
48c48
<                                          int , int workFactor);
---
>                                          int ,  workFactor)
48c48
<                                          int , int workFactor);
---
>                                          int ,  )
48c48
<                                          int , int workFactor);
---
>                                          int ,  workFactor
48c48
<                                          int , int workFactor);
---
>                                          int ,  
48c48
<                                          int , int workFactor);
---
>                                          int , int );
48c48
<                                          int , int workFactor);
---
>                                          int , int ;
48c48
<                                          int , int workFactor);
---
>                                          int , int )
48c48
<                                          int , int workFactor);
---
>                                          int , int 
48c48
<                                          int , int workFactor);
---
>                                          int , int );
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
(87.6 %, 25425 bytes)
48c48
<                                          int , int );
---
>                                          int , int ;
48c48
<                                          int , int );
---
>                                          int , int 
48c48
<                                          int , int );
---
>                                          int , int ;
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int 
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int ;
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int 
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int ;
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int 
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN int (BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int (BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
> BZ_EXTERN  (BZ2_bzCompress)(bz_stream *strm, int action);
48c48
<                                          int , int );
---
>                                          int , int )
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (BZ2_bzCompress)(bz_stream *strm, int action);
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
50c50
< BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
(87.6 %, 25416 bytes)
50c50
<  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
50c50
<  int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (BZ2_bzCompress)(bz_stream *strm, int action);
(87.6 %, 25413 bytes)
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (BZ2_bzCompress)(bz_stream *strm, int action);
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompress)(bz_stream *strm, int action);
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   ()(bz_stream *strm, int action);
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   )(bz_stream *strm, int action);
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (BZ2_bzCompress(bz_stream *strm, int action);
50c50
<   BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *strm, int action);
(87.6 %, 25407 bytes)
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompress)(bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   )(bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompress)bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   )bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   BZ2_bzCompressbz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   ()(bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   ((bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   ()bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (bz_stream *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   ()( *strm, int action);
50c50
<   (BZ2_bzCompress)(bz_stream *strm, int action);
---
>   (( *strm, int action);
(87.6 %, 25405 bytes)
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   ( *strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>    *strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   (bz_stream strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   bz_stream strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   ( strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>    strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompressbz_stream *strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress *strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompressbz_stream strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompressbz_stream *, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress *, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompressbz_stream , int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress , int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( *strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( *, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( , int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( *strm int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( strm int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress( * int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(  int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream strm, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream , int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream strm int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream  int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream strm,  action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream ,  action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream strm  action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream   action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *, int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream * int action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *,  action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *  action);
50c50
<   BZ2_bzCompress(bz_stream *strm, int action);
---
>   BZ2_bzCompress(bz_stream *, int );
(87.6 %, 25401 bytes)
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream * int action);
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *  action);
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream * int );
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *  );
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream * int action;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *  action;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream * int ;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *  ;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  action);
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  );
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  action;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  ;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  action)
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  )
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  action
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *,  
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int );
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int ;
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int )
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int 
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int );
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int ;
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int action);
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
(87.6 %, 25395 bytes)
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int ;
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int 
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int ;
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int 
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int ;
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int 
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int ;
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int 
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN int (BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int (BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
> BZ_EXTERN  (BZ2_bzCompressEnd)(bz_stream *strm);
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *, int )
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (BZ2_bzCompressEnd)(bz_stream *strm);
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
52c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
(87.6 %, 25386 bytes)
52c52
<  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
52c52
<  int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (BZ2_bzCompressEnd)(bz_stream *strm);
(87.6 %, 25383 bytes)
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (BZ2_bzCompressEnd)(bz_stream *strm);
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEnd)(bz_stream *strm);
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ()(bz_stream *strm);
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   )(bz_stream *strm);
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (BZ2_bzCompressEnd(bz_stream *strm);
52c52
<   BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEnd(bz_stream *strm);
(87.6 %, 25377 bytes)
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEnd)(bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   )(bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEnd(bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEnd)bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   )bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   BZ2_bzCompressEndbz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ()(bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ((bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ()bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (bz_stream *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ()( *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   (( *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   () *strm);
52c52
<   (BZ2_bzCompressEnd)(bz_stream *strm);
---
>   ( *strm);
(87.6 %, 25375 bytes)
52c52
<   BZ2_bzCompressEnd(bz_stream *strm);
---
>   ( *strm);
52c52
<   BZ2_bzCompressEnd(bz_stream *strm);
---
>    *strm);
52c52
<   BZ2_bzCompressEnd(bz_stream *strm);
---
>   (bz_stream strm);
52c52
<   BZ2_bzCompressEnd(bz_stream *strm);
---
>   bz_stream strm);
52c52
<   BZ2_bzCompressEnd(bz_stream *strm);
---
>   ( strm);
(87.6 %, 25349 bytes)
52c52
<   ( *strm);
---
>    *);
52c52
<   ( *strm);
---
>    );
52c52
<   ( *strm);
---
>    *strm;
52c52
<   ( *strm);
---
>    strm;
(87.6 %, 25347 bytes)
52c52
<    *strm;
---
>    strm;
54c54
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
52c52
<    *strm;
---
>    ;
54c54
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
(87.6 %, 25337 bytes)
52c52
<    strm;
---
>    ;
54c54
<  int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
52c52
<    strm;
---
>    
54c54
<  int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
(87.6 %, 25327 bytes)
52c52
<    ;
---
>    
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int ()(bz_stream *strm, int verbosity,
52c52
<    ;
---
>    
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ()(bz_stream *strm, int verbosity,
52c52
<    ;
---
>    
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>  int )(bz_stream *strm, int verbosity,
52c52
<    ;
---
>    
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   )(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ()(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   )(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
54c54
<  int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
(87.6 %, 25324 bytes)
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   )(bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit)bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   )bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInitbz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ()(bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ((bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ()bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (bz_stream *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ()( *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (( *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   () *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   ( *strm, int verbosity,
54c54
<   (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
---
>   (BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
(87.6 %, 25322 bytes)
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   ( *strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>    *strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   (bz_stream strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   bz_stream strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   ( strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>    strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInitbz_stream *strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit *strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInitbz_stream strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInitbz_stream *, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit *, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInitbz_stream , int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit , int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( *strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( *, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( , int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( *strm int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( strm int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit( * int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(  int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream strm, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream , int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream strm int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream  int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream strm,  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream ,  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream strm  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream   verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *, int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream * int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *,  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *, int ,
(87.6 %, 25318 bytes)
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream * int verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream * int ,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *  ,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream * int verbosity
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *  verbosity
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream * int 
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *  
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *,  verbosity,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *,  ,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *,  verbosity
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *,  
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *,  verbosity,
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *,  ,
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *,  verbosity
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *,  
>                                             small);
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *, int ,
54c54
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
---
>   BZ2_bzDecompressInit(bz_stream *, int 
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int ,
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int verbosity,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int ,
>                                            int );
(87.7 %, 25309 bytes)
54c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
---
>   BZ2_bzDecompressInit(bz_stream *, int 
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                             small);
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                            int );
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                             );
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                            int small;
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                             small;
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                            int ;
54,55c54,55
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int small);
---
>   BZ2_bzDecompressInit(bz_stream *, int 
>                                             ;
55c55
<                                            int small);
---
>                                             small);
55c55
<                                            int small);
---
>                                             );
55c55
<                                            int small);
---
>                                             small;
55c55
<                                            int small);
---
>                                             ;
55c55
<                                            int small);
---
>                                             small)
55c55
<                                            int small);
---
>                                             )
55c55
<                                            int small);
---
>                                             small
55c55
<                                            int small);
---
>                                             
55c55
<                                            int small);
---
>                                            int );
55c55
<                                            int small);
---
>                                            int ;
55c55
<                                            int small);
---
>                                            int )
55c55
<                                            int small);
---
>                                            int 
55c55
<                                            int small);
---
>                                            int );
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
(87.7 %, 25304 bytes)
55c55
<                                            int );
---
>                                            int ;
55c55
<                                            int );
---
>                                            int 
55c55
<                                            int );
---
>                                            int ;
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int 
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int ;
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int 
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int ;
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int 
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN int (BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int (BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
> BZ_EXTERN  (BZ2_bzDecompress)(bz_stream *strm);
55c55
<                                            int );
---
>                                            int )
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   (BZ2_bzDecompress)(bz_stream *strm);
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
57c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>  int (BZ2_bzDecompress)(bz_stream *strm);
(87.7 %, 25295 bytes)
57c57
<  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
57c57
<  int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   (BZ2_bzDecompress)(bz_stream *strm);
(87.7 %, 25292 bytes)
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   (BZ2_bzDecompress)(bz_stream *strm);
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompress)(bz_stream *strm);
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   ()(bz_stream *strm);
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   )(bz_stream *strm);
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   (BZ2_bzDecompress(bz_stream *strm);
57c57
<   BZ_API(BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompress(bz_stream *strm);
(87.7 %, 25286 bytes)
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompress)(bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   )(bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompress(bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   (bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompress)bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   )bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   BZ2_bzDecompressbz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   ()(bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   ((bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   ()bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   (bz_stream *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   ()( *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   (( *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   () *strm);
57c57
<   (BZ2_bzDecompress)(bz_stream *strm);
---
>   ( *strm);
(87.7 %, 25284 bytes)
57c57
<   BZ2_bzDecompress(bz_stream *strm);
---
>   ( *strm);
57c57
<   BZ2_bzDecompress(bz_stream *strm);
---
>    *strm);
57c57
<   BZ2_bzDecompress(bz_stream *strm);
---
>   (bz_stream strm);
57c57
<   BZ2_bzDecompress(bz_stream *strm);
---
>   bz_stream strm);
57c57
<   BZ2_bzDecompress(bz_stream *strm);
---
>   ( strm);
(87.7 %, 25259 bytes)
57c57
<   ( *strm);
---
>    *);
57c57
<   ( *strm);
---
>    );
57c57
<   ( *strm);
---
>    *strm;
57c57
<   ( *strm);
---
>    strm;
(87.7 %, 25257 bytes)
57c57
<    *strm;
---
>    strm;
59c59
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
57c57
<    *strm;
---
>    ;
59c59
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
57c57
<    *strm;
---
>    strm
59c59
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
(87.7 %, 25247 bytes)
57c57
<    strm;
---
>    ;
59c59
<  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int (BZ2_bzDecompressEnd)(bz_stream *strm);
57c57
<    strm;
---
>    
59c59
<  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int (BZ2_bzDecompressEnd)(bz_stream *strm);
57c57
<    strm;
---
>    ;
59c59
<  int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (BZ2_bzDecompressEnd)(bz_stream *strm);
(87.7 %, 25237 bytes)
57c57
<    ;
---
>    
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int ()(bz_stream *strm);
57c57
<    ;
---
>    
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ()(bz_stream *strm);
57c57
<    ;
---
>    
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>  int )(bz_stream *strm);
57c57
<    ;
---
>    
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   )(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (BZ2_bzDecompressEnd)(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEnd)(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ()(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   )(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (BZ2_bzDecompressEnd(bz_stream *strm);
59c59
<  int (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEnd(bz_stream *strm);
(87.7 %, 25234 bytes)
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEnd)(bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   )(bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEnd(bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEnd)bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   )bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   BZ2_bzDecompressEndbz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ()(bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ((bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ()bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (bz_stream *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ()( *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   (( *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   () *strm);
59c59
<   (BZ2_bzDecompressEnd)(bz_stream *strm);
---
>   ( *strm);
(87.7 %, 25232 bytes)
59c59
<   BZ2_bzDecompressEnd(bz_stream *strm);
---
>   ( *strm);
59c59
<   BZ2_bzDecompressEnd(bz_stream *strm);
---
>    *strm);
59c59
<   BZ2_bzDecompressEnd(bz_stream *strm);
---
>   (bz_stream strm);
59c59
<   BZ2_bzDecompressEnd(bz_stream *strm);
---
>   bz_stream strm);
59c59
<   BZ2_bzDecompressEnd(bz_stream *strm);
---
>   ( strm);
(87.7 %, 25204 bytes)
59c59
<   ( *strm);
---
>    *);
59c59
<   ( *strm);
---
>    );
59c59
<   ( *strm);
---
>    *strm;
59c59
<   ( *strm);
---
>    strm;
(87.7 %, 25202 bytes)
59c59
<    *strm;
---
>    strm;
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    ;
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *;
59c59
<    *strm;
---
>    *
59c59
<    *strm;
---
>    *;
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *;
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *;
61c61
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *
61c61
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *strm
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> define  5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
> #  5000
59c59
<    *strm;
---
>    *strm
61c61
< #define BZ_MAX_UNUSED 5000
---
>   5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
61c61
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> define  5000
61c61
< #define BZ_MAX_UNUSED 5000
---
>   5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 
61c61
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 
61c61
< #define BZ_MAX_UNUSED 5000
---
> define  
61c61
< #define BZ_MAX_UNUSED 5000
---
>   
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> #  5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 
61c61
< #define BZ_MAX_UNUSED 5000
---
> #  
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #  5000
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #  
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
63c63
< typedef void BZFILE;
---
> typedef  BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  
63c63
< typedef void BZFILE;
---
> typedef  BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
63c63
< typedef void BZFILE;
---
>   BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define  
63c63
< typedef void BZFILE;
---
>   BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
> typedef  BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
>   BZFILE;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
> typedef void ;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
>  void ;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
> typedef  ;
61c61
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
63c63
< typedef void BZFILE;
---
>   ;
63c63
< typedef void BZFILE;
---
>  void BZFILE;
63c63
< typedef void BZFILE;
---
>   BZFILE;
63c63
< typedef void BZFILE;
---
>  void ;
63c63
< typedef void BZFILE;
---
>   ;
63c63
< typedef void BZFILE;
---
>  void BZFILE
63c63
< typedef void BZFILE;
---
>   BZFILE
63c63
< typedef void BZFILE;
---
>  void 
63c63
< typedef void BZFILE;
---
>   
63c63
< typedef void BZFILE;
---
> typedef  BZFILE;
63c63
< typedef void BZFILE;
---
> typedef  ;
63c63
< typedef void BZFILE;
---
> typedef  BZFILE
63c63
< typedef void BZFILE;
---
> typedef  
63c63
< typedef void BZFILE;
---
> typedef  BZFILE;
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
(87.7 %, 25198 bytes)
63c63
< typedef  BZFILE;
---
> typedef  ;
63c63
< typedef  BZFILE;
---
> typedef  
63c63
< typedef  BZFILE;
---
> typedef  ;
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  ;
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  ;
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
63c63
< typedef  BZFILE;
---
> typedef  BZFILE
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
(87.7 %, 25189 bytes)
65c65
<  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<  BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
(87.7 %, 25183 bytes)
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   (BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_API()(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   ()(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   BZ_API)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   )(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *()(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *)(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
65c65
<   *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
(87.7 %, 25177 bytes)
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *)(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen)int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *)int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *()(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *((int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *()int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(int *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *()( *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *(( *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *() *bzerror, FILE *f, int verbosity,
65c65
<   *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
---
>   *( *bzerror, FILE *f, int verbosity,
(87.7 %, 25175 bytes)
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *( *bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   * *bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *(int bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *int bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *( bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   * bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen *bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpenint bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpenint *, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen *, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpenint , FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen , FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( *bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( *, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( , FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( *bzerror FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( bzerror FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen( * FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(  FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int bzerror, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int , FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int bzerror FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int  FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int bzerror,  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int ,  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int bzerror  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int   *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror FILE f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror  f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *bzerror FILE *, int verbosity,
(87.7 %, 25168 bytes)
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE *, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  *, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int * FILE , int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *  , int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  *f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  *, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  , int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  *f int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  f int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,  * int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *,   int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE f, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE , int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE f int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE  int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE f,  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE ,  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE f  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE   verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE * int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *,  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *, int ,
(87.7 %, 25167 bytes)
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE * int verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE * int ,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *  ,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE * int verbosity
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *  verbosity
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE * int 
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *  
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *,  verbosity,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *,  ,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *,  verbosity
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *,  
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *,  verbosity,
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *,  ,
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *,  verbosity
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *,  
>                                           small, void *unused, int nUnused);
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *, int ,
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int ,
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int ,
>                                          int , void *unused, int nUnused);
(87.7 %, 25158 bytes)
65c65
<   *BZ2_bzReadOpen(int *, FILE *, int ,
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                           small, void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                          int , void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                           , void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                          int small void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                           small void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                          int  void *unused, int nUnused);
65,66c65,66
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int small, void *unused, int nUnused);
---
>   *BZ2_bzReadOpen(int *, FILE *, int 
>                                            void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           small, void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           , void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           small void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                            void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           small,  *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           ,  *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                           small  *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                             *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int , void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int  void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int ,  *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int   *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int , void unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int  void unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int ,  unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int   unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small void *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small  *unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small void unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small  unused, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small void *, int nUnused);
66c66
<                                          int small, void *unused, int nUnused);
---
>                                          int small  *, int nUnused);
(87.7 %, 25153 bytes)
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int  void *unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int   *unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int  void unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int   unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int  void *, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int   *, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int  void , int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int   , int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  *unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  *, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  , int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  *unused int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  unused int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,  * int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int ,   int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void unused, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void , int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void unused int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void  int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void unused,  nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void ,  nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void unused  nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void   nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void *, int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void * int nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void *,  nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void *  nUnused);
66c66
<                                          int , void *unused, int nUnused);
---
>                                          int , void *, int );
(87.7 %, 25147 bytes)
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void * int nUnused);
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *  nUnused);
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void * int );
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *  );
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void * int nUnused;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *  nUnused;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void * int ;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *  ;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  nUnused);
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  );
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  nUnused;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  ;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  nUnused)
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  )
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  nUnused
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *,  
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *, int );
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *, int ;
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *, int )
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *, int 
66c66
<                                          int , void *, int nUnused);
---
>                                          int , void *, int );
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
(87.7 %, 25140 bytes)
66c66
<                                          int , void *, int );
---
>                                          int , void *, int ;
66c66
<                                          int , void *, int );
---
>                                          int , void *, int 
66c66
<                                          int , void *, int );
---
>                                          int , void *, int ;
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int 
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int ;
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int 
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int ;
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int 
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
> BZ_EXTERN void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
> BZ_EXTERN  (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
66c66
<                                          int , void *, int );
---
>                                          int , void *, int )
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
< BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
(87.7 %, 25131 bytes)
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_APIBZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API()(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   ()(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   BZ_API)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>   )(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void ()(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void )(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (BZ2_bzReadClose(int *bzerror, BZFILE *b);
68c68
<  void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
(87.7 %, 25125 bytes)
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose)(int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void )(int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose)int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void )int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadCloseint *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void ()(int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void ((int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void ()int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (int *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void ()( *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void (( *bzerror, BZFILE *b);
68c68
<  void (BZ2_bzReadClose)(int *bzerror, BZFILE *b);
---
>  void () *bzerror, BZFILE *b);
(87.7 %, 25123 bytes)
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void ( *bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void  *bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void (int bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void int bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void ( bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void  bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadCloseint *bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose *bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadCloseint bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadCloseint *, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose *, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadCloseint , BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose , BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( *bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( *, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( , BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( *bzerror BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( bzerror BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose( * BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(  BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int bzerror, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int , BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int bzerror BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int  BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int bzerror,  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int ,  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int bzerror  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int   *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *bzerror BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *bzerror  *b);
68c68
<  void BZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>  void BZ2_bzReadClose(int *bzerror BZFILE b);
(87.7 %, 25116 bytes)
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE *b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  *b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE *);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  *);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int * BZFILE );
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *  );
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  *b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  *);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  );
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  *b;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  b;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  *;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *,  ;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE b);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE );
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE b;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE ;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE b)
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE )
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE b
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE 
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *);
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *
68c68
<  void BZ2_bzReadClose(int *, BZFILE *b);
---
>  void BZ2_bzReadClose(int *, BZFILE *);
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
(87.7 %, 25115 bytes)
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *;
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *;
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *;
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN  (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int *, BZFILE *)
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
(87.7 %, 25106 bytes)
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API()(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   ()(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   BZ_API)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>   )(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ()(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void )(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
70c70
<  void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
(87.8 %, 25100 bytes)
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void )(int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused)int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void )int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ()(int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ((int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ()int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (int *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ()( *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void (( *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void () *bzerror, BZFILE *b,
70c70
<  void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>  void ( *bzerror, BZFILE *b,
(87.8 %, 25098 bytes)
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void ( *bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void  *bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void (int bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void int bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void ( bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void  bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused *bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnusedint bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnusedint *, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused *, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnusedint , BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused , BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( *bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( *, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( , BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( *bzerror BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( bzerror BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused( * BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(  BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int bzerror, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int , BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int bzerror BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int  BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int bzerror,  *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int ,  *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int bzerror  *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int   *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *bzerror BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *bzerror  *b,
(87.8 %, 25091 bytes)
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE *b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  *b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE *,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  *,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int * BZFILE ,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *  ,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  *b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  *,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  ,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  *b
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  b
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  *
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *,  
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE b,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE ,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE b
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE 
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE b,
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE ,
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE b
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE 
>                                             **unused, int *nUnused);
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *,
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *,
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *,
>                                            void *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *,
>                                             *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             *unused, int *nUnused);
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b
>                                            void *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b
>                                             *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *b,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *b
>                                            void *unused, int *nUnused);
(87.8 %, 25090 bytes)
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             **unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             *unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void unused, int *nUnused);
70,71c70,71
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **unused, int *nUnused);
---
>  void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             **unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             *unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             *unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             **, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             *, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             *, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                             , int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void , int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void unused int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void * int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void  int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void * int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused,  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *,  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *unused  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void *  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **, int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void ** int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **,  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **, int nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void ** int nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **,  nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **  nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **unused int *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **unused  *nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **unused int nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **unused  nUnused);
71c71
<                                            void **unused, int *nUnused);
---
>                                            void **unused int *);
(87.8 %, 25084 bytes)
71c71
<                                            void **, int *nUnused);
---
>                                            void ** int *nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void **  *nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void ** int nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void **  nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void ** int *);
71c71
<                                            void **, int *nUnused);
---
>                                            void **  *);
71c71
<                                            void **, int *nUnused);
---
>                                            void ** int );
71c71
<                                            void **, int *nUnused);
---
>                                            void **  );
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  *nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  *);
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  );
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  *nUnused;
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  nUnused;
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  *;
71c71
<                                            void **, int *nUnused);
---
>                                            void **,  ;
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int nUnused);
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int );
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int nUnused;
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int ;
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int nUnused)
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int )
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int nUnused
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int 
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int *);
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int *;
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int *)
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int *
71c71
<                                            void **, int *nUnused);
---
>                                            void **, int *);
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 25077 bytes)
71c71
<                                            void **, int *);
---
>                                            void **, int *;
71c71
<                                            void **, int *);
---
>                                            void **, int *
71c71
<                                            void **, int *);
---
>                                            void **, int *;
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *;
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *;
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
71c71
<                                            void **, int *);
---
>                                            void **, int *)
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
< BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 25068 bytes)
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_APIBZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API()(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<  int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   )(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 25065 bytes)
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   )(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 25059 bytes)
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   )(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead)int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   )int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()(int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ((int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (int *bzerror, BZFILE *b, void *buf, int len);
73c73
<   (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()( *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 25057 bytes)
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ( *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>    *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (int bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   int bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ( bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>    bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzReadint bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzReadint *, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead *, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzReadint , BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead , BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( *bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( *, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( , BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( *bzerror BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( bzerror BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead( * BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(  BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int bzerror, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int , BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int bzerror BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int  BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int bzerror,  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int ,  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int bzerror  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int   *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE b, void *buf, int len);
73c73
<   BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  b, void *buf, int len);
(87.8 %, 25050 bytes)
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *  b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE *, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *  *, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int * BZFILE , void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *  , void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  *b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  *, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  , void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  *b void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  b void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,  * void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *,   void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE b, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE , void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE b void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE  void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE b,  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE ,  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE b  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE   *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b void buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b  buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *b, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *b void *, int len);
(87.8 %, 25049 bytes)
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void *, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  *, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE * void , int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *  , int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  *buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  *, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  , int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  *buf int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  buf int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,  * int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *,   int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void buf, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void , int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void buf int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void  int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void buf,  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void ,  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void buf  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void   len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void * int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *buf, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int );
(87.8 %, 25046 bytes)
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void * int len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void * int );
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *  );
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void * int len;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *  len;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void * int ;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *  ;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  len);
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  );
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  len;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  ;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  len)
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  )
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  len
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *,  
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int );
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int ;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int 
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int len);
---
>   BZ2_bzRead(int *, BZFILE *, void *, int );
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(87.8 %, 25043 bytes)
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int ;
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int 
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int ;
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int 
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int ;
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int 
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int ;
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int 
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
73c73
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *, int )
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>  BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(87.8 %, 25034 bytes)
75c75
<  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<  BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(87.8 %, 25028 bytes)
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   (BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_API()(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   ()(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   BZ_API)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   )(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *()(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *)(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(BZ2_bzWriteOpen(int *bzerror, FILE *f,
75c75
<   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
(87.8 %, 25022 bytes)
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen)(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *)(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen)int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *)int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpenint *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *()(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *((int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *()int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(int *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *()( *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *(( *bzerror, FILE *f,
75c75
<   *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>   *() *bzerror, FILE *f,
(87.8 %, 25020 bytes)
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *( *bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   * *bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *(int bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *int bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *( bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   * bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpenint *bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen *bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpenint bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpenint *, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen *, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpenint , FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen , FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( *bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( *, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( , FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( *bzerror FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( bzerror FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen( * FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(  FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int bzerror, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int , FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int bzerror FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int  FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int bzerror,  *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int ,  *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int bzerror  *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int   *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *bzerror FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ2_bzWriteOpen(int *bzerror  *f,
(87.8 %, 25013 bytes)
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE *f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  *f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE *,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  *,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int * FILE ,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *  ,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  *f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  *,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  ,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  *f
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  f
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  *
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *,  
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE f,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE ,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE f
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE 
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE f,
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE ,
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE f
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE 
>                                            blockSize100k, int verbosity,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE *,
75c75
<   *BZ2_bzWriteOpen(int *, FILE *f,
---
>   *BZ2_bzWriteOpen(int *, FILE *
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *,
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *,
>                                           int , int verbosity,
(87.8 %, 25012 bytes)
75c75
<   *BZ2_bzWriteOpen(int *, FILE *,
---
>   *BZ2_bzWriteOpen(int *, FILE *
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                            blockSize100k, int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                           int , int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                            , int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                           int blockSize100k int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                            blockSize100k int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                           int  int verbosity,
75,76c75,76
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
>   *BZ2_bzWriteOpen(int *, FILE *
>                                             int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            blockSize100k, int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            , int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            blockSize100k int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                             int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            blockSize100k,  verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            ,  verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                            blockSize100k  verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                              verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                           int , int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                           int  int verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                           int ,  verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                           int   verbosity,
76c76
<                                           int blockSize100k, int verbosity,
---
>                                           int , int ,
(87.8 %, 24999 bytes)
76c76
<                                           int , int verbosity,
---
>                                           int  int verbosity,
76c76
<                                           int , int verbosity,
---
>                                           int   verbosity,
76c76
<                                           int , int verbosity,
---
>                                           int  int ,
76c76
<                                           int , int verbosity,
---
>                                           int   ,
76c76
<                                           int , int verbosity,
---
>                                           int  int verbosity
76c76
<                                           int , int verbosity,
---
>                                           int   verbosity
76c76
<                                           int , int verbosity,
---
>                                           int  int 
76c76
<                                           int , int verbosity,
---
>                                           int   
76c76
<                                           int , int verbosity,
---
>                                           int ,  verbosity,
76c76
<                                           int , int verbosity,
---
>                                           int ,  ,
76c76
<                                           int , int verbosity,
---
>                                           int ,  verbosity
76c76
<                                           int , int verbosity,
---
>                                           int ,  
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int ,  verbosity,
>                                            workFactor);
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int ,  ,
>                                            workFactor);
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int ,  verbosity
>                                            workFactor);
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int ,  
>                                            workFactor);
76c76
<                                           int , int verbosity,
---
>                                           int , int ,
76c76
<                                           int , int verbosity,
---
>                                           int , int 
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int , int ,
>                                            workFactor);
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int , int 
>                                            workFactor);
76,77c76,77
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int , int ,
>                                           int );
(87.8 %, 24990 bytes)
76c76
<                                           int , int ,
---
>                                           int , int 
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                            workFactor);
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                           int );
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                            );
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                           int workFactor;
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                            workFactor;
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                           int ;
76,77c76,77
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int 
>                                            ;
77c77
<                                           int workFactor);
---
>                                            workFactor);
77c77
<                                           int workFactor);
---
>                                            );
77c77
<                                           int workFactor);
---
>                                            workFactor;
77c77
<                                           int workFactor);
---
>                                            ;
77c77
<                                           int workFactor);
---
>                                            workFactor)
77c77
<                                           int workFactor);
---
>                                            )
77c77
<                                           int workFactor);
---
>                                            workFactor
77c77
<                                           int workFactor);
---
>                                            
77c77
<                                           int workFactor);
---
>                                           int );
77c77
<                                           int workFactor);
---
>                                           int ;
77c77
<                                           int workFactor);
---
>                                           int )
77c77
<                                           int workFactor);
---
>                                           int 
77c77
<                                           int workFactor);
---
>                                           int );
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 24980 bytes)
77c77
<                                           int );
---
>                                           int ;
77c77
<                                           int );
---
>                                           int 
77c77
<                                           int );
---
>                                           int ;
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int 
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int ;
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int 
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int ;
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int 
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
77c77
<                                           int );
---
>                                           int )
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 24971 bytes)
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API()(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   ()(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   BZ_API)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>   )(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ()(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void )(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 24965 bytes)
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void )(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void )int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWriteint *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ()(int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ((int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ()int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (int *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ()( *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (( *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void () *bzerror, BZFILE *b, void *buf, int len);
(87.8 %, 24963 bytes)
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ( *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void  *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void (int bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void int bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void ( bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void  bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWriteint *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWriteint bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWriteint *, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite *, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWriteint , BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite , BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( *bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( *, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( , BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( *bzerror BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( bzerror BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite( * BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(  BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int bzerror, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int , BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int bzerror BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int  BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int bzerror,  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int ,  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int bzerror  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int   *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror BZFILE b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *bzerror  b, void *buf, int len);
(87.8 %, 24956 bytes)
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE *, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  *, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int * BZFILE , void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *  , void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  *b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  *, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  , void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  *b void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  b void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,  * void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *,   void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE b, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE , void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE b void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE  void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE b,  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE ,  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE b  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE   *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b void buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b  buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *b void *, int len);
(87.8 %, 24955 bytes)
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void *, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  *, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE * void , int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *  , int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  *buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  *, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  , int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  *buf int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  buf int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,  * int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *,   int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void buf, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void , int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void buf int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void  int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void buf,  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void ,  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void buf  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void   len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void * int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *buf, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int );
(87.8 %, 24952 bytes)
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void * int len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void * int );
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *  );
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void * int len;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *  len;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void * int ;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *  ;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  len);
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  );
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  len;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  ;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  len)
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  )
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  len
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *,  
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int );
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int ;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int 
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int len);
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int );
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
(87.8 %, 24949 bytes)
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int ;
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int 
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int ;
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int 
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int ;
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int 
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int ;
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int 
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
79c79
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *, int )
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
(87.8 %, 24940 bytes)
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API()(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   ()(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>   )(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void )(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
(87.8 %, 24934 bytes)
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void )(int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void )int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()(int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void ((int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (int *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()( *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void (( *bzerror, BZFILE *b, int abandon,
81c81
<  void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  void () *bzerror, BZFILE *b, int abandon,
(87.8 %, 24932 bytes)
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void ( *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void  *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void (int bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void int bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void ( bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void  bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteCloseint bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteCloseint *, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose *, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteCloseint , BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose , BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( *bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( *, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( , BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( *bzerror BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( bzerror BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose( * BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(  BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int bzerror, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int , BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int bzerror BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int  BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int bzerror,  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int ,  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int bzerror  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int   *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror BZFILE b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror  b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *bzerror BZFILE *, int abandon,
(87.8 %, 24925 bytes)
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE *, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  *, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int * BZFILE , int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *  , int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  *b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  *, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  , int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  *b int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  b int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,  * int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *,   int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE b, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE , int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE b int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE  int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE b,  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE ,  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE b  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE   abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE * int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int ,
(87.8 %, 24924 bytes)
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE * int abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE * int ,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *  ,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE * int abandon
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *  abandon
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE * int 
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *  
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  abandon,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  ,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  abandon
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  abandon,
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  abandon
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *,  
>                                          int *nbytes_in,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int ,
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int ,
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int ,
>                                         unsigned  *nbytes_in,
(87.8 %, 24917 bytes)
81c81
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          int *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned  *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                           *nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned int nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          int nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned  nbytes_in,
81,82c81,82
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
>  void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                           nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                          int *nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                           *nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                          int nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                           nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                          int *,
82c82
<                                         unsigned int *nbytes_in,
---
>                                           *,
82c82
<                                         unsigned int *nbytes_in,
---
>                                          int ,
82c82
<                                         unsigned int *nbytes_in,
---
>                                           ,
82c82
<                                         unsigned int *nbytes_in,
---
>                                         unsigned  *nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                         unsigned  nbytes_in,
82c82
<                                         unsigned int *nbytes_in,
---
>                                         unsigned  *,
(87.8 %, 24914 bytes)
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  nbytes_in,
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  ,
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  nbytes_in
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  nbytes_in,
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  ,
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  nbytes_in
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  
>                                          int *nbytes_out);
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  *,
82c82
<                                         unsigned  *nbytes_in,
---
>                                         unsigned  *
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *,
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *,
>                                         unsigned  *nbytes_out);
(87.8 %, 24905 bytes)
82c82
<                                         unsigned  *,
---
>                                         unsigned  *
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                          int *nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                         unsigned  *nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                           *nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                         unsigned int nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                          int nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                         unsigned  nbytes_out);
82,83c82,83
<                                         unsigned  *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *
>                                           nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                          int *nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                           *nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                          int nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                           nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                          int *);
83c83
<                                         unsigned int *nbytes_out);
---
>                                           *);
83c83
<                                         unsigned int *nbytes_out);
---
>                                          int );
83c83
<                                         unsigned int *nbytes_out);
---
>                                           );
83c83
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  nbytes_out);
83c83
<                                         unsigned int *nbytes_out);
---
>                                         unsigned  *);
(87.8 %, 24902 bytes)
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  nbytes_out);
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  );
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  nbytes_out;
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  ;
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  nbytes_out)
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  )
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  nbytes_out
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  *);
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  *;
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  *)
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  *
83c83
<                                         unsigned  *nbytes_out);
---
>                                         unsigned  *);
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(87.9 %, 24892 bytes)
83c83
<                                         unsigned  *);
---
>                                         unsigned  *;
83c83
<                                         unsigned  *);
---
>                                         unsigned  *
83c83
<                                         unsigned  *);
---
>                                         unsigned  *;
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *;
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *;
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN  (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
83c83
<                                         unsigned  *);
---
>                                         unsigned  *)
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(87.9 %, 24883 bytes)
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_APIBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API()(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ()(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   )(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void )(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
(87.9 %, 24877 bytes)
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void )(int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void )int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()(int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ((int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (int *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ()( *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void (( *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void () *bzerror, BZFILE *b, int abandon,
85c85
<  void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void ( *bzerror, BZFILE *b, int abandon,
(87.9 %, 24875 bytes)
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void ( *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void  *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void (int bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void int bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void ( bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void  bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64 *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64int bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64 bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64int *, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64 *, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64int , BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64 , BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( *bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( *, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( , BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( *bzerror BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( bzerror BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64( * BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(  BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int bzerror, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int , BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int bzerror BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int  BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int bzerror,  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int ,  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int bzerror  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int   *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror BZFILE b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror  b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *bzerror BZFILE *, int abandon,
(87.9 %, 24868 bytes)
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE *, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  *, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int * BZFILE , int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *  , int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  *b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  *, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  , int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  *b int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  b int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,  * int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *,   int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE b, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE , int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE b int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE  int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE b,  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE ,  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE b  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE   abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE * int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
(87.9 %, 24867 bytes)
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE * int abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE * int ,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *  ,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE * int abandon
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *  abandon
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE * int 
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *  
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  abandon,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  ,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  abandon
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  abandon,
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  abandon
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                            int *nbytes_in_lo32,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
>                                           unsigned  *nbytes_in_lo32,
(87.9 %, 24860 bytes)
85c85
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            int *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned  *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                             *nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned int nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            int nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned  nbytes_in_lo32,
85,86c85,86
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                             nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                            int *nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                             *nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                            int nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                             nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                            int *,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                             *,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                            int ,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                             ,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned  *nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned  nbytes_in_lo32,
86c86
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned  *,
(87.9 %, 24857 bytes)
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  nbytes_in_lo32,
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  ,
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  nbytes_in_lo32
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_lo32,
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  ,
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_lo32
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  
>                                            int *nbytes_in_hi32,
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  *,
86c86
<                                           unsigned  *nbytes_in_lo32,
---
>                                           unsigned  *
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *,
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *,
>                                           unsigned  *nbytes_in_hi32,
(87.9 %, 24843 bytes)
86c86
<                                           unsigned  *,
---
>                                           unsigned  *
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                            int *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                           unsigned  *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                             *nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                           unsigned int nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                            int nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                           unsigned  nbytes_in_hi32,
86,87c86,87
<                                           unsigned  *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *
>                                             nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                            int *nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                             *nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                            int nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                             nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                            int *,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                             *,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                            int ,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                             ,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_hi32,
87c87
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *,
(87.9 %, 24840 bytes)
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_hi32,
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  ,
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_hi32
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  nbytes_in_hi32,
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  ,
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  nbytes_in_hi32
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  
>                                            int *nbytes_out_lo32,
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  *,
87c87
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  *
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *,
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *,
>                                           unsigned  *nbytes_out_lo32,
(87.9 %, 24826 bytes)
87c87
<                                           unsigned  *,
---
>                                           unsigned  *
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                            int *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                           unsigned  *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                             *nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                           unsigned int nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                            int nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                           unsigned  nbytes_out_lo32,
87,88c87,88
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *
>                                             nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                            int *nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                             *nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                            int nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                             nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                            int *,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                             *,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                            int ,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                             ,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  nbytes_out_lo32,
88c88
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  *,
(87.9 %, 24823 bytes)
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  nbytes_out_lo32,
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  ,
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  nbytes_out_lo32
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_lo32,
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  ,
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_lo32
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  
>                                            int *nbytes_out_hi32);
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  *,
88c88
<                                           unsigned  *nbytes_out_lo32,
---
>                                           unsigned  *
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *,
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *,
>                                           unsigned  *nbytes_out_hi32);
(87.9 %, 24808 bytes)
88c88
<                                           unsigned  *,
---
>                                           unsigned  *
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                            int *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                           unsigned  *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                             *nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                           unsigned int nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                            int nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                           unsigned  nbytes_out_hi32);
88,89c88,89
<                                           unsigned  *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *
>                                             nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                            int *nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                             *nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                            int nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                             nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                            int *);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                             *);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                            int );
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                             );
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_hi32);
89c89
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned  *);
(87.9 %, 24805 bytes)
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_hi32);
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  );
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_hi32;
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  ;
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_hi32)
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  )
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  nbytes_out_hi32
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  *);
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  *;
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  *)
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  *
89c89
<                                           unsigned  *nbytes_out_hi32);
---
>                                           unsigned  *);
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int BZ_API(BZ2_bzBuffToBuffCompress)(
(87.9 %, 24790 bytes)
89c89
<                                           unsigned  *);
---
>                                           unsigned  *;
89c89
<                                           unsigned  *);
---
>                                           unsigned  *
89c89
<                                           unsigned  *);
---
>                                           unsigned  *;
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *;
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *;
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ_API(BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN int (BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int (BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN  (BZ2_bzBuffToBuffCompress)(
89c89
<                                           unsigned  *);
---
>                                           unsigned  *)
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   (BZ2_bzBuffToBuffCompress)(
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int BZ_API(BZ2_bzBuffToBuffCompress)(
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ_API(BZ2_bzBuffToBuffCompress)(
91c91
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>  int (BZ2_bzBuffToBuffCompress)(
(87.9 %, 24781 bytes)
91c91
<  int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ_API(BZ2_bzBuffToBuffCompress)(
91c91
<  int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   (BZ2_bzBuffToBuffCompress)(
(87.9 %, 24778 bytes)
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   (BZ2_bzBuffToBuffCompress)(
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress)(
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   ()(
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   )(
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   (BZ2_bzBuffToBuffCompress(
91c91
<   BZ_API(BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress(
(87.9 %, 24772 bytes)
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress)(
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   )(
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress(
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   (
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress)
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   )
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   BZ2_bzBuffToBuffCompress
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   ()(
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   ((
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   ()
91c91
<   (BZ2_bzBuffToBuffCompress)(
---
>   (
91,92c91,92
<   (BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   ()(
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   (BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   ((
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   (BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   ()
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   (BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   (
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
(87.9 %, 24770 bytes)
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   (
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   (
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   (
>      dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   
>      dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91c91
<   BZ2_bzBuffToBuffCompress(
---
>   BZ2_bzBuffToBuffCompress
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>      dest, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>      *, unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>     char , unsigned int *destLen, char *source, unsigned int sourceLen,
91,92c91,92
<   BZ2_bzBuffToBuffCompress(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>   BZ2_bzBuffToBuffCompress
>      , unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      dest, unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      *, unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      , unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      *dest unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      dest unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>      * unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>       unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char , unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char  unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest,  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char ,  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char   int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char * unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
(87.9 %, 24766 bytes)
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char * unsigned int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char * unsigned  *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *   *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char * unsigned int destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *  int destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char * unsigned  destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *   destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,  int *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,   *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,  int destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,   destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,  int *, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,   *, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,  int , char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *,   , char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *source, unsigned int sourceLen,
(87.9 %, 24763 bytes)
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  destLen, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  , char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  destLen char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned   char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  destLen,  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  ,  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  destLen  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned    *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen char source, unsigned int sourceLen,
92c92
<     char *, unsigned  *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *destLen  source, unsigned int sourceLen,
(87.9 %, 24756 bytes)
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char *, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  *, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  * char , unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *  , unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  *source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  *, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  , unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  *source unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  source unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,  * unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *,   unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char source, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char , unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char source unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char  unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char source,  int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char ,  int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char source  int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char   int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *, unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char * unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,  int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *  int sourceLen,
92c92
<     char *, unsigned  *, char *source, unsigned int sourceLen,
---
>     char *, unsigned  *, char *, unsigned  sourceLen,
(87.9 %, 24750 bytes)
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char * unsigned int sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *  int sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char * unsigned  sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *   sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char * unsigned int ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *  int ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char * unsigned  ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *   ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,  int sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,   sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,  int ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,   ,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,  int sourceLen
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,   sourceLen
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,  int 
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *,   
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *, unsigned  sourceLen,
92c92
<     char *, unsigned  *, char *, unsigned int sourceLen,
---
>     char *, unsigned  *, char *, unsigned  ,
(87.9 %, 24747 bytes)
92c92
<     char *, unsigned  *, char *, unsigned  sourceLen,
---
>     char *, unsigned  *, char *, unsigned  ,
92c92
<     char *, unsigned  *, char *, unsigned  sourceLen,
---
>     char *, unsigned  *, char *, unsigned  
92,93c92,93
<     char *, unsigned  *, char *, unsigned  sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  ,
>      blockSize100k, int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>      blockSize100k, int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  ,
>     int , int verbosity, int workFactor);
(87.9 %, 24738 bytes)
92c92
<     char *, unsigned  *, char *, unsigned  ,
---
>     char *, unsigned  *, char *, unsigned  
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>      blockSize100k, int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>     int , int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>      , int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>     int blockSize100k int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>      blockSize100k int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>     int  int verbosity, int workFactor);
92,93c92,93
<     char *, unsigned  *, char *, unsigned  ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned  *, char *, unsigned  
>       int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      blockSize100k, int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      , int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      blockSize100k int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>       int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      blockSize100k,  verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      ,  verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>      blockSize100k  verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>        verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>     int , int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>     int  int verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>     int ,  verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>     int   verbosity, int workFactor);
93c93
<     int blockSize100k, int verbosity, int workFactor);
---
>     int , int , int workFactor);
(87.9 %, 24725 bytes)
93c93
<     int , int verbosity, int workFactor);
---
>     int  int verbosity, int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int   verbosity, int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int  int , int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int   , int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int  int verbosity int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int   verbosity int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int  int  int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int    int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  verbosity, int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  , int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  verbosity int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,   int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  verbosity,  workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  ,  workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,  verbosity  workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int ,    workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int , int , int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int , int  int workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int , int ,  workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int , int   workFactor);
93c93
<     int , int verbosity, int workFactor);
---
>     int , int , int );
(87.9 %, 24716 bytes)
93c93
<     int , int , int workFactor);
---
>     int , int  int workFactor);
93c93
<     int , int , int workFactor);
---
>     int , int   workFactor);
93c93
<     int , int , int workFactor);
---
>     int , int  int );
93c93
<     int , int , int workFactor);
---
>     int , int   );
93c93
<     int , int , int workFactor);
---
>     int , int  int workFactor;
93c93
<     int , int , int workFactor);
---
>     int , int   workFactor;
93c93
<     int , int , int workFactor);
---
>     int , int  int ;
93c93
<     int , int , int workFactor);
---
>     int , int   ;
93c93
<     int , int , int workFactor);
---
>     int , int ,  workFactor);
93c93
<     int , int , int workFactor);
---
>     int , int ,  );
93c93
<     int , int , int workFactor);
---
>     int , int ,  workFactor;
93c93
<     int , int , int workFactor);
---
>     int , int ,  ;
93c93
<     int , int , int workFactor);
---
>     int , int ,  workFactor)
93c93
<     int , int , int workFactor);
---
>     int , int ,  )
93c93
<     int , int , int workFactor);
---
>     int , int ,  workFactor
93c93
<     int , int , int workFactor);
---
>     int , int ,  
93c93
<     int , int , int workFactor);
---
>     int , int , int );
93c93
<     int , int , int workFactor);
---
>     int , int , int ;
93c93
<     int , int , int workFactor);
---
>     int , int , int )
93c93
<     int , int , int workFactor);
---
>     int , int , int 
93c93
<     int , int , int workFactor);
---
>     int , int , int );
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
(87.9 %, 24706 bytes)
93c93
<     int , int , int );
---
>     int , int , int ;
93c93
<     int , int , int );
---
>     int , int , int 
93c93
<     int , int , int );
---
>     int , int , int ;
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int 
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int ;
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int 
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int ;
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int 
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN int (BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int (BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN  (BZ2_bzBuffToBuffDecompress)(char *dest,
93c93
<     int , int , int );
---
>     int , int , int )
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
(87.9 %, 24697 bytes)
95c95
<  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
<  int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (BZ2_bzBuffToBuffDecompress)(char *dest,
(88.0 %, 24694 bytes)
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ()(char *dest,
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   )(char *dest,
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (BZ2_bzBuffToBuffDecompress(char *dest,
95c95
<   BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char *dest,
(88.0 %, 24688 bytes)
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompress)(char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   )(char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompress)char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   )char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   BZ2_bzBuffToBuffDecompresschar *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ()(char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ((char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ()char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (char *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ()( *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (( *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   () *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   ( *dest,
95c95
<   (BZ2_bzBuffToBuffDecompress)(char *dest,
---
>   (BZ2_bzBuffToBuffDecompress(char *dest,
(88.0 %, 24686 bytes)
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   ( *dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>    *dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   (char dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   char dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   ( dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>    dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompresschar *dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress *dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompresschar dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompresschar *,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress *,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompresschar ,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress ,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( *dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( *,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( ,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( *dest
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( dest
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( *
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress( 
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char dest,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char ,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char dest
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char 
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char dest,
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char ,
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char dest
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char 
>                                                   int *destLen,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char *,
95c95
<   BZ2_bzBuffToBuffDecompress(char *dest,
---
>   BZ2_bzBuffToBuffDecompress(char *
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *,
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *dest,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *,
>                                                  unsigned  *destLen,
(88.0 %, 24682 bytes)
95c95
<   BZ2_bzBuffToBuffDecompress(char *,
---
>   BZ2_bzBuffToBuffDecompress(char *
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                   int *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned  *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                    *destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned int destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                   int destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned  destLen,
95,96c95,96
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned int *destLen,
---
>   BZ2_bzBuffToBuffDecompress(char *
>                                                    destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                   int *destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                    *destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                   int destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                    destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                   int *,
96c96
<                                                  unsigned int *destLen,
---
>                                                    *,
96c96
<                                                  unsigned int *destLen,
---
>                                                   int ,
96c96
<                                                  unsigned int *destLen,
---
>                                                    ,
96c96
<                                                  unsigned int *destLen,
---
>                                                  unsigned  *destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                  unsigned  destLen,
96c96
<                                                  unsigned int *destLen,
---
>                                                  unsigned  *,
(88.0 %, 24679 bytes)
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  destLen,
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  ,
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  destLen
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  destLen,
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  ,
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  destLen
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  
>                                                   *source,
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  *,
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  *
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *,
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *,
>                                                  char source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                  char source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *,
>                                                   source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   source,
96c96
<                                                  unsigned  *destLen,
---
>                                                  unsigned  *destLen
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *destLen
>                                                   *source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *destLen
>                                                  char source,
96,97c96,97
<                                                  unsigned  *destLen,
<                                                  char *source,
---
>                                                  unsigned  *destLen
>                                                   source,
(88.0 %, 24672 bytes)
96c96
<                                                  unsigned  *,
---
>                                                  unsigned  *
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   *source,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                  char source,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   source,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                  char *,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   *,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                  char ,
96,97c96,97
<                                                  unsigned  *,
<                                                  char *source,
---
>                                                  unsigned  *
>                                                   ,
97c97
<                                                  char *source,
---
>                                                   *source,
97c97
<                                                  char *source,
---
>                                                   source,
97c97
<                                                  char *source,
---
>                                                   *,
97c97
<                                                  char *source,
---
>                                                   ,
97c97
<                                                  char *source,
---
>                                                   *source
97c97
<                                                  char *source,
---
>                                                   source
97c97
<                                                  char *source,
---
>                                                   *
97c97
<                                                  char *source,
---
>                                                   
97c97
<                                                  char *source,
---
>                                                  char source,
97c97
<                                                  char *source,
---
>                                                  char ,
97c97
<                                                  char *source,
---
>                                                  char source
97c97
<                                                  char *source,
---
>                                                  char 
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char source,
>                                                   int sourceLen,
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char ,
>                                                   int sourceLen,
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char source
>                                                   int sourceLen,
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char 
>                                                   int sourceLen,
97c97
<                                                  char *source,
---
>                                                  char *,
97c97
<                                                  char *source,
---
>                                                  char *
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char *,
>                                                   int sourceLen,
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                   int sourceLen,
97,98c97,98
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char *,
>                                                  unsigned  sourceLen,
(88.0 %, 24666 bytes)
97c97
<                                                  char *,
---
>                                                  char *
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                   int sourceLen,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                  unsigned  sourceLen,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                    sourceLen,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                  unsigned int ,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                   int ,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                  unsigned  ,
97,98c97,98
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *
>                                                    ,
98c98
<                                                  unsigned int sourceLen,
---
>                                                   int sourceLen,
98c98
<                                                  unsigned int sourceLen,
---
>                                                    sourceLen,
98c98
<                                                  unsigned int sourceLen,
---
>                                                   int ,
98c98
<                                                  unsigned int sourceLen,
---
>                                                    ,
98c98
<                                                  unsigned int sourceLen,
---
>                                                   int sourceLen
98c98
<                                                  unsigned int sourceLen,
---
>                                                    sourceLen
98c98
<                                                  unsigned int sourceLen,
---
>                                                   int 
98c98
<                                                  unsigned int sourceLen,
---
>                                                    
98c98
<                                                  unsigned int sourceLen,
---
>                                                  unsigned  sourceLen,
98c98
<                                                  unsigned int sourceLen,
---
>                                                  unsigned  ,
98c98
<                                                  unsigned int sourceLen,
---
>                                                  unsigned  sourceLen
(88.0 %, 24663 bytes)
98c98
<                                                  unsigned  sourceLen,
---
>                                                  unsigned  ,
98c98
<                                                  unsigned  sourceLen,
---
>                                                  unsigned  
98,99c98,99
<                                                  unsigned  sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned  ,
>                                                   small, int verbosity);
98,99c98,99
<                                                  unsigned  sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                   small, int verbosity);
98,99c98,99
<                                                  unsigned  sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned  ,
>                                                  int , int verbosity);
(88.0 %, 24654 bytes)
98c98
<                                                  unsigned  ,
---
>                                                  unsigned  
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                   small, int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                  int , int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                   , int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                  int small int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                   small int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                  int  int verbosity);
98,99c98,99
<                                                  unsigned  ,
<                                                  int small, int verbosity);
---
>                                                  unsigned  
>                                                    int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   small, int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   , int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   small int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                    int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   small,  verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   ,  verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                   small  verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                     verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                  int , int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                  int  int verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                  int ,  verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                  int   verbosity);
99c99
<                                                  int small, int verbosity);
---
>                                                  int , int );
(88.0 %, 24649 bytes)
99c99
<                                                  int , int verbosity);
---
>                                                  int  int verbosity);
99c99
<                                                  int , int verbosity);
---
>                                                  int   verbosity);
99c99
<                                                  int , int verbosity);
---
>                                                  int  int );
99c99
<                                                  int , int verbosity);
---
>                                                  int   );
99c99
<                                                  int , int verbosity);
---
>                                                  int  int verbosity;
99c99
<                                                  int , int verbosity);
---
>                                                  int   verbosity;
99c99
<                                                  int , int verbosity);
---
>                                                  int  int ;
99c99
<                                                  int , int verbosity);
---
>                                                  int   ;
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  verbosity);
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  );
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  verbosity;
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  ;
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  verbosity)
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  )
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  verbosity
99c99
<                                                  int , int verbosity);
---
>                                                  int ,  
99c99
<                                                  int , int verbosity);
---
>                                                  int , int );
99c99
<                                                  int , int verbosity);
---
>                                                  int , int ;
99c99
<                                                  int , int verbosity);
---
>                                                  int , int )
99c99
<                                                  int , int verbosity);
---
>                                                  int , int 
99c99
<                                                  int , int verbosity);
---
>                                                  int , int );
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ_API(BZ2_bzlibVersion)(void);
(88.0 %, 24640 bytes)
99c99
<                                                  int , int );
---
>                                                  int , int ;
99c99
<                                                  int , int );
---
>                                                  int , int 
99c99
<                                                  int , int );
---
>                                                  int , int ;
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int 
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int ;
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int 
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int ;
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int 
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN const  *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN   *BZ_API(BZ2_bzlibVersion)(void);
99c99
<                                                  int , int );
---
>                                                  int , int )
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN   *BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN   BZ_API(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN  char *(BZ2_bzlibVersion)(void);
101c101
< BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
---
> BZ_EXTERN   *(BZ2_bzlibVersion)(void);
(88.0 %, 24631 bytes)
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    *BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char *(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    *(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>   char (BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>    (BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  (BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *BZ_APIBZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  BZ_APIBZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  *BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const  BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ_API(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char (BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ_APIBZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ_API()(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char ()(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char BZ_API)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char )(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *(BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersion)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *()(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *)(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *(BZ2_bzlibVersion(void);
101c101
<  const char *BZ_API(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersion(void);
(88.0 %, 24625 bytes)
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersion)(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *)(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersion(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersion)void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *)void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *BZ2_bzlibVersionvoid);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *()(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *((void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *()void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *(void);
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *()();
101c101
<  const char *(BZ2_bzlibVersion)(void);
---
>  const char *(();
(88.0 %, 24623 bytes)
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *();
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *);
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *(void;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *void;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *(;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersionvoid);
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersion);
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersionvoid;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersion;
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersionvoid)
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersion)
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersionvoid
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersion
101c101
<  const char *BZ2_bzlibVersion(void);
---
>  const char *BZ2_bzlibVersion();
(88.0 %, 24621 bytes)
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
> BZ_EXTERN  *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzopen)(const char *path, const char *mode);
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>  BZFILE BZ_API(BZ2_bzopen)(const char *path, const char *mode);
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
> BZ_EXTERN  BZ_API(BZ2_bzopen)(const char *path, const char *mode);
101c101
<  const char *BZ2_bzlibVersionvoid;
---
>  const char *BZ2_bzlibVersionvoid
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>  BZFILE BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>  BZFILE *(BZ2_bzopen)(const char *path, const char *mode);
(88.0 %, 24612 bytes)
103c103
<  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
<  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
<  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(BZ2_bzopen)(const char *path, const char *mode);
103c103
<  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   (BZ2_bzopen)(const char *path, const char *mode);
103c103
<  BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen)(const char *path, const char *mode);
(88.0 %, 24606 bytes)
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API(BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   (BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_APIBZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API()(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   ()(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   BZ_API)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   )(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *()(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *)(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(BZ2_bzopen(const char *path, const char *mode);
103c103
<   *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path, const char *mode);
(88.0 %, 24600 bytes)
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopen)(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *)(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopen)const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *)const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *BZ2_bzopenconst char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *()(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *((const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *()const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(const char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *()( char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *(( char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *() char *path, const char *mode);
103c103
<   *(BZ2_bzopen)(const char *path, const char *mode);
---
>   *( char *path, const char *mode);
(88.0 %, 24598 bytes)
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *( char *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   * char *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *(const  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *const  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *(  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopenconst char *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen char *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopenconst  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopenconst char path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen char path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopenconst  path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen  path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen( char *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen( char path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(  path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen( char *, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(  *, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen( char , const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(  , const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  *path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  *, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  , const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  *path const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  path const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const  * const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const   const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char path, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char , const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char path const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char  const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char path,  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char ,  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char path  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char   char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char * const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *,  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *, const  *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char * const  *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *,   *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *   *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path const char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path  char *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path const  *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path   *mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path const char mode);
103c103
<   *BZ2_bzopen(const char *path, const char *mode);
---
>   *BZ2_bzopen(const char *path  char mode);
(88.0 %, 24594 bytes)
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char * const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *  char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char * const  *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *   *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char * const char mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *  char mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char * const  mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *   mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,  char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,   *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,  char mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,   mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,  char *);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,   *);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,  char );
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *,   );
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  *mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  *);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  );
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  *mode;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  mode;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  *;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const  ;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char mode);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char );
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char mode;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char ;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char mode)
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char )
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char mode
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char 
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *);
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *;
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *)
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *
103c103
<   *BZ2_bzopen(const char *, const char *mode);
---
>   *BZ2_bzopen(const char *, const char *);
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
(88.0 %, 24590 bytes)
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *;
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *;
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *;
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
> BZ_EXTERN  *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
> BZ_EXTERN  *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *;
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
> BZ_EXTERN  *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
> BZ_EXTERN  BZ_API(BZ2_bzdopen)(int fd, const char *mode);
103c103
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char *, const char *)
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_API(BZ2_bzdopen)(int fd, const char *mode);
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
105c105
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
(88.0 %, 24581 bytes)
105c105
<  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
105c105
<  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_API(BZ2_bzdopen)(int fd, const char *mode);
105c105
<  BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(BZ2_bzdopen)(int fd, const char *mode);
(88.0 %, 24575 bytes)
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_API(BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   (BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_APIBZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_API()(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   ()(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   BZ_API)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   )(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *()(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *)(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(BZ2_bzdopen(int fd, const char *mode);
105c105
<   *BZ_API(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopen(int fd, const char *mode);
(88.0 %, 24569 bytes)
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopen)(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *)(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopen(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopen)int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *)int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *BZ2_bzdopenint fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *()(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *((int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *()int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(int fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *()( fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *(( fd, const char *mode);
105c105
<   *(BZ2_bzdopen)(int fd, const char *mode);
---
>   *() fd, const char *mode);
(88.0 %, 24567 bytes)
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *( fd, const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   * fd, const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *(int , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *int , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *( , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   * , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopenint fd, const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen fd, const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopenint , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopenint fd const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen fd const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopenint  const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen  const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( fd, const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( fd const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(  const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( fd,  char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( ,  char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen( fd  char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(   char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int , const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int  const char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int ,  char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int   char *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int , const  *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int  const  *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int ,   *mode);
105c105
<   *BZ2_bzdopen(int fd, const char *mode);
---
>   *BZ2_bzdopen(int    *mode);
(88.0 %, 24565 bytes)
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int  const char *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int   char *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int  const  *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int    *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int  const char mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int   char mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int  const  mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int    mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,  char *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,   *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,  char mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,   mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,  char *);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,   *);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,  char );
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int ,   );
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  *mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  *);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  );
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  *mode;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  mode;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  *;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const  ;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char mode);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char );
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char mode;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char ;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char mode)
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char )
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char mode
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char 
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char *);
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char *;
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char *)
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char *
105c105
<   *BZ2_bzdopen(int , const char *mode);
---
>   *BZ2_bzdopen(int , const char *);
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
(88.0 %, 24561 bytes)
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *;
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *;
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *;
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *;
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int (BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int (BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  (BZ2_bzread)(BZFILE *b, void *buf, int len);
105c105
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int , const char *)
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
< BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
(88.0 %, 24552 bytes)
107c107
<  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
<  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
<  int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ_APIBZ2_bzread)(BZFILE *b, void *buf, int len);
(88.0 %, 24549 bytes)
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ()(BZFILE *b, void *buf, int len);
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   )(BZFILE *b, void *buf, int len);
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzread(BZFILE *b, void *buf, int len);
107c107
<   BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b, void *buf, int len);
(88.0 %, 24543 bytes)
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread)(BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   )(BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread)BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   )BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzreadBZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ()(BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ((BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ()BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (BZFILE *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ()( *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   (( *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   () *b, void *buf, int len);
107c107
<   (BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>   ( *b, void *buf, int len);
(88.0 %, 24541 bytes)
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   ( *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>    *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   (BZFILE b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZFILE b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   ( b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>    b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzreadBZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzreadBZFILE b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzreadBZFILE *, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread *, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzreadBZFILE , void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread , void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( *, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( , void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( *b void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( b void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread( * void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(  void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE , void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE b void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE  void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE b,  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE ,  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE b  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE   *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b void buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b  buf, int len);
107c107
<   BZ2_bzread(BZFILE *b, void *buf, int len);
---
>   BZ2_bzread(BZFILE *b void *, int len);
(88.0 %, 24540 bytes)
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void *, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  *, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE * void , int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *  , int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  *, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  , int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  *buf int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  buf int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,  * int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *,   int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void , int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void buf int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void  int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void buf,  len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void ,  len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void buf  len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void   len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void *, int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void * int len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void *,  len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void *  len);
107c107
<   BZ2_bzread(BZFILE *, void *buf, int len);
---
>   BZ2_bzread(BZFILE *, void *, int );
(88.0 %, 24537 bytes)
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void * int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *  len);
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void * int );
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *  );
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void * int len;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *  len;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void * int ;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *  ;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  len);
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  );
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  len;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  ;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  len)
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  )
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  len
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *,  
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *, int );
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *, int ;
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *, int )
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *, int 
107c107
<   BZ2_bzread(BZFILE *, void *, int len);
---
>   BZ2_bzread(BZFILE *, void *, int );
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
(88.0 %, 24534 bytes)
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int ;
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int 
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int ;
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int 
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int ;
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int 
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int ;
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int 
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN  (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
107c107
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *, int )
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
(88.0 %, 24525 bytes)
109c109
<  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
<  int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
(88.0 %, 24522 bytes)
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   ()(BZFILE *b, void *buf, int len);
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   )(BZFILE *b, void *buf, int len);
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   (BZ2_bzwrite(BZFILE *b, void *buf, int len);
109c109
<   BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b, void *buf, int len);
(88.0 %, 24516 bytes)
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite)(BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   )(BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   (BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite)BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   )BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwriteBZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   ()(BZFILE *b, void *buf, int len);
109c109
<   (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   ((BZFILE *b, void *buf, int len);
(88.0 %, 24514 bytes)
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   ( *b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>    *b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   (BZFILE b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZFILE b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   ( b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>    b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwriteBZFILE *b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite *b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwriteBZFILE b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwriteBZFILE *, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite *, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwriteBZFILE , void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite , void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( *b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( *, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( , void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( *b void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( b void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite( * void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(  void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE b, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE , void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE b void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE  void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE b,  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE ,  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE b  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE   *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b void buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b  buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *b void *, int len);
(88.0 %, 24513 bytes)
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void *, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  *, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE * void , int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *  , int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  *buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  *, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  , int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  *buf int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  buf int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,  * int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *,   int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void buf, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void , int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void buf int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void  int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void buf,  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void ,  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void buf  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void   len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void * int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void *  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *buf, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int );
(88.0 %, 24510 bytes)
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void * int len);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void * int );
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *  );
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void * int len;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *  len;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void * int ;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *  ;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  len);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  );
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  len;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  ;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  len)
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  )
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  len
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *,  
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int );
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int ;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int )
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int 
109c109
<   BZ2_bzwrite(BZFILE *, void *, int len);
---
>   BZ2_bzwrite(BZFILE *, void *, int );
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int BZ_API(BZ2_bzflush)(BZFILE *b);
(88.0 %, 24507 bytes)
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int ;
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int 
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int ;
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int 
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int ;
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int 
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int ;
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int 
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
> BZ_EXTERN  BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ_API(BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
> BZ_EXTERN int (BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int (BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
> BZ_EXTERN  (BZ2_bzflush)(BZFILE *b);
109c109
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *, int )
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   (BZ2_bzflush)(BZFILE *b);
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int BZ_API(BZ2_bzflush)(BZFILE *b);
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ_API(BZ2_bzflush)(BZFILE *b);
111c111
< BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>  int (BZ2_bzflush)(BZFILE *b);
(88.0 %, 24498 bytes)
111c111
<  int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ_API(BZ2_bzflush)(BZFILE *b);
111c111
<  int BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   (BZ2_bzflush)(BZFILE *b);
(88.0 %, 24495 bytes)
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   (BZ2_bzflush)(BZFILE *b);
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflush)(BZFILE *b);
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   ()(BZFILE *b);
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   )(BZFILE *b);
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   (BZ2_bzflush(BZFILE *b);
111c111
<   BZ_API(BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflush(BZFILE *b);
(88.1 %, 24489 bytes)
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflush)(BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   )(BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflush(BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   (BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflush)BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   )BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   BZ2_bzflushBZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   ()(BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   ((BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   ()BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   (BZFILE *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   ()( *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   (( *b);
111c111
<   (BZ2_bzflush)(BZFILE *b);
---
>   () *b);
(88.1 %, 24487 bytes)
111c111
<   BZ2_bzflush(BZFILE *b);
---
>   ( *b);
111c111
<   BZ2_bzflush(BZFILE *b);
---
>    *b);
111c111
<   BZ2_bzflush(BZFILE *b);
---
>   (BZFILE b);
111c111
<   BZ2_bzflush(BZFILE *b);
---
>   BZFILE b);
111c111
<   BZ2_bzflush(BZFILE *b);
---
>   ( b);
(88.1 %, 24470 bytes)
111c111
<   ( *b);
---
>    *);
111c111
<   ( *b);
---
>    );
111c111
<   ( *b);
---
>    *b;
111c111
<   ( *b);
---
>    b;
111c111
<   ( *b);
---
>    *;
111c111
<   ( *b);
---
>    ;
(88.1 %, 24468 bytes)
111c111
<    *b;
---
>    b;
113c113
< BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void BZ_API(BZ2_bzclose)(BZFILE *b);
111c111
<    *b;
---
>    ;
113c113
< BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void BZ_API(BZ2_bzclose)(BZFILE *b);
111c111
<    *b;
---
>    b
113c113
< BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void BZ_API(BZ2_bzclose)(BZFILE *b);
111c111
<    *b;
---
>    
113c113
< BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void BZ_API(BZ2_bzclose)(BZFILE *b);
(88.1 %, 24458 bytes)
111c111
<    b;
---
>    ;
113c113
<  void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void (BZ2_bzclose)(BZFILE *b);
111c111
<    b;
---
>    
113c113
<  void BZ_API(BZ2_bzclose)(BZFILE *b);
---
>  void (BZ2_bzclose)(BZFILE *b);
(88.1 %, 24451 bytes)
111c111
<    ;
---
>    
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void ()(BZFILE *b);
111c111
<    ;
---
>    
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   ()(BZFILE *b);
111c111
<    ;
---
>    
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void )(BZFILE *b);
111c111
<    ;
---
>    
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   )(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   (BZ2_bzclose)(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   BZ2_bzclose)(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   ()(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   )(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   (BZ2_bzclose(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   BZ2_bzclose(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   ((BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>   (BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void BZ2_bzclose)(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void )(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void BZ2_bzclose(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void (BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void BZ2_bzclose)BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void )BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void BZ2_bzcloseBZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void ()(BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void ((BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void ()BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void (BZFILE *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void ()( *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void (( *b);
113c113
<  void (BZ2_bzclose)(BZFILE *b);
---
>  void () *b);
(88.1 %, 24449 bytes)
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void ( *b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void  *b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void (BZFILE b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZFILE b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void ( b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void  b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzcloseBZFILE *b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzclose *b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzcloseBZFILE b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzclose b);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzcloseBZFILE *);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzclose *);
113c113
<  void BZ2_bzclose(BZFILE *b);
---
>  void BZ2_bzcloseBZFILE );
(88.1 %, 24432 bytes)
113c113
<  void ( *b);
---
>  void  *);
113c113
<  void ( *b);
---
>  void  );
113c113
<  void ( *b);
---
>  void  *b;
113c113
<  void ( *b);
---
>  void  b;
113c113
<  void ( *b);
---
>  void  *;
113c113
<  void ( *b);
---
>  void  ;
(88.1 %, 24430 bytes)
113c113
<  void  *b;
---
>  void  b;
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  ;
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  b
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *;
113c113
<  void  *b;
---
>  void  *
113c113
<  void  *b;
---
>  void  *;
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *;
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
> BZ_EXTERN  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *;
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  *b;
---
>  void  *b
113c113
<  void  *b;
---
>  void  *b
115c115
< BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
(88.1 %, 24419 bytes)
113c113
<  void  ;
---
>  void  
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  ;
---
>  void  
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
113c113
<  void  ;
---
>  void  
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>    BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>    *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>    BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char *(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>    *(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>   char (BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>    (BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  *(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  (BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  *BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  *BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const  BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char (BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char BZ_API()(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char ()(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char BZ_API)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char )(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *()(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *)(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *(BZ2_bzerror(BZFILE *b, int *errnum);
115c115
<  const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b, int *errnum);
(88.1 %, 24413 bytes)
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror)(BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *)(BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *(BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror)BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *)BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerrorBZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *()(BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *((BZFILE *b, int *errnum);
115c115
<  const char *(BZ2_bzerror)(BZFILE *b, int *errnum);
---
>  const char *()BZFILE *b, int *errnum);
(88.1 %, 24411 bytes)
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *( *b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char * *b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *(BZFILE b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZFILE b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *( b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char * b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerrorBZFILE *b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror *b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerrorBZFILE b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerrorBZFILE *, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror *, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerrorBZFILE , int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror , int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( *b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( *, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( , int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( *b int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( b int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror( * int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(  int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE b, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE , int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE b int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE  int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE b,  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE ,  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE b  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE   *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b int errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b  errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *b, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *b int *);
(88.1 %, 24410 bytes)
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int *);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  *);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE * int );
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *  );
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  *errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  *);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  );
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  *errnum;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  errnum;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  *;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *,  ;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int errnum);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int );
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int errnum;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int ;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int errnum)
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int )
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int errnum
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int 
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *);
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *);
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum;
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum;
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *errnum);
---
>  const char *BZ2_bzerror(BZFILE *, int *errnum
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
(88.1 %, 24404 bytes)
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *;
117c117
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *
117c117
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> #define 
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> define 
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
> # 
115c115
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE *, int *)
117c117
< #define _BZLIB_PRIVATE_H
---
>  
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
117c117
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
117c117
< #define _BZLIB_PRIVATE_H
---
> define 
117c117
< #define _BZLIB_PRIVATE_H
---
>  
117c117
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
119c119
< #include <stdlib.h>
---
> include <stdlib.h>
117c117
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
119c119
< #include <stdlib.h>
---
> include <stdlib.h>
117c117
< #define _BZLIB_PRIVATE_H
---
> define 
119c119
< #include <stdlib.h>
---
> include <stdlib.h>
117c117
< #define _BZLIB_PRIVATE_H
---
>  
119c119
< #include <stdlib.h>
---
> include <stdlib.h>
117c117
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
117c117
< #define _BZLIB_PRIVATE_H
---
> # 
(88.1 %, 24381 bytes)
119c119
< #include <stdlib.h>
---
>  stdlib.h>
119c119
< #include <stdlib.h>
---
> include <.h>
119c119
< #include <stdlib.h>
---
>  <.h>
119c119
< #include <stdlib.h>
---
> include .h>
119c119
< #include <stdlib.h>
---
>  .h>
119c119
< #include <stdlib.h>
---
> # <stdlib.h>
119c119
< #include <stdlib.h>
---
> # stdlib.h>
119c119
< #include <stdlib.h>
---
> # <.h>
119c119
< #include <stdlib.h>
---
> # .h>
119c119
< #include <stdlib.h>
---
> # <stdlibh>
119c119
< #include <stdlib.h>
---
> # stdlibh>
119c119
< #include <stdlib.h>
---
> # <h>
119c119
< #include <stdlib.h>
---
> # h>
119c119
< #include <stdlib.h>
---
> #include stdlib.h>
119c119
< #include <stdlib.h>
---
> #include .h>
119c119
< #include <stdlib.h>
---
> #include stdlibh>
119c119
< #include <stdlib.h>
---
> #include h>
119c119
< #include <stdlib.h>
---
> #include stdlib.>
119c119
< #include <stdlib.h>
---
> #include .>
119c119
< #include <stdlib.h>
---
> #include stdlib>
119c119
< #include <stdlib.h>
---
> #include >
119c119
< #include <stdlib.h>
---
> #include <.h>
119c119
< #include <stdlib.h>
---
> #include <h>
119c119
< #include <stdlib.h>
---
> #include <.>
119c119
< #include <stdlib.h>
---
> #include <>
119c119
< #include <stdlib.h>
---
> #include <.h
119c119
< #include <stdlib.h>
---
> #include <h
119c119
< #include <stdlib.h>
---
> #include <.
119c119
< #include <stdlib.h>
---
> #include <
119c119
< #include <stdlib.h>
---
> #include <stdlibh>
119c119
< #include <stdlib.h>
---
> #include <stdlib>
119c119
< #include <stdlib.h>
---
> #include <stdlibh
119c119
< #include <stdlib.h>
---
> #include <stdlib
119c119
< #include <stdlib.h>
---
> #include <stdlibh>
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib>
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlibh
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.>
119c119
< #include <stdlib.h>
---
> #include <stdlib.
119c119
< #include <stdlib.h>
---
> #include <stdlib.>
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.>
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.>
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
119c119
< #include <stdlib.h>
---
> #include <stdlib.h
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION 
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION 
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION 
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION 
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
125c125
< typedef int Int32;
---
> typedef  Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
125c125
< typedef int Int32;
---
> typedef  Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
125c125
< typedef int Int32;
---
>   Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
125c125
< typedef int Int32;
---
>   Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
>  int Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
> typedef  Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
>   Int32;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
> typedef int ;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
>  int ;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
> typedef  ;
121c121
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
125c125
< typedef int Int32;
---
>   ;
125c125
< typedef int Int32;
---
>  int Int32;
125c125
< typedef int Int32;
---
>   Int32;
125c125
< typedef int Int32;
---
>  int ;
125c125
< typedef int Int32;
---
>   ;
125c125
< typedef int Int32;
---
>  int Int32
125c125
< typedef int Int32;
---
>   Int32
125c125
< typedef int Int32;
---
>  int 
125c125
< typedef int Int32;
---
>   
125c125
< typedef int Int32;
---
> typedef  Int32;
125c125
< typedef int Int32;
---
> typedef  ;
125c125
< typedef int Int32;
---
> typedef  Int32
125c125
< typedef int Int32;
---
> typedef  
125,126c125,126
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32;
>  unsigned int UInt32;
125,126c125,126
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>  unsigned int UInt32;
125,126c125,126
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned int UInt32;
125,126c125,126
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  
>  unsigned int UInt32;
125c125
< typedef int Int32;
---
> typedef int ;
125c125
< typedef int Int32;
---
> typedef int 
125,126c125,126
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int ;
>  unsigned int UInt32;
(88.1 %, 24378 bytes)
125c125
< typedef  Int32;
---
> typedef  ;
125c125
< typedef  Int32;
---
> typedef  
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>  unsigned int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
>  unsigned int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
> typedef  int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
> typedef  int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>   int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
>   int UInt32;
125c125
< typedef  Int32;
---
> typedef  Int32
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef  int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>   int UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef unsigned  UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned  UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef   UInt32;
125,126c125,126
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>    UInt32;
126c126
< typedef unsigned int UInt32;
---
>  unsigned int UInt32;
126c126
< typedef unsigned int UInt32;
---
>   int UInt32;
126c126
< typedef unsigned int UInt32;
---
>  unsigned  UInt32;
126c126
< typedef unsigned int UInt32;
---
>    UInt32;
126c126
< typedef unsigned int UInt32;
---
>  unsigned int ;
126c126
< typedef unsigned int UInt32;
---
>   int ;
126c126
< typedef unsigned int UInt32;
---
>  unsigned  ;
126c126
< typedef unsigned int UInt32;
---
>    ;
126c126
< typedef unsigned int UInt32;
---
> typedef  int UInt32;
126c126
< typedef unsigned int UInt32;
---
> typedef   UInt32;
(88.1 %, 24370 bytes)
126c126
< typedef  int UInt32;
---
> typedef   UInt32;
126c126
< typedef  int UInt32;
---
> typedef   ;
126c126
< typedef  int UInt32;
---
> typedef   UInt32
126c126
< typedef  int UInt32;
---
> typedef   
126c126
< typedef  int UInt32;
---
> typedef   UInt32;
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef   ;
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef   
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef  int ;
126c126
< typedef  int UInt32;
---
> typedef  int 
126c126
< typedef  int UInt32;
---
> typedef  int ;
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef  int 
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef  int UInt32;
---
> typedef  int ;
128c128
< #define True (1)
---
> # True (1)
(88.1 %, 24367 bytes)
126c126
< typedef   UInt32;
---
> typedef   ;
126c126
< typedef   UInt32;
---
> typedef   
126c126
< typedef   UInt32;
---
> typedef   ;
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef   UInt32;
---
> typedef   
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef   UInt32;
---
> typedef   ;
128c128
< #define True (1)
---
> # True (1)
126c126
< typedef   UInt32;
---
> typedef   
128c128
< #define True (1)
---
> # True (1)
126c126
< typedef   UInt32;
---
> typedef   ;
128c128
< #define True (1)
---
>  True (1)
126c126
< typedef   UInt32;
---
> typedef   
128c128
< #define True (1)
---
>  True (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> define True (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> # True (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
>  True (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> #define  (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> define  (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
> #  (1)
126c126
< typedef   UInt32;
---
> typedef   UInt32
128c128
< #define True (1)
---
>   (1)
128c128
< #define True (1)
---
> define True (1)
128c128
< #define True (1)
---
>  True (1)
128c128
< #define True (1)
---
> define  (1)
128c128
< #define True (1)
---
>   (1)
128c128
< #define True (1)
---
> define True 1)
128c128
< #define True (1)
---
>  True 1)
128c128
< #define True (1)
---
> define  1)
128c128
< #define True (1)
---
>   1)
128c128
< #define True (1)
---
> # True (1)
128c128
< #define True (1)
---
> #  (1)
128c128
< #define True (1)
---
> # True 1)
128c128
< #define True (1)
---
> #  1)
128c128
< #define True (1)
---
> # True ()
128c128
< #define True (1)
---
> #  ()
128c128
< #define True (1)
---
> # True )
128c128
< #define True (1)
---
> #  )
128c128
< #define True (1)
---
> #define  (1)
128c128
< #define True (1)
---
> #define  1)
128c128
< #define True (1)
---
> #define  ()
128c128
< #define True (1)
---
> #define  )
128c128
< #define True (1)
---
> #define  (1
128c128
< #define True (1)
---
> #define  1
128c128
< #define True (1)
---
> #define  (
128c128
< #define True (1)
---
> #define  
128c128
< #define True (1)
---
> #define True 1)
128c128
< #define True (1)
---
> #define True )
128c128
< #define True (1)
---
> #define True 1
128c128
< #define True (1)
---
> #define True 
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True 1)
> define False (0)
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True )
> define False (0)
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True 1
> define False (0)
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True 
> define False (0)
128c128
< #define True (1)
---
> #define True ()
128c128
< #define True (1)
---
> #define True (
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True ()
> define False (0)
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True (
> define False (0)
128,129c128,129
< #define True (1)
< #define False (0)
---
> #define True ()
> # False (0)
(88.1 %, 24365 bytes)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
> # False (0)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
>  False (0)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
> #define  (0)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
> define  (0)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
> #  (0)
128,129c128,129
< #define True 1
< #define False (0)
---
> #define True 
>   (0)
129c129
< #define False (0)
---
> define False (0)
129c129
< #define False (0)
---
>  False (0)
129c129
< #define False (0)
---
> define  (0)
129c129
< #define False (0)
---
>   (0)
129c129
< #define False (0)
---
> define False 0)
129c129
< #define False (0)
---
>  False 0)
129c129
< #define False (0)
---
> define  0)
129c129
< #define False (0)
---
>   0)
129c129
< #define False (0)
---
> # False (0)
129c129
< #define False (0)
---
> #  (0)
129c129
< #define False (0)
---
> # False 0)
129c129
< #define False (0)
---
> #  0)
129c129
< #define False (0)
---
> # False ()
129c129
< #define False (0)
---
> #  ()
129c129
< #define False (0)
---
> # False )
129c129
< #define False (0)
---
> #  )
129c129
< #define False (0)
---
> #define  (0)
129c129
< #define False (0)
---
> #define  0)
129c129
< #define False (0)
---
> #define  ()
129c129
< #define False (0)
---
> #define  )
129c129
< #define False (0)
---
> #define  (0
129c129
< #define False (0)
---
> #define  0
129c129
< #define False (0)
---
> #define  (
129c129
< #define False (0)
---
> #define  
129c129
< #define False (0)
---
> #define False 0)
129c129
< #define False (0)
---
> #define False )
129c129
< #define False (0)
---
> #define False 0
129c129
< #define False (0)
---
> #define False 
129c129
< #define False (0)
---
> #define False 0)
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False )
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False 0
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False 
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False ()
129c129
< #define False (0)
---
> #define False (
129c129
< #define False (0)
---
> #define False ()
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False (
131c131
< #define __inline__
---
> define __inline__
129c129
< #define False (0)
---
> #define False ()
131c131
< #define __inline__
---
> # __inline__
129c129
< #define False (0)
---
> #define False (
131c131
< #define __inline__
---
> # __inline__
129c129
< #define False (0)
---
> #define False ()
131c131
< #define __inline__
---
>  __inline__
129c129
< #define False (0)
---
> #define False (
131c131
< #define __inline__
---
>  __inline__
(88.1 %, 24363 bytes)
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
> # __inline__
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
>  __inline__
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
> #define 
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
> define 
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
> # 
129c129
< #define False 0
---
> #define False 
131c131
< #define __inline__
---
>  
131c131
< #define __inline__
---
> define __inline__
131c131
< #define __inline__
---
>  __inline__
131c131
< #define __inline__
---
> define 
131c131
< #define __inline__
---
>  
(88.1 %, 24356 bytes)
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail(void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
> extern  BZ2_bz__AssertH__fail(void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
>   BZ2_bz__AssertH__fail(void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
> extern void (void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
>  void (void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
> extern  (void);
131c131
<  __inline__
---
>  
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
>   (void);
133c133
< extern void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail(void);
(88.1 %, 24340 bytes)
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   (void);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   BZ2_bz__AssertH__failvoid);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   void);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   BZ2_bz__AssertH__fail();
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   ();
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   BZ2_bz__AssertH__fail);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>   );
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void (void);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void void);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void ();
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void );
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void (void;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void void;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void (;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void ;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__failvoid);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail);
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__failvoid;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail;
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__failvoid)
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail)
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__failvoid
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail
133c133
<  void BZ2_bz__AssertH__fail(void);
---
>  void BZ2_bz__AssertH__fail();
(88.1 %, 24313 bytes)
133,134c133,134
<  void ;
< #define AssertH
---
>  void 
>  
134c134
< #define AssertH
---
> define AssertH
134c134
< #define AssertH
---
>  AssertH
134c134
< #define AssertH
---
> define 
134c134
< #define AssertH
---
>  
134c134
< #define AssertH
---
> define AssertH
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
>  AssertH
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
> define 
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
>  
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
> # AssertH
134c134
< #define AssertH
---
> # 
134c134
< #define AssertH
---
> # AssertH
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
> # 
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
> # AssertH
136c136
< #define AssertD
---
> # AssertD
134c134
< #define AssertH
---
> # 
136c136
< #define AssertD
---
> # AssertD
134c134
< #define AssertH
---
> # AssertH
136c136
< #define AssertD
---
>  AssertD
134c134
< #define AssertH
---
> # 
136c136
< #define AssertD
---
>  AssertD
134c134
< #define AssertH
---
> #define 
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
> define AssertD
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
> # AssertD
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
>  AssertD
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
> #define 
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
> define 
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
> # 
134c134
< #define AssertH
---
> #define 
136c136
< #define AssertD
---
>  
136c136
< #define AssertD
---
> define AssertD
136c136
< #define AssertD
---
>  AssertD
136c136
< #define AssertD
---
> define 
136c136
< #define AssertD
---
>  
136c136
< #define AssertD
---
> define AssertD
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
>  AssertD
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
> define 
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
>  
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
> # AssertD
136c136
< #define AssertD
---
> # 
136c136
< #define AssertD
---
> # AssertD
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
> # 
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
> # AssertD
138c138
< #define VPrintf0 fprintf
---
> # VPrintf0 fprintf
136c136
< #define AssertD
---
> # 
138c138
< #define VPrintf0 fprintf
---
> # VPrintf0 fprintf
136c136
< #define AssertD
---
> # AssertD
138c138
< #define VPrintf0 fprintf
---
>  VPrintf0 fprintf
136c136
< #define AssertD
---
> # 
138c138
< #define VPrintf0 fprintf
---
>  VPrintf0 fprintf
136c136
< #define AssertD
---
> #define 
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
> # VPrintf0 fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
>  VPrintf0 fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
> #define  fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
> define  fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
> #  fprintf
136c136
< #define AssertD
---
> #define 
138c138
< #define VPrintf0 fprintf
---
>   fprintf
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 fprintf
138c138
< #define VPrintf0 fprintf
---
>  VPrintf0 fprintf
138c138
< #define VPrintf0 fprintf
---
> define  fprintf
138c138
< #define VPrintf0 fprintf
---
>   fprintf
138c138
< #define VPrintf0 fprintf
---
> define VPrintf0 
138c138
< #define VPrintf0 fprintf
---
>  VPrintf0 
138c138
< #define VPrintf0 fprintf
---
> define  
138c138
< #define VPrintf0 fprintf
---
>   
138c138
< #define VPrintf0 fprintf
---
> # VPrintf0 fprintf
138c138
< #define VPrintf0 fprintf
---
> #  fprintf
138c138
< #define VPrintf0 fprintf
---
> # VPrintf0 
138c138
< #define VPrintf0 fprintf
---
> #  
(88.1 %, 24291 bytes)
139c139
< #define VPrintf1 fprintf
---
>   
139c139
< #define VPrintf1 fprintf
---
> # VPrintf1 fprintf
139c139
< #define VPrintf1 fprintf
---
> #  fprintf
139c139
< #define VPrintf1 fprintf
---
> # VPrintf1 
139c139
< #define VPrintf1 fprintf
---
> #  
(88.2 %, 24269 bytes)
140c140
< #define VPrintf2 fprintf
---
>   
140c140
< #define VPrintf2 fprintf
---
> # VPrintf2 fprintf
140c140
< #define VPrintf2 fprintf
---
> #  fprintf
140c140
< #define VPrintf2 fprintf
---
> # VPrintf2 
140c140
< #define VPrintf2 fprintf
---
> #  
(88.2 %, 24247 bytes)
141c141
< #define VPrintf3 fprintf
---
>   
141c141
< #define VPrintf3 fprintf
---
> # VPrintf3 fprintf
141c141
< #define VPrintf3 fprintf
---
> #  fprintf
141c141
< #define VPrintf3 fprintf
---
> # VPrintf3 
141c141
< #define VPrintf3 fprintf
---
> #  
(88.2 %, 24225 bytes)
142c142
< #define VPrintf4 fprintf
---
>   
142c142
< #define VPrintf4 fprintf
---
> # VPrintf4 fprintf
142c142
< #define VPrintf4 fprintf
---
> #  fprintf
142c142
< #define VPrintf4 fprintf
---
> # VPrintf4 
142c142
< #define VPrintf4 fprintf
---
> #  
(88.2 %, 24203 bytes)
143c143
< #define VPrintf5 fprintf
---
>   
143c143
< #define VPrintf5 fprintf
---
> # VPrintf5 fprintf
143c143
< #define VPrintf5 fprintf
---
> #  fprintf
143c143
< #define VPrintf5 fprintf
---
> # VPrintf5 
143c143
< #define VPrintf5 fprintf
---
> #  
(88.2 %, 24181 bytes)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
>  nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # BZALLOC(nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # (nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # BZALLOCnnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # BZALLOC() (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # () (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # BZALLOC) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> # ) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define (nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define nnn) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define () (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define ) (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define (nnn (strm->opaque, (nnn), 1)
145c145
< #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
---
> #define nnn (strm->opaque, (nnn), 1)
(88.2 %, 24173 bytes)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define  (strm->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define ) strm->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define  strm->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define ) (->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define  (->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define ) ->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define  ->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define nnn (strm->opaque, (nnn), 1)
145c145
< #define nnn) (strm->opaque, (nnn), 1)
---
> #define nnn strm->opaque, (nnn), 1)
(88.2 %, 24172 bytes)
145c145
< #define nnn (strm->opaque, (nnn), 1)
---
> #define nnn strm->opaque, (nnn), 1)
145c145
< #define nnn (strm->opaque, (nnn), 1)
---
> #define nnn ->opaque, (nnn), 1)
(88.2 %, 24171 bytes)
145c145
< #define nnn strm->opaque, (nnn), 1)
---
> #define nnn ->opaque, (nnn), 1)
145c145
< #define nnn strm->opaque, (nnn), 1)
---
> #define nnn opaque, (nnn), 1)
(88.2 %, 24167 bytes)
145c145
< #define nnn ->opaque, (nnn), 1)
---
> #define nnn opaque, (nnn), 1)
145c145
< #define nnn ->opaque, (nnn), 1)
---
> #define nnn , (nnn), 1)
(88.2 %, 24165 bytes)
145c145
< #define nnn opaque, (nnn), 1)
---
> #define nnn , (nnn), 1)
145c145
< #define nnn opaque, (nnn), 1)
---
> #define nnn  (nnn), 1)
145c145
< #define nnn opaque, (nnn), 1)
---
> #define nnn , nnn), 1)
(88.2 %, 24159 bytes)
145c145
< #define nnn , (nnn), 1)
---
> #define nnn  (nnn), 1)
145c145
< #define nnn , (nnn), 1)
---
> #define nnn  nnn), 1)
(88.2 %, 24158 bytes)
145c145
< #define nnn  (nnn), 1)
---
> #define nnn  nnn), 1)
145c145
< #define nnn  (nnn), 1)
---
> #define nnn  ), 1)
(88.2 %, 24157 bytes)
145c145
< #define nnn  nnn), 1)
---
> #define nnn  ), 1)
145c145
< #define nnn  nnn), 1)
---
> #define nnn  , 1)
(88.2 %, 24154 bytes)
145c145
< #define nnn  ), 1)
---
> #define nnn  , 1)
145c145
< #define nnn  ), 1)
---
> #define nnn   1)
(88.2 %, 24153 bytes)
145c145
< #define nnn  , 1)
---
> #define nnn   1)
145c145
< #define nnn  , 1)
---
> #define nnn   )
145c145
< #define nnn  , 1)
---
> #define nnn   1
(88.2 %, 24152 bytes)
145c145
< #define nnn   1)
---
> #define nnn   )
145c145
< #define nnn   1)
---
> #define nnn   
145,146c145,146
< #define nnn   1)
< #define BZFREE(ppp)
---
> #define nnn   )
> define BZFREE(ppp)
(88.2 %, 24151 bytes)
145c145
< #define nnn   )
---
> #define nnn   
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
> define BZFREE(ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
> # BZFREE(ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
>  BZFREE(ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
> #define (ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
> define (ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
> # (ppp)
145,146c145,146
< #define nnn   )
< #define BZFREE(ppp)
---
> #define nnn   
>  (ppp)
146c146
< #define BZFREE(ppp)
---
> define BZFREE(ppp)
146c146
< #define BZFREE(ppp)
---
>  BZFREE(ppp)
146c146
< #define BZFREE(ppp)
---
> define (ppp)
146c146
< #define BZFREE(ppp)
---
>  (ppp)
146c146
< #define BZFREE(ppp)
---
> define BZFREEppp)
146c146
< #define BZFREE(ppp)
---
>  BZFREEppp)
(88.2 %, 24150 bytes)
146c146
< #define BZFREE(ppp)
---
> define BZFREE(ppp)
146c146
< #define BZFREE(ppp)
---
>  BZFREE(ppp)
146c146
< #define BZFREE(ppp)
---
> define (ppp)
146c146
< #define BZFREE(ppp)
---
>  (ppp)
146c146
< #define BZFREE(ppp)
---
> define BZFREEppp)
146c146
< #define BZFREE(ppp)
---
>  BZFREEppp)
146c146
< #define BZFREE(ppp)
---
> define ppp)
146c146
< #define BZFREE(ppp)
---
>  ppp)
146c146
< #define BZFREE(ppp)
---
> # BZFREE(ppp)
146c146
< #define BZFREE(ppp)
---
> # (ppp)
146c146
< #define BZFREE(ppp)
---
> # BZFREEppp)
146c146
< #define BZFREE(ppp)
---
> # ppp)
146c146
< #define BZFREE(ppp)
---
> # BZFREE()
146c146
< #define BZFREE(ppp)
---
> # ()
146c146
< #define BZFREE(ppp)
---
> # BZFREE)
146c146
< #define BZFREE(ppp)
---
> # )
146c146
< #define BZFREE(ppp)
---
> #define (ppp)
146c146
< #define BZFREE(ppp)
---
> #define ppp)
146c146
< #define BZFREE(ppp)
---
> #define ()
146c146
< #define BZFREE(ppp)
---
> #define )
146c146
< #define BZFREE(ppp)
---
> #define (ppp
146c146
< #define BZFREE(ppp)
---
> #define ppp
(88.2 %, 24143 bytes)
146c146
< #define ppp)
---
> #define 
146c146
< #define ppp)
---
> #define )
148c148
< #define BZ_HDR_B 66
---
> define BZ_HDR_B 66
146c146
< #define ppp)
---
> #define 
148c148
< #define BZ_HDR_B 66
---
> define BZ_HDR_B 66
146c146
< #define ppp)
---
> #define )
148c148
< #define BZ_HDR_B 66
---
> # BZ_HDR_B 66
146c146
< #define ppp)
---
> #define 
148c148
< #define BZ_HDR_B 66
---
> # BZ_HDR_B 66
146c146
< #define ppp)
---
> #define )
148c148
< #define BZ_HDR_B 66
---
>  BZ_HDR_B 66
146c146
< #define ppp)
---
> #define 
148c148
< #define BZ_HDR_B 66
---
>  BZ_HDR_B 66
146c146
< #define ppp)
---
> #define ppp
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
> define BZ_HDR_B 66
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
> # BZ_HDR_B 66
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
>  BZ_HDR_B 66
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
> #define  66
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
> define  66
146c146
< #define ppp)
---
> #define ppp
148c148
< #define BZ_HDR_B 66
---
> #  66
(88.2 %, 24142 bytes)
148c148
< #define BZ_HDR_B 66
---
> define BZ_HDR_B 66
148c148
< #define BZ_HDR_B 66
---
>  BZ_HDR_B 66
148c148
< #define BZ_HDR_B 66
---
> define  66
148c148
< #define BZ_HDR_B 66
---
>   66
148c148
< #define BZ_HDR_B 66
---
> define BZ_HDR_B 
148c148
< #define BZ_HDR_B 66
---
>  BZ_HDR_B 
148c148
< #define BZ_HDR_B 66
---
> define  
148c148
< #define BZ_HDR_B 66
---
>   
148c148
< #define BZ_HDR_B 66
---
> # BZ_HDR_B 66
148c148
< #define BZ_HDR_B 66
---
> #  66
(88.2 %, 24125 bytes)
149c149
< #define BZ_HDR_Z 90
---
>   
149c149
< #define BZ_HDR_Z 90
---
> # BZ_HDR_Z 90
149c149
< #define BZ_HDR_Z 90
---
> #  90
(88.2 %, 24108 bytes)
150c150
< #define BZ_HDR_h 104
---
>   
150c150
< #define BZ_HDR_h 104
---
> # BZ_HDR_h 104
150c150
< #define BZ_HDR_h 104
---
> #  104
(88.2 %, 24090 bytes)
151c151
< #define BZ_HDR_0 48
---
>   
151c151
< #define BZ_HDR_0 48
---
> # BZ_HDR_0 48
151c151
< #define BZ_HDR_0 48
---
> #  48
(88.3 %, 24073 bytes)
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
>   
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> # BZ_MAX_ALPHA_SIZE 258
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> #  258
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> # BZ_MAX_ALPHA_SIZE 
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> #  
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> # BZ_MAX_ALPHA_SIZE 258
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #  258
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> # BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #  
> define BZ_MAX_CODE_LEN 23
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define  258
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define  
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  258
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  258
> # BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  
> # BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  258
>  BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define  
>  BZ_MAX_CODE_LEN 23
153c153
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
> # BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
>  BZ_MAX_CODE_LEN 23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
> #define  23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
> define  23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
> #  23
153,154c153,154
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_MAX_ALPHA_SIZE 
>   23
154c154
< #define BZ_MAX_CODE_LEN 23
---
> define BZ_MAX_CODE_LEN 23
154c154
< #define BZ_MAX_CODE_LEN 23
---
>  BZ_MAX_CODE_LEN 23
154c154
< #define BZ_MAX_CODE_LEN 23
---
> define  23
154c154
< #define BZ_MAX_CODE_LEN 23
---
>   23
154c154
< #define BZ_MAX_CODE_LEN 23
---
> define BZ_MAX_CODE_LEN 
154c154
< #define BZ_MAX_CODE_LEN 23
---
>  BZ_MAX_CODE_LEN 
154c154
< #define BZ_MAX_CODE_LEN 23
---
> define  
154c154
< #define BZ_MAX_CODE_LEN 23
---
>   
154c154
< #define BZ_MAX_CODE_LEN 23
---
> # BZ_MAX_CODE_LEN 23
154c154
< #define BZ_MAX_CODE_LEN 23
---
> #  23
(88.3 %, 24049 bytes)
156c156
< #define BZ_RUNA 0
---
>   
156c156
< #define BZ_RUNA 0
---
> # BZ_RUNA 0
156c156
< #define BZ_RUNA 0
---
> #  0
(88.3 %, 24034 bytes)
157c157
< #define BZ_RUNB 1
---
>   
157c157
< #define BZ_RUNB 1
---
> # BZ_RUNB 1
157c157
< #define BZ_RUNB 1
---
> #  1
(88.3 %, 24019 bytes)
159c159
< #define BZ_N_GROUPS 6
---
>   
159c159
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 6
159c159
< #define BZ_N_GROUPS 6
---
> #  6
159c159
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 
159c159
< #define BZ_N_GROUPS 6
---
> #  
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> # BZ_N_GROUPS 6
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #  6
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> # BZ_N_GROUPS 
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #  
> define BZ_G_SIZE 50
159c159
< #define BZ_N_GROUPS 6
---
> #define  6
159c159
< #define BZ_N_GROUPS 6
---
> #define  
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
> # BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
> # BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
>  BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
>  BZ_G_SIZE 50
159c159
< #define BZ_N_GROUPS 6
---
> #define BZ_N_GROUPS 
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> define BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> # BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
>  BZ_G_SIZE 50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> #define  50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> define  50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> #  50
159,160c159,160
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
>   50
160c160
< #define BZ_G_SIZE 50
---
> define BZ_G_SIZE 50
160c160
< #define BZ_G_SIZE 50
---
>  BZ_G_SIZE 50
160c160
< #define BZ_G_SIZE 50
---
> define  50
160c160
< #define BZ_G_SIZE 50
---
>   50
160c160
< #define BZ_G_SIZE 50
---
> define BZ_G_SIZE 
160c160
< #define BZ_G_SIZE 50
---
>  BZ_G_SIZE 
160c160
< #define BZ_G_SIZE 50
---
> define  
160c160
< #define BZ_G_SIZE 50
---
>   
160c160
< #define BZ_G_SIZE 50
---
> # BZ_G_SIZE 50
160c160
< #define BZ_G_SIZE 50
---
> #  50
160c160
< #define BZ_G_SIZE 50
---
> # BZ_G_SIZE 
160c160
< #define BZ_G_SIZE 50
---
> #  
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> # BZ_G_SIZE 50
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #  50
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> # BZ_G_SIZE 
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #  
> define BZ_N_ITERS 4
160c160
< #define BZ_G_SIZE 50
---
> #define  50
160c160
< #define BZ_G_SIZE 50
---
> #define  
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
> # BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
> # BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
>  BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
>  BZ_N_ITERS 4
160c160
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> define BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> # BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
>  BZ_N_ITERS 4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> #define  4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> define  4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> #  4
160,161c160,161
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
>   4
161c161
< #define BZ_N_ITERS 4
---
> define BZ_N_ITERS 4
161c161
< #define BZ_N_ITERS 4
---
>  BZ_N_ITERS 4
161c161
< #define BZ_N_ITERS 4
---
> define  4
161c161
< #define BZ_N_ITERS 4
---
>   4
161c161
< #define BZ_N_ITERS 4
---
> define BZ_N_ITERS 
161c161
< #define BZ_N_ITERS 4
---
>  BZ_N_ITERS 
161c161
< #define BZ_N_ITERS 4
---
> define  
161c161
< #define BZ_N_ITERS 4
---
>   
161c161
< #define BZ_N_ITERS 4
---
> # BZ_N_ITERS 4
161c161
< #define BZ_N_ITERS 4
---
> #  4
(88.3 %, 24001 bytes)
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
>   2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #  (2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #  2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #  ( + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS  + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #   + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  (2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  ( + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define   + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  (2  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  2  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define  (  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define    (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS  + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS   (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS  + 900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2  900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS   900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS ( + 900000 / BZ_G_SIZE))
(88.3 %, 24000 bytes)
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (900000  BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000  BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS ( + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
(88.3 %, 23999 bytes)
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000 / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000  BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (    BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000 / ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  900000  ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (    ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  ))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE)
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / )
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (900000  BZ_G_SIZE))
163c163
< #define BZ_MAX_SELECTORS (  (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (900000  ))
(88.3 %, 23992 bytes)
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  ))
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
165c165
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
165c165
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           \
163c163
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
165c165
< #define BZ_RAND_DECLS                                                          \
---
>                                                            \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
165c165
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           \
165c165
< #define BZ_RAND_DECLS                                                          \
---
>                                                            \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          
165c165
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          
165c165
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           
165c165
< #define BZ_RAND_DECLS                                                          \
---
>                                                            
165c165
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> # BZ_RAND_DECLS                                                          \
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #                                                           \
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> # BZ_RAND_DECLS                                                          
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #                                                           
>    rNToGo;                                                                \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>   Int32 ;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>   Int32 ;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>    ;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>    ;                                                                \
165c165
< #define BZ_RAND_DECLS                                                          \
---
> #define BZ_RAND_DECLS                                                          
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    rNToGo;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32 ;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    ;                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32 rNToGo                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    rNToGo                                                                \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32                                                                 \
165,166c165,166
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>                                                                    \
166c166
<   Int32 rNToGo;                                                                \
---
>    rNToGo;                                                                \
166c166
<   Int32 rNToGo;                                                                \
---
>    ;                                                                \
166c166
<   Int32 rNToGo;                                                                \
---
>    rNToGo                                                                \
166c166
<   Int32 rNToGo;                                                                \
---
>                                                                    \
(88.3 %, 23981 bytes)
166c166
<    ;                                                                \
---
>                                                                    
166,167c166,167
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>    rTPos
166,167c166,167
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    
>    rTPos
166,167c166,167
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>   Int32 
166,167c166,167
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    
>   Int32 
166,167c166,167
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>    
(88.3 %, 23975 bytes)
166c166
<                                                                    \
---
>                                                                    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
166,167c166,167
<                                                                    \
<   Int32 
---
>                                                                    
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
166c166
<                                                                    \
---
>                                                                    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
166,167c166,167
<                                                                    \
<   Int32 
---
>                                                                    
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
167c167
<   Int32 
---
>    
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       \
167c167
<   Int32 
---
>    
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
(88.3 %, 23970 bytes)
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> # BZ_RAND_INIT_MASK                                                      \
>   ->rNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #                                                       \
>   ->rNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> # BZ_RAND_INIT_MASK                                                      
>   ->rNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #                                                       
>   ->rNToGo = 0;                                                               \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       \
169c169
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   ->rNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       
>   ->rNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   srNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo = 0;                                                               \
169,170c169,170
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   rNToGo = 0;                                                               \
(88.3 %, 23951 bytes)
169,170c169,170
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo = ;                                                               \
169,170c169,170
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>    = ;                                                               \
169,170c169,170
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo  ;                                                               \
169,170c169,170
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>     ;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>    = 0;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>     0;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>    = ;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>     ;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>    = 0                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>     0                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>    =                                                                \
170c170
<   srNToGo = 0;                                                               \
---
>                                                                    \
170c170
<   srNToGo = 0;                                                               \
---
>   srNToGo  0;                                                               \
170c170
<   srNToGo = 0;                                                               \
---
>   srNToGo  ;                                                               \
(88.3 %, 23950 bytes)
170c170
<   srNToGo  0;                                                               \
---
>   srNToGo  ;                                                               \
170c170
<   srNToGo  0;                                                               \
---
>   srNToGo                                                                 \
(88.3 %, 23949 bytes)
170c170
<   srNToGo  ;                                                               \
---
>   srNToGo                                                                 \
170c170
<   srNToGo  ;                                                               \
---
>   srNToGo                                                                 
170,171c170,171
<   srNToGo  ;                                                               \
<   s->rTPos = 0
---
>   srNToGo                                                                 \
>   ->rTPos = 0
(88.3 %, 23948 bytes)
170c170
<   srNToGo                                                                 \
---
>   srNToGo                                                                 
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   ->rTPos = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   srTPos = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   rTPos = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   s-> = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   -> = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   s = 0
170,171c170,171
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>    = 0
171c171
<   s->rTPos = 0
---
>   ->rTPos = 0
171c171
<   s->rTPos = 0
---
>   rTPos = 0
(88.3 %, 23947 bytes)
171c171
<   ->rTPos = 0
---
>   rTPos = 0
171c171
<   ->rTPos = 0
---
>    = 0
(88.3 %, 23945 bytes)
171c171
<   rTPos = 0
---
>    = 0
171c171
<   rTPos = 0
---
>     0
(88.3 %, 23940 bytes)
171c171
<    = 0
---
>     0
171c171
<    = 0
---
>     
171c171
<    = 0
---
>     0
173c173
< #define BZ_RAND_MASK
---
> define BZ_RAND_MASK
(88.3 %, 23939 bytes)
171c171
<     0
---
>     
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
> define BZ_RAND_MASK
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
> # BZ_RAND_MASK
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
>  BZ_RAND_MASK
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
> #define 
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
> define 
171c171
<     0
---
>     
173c173
< #define BZ_RAND_MASK
---
> # 
(88.3 %, 23938 bytes)
173c173
< #define BZ_RAND_MASK
---
> define BZ_RAND_MASK
173c173
< #define BZ_RAND_MASK
---
>  BZ_RAND_MASK
173c173
< #define BZ_RAND_MASK
---
> define 
173c173
< #define BZ_RAND_MASK
---
>  
173c173
< #define BZ_RAND_MASK
---
> define BZ_RAND_MASK
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define BZ_RAND_UPD_MASK                                                       \
173c173
< #define BZ_RAND_MASK
---
>  BZ_RAND_MASK
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define BZ_RAND_UPD_MASK                                                       \
173c173
< #define BZ_RAND_MASK
---
> define 
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define BZ_RAND_UPD_MASK                                                       \
173c173
< #define BZ_RAND_MASK
---
>  
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define BZ_RAND_UPD_MASK                                                       \
173c173
< #define BZ_RAND_MASK
---
> # BZ_RAND_MASK
173c173
< #define BZ_RAND_MASK
---
> # 
(88.3 %, 23919 bytes)
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
>                                                         \
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define BZ_RAND_UPD_MASK                                                       
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
>  BZ_RAND_UPD_MASK                                                       
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> define                                                        
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
>                                                         
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> # BZ_RAND_UPD_MASK                                                       \
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #                                                        \
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> # BZ_RAND_UPD_MASK                                                       
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #                                                        
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> # BZ_RAND_UPD_MASK                                                       \
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #                                                        \
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> # BZ_RAND_UPD_MASK                                                       
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #                                                        
>                                                                              \
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define                                                        \
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define                                                        
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>   if                                                                           
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>   if                                                                           
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>                                                                              
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>                                                                              
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define BZ_RAND_UPD_MASK                                                       
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              \
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>   if                                                                           
175,176c175,176
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              
175c175
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define BZ_RAND_UPD_MASK                                                       
177c177
<     s->rNToGo--;
---
>     ->rNToGo--;
175,177c175,177
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              \
>     ->rNToGo--;
175,177c175,177
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>   if                                                                           
>     ->rNToGo--;
175,177c175,177
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              
>     ->rNToGo--;
176c176
<   if                                                                           \
---
>                                                                              \
176c176
<   if                                                                           \
---
>                                                                              
176,177c176,177
<   if                                                                           \
<     s->rNToGo--;
---
>                                                                              \
>     ->rNToGo--;
(88.3 %, 23917 bytes)
176c176
<                                                                              \
---
>                                                                              
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     ->rNToGo--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     srNToGo--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     rNToGo--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     s->--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     ->--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     s--;
176,177c176,177
<                                                                              \
<     s->rNToGo--;
---
>                                                                              
>     --;
177c177
<     s->rNToGo--;
---
>     ->rNToGo--;
177c177
<     s->rNToGo--;
---
>     rNToGo--;
(88.3 %, 23916 bytes)
177c177
<     ->rNToGo--;
---
>     rNToGo--;
177c177
<     ->rNToGo--;
---
>     --;
(88.3 %, 23914 bytes)
177c177
<     rNToGo--;
---
>     --;
177c177
<     rNToGo--;
---
>     ;
177c177
<     rNToGo--;
---
>     --
(88.3 %, 23908 bytes)
177c177
<     --;
---
>     ;
177c177
<     --;
---
>     
177c177
<     --;
---
>     ;
179c179
< #define BZ_INITIALISE_CRC
---
> define BZ_INITIALISE_CRC
(88.3 %, 23906 bytes)
177c177
<     ;
---
>     
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
> define BZ_INITIALISE_CRC
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
> # BZ_INITIALISE_CRC
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
>  BZ_INITIALISE_CRC
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
> #define 
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
> define 
177c177
<     ;
---
>     
179c179
< #define BZ_INITIALISE_CRC
---
> # 
(88.3 %, 23905 bytes)
179c179
< #define BZ_INITIALISE_CRC
---
> define BZ_INITIALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
>  BZ_INITIALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
> define 
179c179
< #define BZ_INITIALISE_CRC
---
>  
179c179
< #define BZ_INITIALISE_CRC
---
> define BZ_INITIALISE_CRC
181c181
< #define BZ_FINALISE_CRC
---
> define BZ_FINALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
>  BZ_INITIALISE_CRC
181c181
< #define BZ_FINALISE_CRC
---
> define BZ_FINALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
> define 
181c181
< #define BZ_FINALISE_CRC
---
> define BZ_FINALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
>  
181c181
< #define BZ_FINALISE_CRC
---
> define BZ_FINALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
> # BZ_INITIALISE_CRC
179c179
< #define BZ_INITIALISE_CRC
---
> # 
(88.3 %, 23881 bytes)
181c181
< #define BZ_FINALISE_CRC
---
>  
181c181
< #define BZ_FINALISE_CRC
---
> define BZ_FINALISE_CRC
183c183
< #define BZ_UPDATE_CRC
---
> define BZ_UPDATE_CRC
181c181
< #define BZ_FINALISE_CRC
---
>  BZ_FINALISE_CRC
183c183
< #define BZ_UPDATE_CRC
---
> define BZ_UPDATE_CRC
181c181
< #define BZ_FINALISE_CRC
---
> define 
183c183
< #define BZ_UPDATE_CRC
---
> define BZ_UPDATE_CRC
181c181
< #define BZ_FINALISE_CRC
---
>  
183c183
< #define BZ_UPDATE_CRC
---
> define BZ_UPDATE_CRC
181c181
< #define BZ_FINALISE_CRC
---
> # BZ_FINALISE_CRC
181c181
< #define BZ_FINALISE_CRC
---
> # 
(88.4 %, 23859 bytes)
183c183
< #define BZ_UPDATE_CRC
---
>  
183c183
< #define BZ_UPDATE_CRC
---
> define BZ_UPDATE_CRC
185c185
< #define BZ_M_IDLE 1
---
> define BZ_M_IDLE 1
183c183
< #define BZ_UPDATE_CRC
---
>  BZ_UPDATE_CRC
185c185
< #define BZ_M_IDLE 1
---
> define BZ_M_IDLE 1
183c183
< #define BZ_UPDATE_CRC
---
> define 
185c185
< #define BZ_M_IDLE 1
---
> define BZ_M_IDLE 1
183c183
< #define BZ_UPDATE_CRC
---
>  
185c185
< #define BZ_M_IDLE 1
---
> define BZ_M_IDLE 1
183c183
< #define BZ_UPDATE_CRC
---
> # BZ_UPDATE_CRC
183c183
< #define BZ_UPDATE_CRC
---
> # 
(88.4 %, 23839 bytes)
185c185
< #define BZ_M_IDLE 1
---
>   1
185c185
< #define BZ_M_IDLE 1
---
> define BZ_M_IDLE 
185c185
< #define BZ_M_IDLE 1
---
>  BZ_M_IDLE 
185c185
< #define BZ_M_IDLE 1
---
> define  
185c185
< #define BZ_M_IDLE 1
---
>   
185c185
< #define BZ_M_IDLE 1
---
> # BZ_M_IDLE 1
185c185
< #define BZ_M_IDLE 1
---
> #  1
(88.4 %, 23822 bytes)
186c186
< #define BZ_M_RUNNING 2
---
>   
186c186
< #define BZ_M_RUNNING 2
---
> # BZ_M_RUNNING 2
186c186
< #define BZ_M_RUNNING 2
---
> #  2
186c186
< #define BZ_M_RUNNING 2
---
> # BZ_M_RUNNING 
186c186
< #define BZ_M_RUNNING 2
---
> #  
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> # BZ_M_RUNNING 2
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #  2
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> # BZ_M_RUNNING 
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #  
> define BZ_M_FLUSHING 3
186c186
< #define BZ_M_RUNNING 2
---
> #define  2
186c186
< #define BZ_M_RUNNING 2
---
> #define  
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
> # BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
> # BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
>  BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
>  BZ_M_FLUSHING 3
186c186
< #define BZ_M_RUNNING 2
---
> #define BZ_M_RUNNING 
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> define BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> # BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
>  BZ_M_FLUSHING 3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> #define  3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> define  3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> #  3
186,187c186,187
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
>   3
187c187
< #define BZ_M_FLUSHING 3
---
> define BZ_M_FLUSHING 3
187c187
< #define BZ_M_FLUSHING 3
---
>  BZ_M_FLUSHING 3
187c187
< #define BZ_M_FLUSHING 3
---
> define  3
187c187
< #define BZ_M_FLUSHING 3
---
>   3
187c187
< #define BZ_M_FLUSHING 3
---
> define BZ_M_FLUSHING 
187c187
< #define BZ_M_FLUSHING 3
---
>  BZ_M_FLUSHING 
187c187
< #define BZ_M_FLUSHING 3
---
> define  
187c187
< #define BZ_M_FLUSHING 3
---
>   
187c187
< #define BZ_M_FLUSHING 3
---
> # BZ_M_FLUSHING 3
187c187
< #define BZ_M_FLUSHING 3
---
> #  3
(88.4 %, 23801 bytes)
188c188
< #define BZ_M_FINISHING 4
---
>   
188c188
< #define BZ_M_FINISHING 4
---
> # BZ_M_FINISHING 4
188c188
< #define BZ_M_FINISHING 4
---
> #  4
(88.4 %, 23779 bytes)
190c190
< #define BZ_S_OUTPUT 1
---
>   
190c190
< #define BZ_S_OUTPUT 1
---
> # BZ_S_OUTPUT 1
190c190
< #define BZ_S_OUTPUT 1
---
> #  1
(88.4 %, 23760 bytes)
191c191
< #define BZ_S_INPUT 2
---
>   
191c191
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 2
191c191
< #define BZ_S_INPUT 2
---
> #  2
191c191
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 
191c191
< #define BZ_S_INPUT 2
---
> #  
191c191
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 2
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #  2
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #  
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  2
191c191
< #define BZ_S_INPUT 2
---
> #define  
191c191
< #define BZ_S_INPUT 2
---
> #define  2
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  2
193c193
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  
193c193
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  2
193c193
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define  
193c193
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> #define  2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> define  2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
> #  2
191c191
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
193c193
< #define BZ_N_RADIX 2
---
>   2
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
193c193
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
193c193
< #define BZ_N_RADIX 2
---
> define  2
193c193
< #define BZ_N_RADIX 2
---
>   2
193c193
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
193c193
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
193c193
< #define BZ_N_RADIX 2
---
> define  
193c193
< #define BZ_N_RADIX 2
---
>   
193c193
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
193c193
< #define BZ_N_RADIX 2
---
> #  2
193c193
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 
193c193
< #define BZ_N_RADIX 2
---
> #  
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> # BZ_N_RADIX 2
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #  2
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> # BZ_N_RADIX 
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #  
> define BZ_N_QSORT 12
193c193
< #define BZ_N_RADIX 2
---
> #define  2
193c193
< #define BZ_N_RADIX 2
---
> #define  
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  2
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  2
> # BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  
> # BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  2
>  BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define  
>  BZ_N_QSORT 12
193c193
< #define BZ_N_RADIX 2
---
> #define BZ_N_RADIX 
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
> define BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
> # BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
>  BZ_N_QSORT 12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
> #define  12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
> define  12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
> #  12
193,194c193,194
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_N_RADIX 
>   12
194c194
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 12
194c194
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 12
194c194
< #define BZ_N_QSORT 12
---
> define  12
194c194
< #define BZ_N_QSORT 12
---
>   12
194c194
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 
194c194
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 
(88.4 %, 23759 bytes)
194c194
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 12
194c194
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 12
194c194
< #define BZ_N_QSORT 12
---
> define  12
194c194
< #define BZ_N_QSORT 12
---
>   12
194c194
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 
194c194
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 
194c194
< #define BZ_N_QSORT 12
---
> define  
194c194
< #define BZ_N_QSORT 12
---
>   
194c194
< #define BZ_N_QSORT 12
---
> # BZ_N_QSORT 12
194c194
< #define BZ_N_QSORT 12
---
> #  12
194c194
< #define BZ_N_QSORT 12
---
> # BZ_N_QSORT 
194c194
< #define BZ_N_QSORT 12
---
> #  
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> # BZ_N_QSORT 12
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #  12
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> # BZ_N_QSORT 
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #  
> define BZ_N_SHELL 18
194c194
< #define BZ_N_QSORT 12
---
> #define  12
194c194
< #define BZ_N_QSORT 12
---
> #define  
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  12
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  12
> # BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  
> # BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  12
>  BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define  
>  BZ_N_SHELL 18
194c194
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
> define BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
> # BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
>  BZ_N_SHELL 18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
> #define  18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
> define  18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
> #  18
194,195c194,195
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_QSORT 
>   18
195c195
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
195c195
< #define BZ_N_SHELL 18
---
>  BZ_N_SHELL 18
195c195
< #define BZ_N_SHELL 18
---
> define  18
195c195
< #define BZ_N_SHELL 18
---
>   18
195c195
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 
195c195
< #define BZ_N_SHELL 18
---
>  BZ_N_SHELL 
(88.4 %, 23757 bytes)
195c195
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
195c195
< #define BZ_N_SHELL 18
---
>  BZ_N_SHELL 18
195c195
< #define BZ_N_SHELL 18
---
> define  18
195c195
< #define BZ_N_SHELL 18
---
>   18
195c195
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 
195c195
< #define BZ_N_SHELL 18
---
>  BZ_N_SHELL 
195c195
< #define BZ_N_SHELL 18
---
> define  
195c195
< #define BZ_N_SHELL 18
---
>   
195c195
< #define BZ_N_SHELL 18
---
> # BZ_N_SHELL 18
195c195
< #define BZ_N_SHELL 18
---
> #  18
195c195
< #define BZ_N_SHELL 18
---
> # BZ_N_SHELL 
195c195
< #define BZ_N_SHELL 18
---
> #  
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_SHELL 18
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  18
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_SHELL 
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195c195
< #define BZ_N_SHELL 18
---
> #define  18
195c195
< #define BZ_N_SHELL 18
---
> #define  
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  18
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  18
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  18
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195c195
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> #define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> #  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
195,196c195,196
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
(88.4 %, 23755 bytes)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  ( + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #   + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  ( + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define   + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (  BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define    BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX +  + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT  +  + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX   + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
(88.4 %, 23745 bytes)
196c196
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT  BZ_N_SHELL + 2)
(88.4 %, 23744 bytes)
196c196
< #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
(88.4 %, 23734 bytes)
196c196
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
196c196
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (     + 2)
196c196
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL  2)
(88.4 %, 23733 bytes)
196c196
< #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (     + 2)
196c196
< #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (      2)
(88.4 %, 23723 bytes)
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2)
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      )
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2)
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      )
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + )
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + 
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + )
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + 
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + )
198c198
< typedef struct {
---
> typedef  {
(88.4 %, 23722 bytes)
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
198c198
< typedef struct {
---
> typedef  {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
198c198
< typedef struct {
---
> typedef  {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
198c198
< typedef struct {
---
>   {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
198c198
< typedef struct {
---
>   {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
>  struct {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
> typedef  {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
>   {
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
> typedef struct 
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
>  struct 
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
> typedef  
196c196
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
198c198
< typedef struct {
---
>   
198c198
< typedef struct {
---
>  struct {
198c198
< typedef struct {
---
>   {
198c198
< typedef struct {
---
>  struct 
198c198
< typedef struct {
---
>   
198c198
< typedef struct {
---
>  struct {
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
>   {
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
>  struct 
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
>   
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
> typedef  {
198c198
< typedef struct {
---
> typedef  
198c198
< typedef struct {
---
> typedef  {
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
> typedef  
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
> typedef  {
200c200
<   bz_stream strm;
---
>   bz_stream ;
198c198
< typedef struct {
---
> typedef  
200c200
<   bz_stream strm;
---
>   bz_stream ;
198c198
< typedef struct {
---
> typedef  {
200c200
<   bz_stream strm;
---
>    ;
198c198
< typedef struct {
---
> typedef  
200c200
<   bz_stream strm;
---
>    ;
198c198
< typedef struct {
---
> typedef struct 
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>    strm;
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>   bz_stream ;
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>    ;
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>   bz_stream strm
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>    strm
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>   bz_stream 
198c198
< typedef struct {
---
> typedef struct 
200c200
<   bz_stream strm;
---
>    
200c200
<   bz_stream strm;
---
>    strm;
200c200
<   bz_stream strm;
---
>    ;
200c200
<   bz_stream strm;
---
>    strm
200c200
<   bz_stream strm;
---
>    
200c200
<   bz_stream strm;
---
>    strm;
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>    ;
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>    strm
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>    
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>   bz_stream ;
200c200
<   bz_stream strm;
---
>   bz_stream 
200c200
<   bz_stream strm;
---
>   bz_stream ;
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>   bz_stream 
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>   bz_stream ;
202c202
<   Int32 mode;
---
>   Int32 ;
200c200
<   bz_stream strm;
---
>   bz_stream 
202c202
<   Int32 mode;
---
>   Int32 ;
200c200
<   bz_stream strm;
---
>   bz_stream ;
202c202
<   Int32 mode;
---
>    ;
200c200
<   bz_stream strm;
---
>   bz_stream 
202c202
<   Int32 mode;
---
>    ;
200c200
<   bz_stream strm;
---
>   bz_stream strm
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>    mode;
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>   Int32 ;
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>    ;
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>   Int32 mode
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>    mode
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>   Int32 
200c200
<   bz_stream strm;
---
>   bz_stream strm
202c202
<   Int32 mode;
---
>    
202c202
<   Int32 mode;
---
>    mode;
202c202
<   Int32 mode;
---
>    ;
202c202
<   Int32 mode;
---
>    mode
202c202
<   Int32 mode;
---
>    
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>    mode;
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>    ;
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>    mode
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>    
>    state;
202c202
<   Int32 mode;
---
>   Int32 ;
202c202
<   Int32 mode;
---
>   Int32 
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 ;
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 ;
>   Int32 ;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 
>   Int32 ;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 ;
>    ;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 
>    ;
202c202
<   Int32 mode;
---
>   Int32 mode
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>    state;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>   Int32 ;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>    ;
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>   Int32 state
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>    state
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>   Int32 
202,203c202,203
<   Int32 mode;
<   Int32 state;
---
>   Int32 mode
>    
203c203
<   Int32 state;
---
>    state;
203c203
<   Int32 state;
---
>    ;
203c203
<   Int32 state;
---
>    state
203c203
<   Int32 state;
---
>    
203c203
<   Int32 state;
---
>    state;
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>    ;
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>    state
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>    
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>   Int32 ;
203c203
<   Int32 state;
---
>   Int32 
203c203
<   Int32 state;
---
>   Int32 ;
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>   Int32 
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>   Int32 ;
205c205
<   UInt32 avail_in_expect;
---
>   UInt32 ;
203c203
<   Int32 state;
---
>   Int32 
205c205
<   UInt32 avail_in_expect;
---
>   UInt32 ;
203c203
<   Int32 state;
---
>   Int32 ;
205c205
<   UInt32 avail_in_expect;
---
>    ;
203c203
<   Int32 state;
---
>   Int32 
205c205
<   UInt32 avail_in_expect;
---
>    ;
203c203
<   Int32 state;
---
>   Int32 state
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>   UInt32 ;
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>    ;
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>   UInt32 avail_in_expect
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>   UInt32 
203c203
<   Int32 state;
---
>   Int32 state
205c205
<   UInt32 avail_in_expect;
---
>    
205c205
<   UInt32 avail_in_expect;
---
>    avail_in_expect;
205c205
<   UInt32 avail_in_expect;
---
>    ;
(88.4 %, 23700 bytes)
205c205
<    ;
---
>    
207c207
<   UInt32 *arr1;
---
>    arr1;
205c205
<    ;
---
>    
207c207
<   UInt32 *arr1;
---
>   UInt32 *;
205c205
<    ;
---
>    
207c207
<   UInt32 *arr1;
---
>    *;
205c205
<    ;
---
>    
207c207
<   UInt32 *arr1;
---
>   UInt32 ;
205c205
<    ;
---
>    
207c207
<   UInt32 *arr1;
---
>    ;
207c207
<   UInt32 *arr1;
---
>    *arr1;
207c207
<   UInt32 *arr1;
---
>    arr1;
207c207
<   UInt32 *arr1;
---
>    *;
207c207
<   UInt32 *arr1;
---
>    ;
207c207
<   UInt32 *arr1;
---
>    *arr1
207c207
<   UInt32 *arr1;
---
>    arr1
207c207
<   UInt32 *arr1;
---
>    *
207c207
<   UInt32 *arr1;
---
>    
207c207
<   UInt32 *arr1;
---
>   UInt32 arr1;
207c207
<   UInt32 *arr1;
---
>   UInt32 ;
207c207
<   UInt32 *arr1;
---
>   UInt32 arr1
207c207
<   UInt32 *arr1;
---
>   UInt32 
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1;
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 ;
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 
>    *arr2;
207c207
<   UInt32 *arr1;
---
>   UInt32 *;
207c207
<   UInt32 *arr1;
---
>   UInt32 *
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *;
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *;
>   UInt32 arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *
>   UInt32 arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *;
>    arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *
>    arr2;
207c207
<   UInt32 *arr1;
---
>   UInt32 *arr1
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>    *arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>   UInt32 arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>    arr2;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>   UInt32 *;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>    *;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>   UInt32 ;
207,208c207,208
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *arr1
>    ;
208c208
<   UInt32 *arr2;
---
>    *arr2;
208c208
<   UInt32 *arr2;
---
>    arr2;
208c208
<   UInt32 *arr2;
---
>    *;
208c208
<   UInt32 *arr2;
---
>    ;
208c208
<   UInt32 *arr2;
---
>    *arr2
208c208
<   UInt32 *arr2;
---
>    arr2
208c208
<   UInt32 *arr2;
---
>    *
208c208
<   UInt32 *arr2;
---
>    
208c208
<   UInt32 *arr2;
---
>   UInt32 arr2;
208c208
<   UInt32 *arr2;
---
>   UInt32 ;
208c208
<   UInt32 *arr2;
---
>   UInt32 arr2
208c208
<   UInt32 *arr2;
---
>   UInt32 
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2;
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 ;
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 
>    *ftab;
208c208
<   UInt32 *arr2;
---
>   UInt32 *;
208c208
<   UInt32 *arr2;
---
>   UInt32 *
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *;
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *;
>   UInt32 ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *
>   UInt32 ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *;
>    ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *
>    ftab;
208c208
<   UInt32 *arr2;
---
>   UInt32 *arr2
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>    *ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>   UInt32 ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>    ftab;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>   UInt32 *;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>    *;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>   UInt32 ;
208,209c208,209
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *arr2
>    ;
209c209
<   UInt32 *ftab;
---
>    *ftab;
209c209
<   UInt32 *ftab;
---
>    ftab;
209c209
<   UInt32 *ftab;
---
>    *;
209c209
<   UInt32 *ftab;
---
>    ;
209c209
<   UInt32 *ftab;
---
>    *ftab
209c209
<   UInt32 *ftab;
---
>    ftab
209c209
<   UInt32 *ftab;
---
>    *
209c209
<   UInt32 *ftab;
---
>    
209c209
<   UInt32 *ftab;
---
>   UInt32 ftab;
209c209
<   UInt32 *ftab;
---
>   UInt32 ;
209c209
<   UInt32 *ftab;
---
>   UInt32 ftab
209c209
<   UInt32 *ftab;
---
>   UInt32 
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ftab;
>    origPtr;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    origPtr;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 
>    origPtr;
209c209
<   UInt32 *ftab;
---
>   UInt32 *;
209c209
<   UInt32 *ftab;
---
>   UInt32 *
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 *;
>    origPtr;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 *
>    origPtr;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 *;
>   Int32 ;
209,210c209,210
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 *
>   Int32 ;
(88.4 %, 23699 bytes)
209c209
<   UInt32 ftab;
---
>   UInt32 ;
209c209
<   UInt32 ftab;
---
>   UInt32 
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    origPtr;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>    origPtr;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>   Int32 ;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>   Int32 ;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    ;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>    ;
209c209
<   UInt32 ftab;
---
>   UInt32 ftab
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 ;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    ;
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 origPtr
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 
209,210c209,210
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    
210c210
<   Int32 origPtr;
---
>    origPtr;
210c210
<   Int32 origPtr;
---
>    ;
(88.4 %, 23686 bytes)
210c210
<    ;
---
>    
212c212
<   UInt32 *ptr;
---
>    ptr;
210c210
<    ;
---
>    
212c212
<   UInt32 *ptr;
---
>   UInt32 *;
210c210
<    ;
---
>    
212c212
<   UInt32 *ptr;
---
>    *;
210c210
<    ;
---
>    
212c212
<   UInt32 *ptr;
---
>   UInt32 ;
210c210
<    ;
---
>    
212c212
<   UInt32 *ptr;
---
>    ;
212c212
<   UInt32 *ptr;
---
>    *ptr;
212c212
<   UInt32 *ptr;
---
>    ptr;
212c212
<   UInt32 *ptr;
---
>    *;
212c212
<   UInt32 *ptr;
---
>    ;
212c212
<   UInt32 *ptr;
---
>    *ptr
212c212
<   UInt32 *ptr;
---
>    ptr
212c212
<   UInt32 *ptr;
---
>    *
212c212
<   UInt32 *ptr;
---
>    
212c212
<   UInt32 *ptr;
---
>   UInt32 ptr;
212c212
<   UInt32 *ptr;
---
>   UInt32 ;
212c212
<   UInt32 *ptr;
---
>   UInt32 ptr
212c212
<   UInt32 *ptr;
---
>   UInt32 
212,213c212,213
<   UInt32 *ptr;
<   unsigned char block;
---
>   UInt32 ptr;
>    char block;
(88.4 %, 23685 bytes)
212c212
<   UInt32 ptr;
---
>   UInt32 ;
212c212
<   UInt32 ptr;
---
>   UInt32 
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ;
>    char block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 
>    char block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ;
>   unsigned  block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 
>   unsigned  block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ;
>     block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 
>     block;
212c212
<   UInt32 ptr;
---
>   UInt32 ptr
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>    char block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>   unsigned  block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>     block;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>   unsigned char ;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>    char ;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>   unsigned  ;
212,213c212,213
<   UInt32 ptr;
<   unsigned char block;
---
>   UInt32 ptr
>     ;
213c213
<   unsigned char block;
---
>    char block;
213c213
<   unsigned char block;
---
>     block;
213c213
<   unsigned char block;
---
>    char ;
213c213
<   unsigned char block;
---
>     ;
213c213
<   unsigned char block;
---
>    char block
213c213
<   unsigned char block;
---
>     block
213c213
<   unsigned char block;
---
>    char 
213c213
<   unsigned char block;
---
>     
213c213
<   unsigned char block;
---
>   unsigned  block;
(88.4 %, 23677 bytes)
213c213
<    char block;
---
>     block;
213c213
<    char block;
---
>     ;
213c213
<    char block;
---
>     block
213c213
<    char block;
---
>     
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>     block;
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>     ;
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>     block
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>     
>    short mtfv;
213c213
<    char block;
---
>    char ;
213c213
<    char block;
---
>    char 
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char ;
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char 
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char ;
>   unsigned  mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char 
>   unsigned  mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char ;
>     mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char 
>     mtfv;
213c213
<    char block;
---
>    char block
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>    short mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>   unsigned  mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>     mtfv;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>   unsigned short ;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>    short ;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>   unsigned  ;
213,214c213,214
<    char block;
<   unsigned short mtfv;
---
>    char block
>     ;
214c214
<   unsigned short mtfv;
---
>    short mtfv;
214c214
<   unsigned short mtfv;
---
>     mtfv;
214c214
<   unsigned short mtfv;
---
>    short ;
214c214
<   unsigned short mtfv;
---
>     ;
214c214
<   unsigned short mtfv;
---
>    short mtfv
214c214
<   unsigned short mtfv;
---
>     mtfv
214c214
<   unsigned short mtfv;
---
>    short 
214c214
<   unsigned short mtfv;
---
>     
214c214
<   unsigned short mtfv;
---
>   unsigned  mtfv;
(88.5 %, 23669 bytes)
214c214
<    short mtfv;
---
>     mtfv;
214c214
<    short mtfv;
---
>     ;
214c214
<    short mtfv;
---
>     mtfv
214c214
<    short mtfv;
---
>     
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>     mtfv;
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>     ;
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>     mtfv
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>     
>    char zbits;
214c214
<    short mtfv;
---
>    short ;
214c214
<    short mtfv;
---
>    short 
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short ;
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short 
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short ;
>   unsigned  zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short 
>   unsigned  zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short ;
>     zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short 
>     zbits;
214c214
<    short mtfv;
---
>    short mtfv
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>    char zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>   unsigned  zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>     zbits;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>   unsigned char ;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>    char ;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>   unsigned  ;
214,215c214,215
<    short mtfv;
<   unsigned char zbits;
---
>    short mtfv
>     ;
215c215
<   unsigned char zbits;
---
>    char zbits;
215c215
<   unsigned char zbits;
---
>     zbits;
215c215
<   unsigned char zbits;
---
>    char ;
215c215
<   unsigned char zbits;
---
>     ;
215c215
<   unsigned char zbits;
---
>    char zbits
215c215
<   unsigned char zbits;
---
>     zbits
215c215
<   unsigned char zbits;
---
>    char 
215c215
<   unsigned char zbits;
---
>     
215c215
<   unsigned char zbits;
---
>   unsigned  zbits;
(88.5 %, 23661 bytes)
215c215
<    char zbits;
---
>     zbits;
215c215
<    char zbits;
---
>     ;
215c215
<    char zbits;
---
>     zbits
215c215
<    char zbits;
---
>     
215c215
<    char zbits;
---
>     zbits;
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>     ;
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>     zbits
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>     
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>    char ;
215c215
<    char zbits;
---
>    char 
215c215
<    char zbits;
---
>    char ;
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>    char 
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>    char ;
217c217
<   Int32 workFactor;
---
>   Int32 ;
215c215
<    char zbits;
---
>    char 
217c217
<   Int32 workFactor;
---
>   Int32 ;
215c215
<    char zbits;
---
>    char ;
217c217
<   Int32 workFactor;
---
>    ;
215c215
<    char zbits;
---
>    char 
217c217
<   Int32 workFactor;
---
>    ;
215c215
<    char zbits;
---
>    char zbits
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>    workFactor;
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>   Int32 ;
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>    ;
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>    workFactor
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>   Int32 
215c215
<    char zbits;
---
>    char zbits
217c217
<   Int32 workFactor;
---
>    
217c217
<   Int32 workFactor;
---
>    workFactor;
217c217
<   Int32 workFactor;
---
>    ;
217c217
<   Int32 workFactor;
---
>    workFactor
217c217
<   Int32 workFactor;
---
>    
217c217
<   Int32 workFactor;
---
>    workFactor;
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>    ;
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>    workFactor
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>    
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>   Int32 ;
217c217
<   Int32 workFactor;
---
>   Int32 
217c217
<   Int32 workFactor;
---
>   Int32 ;
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>   Int32 
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>   Int32 ;
219c219
<   UInt32 state_in_ch;
---
>   UInt32 ;
217c217
<   Int32 workFactor;
---
>   Int32 
219c219
<   UInt32 state_in_ch;
---
>   UInt32 ;
217c217
<   Int32 workFactor;
---
>   Int32 ;
219c219
<   UInt32 state_in_ch;
---
>    ;
217c217
<   Int32 workFactor;
---
>   Int32 
219c219
<   UInt32 state_in_ch;
---
>    ;
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>   UInt32 ;
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>    ;
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>   UInt32 state_in_ch
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>   UInt32 
217c217
<   Int32 workFactor;
---
>   Int32 workFactor
219c219
<   UInt32 state_in_ch;
---
>    
219c219
<   UInt32 state_in_ch;
---
>    state_in_ch;
219c219
<   UInt32 state_in_ch;
---
>    ;
(88.5 %, 23643 bytes)
218a219
>    
220d220
<   Int32 state_in_len;
219,220c219,220
<    ;
<   Int32 state_in_len;
---
>    
>   Int32 state_in_len
219,220c219,220
<    ;
<   Int32 state_in_len;
---
>    
>    state_in_len
219,220c219,220
<    ;
<   Int32 state_in_len;
---
>    
>   Int32 
219,220c219,220
<    ;
<   Int32 state_in_len;
---
>    
>    
(88.5 %, 23625 bytes)
220,221c220,221
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
220c220
<    ;
---
>    
223c223
<   Int32 nblock;
---
>    nblock;
220,221c220,221
<    ;
<   BZ_RAND_DECLS;
---
>    
>   ;
223c223
<   Int32 nblock;
---
>    nblock;
220,221c220,221
<    ;
<   BZ_RAND_DECLS;
---
>    
>   BZ_RAND_DECLS
223c223
<   Int32 nblock;
---
>    nblock;
220,221c220,221
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
223c223
<   Int32 nblock;
---
>    nblock;
221c221
<   BZ_RAND_DECLS;
---
>   ;
221c221
<   BZ_RAND_DECLS;
---
>   
221c221
<   BZ_RAND_DECLS;
---
>   ;
223c223
<   Int32 nblock;
---
>    nblock;
221c221
<   BZ_RAND_DECLS;
---
>   
223c223
<   Int32 nblock;
---
>    nblock;
(88.5 %, 23612 bytes)
221c221
<   ;
---
>   
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>    nblock;
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>   Int32 ;
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>    ;
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>   Int32 nblock
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>    nblock
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>   Int32 
221c221
<   ;
---
>   
223c223
<   Int32 nblock;
---
>    
223c223
<   Int32 nblock;
---
>    nblock;
223c223
<   Int32 nblock;
---
>    ;
223c223
<   Int32 nblock;
---
>    nblock
(88.5 %, 23611 bytes)
223c223
<   Int32 nblock;
---
>    nblock;
223c223
<   Int32 nblock;
---
>    ;
223c223
<   Int32 nblock;
---
>    nblock
223c223
<   Int32 nblock;
---
>    
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    nblock;
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    ;
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    nblock
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    
>    nblockMAX;
223c223
<   Int32 nblock;
---
>   Int32 ;
223c223
<   Int32 nblock;
---
>   Int32 
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>   Int32 ;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>   Int32 ;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>    ;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>    ;
223c223
<   Int32 nblock;
---
>   Int32 nblock
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    nblockMAX;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 ;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    ;
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 nblockMAX
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    nblockMAX
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 
223,224c223,224
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    
224c224
<   Int32 nblockMAX;
---
>    nblockMAX;
224c224
<   Int32 nblockMAX;
---
>    ;
224c224
<   Int32 nblockMAX;
---
>    nblockMAX
224c224
<   Int32 nblockMAX;
---
>    
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>    nblockMAX;
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>    ;
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>    nblockMAX
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>    
>    numZ;
224c224
<   Int32 nblockMAX;
---
>   Int32 ;
224c224
<   Int32 nblockMAX;
---
>   Int32 
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 ;
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 ;
>   Int32 ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 
>   Int32 ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 ;
>    ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 
>    ;
224c224
<   Int32 nblockMAX;
---
>   Int32 nblockMAX
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>    numZ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>   Int32 ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>    ;
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>   Int32 numZ
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>    numZ
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>   Int32 
224,225c224,225
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 nblockMAX
>    
225c225
<   Int32 numZ;
---
>    numZ;
225c225
<   Int32 numZ;
---
>    ;
(88.5 %, 23601 bytes)
224a225
>    
226d226
<   Int32 state_out_pos;
225,226c225,226
<    ;
<   Int32 state_out_pos;
---
>    
>   Int32 state_out_pos
225,226c225,226
<    ;
<   Int32 state_out_pos;
---
>    
>    state_out_pos
225,226c225,226
<    ;
<   Int32 state_out_pos;
---
>    
>   Int32 
225,226c225,226
<    ;
<   Int32 state_out_pos;
---
>    
>    
226c226
<   Int32 state_out_pos;
---
>    state_out_pos;
226c226
<   Int32 state_out_pos;
---
>    ;
(88.5 %, 23582 bytes)
226c226
<    ;
---
>    
228c228
<   Int32 nInUse;
---
>    ;
226c226
<    ;
---
>    
228c228
<   Int32 nInUse;
---
>   Int32 nInUse
226c226
<    ;
---
>    
228c228
<   Int32 nInUse;
---
>    nInUse
226c226
<    ;
---
>    
228c228
<   Int32 nInUse;
---
>   Int32 
226c226
<    ;
---
>    
228c228
<   Int32 nInUse;
---
>    
228c228
<   Int32 nInUse;
---
>    nInUse;
228c228
<   Int32 nInUse;
---
>    ;
228c228
<   Int32 nInUse;
---
>    nInUse
228c228
<   Int32 nInUse;
---
>    
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>    nInUse;
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>    ;
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>    nInUse
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>    
>    char inUse[256];
228c228
<   Int32 nInUse;
---
>   Int32 ;
228c228
<   Int32 nInUse;
---
>   Int32 
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 ;
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 ;
>   unsigned  inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 
>   unsigned  inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 ;
>     inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 
>     inUse[256];
228c228
<   Int32 nInUse;
---
>   Int32 nInUse
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>    char inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>   unsigned  inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>     inUse[256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>   unsigned char [256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>    char [256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>   unsigned  [256];
228,229c228,229
<   Int32 nInUse;
<   unsigned char inUse[256];
---
>   Int32 nInUse
>     [256];
229c229
<   unsigned char inUse[256];
---
>    char inUse[256];
229c229
<   unsigned char inUse[256];
---
>     inUse[256];
229c229
<   unsigned char inUse[256];
---
>    char [256];
229c229
<   unsigned char inUse[256];
---
>     [256];
229c229
<   unsigned char inUse[256];
---
>    char inUse256];
229c229
<   unsigned char inUse[256];
---
>     inUse256];
229c229
<   unsigned char inUse[256];
---
>    char 256];
229c229
<   unsigned char inUse[256];
---
>     256];
229c229
<   unsigned char inUse[256];
---
>   unsigned  inUse[256];
(88.5 %, 23574 bytes)
229c229
<    char inUse[256];
---
>     inUse[256];
229c229
<    char inUse[256];
---
>     [256];
229c229
<    char inUse[256];
---
>     inUse256];
229c229
<    char inUse[256];
---
>     256];
229c229
<    char inUse[256];
---
>     inUse[];
229c229
<    char inUse[256];
---
>     [];
229c229
<    char inUse[256];
---
>     inUse];
229c229
<    char inUse[256];
---
>     ];
229c229
<    char inUse[256];
---
>    char [256];
229c229
<    char inUse[256];
---
>    char 256];
229c229
<    char inUse[256];
---
>    char [];
229c229
<    char inUse[256];
---
>    char ];
229c229
<    char inUse[256];
---
>    char [256;
229c229
<    char inUse[256];
---
>    char 256;
229c229
<    char inUse[256];
---
>    char [;
229c229
<    char inUse[256];
---
>    char ;
229c229
<    char inUse[256];
---
>    char inUse256];
229c229
<    char inUse[256];
---
>    char inUse];
229c229
<    char inUse[256];
---
>    char inUse256;
229c229
<    char inUse[256];
---
>    char inUse;
229c229
<    char inUse[256];
---
>    char inUse256]
229c229
<    char inUse[256];
---
>    char inUse]
229c229
<    char inUse[256];
---
>    char inUse256
229c229
<    char inUse[256];
---
>    char inUse
229c229
<    char inUse[256];
---
>    char inUse[];
229c229
<    char inUse[256];
---
>    char inUse[;
229c229
<    char inUse[256];
---
>    char inUse[]
229c229
<    char inUse[256];
---
>    char inUse[
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[];
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[;
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[]
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[
>    char unseqToSeq[256];
229c229
<    char inUse[256];
---
>    char inUse[256;
229c229
<    char inUse[256];
---
>    char inUse[256
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256;
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256;
>   unsigned  unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256
>   unsigned  unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256;
>     unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256
>     unseqToSeq[256];
229c229
<    char inUse[256];
---
>    char inUse[256]
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>    char unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>   unsigned  unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>     unseqToSeq[256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>   unsigned char [256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>    char [256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>   unsigned  [256];
229,230c229,230
<    char inUse[256];
<   unsigned char unseqToSeq[256];
---
>    char inUse[256]
>     [256];
230c230
<   unsigned char unseqToSeq[256];
---
>    char unseqToSeq[256];
230c230
<   unsigned char unseqToSeq[256];
---
>     unseqToSeq[256];
230c230
<   unsigned char unseqToSeq[256];
---
>    char [256];
230c230
<   unsigned char unseqToSeq[256];
---
>     [256];
230c230
<   unsigned char unseqToSeq[256];
---
>    char unseqToSeq256];
230c230
<   unsigned char unseqToSeq[256];
---
>     unseqToSeq256];
230c230
<   unsigned char unseqToSeq[256];
---
>    char 256];
230c230
<   unsigned char unseqToSeq[256];
---
>     256];
230c230
<   unsigned char unseqToSeq[256];
---
>   unsigned  unseqToSeq[256];
(88.5 %, 23566 bytes)
230c230
<    char unseqToSeq[256];
---
>     unseqToSeq[256];
230c230
<    char unseqToSeq[256];
---
>     [256];
230c230
<    char unseqToSeq[256];
---
>     unseqToSeq256];
230c230
<    char unseqToSeq[256];
---
>     256];
230c230
<    char unseqToSeq[256];
---
>     unseqToSeq[];
230c230
<    char unseqToSeq[256];
---
>     [];
230c230
<    char unseqToSeq[256];
---
>     unseqToSeq];
230c230
<    char unseqToSeq[256];
---
>     ];
230c230
<    char unseqToSeq[256];
---
>    char [256];
230c230
<    char unseqToSeq[256];
---
>    char 256];
230c230
<    char unseqToSeq[256];
---
>    char [];
230c230
<    char unseqToSeq[256];
---
>    char ];
230c230
<    char unseqToSeq[256];
---
>    char [256;
230c230
<    char unseqToSeq[256];
---
>    char 256;
230c230
<    char unseqToSeq[256];
---
>    char [;
230c230
<    char unseqToSeq[256];
---
>    char ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq256];
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq];
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq256;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq256]
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq]
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq256
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[];
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[]
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[];
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[;
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[]
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256;
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256;
232c232
<   UInt32 bsBuff;
---
>   UInt32 ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256
232c232
<   UInt32 bsBuff;
---
>   UInt32 ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256;
232c232
<   UInt32 bsBuff;
---
>    ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256
232c232
<   UInt32 bsBuff;
---
>    ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>   UInt32 ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>    ;
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>   UInt32 bsBuff
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>    bsBuff
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>   UInt32 
230c230
<    char unseqToSeq[256];
---
>    char unseqToSeq[256]
232c232
<   UInt32 bsBuff;
---
>    
232c232
<   UInt32 bsBuff;
---
>    bsBuff;
232c232
<   UInt32 bsBuff;
---
>    ;
(88.5 %, 23553 bytes)
231a232
>    
233d233
<   Int32 bsLive;
232,233c232,233
<    ;
<   Int32 bsLive;
---
>    
>   Int32 bsLive
232,233c232,233
<    ;
<   Int32 bsLive;
---
>    
>    bsLive
232,233c232,233
<    ;
<   Int32 bsLive;
---
>    
>   Int32 
232,233c232,233
<    ;
<   Int32 bsLive;
---
>    
>    
233c233
<   Int32 bsLive;
---
>    bsLive;
233c233
<   Int32 bsLive;
---
>    ;
(88.5 %, 23541 bytes)
233c233
<    ;
---
>    
235c235
<   UInt32 blockCRC;
---
>    ;
233c233
<    ;
---
>    
235c235
<   UInt32 blockCRC;
---
>   UInt32 blockCRC
233c233
<    ;
---
>    
235c235
<   UInt32 blockCRC;
---
>    blockCRC
233c233
<    ;
---
>    
235c235
<   UInt32 blockCRC;
---
>   UInt32 
233c233
<    ;
---
>    
235c235
<   UInt32 blockCRC;
---
>    
235c235
<   UInt32 blockCRC;
---
>    blockCRC;
235c235
<   UInt32 blockCRC;
---
>    ;
(88.5 %, 23526 bytes)
234a235
>    
236d236
<   UInt32 combinedCRC;
235,236c235,236
<    ;
<   UInt32 combinedCRC;
---
>    
>   UInt32 combinedCRC
235,236c235,236
<    ;
<   UInt32 combinedCRC;
---
>    
>    combinedCRC
235,236c235,236
<    ;
<   UInt32 combinedCRC;
---
>    
>   UInt32 
235,236c235,236
<    ;
<   UInt32 combinedCRC;
---
>    
>    
236c236
<   UInt32 combinedCRC;
---
>    combinedCRC;
236c236
<   UInt32 combinedCRC;
---
>    ;
236c236
<   UInt32 combinedCRC;
---
>    combinedCRC
236c236
<   UInt32 combinedCRC;
---
>    
236c236
<   UInt32 combinedCRC;
---
>    combinedCRC;
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>    ;
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>    combinedCRC
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>    
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 
236c236
<   UInt32 combinedCRC;
---
>   UInt32 ;
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 ;
238c238
<   Int32 verbosity;
---
>   Int32 ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 
238c238
<   Int32 verbosity;
---
>   Int32 ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 ;
238c238
<   Int32 verbosity;
---
>    ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 
238c238
<   Int32 verbosity;
---
>    ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>    verbosity;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>   Int32 ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>    ;
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>   Int32 verbosity
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>    verbosity
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>   Int32 
236c236
<   UInt32 combinedCRC;
---
>   UInt32 combinedCRC
238c238
<   Int32 verbosity;
---
>    
238c238
<   Int32 verbosity;
---
>    verbosity;
238c238
<   Int32 verbosity;
---
>    ;
238c238
<   Int32 verbosity;
---
>    verbosity
238c238
<   Int32 verbosity;
---
>    
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>    verbosity;
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>    ;
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>    verbosity
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>    
>    blockNo;
238c238
<   Int32 verbosity;
---
>   Int32 ;
238c238
<   Int32 verbosity;
---
>   Int32 
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 ;
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 ;
>   Int32 ;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 
>   Int32 ;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 ;
>    ;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 
>    ;
238c238
<   Int32 verbosity;
---
>   Int32 verbosity
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>    blockNo;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>   Int32 ;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>    ;
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>   Int32 blockNo
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>    blockNo
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>   Int32 
238,239c238,239
<   Int32 verbosity;
<   Int32 blockNo;
---
>   Int32 verbosity
>    
239c239
<   Int32 blockNo;
---
>    blockNo;
239c239
<   Int32 blockNo;
---
>    ;
239c239
<   Int32 blockNo;
---
>    blockNo
239c239
<   Int32 blockNo;
---
>    
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    blockNo;
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    ;
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    blockNo
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    
>    blockSize100k;
239c239
<   Int32 blockNo;
---
>   Int32 ;
239c239
<   Int32 blockNo;
---
>   Int32 
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>   Int32 ;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>   Int32 ;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>    ;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>    ;
239c239
<   Int32 blockNo;
---
>   Int32 blockNo
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    blockSize100k;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 ;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    ;
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 blockSize100k
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    blockSize100k
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 
239,240c239,240
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    
240c240
<   Int32 blockSize100k;
---
>    blockSize100k;
240c240
<   Int32 blockSize100k;
---
>    ;
240c240
<   Int32 blockSize100k;
---
>    blockSize100k
240c240
<   Int32 blockSize100k;
---
>    
240c240
<   Int32 blockSize100k;
---
>    blockSize100k;
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>    ;
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>    blockSize100k
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>    
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>   Int32 ;
240c240
<   Int32 blockSize100k;
---
>   Int32 
240c240
<   Int32 blockSize100k;
---
>   Int32 ;
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>   Int32 
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>   Int32 ;
242c242
<   Int32 nMTF;
---
>   Int32 ;
240c240
<   Int32 blockSize100k;
---
>   Int32 
242c242
<   Int32 nMTF;
---
>   Int32 ;
240c240
<   Int32 blockSize100k;
---
>   Int32 ;
242c242
<   Int32 nMTF;
---
>    ;
240c240
<   Int32 blockSize100k;
---
>   Int32 
242c242
<   Int32 nMTF;
---
>    ;
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>    nMTF;
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>   Int32 ;
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>    ;
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>   Int32 nMTF
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>    nMTF
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>   Int32 
240c240
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
242c242
<   Int32 nMTF;
---
>    
242c242
<   Int32 nMTF;
---
>    nMTF;
242c242
<   Int32 nMTF;
---
>    ;
242c242
<   Int32 nMTF;
---
>    nMTF
242c242
<   Int32 nMTF;
---
>    
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    nMTF;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    ;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    nMTF
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242c242
<   Int32 nMTF;
---
>   Int32 ;
242c242
<   Int32 nMTF;
---
>   Int32 
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>   Int32 [BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>   Int32 [BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>    [BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>    [BZ_MAX_ALPHA_SIZE];
242c242
<   Int32 nMTF;
---
>   Int32 nMTF
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 [BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    [BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    mtfFreqBZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 BZ_MAX_ALPHA_SIZE];
242,243c242,243
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreqBZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq[];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    [];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    ];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_MAX_ALPHA_SIZE;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_MAX_ALPHA_SIZE;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE]
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq]
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[]
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[];
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[;
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[]
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[
>    char selector[BZ_MAX_SELECTORS];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>   unsigned  selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>   unsigned  selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>     selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>     selector[BZ_MAX_SELECTORS];
243c243
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    char selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   unsigned  selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>     selector[BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   unsigned char [BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    char [BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   unsigned  [BZ_MAX_SELECTORS];
243,244c243,244
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>     [BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>    char selector[BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>     selector[BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>    char selectorBZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>     selectorBZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>     BZ_MAX_SELECTORS];
244c244
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   unsigned  selector[BZ_MAX_SELECTORS];
(88.5 %, 23518 bytes)
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     selector[BZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     selectorBZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     BZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     selector[];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     [];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     selector];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>     ];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char [];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char ];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS;
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS;
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char [;
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char ;
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char selectorBZ_MAX_SELECTORS];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char selector];
244c244
<    char selector[BZ_MAX_SELECTORS];
---
>    char selectorBZ_MAX_SELECTORS;
(88.5 %, 23492 bytes)
244,245c244,245
<    char ;
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char 
>     [BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtf[BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtf[BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtfBZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtfBZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     BZ_MAX_SELECTORS];
245c245
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>   unsigned  selectorMtf[BZ_MAX_SELECTORS];
(88.5 %, 23484 bytes)
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtf[BZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtfBZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     BZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtf[];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     [];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtf];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>     ];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char ];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS;
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char BZ_MAX_SELECTORS;
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [;
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char ;
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtfBZ_MAX_SELECTORS];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtf];
245c245
<    char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtfBZ_MAX_SELECTORS;
(88.6 %, 23455 bytes)
245c245
<    char ;
---
>    char 
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   unsigned  len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(88.6 %, 23447 bytes)
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     len[][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     len][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     ][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char ][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [[BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char [BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char len][BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
247c247
<    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char len[BZ_MAX_ALPHA_SIZE];
(88.6 %, 23445 bytes)
247c247
<    char lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
247c247
<    char lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPS;
247c247
<    char lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE]
(88.6 %, 23443 bytes)
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
247,248c247,248
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    code[][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
248c248
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    code][BZ_MAX_ALPHA_SIZE];
(88.6 %, 23433 bytes)
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
248c248
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(88.6 %, 23420 bytes)
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
248c248
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
248,249c248,249
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(88.6 %, 23401 bytes)
248,249c248,249
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248,249c248,249
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248,249c248,249
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248,249c248,249
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
248,249c248,249
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq[][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq][BZ_MAX_ALPHA_SIZE];
249c249
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
(88.6 %, 23390 bytes)
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
249c249
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(88.6 %, 23377 bytes)
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
249c249
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE;
(88.6 %, 23358 bytes)
249c249
<    ;
---
>    
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [BZ_MAX_ALPHA_SIZE][4];
249c249
<    ;
---
>    
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt32 len_packBZ_MAX_ALPHA_SIZE][4];
249c249
<    ;
---
>    
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_packBZ_MAX_ALPHA_SIZE][4];
249c249
<    ;
---
>    
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt32 BZ_MAX_ALPHA_SIZE][4];
249c249
<    ;
---
>    
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [BZ_MAX_ALPHA_SIZE][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_packBZ_MAX_ALPHA_SIZE][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack][4];
251c251
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    ][4];
(88.6 %, 23343 bytes)
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    [4];
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE]4];
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    ]4];
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE4];
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    4];
251c251
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    [][4];
(88.6 %, 23324 bytes)
251c251
<    [4];
---
>    ;
251c251
<    [4];
---
>    4]
251c251
<    [4];
---
>    ]
251c251
<    [4];
---
>    4
251c251
<    [4];
---
>    
(88.6 %, 23321 bytes)
251c251
<    ;
---
>    
253c253
< } EState;
---
>  ;
251c251
<    ;
---
>    
253c253
< } EState;
---
> } EState
251c251
<    ;
---
>    
253c253
< } EState;
---
>  EState
251c251
<    ;
---
>    
253c253
< } EState;
---
> } 
251c251
<    ;
---
>    
253c253
< } EState;
---
>  
253c253
< } EState;
---
>  EState;
253c253
< } EState;
---
>  ;
253c253
< } EState;
---
>  EState
253c253
< } EState;
---
>  
253c253,254
< } EState;
---
>  EState;
> 
255d255
< ;
253c253,254
< } EState;
---
>  ;
> 
255d255
< ;
253c253,254
< } EState;
---
>  EState
> 
255d255
< ;
253c253,254
< } EState;
---
>  
> 
255d255
< ;
253c253
< } EState;
---
> } ;
253c253
< } EState;
---
> } 
253c253,254
< } EState;
---
> } ;
> 
255d255
< ;
(88.6 %, 23319 bytes)
253c253
< } EState
---
>  EState
257c257
< ;
---
> 
253c253
< } EState
---
>  
257c257
< ;
---
> 
253c253,255
< } EState
---
>  EState
> 
> 
255d256
< ;
257d257
< ;
253c253,255
< } EState
---
>  
> 
> 
255d256
< ;
257d257
< ;
253c253
< } EState
---
> } 
253c253,254
< } EState
---
> } 
> 
255d255
< ;
253c253
< } EState
---
> } 
257c257
< ;
---
> 
253c253,255
< } EState
---
> } 
> 
> 
255d256
< ;
257d257
< ;
253c253
< } EState
---
> } 
259c259
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
253c253,254
< } EState
---
> } 
> 
255d255
< ;
259c259
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
253c253
< } EState
---
> } 
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> define BZ_X_IDLE 1
253c253
< } EState
---
> } 
255d254
< ;
257d255
< ;
259c257,259
< #define BZ_X_IDLE 1
---
> 
> 
> define BZ_X_IDLE 1
255c255
< ;
---
> 
255d254
< ;
257c256,257
< ;
---
> 
> 
255c255
< ;
---
> 
259c259
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
255d254
< ;
257d255
< ;
259c257,259
< #define BZ_X_IDLE 1
---
> 
> 
> define BZ_X_IDLE 1
255c255
< ;
---
> 
259c259
< #define BZ_X_IDLE 1
---
> # BZ_X_IDLE 1
255d254
< ;
257d255
< ;
259c257,259
< #define BZ_X_IDLE 1
---
> 
> 
> # BZ_X_IDLE 1
255c255
< ;
---
> 
259c259
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 1
255d254
< ;
257d255
< ;
259c257,259
< #define BZ_X_IDLE 1
---
> 
> 
>  BZ_X_IDLE 1
257c257
< ;
---
> 
(88.6 %, 23318 bytes)
257c257
< ;
---
> 
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> define BZ_X_IDLE 1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> # BZ_X_IDLE 1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
>  BZ_X_IDLE 1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> #define  1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> define  1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
> #  1
257d256
< ;
259c258,259
< #define BZ_X_IDLE 1
---
> 
>   1
259c259
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
259c259
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 1
259c259
< #define BZ_X_IDLE 1
---
> define  1
259c259
< #define BZ_X_IDLE 1
---
>   1
259c259
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 
259c259
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 
259c259
< #define BZ_X_IDLE 1
---
> define  
259c259
< #define BZ_X_IDLE 1
---
>   
259c259
< #define BZ_X_IDLE 1
---
> # BZ_X_IDLE 1
259c259
< #define BZ_X_IDLE 1
---
> #  1
(88.6 %, 23301 bytes)
260c260
< #define BZ_X_OUTPUT 2
---
>   
260c260
< #define BZ_X_OUTPUT 2
---
> # BZ_X_OUTPUT 2
260c260
< #define BZ_X_OUTPUT 2
---
> #  2
(88.6 %, 23282 bytes)
262c262
< #define BZ_X_MAGIC_1 10
---
>   
262c262
< #define BZ_X_MAGIC_1 10
---
> # BZ_X_MAGIC_1 10
262c262
< #define BZ_X_MAGIC_1 10
---
> #  10
262c262
< #define BZ_X_MAGIC_1 10
---
> # BZ_X_MAGIC_1 
262c262
< #define BZ_X_MAGIC_1 10
---
> #  
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> # BZ_X_MAGIC_1 10
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #  10
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> # BZ_X_MAGIC_1 
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #  
> define BZ_X_MAGIC_2 11
262c262
< #define BZ_X_MAGIC_1 10
---
> #define  10
262c262
< #define BZ_X_MAGIC_1 10
---
> #define  
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  10
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  10
> # BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  
> # BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  10
>  BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define  
>  BZ_X_MAGIC_2 11
262c262
< #define BZ_X_MAGIC_1 10
---
> #define BZ_X_MAGIC_1 
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
> define BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
> # BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
>  BZ_X_MAGIC_2 11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
> #define  11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
> define  11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
> #  11
262,263c262,263
< #define BZ_X_MAGIC_1 10
< #define BZ_X_MAGIC_2 11
---
> #define BZ_X_MAGIC_1 
>   11
263c263
< #define BZ_X_MAGIC_2 11
---
> define BZ_X_MAGIC_2 11
263c263
< #define BZ_X_MAGIC_2 11
---
>  BZ_X_MAGIC_2 11
263c263
< #define BZ_X_MAGIC_2 11
---
> define  11
263c263
< #define BZ_X_MAGIC_2 11
---
>   11
263c263
< #define BZ_X_MAGIC_2 11
---
> define BZ_X_MAGIC_2 
263c263
< #define BZ_X_MAGIC_2 11
---
>  BZ_X_MAGIC_2 
263c263
< #define BZ_X_MAGIC_2 11
---
> define  
263c263
< #define BZ_X_MAGIC_2 11
---
>   
263c263
< #define BZ_X_MAGIC_2 11
---
> # BZ_X_MAGIC_2 11
263c263
< #define BZ_X_MAGIC_2 11
---
> #  11
(88.6 %, 23261 bytes)
264c264
< #define BZ_X_MAGIC_3 12
---
>   
264c264
< #define BZ_X_MAGIC_3 12
---
> # BZ_X_MAGIC_3 12
264c264
< #define BZ_X_MAGIC_3 12
---
> #  12
(88.7 %, 23240 bytes)
265c265
< #define BZ_X_MAGIC_4 13
---
>   
265c265
< #define BZ_X_MAGIC_4 13
---
> # BZ_X_MAGIC_4 13
265c265
< #define BZ_X_MAGIC_4 13
---
> #  13
(88.7 %, 23219 bytes)
266c266
< #define BZ_X_BLKHDR_1 14
---
>   
266c266
< #define BZ_X_BLKHDR_1 14
---
> # BZ_X_BLKHDR_1 14
266c266
< #define BZ_X_BLKHDR_1 14
---
> #  14
(88.7 %, 23197 bytes)
267c267
< #define BZ_X_BLKHDR_2 15
---
>   
267c267
< #define BZ_X_BLKHDR_2 15
---
> # BZ_X_BLKHDR_2 15
267c267
< #define BZ_X_BLKHDR_2 15
---
> #  15
267c267
< #define BZ_X_BLKHDR_2 15
---
> # BZ_X_BLKHDR_2 
267c267
< #define BZ_X_BLKHDR_2 15
---
> #  
(88.7 %, 23175 bytes)
268c268
< #define BZ_X_BLKHDR_3 16
---
>   
268c268
< #define BZ_X_BLKHDR_3 16
---
> # BZ_X_BLKHDR_3 16
268c268
< #define BZ_X_BLKHDR_3 16
---
> #  16
(88.7 %, 23153 bytes)
269c269
< #define BZ_X_BLKHDR_4 17
---
>   
269c269
< #define BZ_X_BLKHDR_4 17
---
> # BZ_X_BLKHDR_4 17
269c269
< #define BZ_X_BLKHDR_4 17
---
> #  17
(88.7 %, 23131 bytes)
270c270
< #define BZ_X_BLKHDR_5 18
---
>   
270c270
< #define BZ_X_BLKHDR_5 18
---
> # BZ_X_BLKHDR_5 18
270c270
< #define BZ_X_BLKHDR_5 18
---
> #  18
(88.7 %, 23109 bytes)
271c271
< #define BZ_X_BLKHDR_6 19
---
>   
271c271
< #define BZ_X_BLKHDR_6 19
---
> # BZ_X_BLKHDR_6 19
271c271
< #define BZ_X_BLKHDR_6 19
---
> #  19
(88.7 %, 23087 bytes)
272c272
< #define BZ_X_BCRC_1 20
---
>   
272c272
< #define BZ_X_BCRC_1 20
---
> # BZ_X_BCRC_1 20
272c272
< #define BZ_X_BCRC_1 20
---
> #  20
(88.7 %, 23067 bytes)
273c273
< #define BZ_X_BCRC_2 21
---
>   
273c273
< #define BZ_X_BCRC_2 21
---
> # BZ_X_BCRC_2 21
273c273
< #define BZ_X_BCRC_2 21
---
> #  21
273c273
< #define BZ_X_BCRC_2 21
---
> # BZ_X_BCRC_2 
(88.8 %, 23047 bytes)
274c274
< #define BZ_X_BCRC_3 22
---
>   
274c274
< #define BZ_X_BCRC_3 22
---
> # BZ_X_BCRC_3 22
274c274
< #define BZ_X_BCRC_3 22
---
> #  22
274c274
< #define BZ_X_BCRC_3 22
---
> # BZ_X_BCRC_3 
(88.8 %, 23027 bytes)
275c275
< #define BZ_X_BCRC_4 23
---
>   
275c275
< #define BZ_X_BCRC_4 23
---
> # BZ_X_BCRC_4 23
275c275
< #define BZ_X_BCRC_4 23
---
> #  23
(88.8 %, 23007 bytes)
276c276
< #define BZ_X_RANDBIT 24
---
>   
276c276
< #define BZ_X_RANDBIT 24
---
> # BZ_X_RANDBIT 24
276c276
< #define BZ_X_RANDBIT 24
---
> #  24
(88.8 %, 22986 bytes)
277c277
< #define BZ_X_ORIGPTR_1 25
---
>   
277c277
< #define BZ_X_ORIGPTR_1 25
---
> # BZ_X_ORIGPTR_1 25
277c277
< #define BZ_X_ORIGPTR_1 25
---
> #  25
(88.8 %, 22963 bytes)
278c278
< #define BZ_X_ORIGPTR_2 26
---
>   
278c278
< #define BZ_X_ORIGPTR_2 26
---
> # BZ_X_ORIGPTR_2 26
278c278
< #define BZ_X_ORIGPTR_2 26
---
> #  26
(88.8 %, 22940 bytes)
279c279
< #define BZ_X_ORIGPTR_3 27
---
>   
279c279
< #define BZ_X_ORIGPTR_3 27
---
> # BZ_X_ORIGPTR_3 27
279c279
< #define BZ_X_ORIGPTR_3 27
---
> #  27
279c279
< #define BZ_X_ORIGPTR_3 27
---
> # BZ_X_ORIGPTR_3 
279c279
< #define BZ_X_ORIGPTR_3 27
---
> #  
(88.8 %, 22917 bytes)
280c280
< #define BZ_X_MAPPING_1 28
---
>   
280c280
< #define BZ_X_MAPPING_1 28
---
> # BZ_X_MAPPING_1 28
280c280
< #define BZ_X_MAPPING_1 28
---
> #  28
280c280
< #define BZ_X_MAPPING_1 28
---
> # BZ_X_MAPPING_1 
(88.8 %, 22894 bytes)
281c281
< #define BZ_X_MAPPING_2 29
---
>   
281c281
< #define BZ_X_MAPPING_2 29
---
> # BZ_X_MAPPING_2 29
281c281
< #define BZ_X_MAPPING_2 29
---
> #  29
281c281
< #define BZ_X_MAPPING_2 29
---
> # BZ_X_MAPPING_2 
281c281
< #define BZ_X_MAPPING_2 29
---
> #  
(88.8 %, 22871 bytes)
282c282
< #define BZ_X_SELECTOR_1 30
---
>   
282c282
< #define BZ_X_SELECTOR_1 30
---
> # BZ_X_SELECTOR_1 30
282c282
< #define BZ_X_SELECTOR_1 30
---
> #  30
(88.9 %, 22847 bytes)
283c283
< #define BZ_X_SELECTOR_2 31
---
>   
283c283
< #define BZ_X_SELECTOR_2 31
---
> # BZ_X_SELECTOR_2 31
283c283
< #define BZ_X_SELECTOR_2 31
---
> #  31
(88.9 %, 22823 bytes)
284c284
< #define BZ_X_SELECTOR_3 32
---
>   
284c284
< #define BZ_X_SELECTOR_3 32
---
> # BZ_X_SELECTOR_3 32
284c284
< #define BZ_X_SELECTOR_3 32
---
> #  32
(88.9 %, 22799 bytes)
285c285
< #define BZ_X_CODING_1 33
---
>   
285c285
< #define BZ_X_CODING_1 33
---
> # BZ_X_CODING_1 33
285c285
< #define BZ_X_CODING_1 33
---
> #  33
(88.9 %, 22777 bytes)
286c286
< #define BZ_X_CODING_2 34
---
>   
286c286
< #define BZ_X_CODING_2 34
---
> # BZ_X_CODING_2 34
286c286
< #define BZ_X_CODING_2 34
---
> #  34
(88.9 %, 22755 bytes)
287c287
< #define BZ_X_CODING_3 35
---
>   
287c287
< #define BZ_X_CODING_3 35
---
> # BZ_X_CODING_3 35
287c287
< #define BZ_X_CODING_3 35
---
> #  35
(88.9 %, 22733 bytes)
288c288
< #define BZ_X_MTF_1 36
---
>   
288c288
< #define BZ_X_MTF_1 36
---
> # BZ_X_MTF_1 36
288c288
< #define BZ_X_MTF_1 36
---
> #  36
(88.9 %, 22714 bytes)
289c289
< #define BZ_X_MTF_2 37
---
>   
289c289
< #define BZ_X_MTF_2 37
---
> # BZ_X_MTF_2 37
289c289
< #define BZ_X_MTF_2 37
---
> #  37
289c289
< #define BZ_X_MTF_2 37
---
> # BZ_X_MTF_2 
289c289
< #define BZ_X_MTF_2 37
---
> #  
(88.9 %, 22695 bytes)
290c290
< #define BZ_X_MTF_3 38
---
>   
290c290
< #define BZ_X_MTF_3 38
---
> # BZ_X_MTF_3 38
290c290
< #define BZ_X_MTF_3 38
---
> #  38
(88.9 %, 22676 bytes)
291c291
< #define BZ_X_MTF_4 39
---
>   
291c291
< #define BZ_X_MTF_4 39
---
> # BZ_X_MTF_4 39
291c291
< #define BZ_X_MTF_4 39
---
> #  39
(88.9 %, 22657 bytes)
292c292
< #define BZ_X_MTF_5 40
---
>   
292c292
< #define BZ_X_MTF_5 40
---
> # BZ_X_MTF_5 40
292c292
< #define BZ_X_MTF_5 40
---
> #  40
(89.0 %, 22638 bytes)
293c293
< #define BZ_X_MTF_6 41
---
>   
293c293
< #define BZ_X_MTF_6 41
---
> # BZ_X_MTF_6 41
293c293
< #define BZ_X_MTF_6 41
---
> #  41
(89.0 %, 22619 bytes)
294c294
< #define BZ_X_ENDHDR_2 42
---
>   
294c294
< #define BZ_X_ENDHDR_2 42
---
> # BZ_X_ENDHDR_2 42
294c294
< #define BZ_X_ENDHDR_2 42
---
> #  42
(89.0 %, 22597 bytes)
295c295
< #define BZ_X_ENDHDR_3 43
---
>   
295c295
< #define BZ_X_ENDHDR_3 43
---
> # BZ_X_ENDHDR_3 43
295c295
< #define BZ_X_ENDHDR_3 43
---
> #  43
(89.0 %, 22575 bytes)
296c296
< #define BZ_X_ENDHDR_4 44
---
>   
296c296
< #define BZ_X_ENDHDR_4 44
---
> # BZ_X_ENDHDR_4 44
296c296
< #define BZ_X_ENDHDR_4 44
---
> #  44
296c296
< #define BZ_X_ENDHDR_4 44
---
> # BZ_X_ENDHDR_4 
(89.0 %, 22553 bytes)
297c297
< #define BZ_X_ENDHDR_5 45
---
>   
297c297
< #define BZ_X_ENDHDR_5 45
---
> # BZ_X_ENDHDR_5 45
297c297
< #define BZ_X_ENDHDR_5 45
---
> #  45
(89.0 %, 22531 bytes)
298c298
< #define BZ_X_ENDHDR_6 46
---
>   
298c298
< #define BZ_X_ENDHDR_6 46
---
> # BZ_X_ENDHDR_6 46
298c298
< #define BZ_X_ENDHDR_6 46
---
> #  46
(89.0 %, 22509 bytes)
299c299
< #define BZ_X_CCRC_1 47
---
>   
299c299
< #define BZ_X_CCRC_1 47
---
> # BZ_X_CCRC_1 47
299c299
< #define BZ_X_CCRC_1 47
---
> #  47
(89.0 %, 22489 bytes)
300c300
< #define BZ_X_CCRC_2 48
---
>   
300c300
< #define BZ_X_CCRC_2 48
---
> # BZ_X_CCRC_2 48
300c300
< #define BZ_X_CCRC_2 48
---
> #  48
(89.0 %, 22469 bytes)
301c301
< #define BZ_X_CCRC_3 49
---
>   
301c301
< #define BZ_X_CCRC_3 49
---
> # BZ_X_CCRC_3 49
301c301
< #define BZ_X_CCRC_3 49
---
> #  49
(89.0 %, 22449 bytes)
302c302
< #define BZ_X_CCRC_4 50
---
>   
302c302
< #define BZ_X_CCRC_4 50
---
> # BZ_X_CCRC_4 50
302c302
< #define BZ_X_CCRC_4 50
---
> #  50
(89.1 %, 22429 bytes)
304c304
< #define MTFA_SIZE 4096
---
>   
304c304
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 4096
304c304
< #define MTFA_SIZE 4096
---
> #  4096
304c304
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 
304c304
< #define MTFA_SIZE 4096
---
> #  
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> # MTFA_SIZE 4096
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #  4096
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> # MTFA_SIZE 
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #  
> define MTFL_SIZE 16
304c304
< #define MTFA_SIZE 4096
---
> #define  4096
304c304
< #define MTFA_SIZE 4096
---
> #define  
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  4096
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  4096
> # MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  
> # MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  4096
>  MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define  
>  MTFL_SIZE 16
304c304
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
> define MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
> # MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
>  MTFL_SIZE 16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
> #define  16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
> define  16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
> #  16
304,305c304,305
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define MTFA_SIZE 
>   16
305c305
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 16
305c305
< #define MTFL_SIZE 16
---
>  MTFL_SIZE 16
305c305
< #define MTFL_SIZE 16
---
> define  16
305c305
< #define MTFL_SIZE 16
---
>   16
305c305
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 
305c305
< #define MTFL_SIZE 16
---
>  MTFL_SIZE 
305c305
< #define MTFL_SIZE 16
---
> define  
305c305
< #define MTFL_SIZE 16
---
>   
305c305
< #define MTFL_SIZE 16
---
> # MTFL_SIZE 16
305c305
< #define MTFL_SIZE 16
---
> #  16
305c305
< #define MTFL_SIZE 16
---
> # MTFL_SIZE 
305c305
< #define MTFL_SIZE 16
---
> #  
305c305
< #define MTFL_SIZE 16
---
> # MTFL_SIZE 16
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #  16
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> # MTFL_SIZE 
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #  
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #define  16
305c305
< #define MTFL_SIZE 16
---
> #define  
305c305
< #define MTFL_SIZE 16
---
> #define  16
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #define  
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #define  16
307c307
< typedef struct {
---
> typedef  {
305c305
< #define MTFL_SIZE 16
---
> #define  
307c307
< typedef struct {
---
> typedef  {
305c305
< #define MTFL_SIZE 16
---
> #define  16
307c307
< typedef struct {
---
>   {
305c305
< #define MTFL_SIZE 16
---
> #define  
307c307
< typedef struct {
---
>   {
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
>  struct {
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
> typedef  {
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
>   {
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
> typedef struct 
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
>  struct 
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
> typedef  
305c305
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 
307c307
< typedef struct {
---
>   
307c307
< typedef struct {
---
>  struct {
307c307
< typedef struct {
---
>   {
307c307
< typedef struct {
---
>  struct 
307c307
< typedef struct {
---
>   
307c307
< typedef struct {
---
>  struct {
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
>   {
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
>  struct 
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
>   
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
> typedef  {
307c307
< typedef struct {
---
> typedef  
307c307
< typedef struct {
---
> typedef  {
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
> typedef  
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
> typedef  {
309c309
<   bz_stream strm;
---
>   bz_stream ;
307c307
< typedef struct {
---
> typedef  
309c309
<   bz_stream strm;
---
>   bz_stream ;
307c307
< typedef struct {
---
> typedef  {
309c309
<   bz_stream strm;
---
>    ;
307c307
< typedef struct {
---
> typedef  
309c309
<   bz_stream strm;
---
>    ;
307c307
< typedef struct {
---
> typedef struct 
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>    strm;
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>   bz_stream ;
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>    ;
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>   bz_stream strm
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>    strm
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>   bz_stream 
307c307
< typedef struct {
---
> typedef struct 
309c309
<   bz_stream strm;
---
>    
309c309
<   bz_stream strm;
---
>    strm;
309c309
<   bz_stream strm;
---
>    ;
309c309
<   bz_stream strm;
---
>    strm
309c309
<   bz_stream strm;
---
>    
309c309
<   bz_stream strm;
---
>    strm;
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>    ;
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>    strm
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>    
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>   bz_stream ;
309c309
<   bz_stream strm;
---
>   bz_stream 
309c309
<   bz_stream strm;
---
>   bz_stream ;
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>   bz_stream 
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>   bz_stream ;
311c311
<   Int32 state;
---
>   Int32 ;
309c309
<   bz_stream strm;
---
>   bz_stream 
311c311
<   Int32 state;
---
>   Int32 ;
309c309
<   bz_stream strm;
---
>   bz_stream ;
311c311
<   Int32 state;
---
>    ;
309c309
<   bz_stream strm;
---
>   bz_stream 
311c311
<   Int32 state;
---
>    ;
309c309
<   bz_stream strm;
---
>   bz_stream strm
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>    state;
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>   Int32 ;
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>    ;
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>   Int32 state
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>    state
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>   Int32 
309c309
<   bz_stream strm;
---
>   bz_stream strm
311c311
<   Int32 state;
---
>    
311c311
<   Int32 state;
---
>    state;
311c311
<   Int32 state;
---
>    ;
311c311
<   Int32 state;
---
>    state
311c311
<   Int32 state;
---
>    
311c311
<   Int32 state;
---
>    state;
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>    ;
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>    state
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>    
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>   Int32 ;
311c311
<   Int32 state;
---
>   Int32 
311c311
<   Int32 state;
---
>   Int32 ;
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>   Int32 
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>   Int32 ;
313c313
<   unsigned char state_out_ch;
---
>   unsigned  state_out_ch;
311c311
<   Int32 state;
---
>   Int32 
313c313
<   unsigned char state_out_ch;
---
>   unsigned  state_out_ch;
311c311
<   Int32 state;
---
>   Int32 ;
313c313
<   unsigned char state_out_ch;
---
>     state_out_ch;
311c311
<   Int32 state;
---
>   Int32 
313c313
<   unsigned char state_out_ch;
---
>     state_out_ch;
311c311
<   Int32 state;
---
>   Int32 state
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>   unsigned  state_out_ch;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>     state_out_ch;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>   unsigned char ;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>    char ;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>   unsigned  ;
311c311
<   Int32 state;
---
>   Int32 state
313c313
<   unsigned char state_out_ch;
---
>     ;
313c313
<   unsigned char state_out_ch;
---
>    char state_out_ch;
(89.1 %, 22404 bytes)
313,314c313,314
<     ;
<   Int32 state_out_len;
---
>     
>    
314c314
<   Int32 state_out_len;
---
>    state_out_len;
314c314
<   Int32 state_out_len;
---
>    ;
314c314
<   Int32 state_out_len;
---
>    state_out_len
314c314
<   Int32 state_out_len;
---
>    
(89.1 %, 22386 bytes)
314,315c314,315
<    ;
<   unsigned char blockRandomised;
---
>    
>    char blockRandomised;
314,315c314,315
<    ;
<   unsigned char blockRandomised;
---
>    
>   unsigned  blockRandomised;
314,315c314,315
<    ;
<   unsigned char blockRandomised;
---
>    
>     blockRandomised;
314,315c314,315
<    ;
<   unsigned char blockRandomised;
---
>    
>   unsigned char ;
(89.1 %, 22377 bytes)
315c315
<    char blockRandomised;
---
>     ;
315c315
<    char blockRandomised;
---
>     blockRandomised
315c315
<    char blockRandomised;
---
>     
315,316c315,316
<    char blockRandomised;
<   BZ_RAND_DECLS;
---
>     blockRandomised;
>   ;
315,316c315,316
<    char blockRandomised;
<   BZ_RAND_DECLS;
---
>     ;
>   ;
(89.1 %, 22358 bytes)
315,316c315,316
<     ;
<   BZ_RAND_DECLS;
---
>     
>   ;
315,316c315,316
<     ;
<   BZ_RAND_DECLS;
---
>     
>   BZ_RAND_DECLS
(89.1 %, 22344 bytes)
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>    bsBuff;
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>   UInt32 ;
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>    ;
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>   UInt32 bsBuff
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>    bsBuff
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>   UInt32 
316c316
<   ;
---
>   
318c318
<   UInt32 bsBuff;
---
>    
318c318
<   UInt32 bsBuff;
---
>    bsBuff;
318c318
<   UInt32 bsBuff;
---
>    ;
318c318
<   UInt32 bsBuff;
---
>    bsBuff
318c318
<   UInt32 bsBuff;
---
>    
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    bsBuff;
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    ;
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    bsBuff
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    
>    bsLive;
318c318
<   UInt32 bsBuff;
---
>   UInt32 ;
318c318
<   UInt32 bsBuff;
---
>   UInt32 
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 ;
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 ;
>   Int32 ;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 
>   Int32 ;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 ;
>    ;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 
>    ;
318c318
<   UInt32 bsBuff;
---
>   UInt32 bsBuff
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>    bsLive;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>   Int32 ;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>    ;
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>   Int32 bsLive
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>    bsLive
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>   Int32 
318,319c318,319
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>   UInt32 bsBuff
>    
319c319
<   Int32 bsLive;
---
>    bsLive;
319c319
<   Int32 bsLive;
---
>    ;
319c319
<   Int32 bsLive;
---
>    bsLive
319c319
<   Int32 bsLive;
---
>    
319c319
<   Int32 bsLive;
---
>    bsLive;
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>    ;
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>    bsLive
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>    
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>   Int32 ;
319c319
<   Int32 bsLive;
---
>   Int32 
319c319
<   Int32 bsLive;
---
>   Int32 ;
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>   Int32 
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>   Int32 ;
321c321
<   Int32 blockSize100k;
---
>   Int32 ;
319c319
<   Int32 bsLive;
---
>   Int32 
321c321
<   Int32 blockSize100k;
---
>   Int32 ;
319c319
<   Int32 bsLive;
---
>   Int32 ;
321c321
<   Int32 blockSize100k;
---
>    ;
319c319
<   Int32 bsLive;
---
>   Int32 
321c321
<   Int32 blockSize100k;
---
>    ;
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>   Int32 ;
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>    ;
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>   Int32 blockSize100k
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>    blockSize100k
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>   Int32 
319c319
<   Int32 bsLive;
---
>   Int32 bsLive
321c321
<   Int32 blockSize100k;
---
>    
321c321
<   Int32 blockSize100k;
---
>    blockSize100k;
321c321
<   Int32 blockSize100k;
---
>    ;
(89.1 %, 22325 bytes)
321,322c321,322
<    ;
<   unsigned char smallDecompress;
---
>    
>     smallDecompress;
321,322c321,322
<    ;
<   unsigned char smallDecompress;
---
>    
>   unsigned char ;
321,322c321,322
<    ;
<   unsigned char smallDecompress;
---
>    
>    char ;
321,322c321,322
<    ;
<   unsigned char smallDecompress;
---
>    
>   unsigned  ;
321,322c321,322
<    ;
<   unsigned char smallDecompress;
---
>    
>     ;
322c322
<   unsigned char smallDecompress;
---
>    char smallDecompress;
322c322
<   unsigned char smallDecompress;
---
>     smallDecompress;
322c322
<   unsigned char smallDecompress;
---
>    char ;
322c322
<   unsigned char smallDecompress;
---
>     ;
322c322
<   unsigned char smallDecompress;
---
>    char smallDecompress
322c322
<   unsigned char smallDecompress;
---
>     smallDecompress
322c322
<   unsigned char smallDecompress;
---
>    char 
322c322
<   unsigned char smallDecompress;
---
>     
322c322
<   unsigned char smallDecompress;
---
>   unsigned  smallDecompress;
(89.1 %, 22317 bytes)
322c322
<    char smallDecompress;
---
>     smallDecompress;
322c322
<    char smallDecompress;
---
>     ;
322c322
<    char smallDecompress;
---
>     smallDecompress
322c322
<    char smallDecompress;
---
>     
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>     smallDecompress;
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>     ;
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>     smallDecompress
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>     
>    currBlockNo;
322c322
<    char smallDecompress;
---
>    char ;
322c322
<    char smallDecompress;
---
>    char 
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char ;
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char 
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char ;
>   Int32 ;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char 
>   Int32 ;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char ;
>    ;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char 
>    ;
322c322
<    char smallDecompress;
---
>    char smallDecompress
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>    currBlockNo;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>   Int32 ;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>    ;
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>   Int32 currBlockNo
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>    currBlockNo
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>   Int32 
322,323c322,323
<    char smallDecompress;
<   Int32 currBlockNo;
---
>    char smallDecompress
>    
323c323
<   Int32 currBlockNo;
---
>    currBlockNo;
323c323
<   Int32 currBlockNo;
---
>    ;
323c323
<   Int32 currBlockNo;
---
>    currBlockNo
323c323
<   Int32 currBlockNo;
---
>    
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    currBlockNo;
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    ;
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    currBlockNo
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    
>    verbosity;
323c323
<   Int32 currBlockNo;
---
>   Int32 ;
323c323
<   Int32 currBlockNo;
---
>   Int32 
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 ;
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 ;
>   Int32 ;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 
>   Int32 ;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 ;
>    ;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 
>    ;
323c323
<   Int32 currBlockNo;
---
>   Int32 currBlockNo
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>    verbosity;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>   Int32 ;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>    ;
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>   Int32 verbosity
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>    verbosity
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>   Int32 
323,324c323,324
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>   Int32 currBlockNo
>    
324c324
<   Int32 verbosity;
---
>    verbosity;
324c324
<   Int32 verbosity;
---
>    ;
324c324
<   Int32 verbosity;
---
>    verbosity
324c324
<   Int32 verbosity;
---
>    
324c324
<   Int32 verbosity;
---
>    verbosity;
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>    ;
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>    verbosity
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>    
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>   Int32 ;
324c324
<   Int32 verbosity;
---
>   Int32 
324c324
<   Int32 verbosity;
---
>   Int32 ;
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>   Int32 
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>   Int32 ;
326c326
<   Int32 origPtr;
---
>   Int32 ;
324c324
<   Int32 verbosity;
---
>   Int32 
326c326
<   Int32 origPtr;
---
>   Int32 ;
324c324
<   Int32 verbosity;
---
>   Int32 ;
326c326
<   Int32 origPtr;
---
>    ;
324c324
<   Int32 verbosity;
---
>   Int32 
326c326
<   Int32 origPtr;
---
>    ;
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>    origPtr;
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>   Int32 ;
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>    ;
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>   Int32 origPtr
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>    origPtr
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>   Int32 
324c324
<   Int32 verbosity;
---
>   Int32 verbosity
326c326
<   Int32 origPtr;
---
>    
326c326
<   Int32 origPtr;
---
>    origPtr;
326c326
<   Int32 origPtr;
---
>    ;
(89.1 %, 22304 bytes)
325a326
>    
327d327
<   UInt32 tPos;
326,327c326,327
<    ;
<   UInt32 tPos;
---
>    
>   UInt32 tPos
326,327c326,327
<    ;
<   UInt32 tPos;
---
>    
>    tPos
326,327c326,327
<    ;
<   UInt32 tPos;
---
>    
>   UInt32 
326,327c326,327
<    ;
<   UInt32 tPos;
---
>    
>    
327c327
<   UInt32 tPos;
---
>    tPos;
327c327
<   UInt32 tPos;
---
>    ;
(89.1 %, 22293 bytes)
326a327
>    
328d328
<   Int32 k0;
327,328c327,328
<    ;
<   Int32 k0;
---
>    
>   Int32 k0
327,328c327,328
<    ;
<   Int32 k0;
---
>    
>    k0
327,328c327,328
<    ;
<   Int32 k0;
---
>    
>   Int32 
327,328c327,328
<    ;
<   Int32 k0;
---
>    
>    
328c328
<   Int32 k0;
---
>    k0;
328c328
<   Int32 k0;
---
>    ;
(89.1 %, 22285 bytes)
328,329c328,329
<    ;
<   Int32 unzftab[256];
---
>    
>    [256];
328,329c328,329
<    ;
<   Int32 unzftab[256];
---
>    
>   Int32 unzftab256];
328,329c328,329
<    ;
<   Int32 unzftab[256];
---
>    
>    unzftab256];
328,329c328,329
<    ;
<   Int32 unzftab[256];
---
>    
>   Int32 256];
328,329c328,329
<    ;
<   Int32 unzftab[256];
---
>    
>    256];
329c329
<   Int32 unzftab[256];
---
>    unzftab[256];
329c329
<   Int32 unzftab[256];
---
>    [256];
329c329
<   Int32 unzftab[256];
---
>    unzftab256];
329c329
<   Int32 unzftab[256];
---
>    256];
329c329
<   Int32 unzftab[256];
---
>    unzftab[];
329c329
<   Int32 unzftab[256];
---
>    [];
329c329
<   Int32 unzftab[256];
---
>    unzftab];
329c329
<   Int32 unzftab[256];
---
>    ];
329c329
<   Int32 unzftab[256];
---
>   Int32 [256];
329c329
<   Int32 unzftab[256];
---
>   Int32 256];
329c329
<   Int32 unzftab[256];
---
>   Int32 [];
329c329
<   Int32 unzftab[256];
---
>   Int32 ];
329c329
<   Int32 unzftab[256];
---
>   Int32 [256;
329c329
<   Int32 unzftab[256];
---
>   Int32 256;
329c329
<   Int32 unzftab[256];
---
>   Int32 [;
329c329
<   Int32 unzftab[256];
---
>   Int32 ;
329c329
<   Int32 unzftab[256];
---
>   Int32 unzftab256];
329c329
<   Int32 unzftab[256];
---
>   Int32 unzftab];
329c329
<   Int32 unzftab[256];
---
>   Int32 unzftab256;
(89.1 %, 22273 bytes)
329,330c329,330
<   Int32 ;
<   Int32 nblock_used;
---
>   Int32 
>    
330c330
<   Int32 nblock_used;
---
>    nblock_used;
330c330
<   Int32 nblock_used;
---
>    ;
330c330
<   Int32 nblock_used;
---
>    nblock_used
330c330
<   Int32 nblock_used;
---
>    
(89.1 %, 22257 bytes)
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>    cftab[257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>   Int32 [257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>    [257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>   Int32 cftab257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>    cftab257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>   Int32 257];
330,331c330,331
<    ;
<   Int32 cftab[257];
---
>    
>    257];
331c331
<   Int32 cftab[257];
---
>    cftab[257];
331c331
<   Int32 cftab[257];
---
>    [257];
331c331
<   Int32 cftab[257];
---
>    cftab257];
331c331
<   Int32 cftab[257];
---
>    257];
331c331
<   Int32 cftab[257];
---
>    cftab[];
331c331
<   Int32 cftab[257];
---
>    [];
331c331
<   Int32 cftab[257];
---
>    cftab];
331c331
<   Int32 cftab[257];
---
>    ];
331c331
<   Int32 cftab[257];
---
>   Int32 [257];
331c331
<   Int32 cftab[257];
---
>   Int32 257];
331c331
<   Int32 cftab[257];
---
>   Int32 [];
331c331
<   Int32 cftab[257];
---
>   Int32 ];
331c331
<   Int32 cftab[257];
---
>   Int32 [257;
331c331
<   Int32 cftab[257];
---
>   Int32 257;
331c331
<   Int32 cftab[257];
---
>   Int32 [;
331c331
<   Int32 cftab[257];
---
>   Int32 ;
331c331
<   Int32 cftab[257];
---
>   Int32 cftab257];
331c331
<   Int32 cftab[257];
---
>   Int32 cftab];
331c331
<   Int32 cftab[257];
---
>   Int32 cftab257;
(89.1 %, 22247 bytes)
331,332c331,332
<   Int32 ;
<   Int32 cftabCopy[257];
---
>   Int32 
>    257];
332c332
<   Int32 cftabCopy[257];
---
>    cftabCopy[257];
332c332
<   Int32 cftabCopy[257];
---
>    [257];
332c332
<   Int32 cftabCopy[257];
---
>    cftabCopy257];
332c332
<   Int32 cftabCopy[257];
---
>    257];
332c332
<   Int32 cftabCopy[257];
---
>    cftabCopy[];
332c332
<   Int32 cftabCopy[257];
---
>    [];
332c332
<   Int32 cftabCopy[257];
---
>    cftabCopy];
332c332
<   Int32 cftabCopy[257];
---
>    ];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 [257];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 257];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 [];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 ];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 [257;
332c332
<   Int32 cftabCopy[257];
---
>   Int32 257;
332c332
<   Int32 cftabCopy[257];
---
>   Int32 [;
332c332
<   Int32 cftabCopy[257];
---
>   Int32 ;
332c332
<   Int32 cftabCopy[257];
---
>   Int32 cftabCopy257];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 cftabCopy];
332c332
<   Int32 cftabCopy[257];
---
>   Int32 cftabCopy257;
(89.2 %, 22233 bytes)
332c332
<   Int32 ;
---
>   Int32 
334c334
<   UInt32 tt;
---
>    
334c334
<   UInt32 tt;
---
>    tt;
334c334
<   UInt32 tt;
---
>    ;
334c334
<   UInt32 tt;
---
>    tt
334c334
<   UInt32 tt;
---
>    
334c334
<   UInt32 tt;
---
>    tt;
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>    ;
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>    tt
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>    
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>   UInt32 ;
334c334
<   UInt32 tt;
---
>   UInt32 
334c334
<   UInt32 tt;
---
>   UInt32 ;
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>   UInt32 
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>   UInt32 ;
336c336
<   unsigned short ll16;
---
>   unsigned  ll16;
334c334
<   UInt32 tt;
---
>   UInt32 
336c336
<   unsigned short ll16;
---
>   unsigned  ll16;
334c334
<   UInt32 tt;
---
>   UInt32 ;
336c336
<   unsigned short ll16;
---
>     ll16;
334c334
<   UInt32 tt;
---
>   UInt32 
336c336
<   unsigned short ll16;
---
>     ll16;
334c334
<   UInt32 tt;
---
>   UInt32 tt
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>    short ll16;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>   unsigned  ll16;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>     ll16;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>   unsigned short ;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>    short ;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>   unsigned  ;
334c334
<   UInt32 tt;
---
>   UInt32 tt
336c336
<   unsigned short ll16;
---
>     ;
336c336
<   unsigned short ll16;
---
>    short ll16;
336c336
<   unsigned short ll16;
---
>     ll16;
336c336
<   unsigned short ll16;
---
>    short ;
336c336
<   unsigned short ll16;
---
>     ;
336c336
<   unsigned short ll16;
---
>    short ll16
336c336
<   unsigned short ll16;
---
>     ll16
336c336
<   unsigned short ll16;
---
>    short 
336c336
<   unsigned short ll16;
---
>     
336c336
<   unsigned short ll16;
---
>   unsigned  ll16;
(89.2 %, 22225 bytes)
336c336
<    short ll16;
---
>     ll16;
336c336
<    short ll16;
---
>     ;
336c336
<    short ll16;
---
>     ll16
336c336
<    short ll16;
---
>     
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>     ll16;
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>     ;
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>     ll16
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>     
>    char ll4;
336c336
<    short ll16;
---
>    short ;
336c336
<    short ll16;
---
>    short 
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ;
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short 
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ;
>   unsigned  ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short 
>   unsigned  ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ;
>     ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short 
>     ll4;
336c336
<    short ll16;
---
>    short ll16
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>    char ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>   unsigned  ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>     ll4;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>   unsigned char ;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>    char ;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>   unsigned  ;
336,337c336,337
<    short ll16;
<   unsigned char ll4;
---
>    short ll16
>     ;
337c337
<   unsigned char ll4;
---
>    char ll4;
337c337
<   unsigned char ll4;
---
>     ll4;
337c337
<   unsigned char ll4;
---
>    char ;
337c337
<   unsigned char ll4;
---
>     ;
337c337
<   unsigned char ll4;
---
>    char ll4
337c337
<   unsigned char ll4;
---
>     ll4
337c337
<   unsigned char ll4;
---
>    char 
337c337
<   unsigned char ll4;
---
>     
337c337
<   unsigned char ll4;
---
>   unsigned  ll4;
(89.2 %, 22217 bytes)
337c337
<    char ll4;
---
>     ll4;
337c337
<    char ll4;
---
>     ;
337c337
<    char ll4;
---
>     ll4
337c337
<    char ll4;
---
>     
337c337
<    char ll4;
---
>     ll4;
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>     ;
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>     ll4
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>     
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>    char ;
337c337
<    char ll4;
---
>    char 
337c337
<    char ll4;
---
>    char ;
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>    char 
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>    char ;
339c339
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
337c337
<    char ll4;
---
>    char 
339c339
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
337c337
<    char ll4;
---
>    char ;
339c339
<   UInt32 storedBlockCRC;
---
>    ;
337c337
<    char ll4;
---
>    char 
339c339
<   UInt32 storedBlockCRC;
---
>    ;
337c337
<    char ll4;
---
>    char ll4
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>    ;
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>   UInt32 storedBlockCRC
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>   UInt32 
337c337
<    char ll4;
---
>    char ll4
339c339
<   UInt32 storedBlockCRC;
---
>    
339c339
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
339c339
<   UInt32 storedBlockCRC;
---
>    ;
(89.2 %, 22196 bytes)
338a339
>    
340d340
<   UInt32 storedCombinedCRC;
339,340c339,340
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>   UInt32 storedCombinedCRC
339,340c339,340
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>    storedCombinedCRC
339,340c339,340
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>   UInt32 
339,340c339,340
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>    
340c340
<   UInt32 storedCombinedCRC;
---
>    storedCombinedCRC;
340c340
<   UInt32 storedCombinedCRC;
---
>    ;
(89.2 %, 22172 bytes)
339a340
>    
341d341
<   UInt32 calculatedBlockCRC;
340,341c340,341
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>   UInt32 calculatedBlockCRC
340,341c340,341
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>    calculatedBlockCRC
340,341c340,341
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>   UInt32 
340,341c340,341
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>    
341c341
<   UInt32 calculatedBlockCRC;
---
>    calculatedBlockCRC;
341c341
<   UInt32 calculatedBlockCRC;
---
>    ;
(89.2 %, 22147 bytes)
340a341
>    
342d342
<   UInt32 calculatedCombinedCRC;
341,342c341,342
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>   UInt32 calculatedCombinedCRC
341,342c341,342
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>    calculatedCombinedCRC
341,342c341,342
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>   UInt32 
341,342c341,342
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>    
342c342
<   UInt32 calculatedCombinedCRC;
---
>    calculatedCombinedCRC;
342c342
<   UInt32 calculatedCombinedCRC;
---
>    ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>    calculatedCombinedCRC
342c342
<   UInt32 calculatedCombinedCRC;
---
>    
342c342
<   UInt32 calculatedCombinedCRC;
---
>    calculatedCombinedCRC;
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>    ;
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>    calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>    
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 ;
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 ;
344c344
<   Int32 nInUse;
---
>   Int32 ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 
344c344
<   Int32 nInUse;
---
>   Int32 ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 ;
344c344
<   Int32 nInUse;
---
>    ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 
344c344
<   Int32 nInUse;
---
>    ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>    nInUse;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>   Int32 ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>    ;
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>   Int32 nInUse
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>    nInUse
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>   Int32 
342c342
<   UInt32 calculatedCombinedCRC;
---
>   UInt32 calculatedCombinedCRC
344c344
<   Int32 nInUse;
---
>    
344c344
<   Int32 nInUse;
---
>    nInUse;
344c344
<   Int32 nInUse;
---
>    ;
(89.2 %, 22135 bytes)
344,345c344,345
<    ;
<   unsigned char inUse[256];
---
>    
>     inUse[256];
344,345c344,345
<    ;
<   unsigned char inUse[256];
---
>    
>   unsigned char [256];
344,345c344,345
<    ;
<   unsigned char inUse[256];
---
>    
>    char [256];
344,345c344,345
<    ;
<   unsigned char inUse[256];
---
>    
>   unsigned  [256];
344,345c344,345
<    ;
<   unsigned char inUse[256];
---
>    
>     [256];
345c345
<   unsigned char inUse[256];
---
>    char inUse[256];
345c345
<   unsigned char inUse[256];
---
>     inUse[256];
345c345
<   unsigned char inUse[256];
---
>    char [256];
345c345
<   unsigned char inUse[256];
---
>     [256];
345c345
<   unsigned char inUse[256];
---
>    char inUse256];
345c345
<   unsigned char inUse[256];
---
>     inUse256];
345c345
<   unsigned char inUse[256];
---
>    char 256];
345c345
<   unsigned char inUse[256];
---
>     256];
345c345
<   unsigned char inUse[256];
---
>   unsigned  inUse[256];
(89.2 %, 22127 bytes)
345c345
<    char inUse[256];
---
>     inUse[256];
345c345
<    char inUse[256];
---
>     [256];
345c345
<    char inUse[256];
---
>     inUse256];
345c345
<    char inUse[256];
---
>     256];
345c345
<    char inUse[256];
---
>     inUse[];
345c345
<    char inUse[256];
---
>     [];
345c345
<    char inUse[256];
---
>     inUse];
345c345
<    char inUse[256];
---
>     ];
345c345
<    char inUse[256];
---
>    char [256];
345c345
<    char inUse[256];
---
>    char 256];
345c345
<    char inUse[256];
---
>    char [];
345c345
<    char inUse[256];
---
>    char ];
345c345
<    char inUse[256];
---
>    char [256;
345c345
<    char inUse[256];
---
>    char 256;
345c345
<    char inUse[256];
---
>    char [;
345c345
<    char inUse[256];
---
>    char ;
345c345
<    char inUse[256];
---
>    char inUse256];
345c345
<    char inUse[256];
---
>    char inUse];
345c345
<    char inUse[256];
---
>    char inUse256;
(89.2 %, 22117 bytes)
345,346c345,346
<    char ;
<   unsigned char inUse16[16];
---
>    char 
>     [16];
346c346
<   unsigned char inUse16[16];
---
>    char inUse16[16];
346c346
<   unsigned char inUse16[16];
---
>     inUse16[16];
346c346
<   unsigned char inUse16[16];
---
>    char [16];
346c346
<   unsigned char inUse16[16];
---
>     [16];
346c346
<   unsigned char inUse16[16];
---
>    char inUse1616];
346c346
<   unsigned char inUse16[16];
---
>     inUse1616];
346c346
<   unsigned char inUse16[16];
---
>    char 16];
346c346
<   unsigned char inUse16[16];
---
>     16];
346c346
<   unsigned char inUse16[16];
---
>   unsigned  inUse16[16];
(89.2 %, 22109 bytes)
346c346
<    char inUse16[16];
---
>     inUse16[16];
346c346
<    char inUse16[16];
---
>     [16];
346c346
<    char inUse16[16];
---
>     inUse1616];
346c346
<    char inUse16[16];
---
>     16];
346c346
<    char inUse16[16];
---
>     inUse16[];
346c346
<    char inUse16[16];
---
>     [];
346c346
<    char inUse16[16];
---
>     inUse16];
346c346
<    char inUse16[16];
---
>     ];
346c346
<    char inUse16[16];
---
>    char [16];
346c346
<    char inUse16[16];
---
>    char 16];
346c346
<    char inUse16[16];
---
>    char [];
346c346
<    char inUse16[16];
---
>    char ];
346c346
<    char inUse16[16];
---
>    char [16;
346c346
<    char inUse16[16];
---
>    char 16;
346c346
<    char inUse16[16];
---
>    char [;
346c346
<    char inUse16[16];
---
>    char ;
346c346
<    char inUse16[16];
---
>    char inUse1616];
346c346
<    char inUse16[16];
---
>    char inUse16];
346c346
<    char inUse16[16];
---
>    char inUse1616;
346c346
<    char inUse16[16];
---
>    char inUse16;
(89.2 %, 22098 bytes)
346,347c346,347
<    char ;
<   unsigned char seqToUnseq[256];
---
>    char 
>     [256];
347c347
<   unsigned char seqToUnseq[256];
---
>    char seqToUnseq[256];
347c347
<   unsigned char seqToUnseq[256];
---
>     seqToUnseq[256];
347c347
<   unsigned char seqToUnseq[256];
---
>    char [256];
347c347
<   unsigned char seqToUnseq[256];
---
>     [256];
347c347
<   unsigned char seqToUnseq[256];
---
>    char seqToUnseq256];
347c347
<   unsigned char seqToUnseq[256];
---
>     seqToUnseq256];
347c347
<   unsigned char seqToUnseq[256];
---
>    char 256];
347c347
<   unsigned char seqToUnseq[256];
---
>     256];
347c347
<   unsigned char seqToUnseq[256];
---
>   unsigned  seqToUnseq[256];
(89.2 %, 22090 bytes)
347c347
<    char seqToUnseq[256];
---
>     seqToUnseq[256];
347c347
<    char seqToUnseq[256];
---
>     [256];
347c347
<    char seqToUnseq[256];
---
>     seqToUnseq256];
347c347
<    char seqToUnseq[256];
---
>     256];
347c347
<    char seqToUnseq[256];
---
>     seqToUnseq[];
347c347
<    char seqToUnseq[256];
---
>     [];
347c347
<    char seqToUnseq[256];
---
>     seqToUnseq];
347c347
<    char seqToUnseq[256];
---
>     ];
347c347
<    char seqToUnseq[256];
---
>    char [256];
347c347
<    char seqToUnseq[256];
---
>    char 256];
347c347
<    char seqToUnseq[256];
---
>    char [];
347c347
<    char seqToUnseq[256];
---
>    char ];
347c347
<    char seqToUnseq[256];
---
>    char [256;
347c347
<    char seqToUnseq[256];
---
>    char 256;
347c347
<    char seqToUnseq[256];
---
>    char [;
347c347
<    char seqToUnseq[256];
---
>    char ;
347c347
<    char seqToUnseq[256];
---
>    char seqToUnseq256];
347c347
<    char seqToUnseq[256];
---
>    char seqToUnseq];
347c347
<    char seqToUnseq[256];
---
>    char seqToUnseq256;
(89.2 %, 22075 bytes)
347c347
<    char ;
---
>    char 
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>     [MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>    char mtfa[MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>     mtfa[MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>    char [MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>     [MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>    char mtfaMTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>     mtfaMTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>    char MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>     MTFA_SIZE];
349c349
<   unsigned char mtfa[MTFA_SIZE];
---
>   unsigned  mtfa[MTFA_SIZE];
(89.2 %, 22067 bytes)
349c349
<    char mtfa[MTFA_SIZE];
---
>     mtfa[MTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>     [MTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>     mtfaMTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>     MTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>     mtfa[];
349c349
<    char mtfa[MTFA_SIZE];
---
>     [];
349c349
<    char mtfa[MTFA_SIZE];
---
>     mtfa];
349c349
<    char mtfa[MTFA_SIZE];
---
>     ];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char [MTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char MTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char [];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char ];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char [MTFA_SIZE;
349c349
<    char mtfa[MTFA_SIZE];
---
>    char MTFA_SIZE;
349c349
<    char mtfa[MTFA_SIZE];
---
>    char [;
349c349
<    char mtfa[MTFA_SIZE];
---
>    char ;
349c349
<    char mtfa[MTFA_SIZE];
---
>    char mtfaMTFA_SIZE];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char mtfa];
349c349
<    char mtfa[MTFA_SIZE];
---
>    char mtfaMTFA_SIZE;
(89.2 %, 22052 bytes)
349,350c349,350
<    char ;
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    char 
>    256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    mtfbase[256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    [256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    mtfbase256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    mtfbase[ / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    [ / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>    mtfbase / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>     / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 [256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 [ / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32  / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 [256  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 256  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 [  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32   MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase256 / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase256  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase256 / ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase / ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase256  ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase  ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[ / MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[ / ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[  ];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[ / MTFL_SIZE;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[ / ;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[  ;
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[256  MTFL_SIZE];
350c350
<   Int32 mtfbase[256 / MTFL_SIZE];
---
>   Int32 mtfbase[256  ];
(89.2 %, 22048 bytes)
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  ;
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  ]
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ];
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ;
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ]
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  
>    char selector[BZ_MAX_SELECTORS];
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE;
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>   unsigned  selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>   unsigned  selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>     selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>     selector[BZ_MAX_SELECTORS];
350c350
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE]
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    char selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   unsigned  selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>     selector[BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   unsigned char [BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    char [BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   unsigned  [BZ_MAX_SELECTORS];
350,351c350,351
<   Int32 mtfbase[  MTFL_SIZE];
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>     [BZ_MAX_SELECTORS];
351c351
<   unsigned char selector[BZ_MAX_SELECTORS];
---
>    char selector[BZ_MAX_SELECTORS];
(89.3 %, 22027 bytes)
351c351
<     [BZ_MAX_SELECTORS];
---
>     
351c351
<     [BZ_MAX_SELECTORS];
---
>     [];
351c351
<     [BZ_MAX_SELECTORS];
---
>     [;
351c351
<     [BZ_MAX_SELECTORS];
---
>     []
351c351
<     [BZ_MAX_SELECTORS];
---
>     [
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [];
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [;
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     []
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [
>    char selectorMtf[BZ_MAX_SELECTORS];
351c351
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS;
351c351
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS;
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS;
>   unsigned  selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS
>   unsigned  selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS;
>     selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS
>     selectorMtf[BZ_MAX_SELECTORS];
351c351
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>    char selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>   unsigned  selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>     selectorMtf[BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>   unsigned char [BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>    char [BZ_MAX_SELECTORS];
351,352c351,352
<     [BZ_MAX_SELECTORS];
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
>   unsigned  [BZ_MAX_SELECTORS];
350a351
>     [BZ_MAX_SELECTORS]
352d352
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
352c352
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char selectorMtf[BZ_MAX_SELECTORS];
352c352
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>     selectorMtf[BZ_MAX_SELECTORS];
352c352
<   unsigned char selectorMtf[BZ_MAX_SELECTORS];
---
>    char [BZ_MAX_SELECTORS];
(89.3 %, 22003 bytes)
352c352
<     [BZ_MAX_SELECTORS];
---
>     
352c352
<     [BZ_MAX_SELECTORS];
---
>     [];
352c352
<     [BZ_MAX_SELECTORS];
---
>     [;
352c352
<     [BZ_MAX_SELECTORS];
---
>     []
352c352
<     [BZ_MAX_SELECTORS];
---
>     [
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [];
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [;
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     []
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352c352
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS;
352c352
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS;
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS;
>   unsigned  len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS
>   unsigned  len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS;
>     len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS
>     len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352c352
<     [BZ_MAX_SELECTORS];
---
>     [BZ_MAX_SELECTORS]
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>   unsigned  len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>     len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>   unsigned char [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>    char [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>   unsigned  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
352,353c352,353
<     [BZ_MAX_SELECTORS];
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_SELECTORS]
>     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<   unsigned char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    char len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(89.3 %, 21987 bytes)
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [[BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     []BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [][];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [[];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     []];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS[];
353c353
<     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     [BZ_N_GROUPS];
(89.3 %, 21974 bytes)
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [;
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     []
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE;
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE;
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE;
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE;
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
353c353
<     [BZ_MAX_ALPHA_SIZE];
---
>     [BZ_MAX_ALPHA_SIZE]
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit][BZ_MAX_ALPHA_SIZE];
355c355
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
(89.3 %, 21963 bytes)
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(89.3 %, 21950 bytes)
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
355,356c355,356
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE;
355c355
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE
(89.3 %, 21931 bytes)
355,356c355,356
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
355,356c355,356
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    base[][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    base][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
356c356
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(89.3 %, 21921 bytes)
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(89.3 %, 21908 bytes)
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
356,357c356,357
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE;
356c356
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE
(89.3 %, 21889 bytes)
356,357c356,357
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
356,357c356,357
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm[][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
357c357
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(89.3 %, 21879 bytes)
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
357c357
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
(89.3 %, 21866 bytes)
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
357c357
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
357,358c357,358
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
---
>    [];
>    minLens[BZ_N_GROUPS];
357,358c357,358
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
---
>    [;
>    minLens[BZ_N_GROUPS];
(89.3 %, 21847 bytes)
357,358c357,358
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    [BZ_N_GROUPS];
357,358c357,358
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>   Int32 minLensBZ_N_GROUPS];
357,358c357,358
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    minLensBZ_N_GROUPS];
357,358c357,358
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>   Int32 BZ_N_GROUPS];
357,358c357,358
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    BZ_N_GROUPS];
358c358
<   Int32 minLens[BZ_N_GROUPS];
---
>    minLens[BZ_N_GROUPS];
358c358
<   Int32 minLens[BZ_N_GROUPS];
---
>    [BZ_N_GROUPS];
358c358
<   Int32 minLens[BZ_N_GROUPS];
---
>    minLensBZ_N_GROUPS];
358c358
<   Int32 minLens[BZ_N_GROUPS];
---
>    BZ_N_GROUPS];
(89.3 %, 21834 bytes)
358c358
<    [BZ_N_GROUPS];
---
>    ;
358c358
<    [BZ_N_GROUPS];
---
>    BZ_N_GROUPS]
358c358
<    [BZ_N_GROUPS];
---
>    ]
358c358
<    [BZ_N_GROUPS];
---
>    BZ_N_GROUPS
358c358
<    [BZ_N_GROUPS];
---
>    
358c358
<    [BZ_N_GROUPS];
---
>    [];
358c358
<    [BZ_N_GROUPS];
---
>    [;
358c358
<    [BZ_N_GROUPS];
---
>    []
358c358
<    [BZ_N_GROUPS];
---
>    [
358c358
<    [BZ_N_GROUPS];
---
>    [];
360c360
<   Int32 save_i;
---
>    save_i;
358c358
<    [BZ_N_GROUPS];
---
>    [;
360c360
<   Int32 save_i;
---
>    save_i;
358c358
<    [BZ_N_GROUPS];
---
>    []
360c360
<   Int32 save_i;
---
>    save_i;
358c358
<    [BZ_N_GROUPS];
---
>    [
360c360
<   Int32 save_i;
---
>    save_i;
358c358
<    [BZ_N_GROUPS];
---
>    [BZ_N_GROUPS;
358c358
<    [BZ_N_GROUPS];
---
>    [BZ_N_GROUPS
(89.4 %, 21821 bytes)
358c358
<    ;
---
>    
360c360
<   Int32 save_i;
---
>    ;
358c358
<    ;
---
>    
360c360
<   Int32 save_i;
---
>   Int32 save_i
358c358
<    ;
---
>    
360c360
<   Int32 save_i;
---
>    save_i
358c358
<    ;
---
>    
360c360
<   Int32 save_i;
---
>   Int32 
358c358
<    ;
---
>    
360c360
<   Int32 save_i;
---
>    
360c360
<   Int32 save_i;
---
>    save_i;
360c360
<   Int32 save_i;
---
>    ;
(89.4 %, 21809 bytes)
359a360
>    
361d361
<   Int32 save_j;
360,361c360,361
<    ;
<   Int32 save_j;
---
>    
>   Int32 save_j
360,361c360,361
<    ;
<   Int32 save_j;
---
>    
>    save_j
360,361c360,361
<    ;
<   Int32 save_j;
---
>    
>   Int32 
360,361c360,361
<    ;
<   Int32 save_j;
---
>    
>    
361c361
<   Int32 save_j;
---
>    save_j;
361c361
<   Int32 save_j;
---
>    ;
(89.4 %, 21797 bytes)
360a361
>    
362d362
<   Int32 save_t;
361,362c361,362
<    ;
<   Int32 save_t;
---
>    
>   Int32 save_t
361,362c361,362
<    ;
<   Int32 save_t;
---
>    
>    save_t
361,362c361,362
<    ;
<   Int32 save_t;
---
>    
>   Int32 
361,362c361,362
<    ;
<   Int32 save_t;
---
>    
>    
362c362
<   Int32 save_t;
---
>    save_t;
362c362
<   Int32 save_t;
---
>    ;
(89.4 %, 21785 bytes)
361a362
>    
363d363
<   Int32 save_alphaSize;
362,363c362,363
<    ;
<   Int32 save_alphaSize;
---
>    
>   Int32 save_alphaSize
362,363c362,363
<    ;
<   Int32 save_alphaSize;
---
>    
>    save_alphaSize
362,363c362,363
<    ;
<   Int32 save_alphaSize;
---
>    
>   Int32 
362,363c362,363
<    ;
<   Int32 save_alphaSize;
---
>    
>    
363c363
<   Int32 save_alphaSize;
---
>    save_alphaSize;
363c363
<   Int32 save_alphaSize;
---
>    ;
(89.4 %, 21765 bytes)
362a363
>    
364d364
<   Int32 save_nGroups;
363,364c363,364
<    ;
<   Int32 save_nGroups;
---
>    
>   Int32 save_nGroups
363,364c363,364
<    ;
<   Int32 save_nGroups;
---
>    
>    save_nGroups
363,364c363,364
<    ;
<   Int32 save_nGroups;
---
>    
>   Int32 
363,364c363,364
<    ;
<   Int32 save_nGroups;
---
>    
>    
364c364
<   Int32 save_nGroups;
---
>    save_nGroups;
364c364
<   Int32 save_nGroups;
---
>    ;
(89.4 %, 21747 bytes)
363a364
>    
365d365
<   Int32 save_nSelectors;
364,365c364,365
<    ;
<   Int32 save_nSelectors;
---
>    
>   Int32 save_nSelectors
364,365c364,365
<    ;
<   Int32 save_nSelectors;
---
>    
>    save_nSelectors
364,365c364,365
<    ;
<   Int32 save_nSelectors;
---
>    
>   Int32 
364,365c364,365
<    ;
<   Int32 save_nSelectors;
---
>    
>    
365c365
<   Int32 save_nSelectors;
---
>    save_nSelectors;
365c365
<   Int32 save_nSelectors;
---
>    ;
(89.4 %, 21726 bytes)
364a365
>    
366d366
<   Int32 save_EOB;
365,366c365,366
<    ;
<   Int32 save_EOB;
---
>    
>   Int32 save_EOB
365,366c365,366
<    ;
<   Int32 save_EOB;
---
>    
>    save_EOB
365,366c365,366
<    ;
<   Int32 save_EOB;
---
>    
>   Int32 
365,366c365,366
<    ;
<   Int32 save_EOB;
---
>    
>    
366c366
<   Int32 save_EOB;
---
>    save_EOB;
366c366
<   Int32 save_EOB;
---
>    ;
(89.4 %, 21712 bytes)
365a366
>    
367d367
<   Int32 save_groupNo;
366,367c366,367
<    ;
<   Int32 save_groupNo;
---
>    
>   Int32 save_groupNo
366,367c366,367
<    ;
<   Int32 save_groupNo;
---
>    
>    save_groupNo
366,367c366,367
<    ;
<   Int32 save_groupNo;
---
>    
>   Int32 
366,367c366,367
<    ;
<   Int32 save_groupNo;
---
>    
>    
367c367
<   Int32 save_groupNo;
---
>    save_groupNo;
367c367
<   Int32 save_groupNo;
---
>    ;
(89.4 %, 21694 bytes)
366a367
>    
368d368
<   Int32 save_groupPos;
367,368c367,368
<    ;
<   Int32 save_groupPos;
---
>    
>   Int32 save_groupPos
367,368c367,368
<    ;
<   Int32 save_groupPos;
---
>    
>    save_groupPos
367,368c367,368
<    ;
<   Int32 save_groupPos;
---
>    
>   Int32 
367,368c367,368
<    ;
<   Int32 save_groupPos;
---
>    
>    
368c368
<   Int32 save_groupPos;
---
>    save_groupPos;
368c368
<   Int32 save_groupPos;
---
>    ;
(89.4 %, 21675 bytes)
367a368
>    
369d369
<   Int32 save_nextSym;
368,369c368,369
<    ;
<   Int32 save_nextSym;
---
>    
>   Int32 save_nextSym
368,369c368,369
<    ;
<   Int32 save_nextSym;
---
>    
>    save_nextSym
368,369c368,369
<    ;
<   Int32 save_nextSym;
---
>    
>   Int32 
368,369c368,369
<    ;
<   Int32 save_nextSym;
---
>    
>    
369c369
<   Int32 save_nextSym;
---
>    save_nextSym;
369c369
<   Int32 save_nextSym;
---
>    ;
369c369
<   Int32 save_nextSym;
---
>    save_nextSym
369c369
<   Int32 save_nextSym;
---
>    
(89.4 %, 21657 bytes)
368a369
>    
370d370
<   Int32 save_nblockMAX;
369,370c369,370
<    ;
<   Int32 save_nblockMAX;
---
>    
>   Int32 save_nblockMAX
369,370c369,370
<    ;
<   Int32 save_nblockMAX;
---
>    
>    save_nblockMAX
369,370c369,370
<    ;
<   Int32 save_nblockMAX;
---
>    
>   Int32 
369,370c369,370
<    ;
<   Int32 save_nblockMAX;
---
>    
>    
370c370
<   Int32 save_nblockMAX;
---
>    save_nblockMAX;
370c370
<   Int32 save_nblockMAX;
---
>    ;
(89.4 %, 21637 bytes)
369a370
>    
371d371
<   Int32 save_nblock;
370,371c370,371
<    ;
<   Int32 save_nblock;
---
>    
>   Int32 save_nblock
370,371c370,371
<    ;
<   Int32 save_nblock;
---
>    
>    save_nblock
370,371c370,371
<    ;
<   Int32 save_nblock;
---
>    
>   Int32 
370,371c370,371
<    ;
<   Int32 save_nblock;
---
>    
>    
371c371
<   Int32 save_nblock;
---
>    save_nblock;
371c371
<   Int32 save_nblock;
---
>    ;
(89.5 %, 21620 bytes)
370a371
>    
372d372
<   Int32 save_es;
371,372c371,372
<    ;
<   Int32 save_es;
---
>    
>   Int32 save_es
371,372c371,372
<    ;
<   Int32 save_es;
---
>    
>    save_es
371,372c371,372
<    ;
<   Int32 save_es;
---
>    
>   Int32 
371,372c371,372
<    ;
<   Int32 save_es;
---
>    
>    
372c372
<   Int32 save_es;
---
>    save_es;
372c372
<   Int32 save_es;
---
>    ;
(89.5 %, 21607 bytes)
371a372
>    
373d373
<   Int32 save_N;
372,373c372,373
<    ;
<   Int32 save_N;
---
>    
>   Int32 save_N
372,373c372,373
<    ;
<   Int32 save_N;
---
>    
>    save_N
372,373c372,373
<    ;
<   Int32 save_N;
---
>    
>   Int32 
372,373c372,373
<    ;
<   Int32 save_N;
---
>    
>    
373c373
<   Int32 save_N;
---
>    save_N;
373c373
<   Int32 save_N;
---
>    ;
(89.5 %, 21595 bytes)
372a373
>    
374d374
<   Int32 save_curr;
373,374c373,374
<    ;
<   Int32 save_curr;
---
>    
>   Int32 save_curr
373,374c373,374
<    ;
<   Int32 save_curr;
---
>    
>    save_curr
373,374c373,374
<    ;
<   Int32 save_curr;
---
>    
>   Int32 
373,374c373,374
<    ;
<   Int32 save_curr;
---
>    
>    
374c374
<   Int32 save_curr;
---
>    save_curr;
374c374
<   Int32 save_curr;
---
>    ;
(89.5 %, 21580 bytes)
373a374
>    
375d375
<   Int32 save_zt;
374,375c374,375
<    ;
<   Int32 save_zt;
---
>    
>   Int32 save_zt
374,375c374,375
<    ;
<   Int32 save_zt;
---
>    
>    save_zt
374,375c374,375
<    ;
<   Int32 save_zt;
---
>    
>   Int32 
374,375c374,375
<    ;
<   Int32 save_zt;
---
>    
>    
375c375
<   Int32 save_zt;
---
>    save_zt;
375c375
<   Int32 save_zt;
---
>    ;
(89.5 %, 21567 bytes)
374a375
>    
376d376
<   Int32 save_zn;
375,376c375,376
<    ;
<   Int32 save_zn;
---
>    
>   Int32 save_zn
375,376c375,376
<    ;
<   Int32 save_zn;
---
>    
>    save_zn
375,376c375,376
<    ;
<   Int32 save_zn;
---
>    
>   Int32 
375,376c375,376
<    ;
<   Int32 save_zn;
---
>    
>    
376c376
<   Int32 save_zn;
---
>    save_zn;
376c376
<   Int32 save_zn;
---
>    ;
(89.5 %, 21554 bytes)
375a376
>    
377d377
<   Int32 save_zvec;
376,377c376,377
<    ;
<   Int32 save_zvec;
---
>    
>   Int32 save_zvec
376,377c376,377
<    ;
<   Int32 save_zvec;
---
>    
>    save_zvec
376,377c376,377
<    ;
<   Int32 save_zvec;
---
>    
>   Int32 
376,377c376,377
<    ;
<   Int32 save_zvec;
---
>    
>    
377c377
<   Int32 save_zvec;
---
>    save_zvec;
377c377
<   Int32 save_zvec;
---
>    ;
(89.5 %, 21539 bytes)
376a377
>    
378d378
<   Int32 save_zj;
377,378c377,378
<    ;
<   Int32 save_zj;
---
>    
>   Int32 save_zj
377,378c377,378
<    ;
<   Int32 save_zj;
---
>    
>    save_zj
377,378c377,378
<    ;
<   Int32 save_zj;
---
>    
>   Int32 
377,378c377,378
<    ;
<   Int32 save_zj;
---
>    
>    
378c378
<   Int32 save_zj;
---
>    save_zj;
378c378
<   Int32 save_zj;
---
>    ;
(89.5 %, 21526 bytes)
377a378
>    
379d379
<   Int32 save_gSel;
378,379c378,379
<    ;
<   Int32 save_gSel;
---
>    
>   Int32 save_gSel
378,379c378,379
<    ;
<   Int32 save_gSel;
---
>    
>    save_gSel
378,379c378,379
<    ;
<   Int32 save_gSel;
---
>    
>   Int32 
378,379c378,379
<    ;
<   Int32 save_gSel;
---
>    
>    
379c379
<   Int32 save_gSel;
---
>    save_gSel;
379c379
<   Int32 save_gSel;
---
>    ;
(89.5 %, 21511 bytes)
378a379
>    
380d380
<   Int32 save_gMinlen;
379,380c379,380
<    ;
<   Int32 save_gMinlen;
---
>    
>   Int32 save_gMinlen
379,380c379,380
<    ;
<   Int32 save_gMinlen;
---
>    
>    save_gMinlen
379,380c379,380
<    ;
<   Int32 save_gMinlen;
---
>    
>   Int32 
379,380c379,380
<    ;
<   Int32 save_gMinlen;
---
>    
>    
380c380
<   Int32 save_gMinlen;
---
>    save_gMinlen;
380c380
<   Int32 save_gMinlen;
---
>    ;
(89.5 %, 21493 bytes)
379a380
>    
381d381
<   Int32 save_gLimit;
380,381c380,381
<    ;
<   Int32 save_gLimit;
---
>    
>   Int32 save_gLimit
380,381c380,381
<    ;
<   Int32 save_gLimit;
---
>    
>    save_gLimit
380,381c380,381
<    ;
<   Int32 save_gLimit;
---
>    
>   Int32 
380,381c380,381
<    ;
<   Int32 save_gLimit;
---
>    
>    
381c381
<   Int32 save_gLimit;
---
>    save_gLimit;
381c381
<   Int32 save_gLimit;
---
>    ;
(89.5 %, 21476 bytes)
380a381
>    
382d382
<   Int32 save_gBase;
381,382c381,382
<    ;
<   Int32 save_gBase;
---
>    
>   Int32 save_gBase
381,382c381,382
<    ;
<   Int32 save_gBase;
---
>    
>    save_gBase
381,382c381,382
<    ;
<   Int32 save_gBase;
---
>    
>   Int32 
381,382c381,382
<    ;
<   Int32 save_gBase;
---
>    
>    
382c382
<   Int32 save_gBase;
---
>    save_gBase;
382c382
<   Int32 save_gBase;
---
>    ;
(89.5 %, 21460 bytes)
381a382
>    
383d383
<   Int32 save_gPerm;
382,383c382,383
<    ;
<   Int32 save_gPerm;
---
>    
>   Int32 save_gPerm
382,383c382,383
<    ;
<   Int32 save_gPerm;
---
>    
>    save_gPerm
382,383c382,383
<    ;
<   Int32 save_gPerm;
---
>    
>   Int32 
382,383c382,383
<    ;
<   Int32 save_gPerm;
---
>    
>    
(89.5 %, 21444 bytes)
383c383
<    ;
---
>    
385c385
< } DState;
---
>  ;
383c383
<    ;
---
>    
385c385
< } DState;
---
> } DState
383c383
<    ;
---
>    
385c385
< } DState;
---
>  DState
383c383
<    ;
---
>    
385c385
< } DState;
---
> } 
383c383
<    ;
---
>    
385c385
< } DState;
---
>  
385c385
< } DState;
---
>  DState;
385c385
< } DState;
---
>  ;
385c385
< } DState;
---
>  DState
385c385
< } DState;
---
>  
385c385
< } DState;
---
>  DState;
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
>  ;
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
>  DState
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
>  
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } ;
385c385
< } DState;
---
> } 
385c385
< } DState;
---
> } ;
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } 
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } ;
387c387
< #define BZ_GET_FAST                                                            \
---
> # BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } 
387c387
< #define BZ_GET_FAST                                                            \
---
> # BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } ;
387c387
< #define BZ_GET_FAST                                                            \
---
>  BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } 
387c387
< #define BZ_GET_FAST                                                            \
---
>  BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } DState
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
> # BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
>  BZ_GET_FAST                                                            \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
> #define                                                             \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
> define                                                             \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
> #                                                             \
385c385
< } DState;
---
> } DState
387c387
< #define BZ_GET_FAST                                                            \
---
>                                                              \
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            \
387c387
< #define BZ_GET_FAST                                                            \
---
>  BZ_GET_FAST                                                            \
387c387
< #define BZ_GET_FAST                                                            \
---
> define                                                             \
387c387
< #define BZ_GET_FAST                                                            \
---
>                                                              \
387c387
< #define BZ_GET_FAST                                                            \
---
> define BZ_GET_FAST                                                            
387c387
< #define BZ_GET_FAST                                                            \
---
>  BZ_GET_FAST                                                            
387c387
< #define BZ_GET_FAST                                                            \
---
> define                                                             
387c387
< #define BZ_GET_FAST                                                            \
---
>                                                              
387c387
< #define BZ_GET_FAST                                                            \
---
> # BZ_GET_FAST                                                            \
387c387
< #define BZ_GET_FAST                                                            \
---
> #                                                             \
387c387
< #define BZ_GET_FAST                                                            \
---
> # BZ_GET_FAST                                                            
387c387
< #define BZ_GET_FAST                                                            \
---
> #                                                             
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> # BZ_GET_FAST                                                            \
>   ->tPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #                                                             \
>   ->tPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> # BZ_GET_FAST                                                            
>   ->tPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #                                                             
>   ->tPos = s->tt[s->tPos];                                                    \
387c387
< #define BZ_GET_FAST                                                            \
---
> #define                                                             \
387c387
< #define BZ_GET_FAST                                                            \
---
> #define                                                             
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                             \
>   ->tPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>   ->tPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                             \
>   stPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>   stPos = s->tt[s->tPos];                                                    \
387,388c387,388
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                             \
>   tPos = s->tt[s->tPos];                                                    \
(89.5 %, 21431 bytes)
387,388c387,388
< #define                                                             \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>   stPos = ->tt[s->tPos];                                                    \
387,388c387,388
< #define                                                             \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>    = ->tt[s->tPos];                                                    \
387,388c387,388
< #define                                                             \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>   stPos  ->tt[s->tPos];                                                    \
387,388c387,388
< #define                                                             \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                             
>     ->tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>    = s->tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>     s->tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>    = ->tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>     ->tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>    = stt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>     stt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>    = tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>     tt[s->tPos];                                                    \
388c388
<   stPos = s->tt[s->tPos];                                                    \
---
>   stPos  s->tt[s->tPos];                                                    \
(89.5 %, 21423 bytes)
388c388
<     stt[s->tPos];                                                    \
---
>     stPos];                                                    \
388c388
<     stt[s->tPos];                                                    \
---
>     [tPos];                                                    \
388c388
<     stt[s->tPos];                                                    \
---
>     tPos];                                                    \
388c388
<     stt[s->tPos];                                                    \
---
>     stts->tPos];                                                    \
(89.5 %, 21417 bytes)
388c388
<     stPos];                                                    \
---
>     ;                                                    
388c388
<     stPos];                                                    \
---
>     ]                                                    
388c388
<     stPos];                                                    \
---
>                                                         
388c388
<     stPos];                                                    \
---
>     stPos;                                                    \
388c388
<     stPos];                                                    \
---
>     stPos                                                    \
(89.5 %, 21416 bytes)
388c388
<     stPos;                                                    \
---
>     stPos                                                    \
388c388
<     stPos;                                                    \
---
>     stPos                                                    
388,389c388,389
<     stPos;                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    \
>    = ;                                                                     \
(89.6 %, 21415 bytes)
388c388
<     stPos                                                    \
---
>     stPos                                                    
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>    = ;                                                                     \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>   cccc  ;                                                                     \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>     ;                                                                     \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>   cccc =                                                                      \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>    =                                                                      \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>   cccc                                                                       \
388,389c388,389
<     stPos                                                    \
<   cccc = ;                                                                     \
---
>     stPos                                                    
>                                                                          \
389c389
<   cccc = ;                                                                     \
---
>    = ;                                                                     \
389c389
<   cccc = ;                                                                     \
---
>     ;                                                                     \
(89.6 %, 21411 bytes)
389c389
<    = ;                                                                     \
---
>     ;                                                                     \
389c389
<    = ;                                                                     \
---
>                                                                          \
(89.6 %, 21410 bytes)
389c389
<     ;                                                                     \
---
>                                                                          \
389c389
<     ;                                                                     \
---
>                                                                          
389,390c389,390
<     ;                                                                     \
<   s->tPos >>= 8;
---
>                                                                          \
>   ->tPos >>= 8;
(89.6 %, 21409 bytes)
389c389
<                                                                          \
---
>                                                                          
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   ->tPos >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   stPos >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   tPos >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   s-> >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   -> >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>   s >>= 8;
389,390c389,390
<                                                                          \
<   s->tPos >>= 8;
---
>                                                                          
>    >>= 8;
390c390
<   s->tPos >>= 8;
---
>   ->tPos >>= 8;
390c390
<   s->tPos >>= 8;
---
>   tPos >>= 8;
(89.6 %, 21408 bytes)
390c390
<   ->tPos >>= 8;
---
>   tPos >>= 8;
390c390
<   ->tPos >>= 8;
---
>    >>= 8;
(89.6 %, 21406 bytes)
390c390
<   tPos >>= 8;
---
>    >>= 8;
390c390
<   tPos >>= 8;
---
>     8;
390c390
<   tPos >>= 8;
---
>    >>= ;
(89.6 %, 21402 bytes)
390c390
<    >>= 8;
---
>     8;
390c390
<    >>= 8;
---
>     ;
(89.6 %, 21399 bytes)
390c390
<     8;
---
>     ;
390c390
<     8;
---
>     
(89.6 %, 21398 bytes)
390c390
<     ;
---
>     
390c390
<     ;
---
>     
392c392
< #define BZ_GET_FAST_C                                                          \
---
> define BZ_GET_FAST_C                                                          \
390c390
<     ;
---
>     
392c392
< #define BZ_GET_FAST_C                                                          \
---
> # BZ_GET_FAST_C                                                          \
390c390
<     ;
---
>     
392c392
< #define BZ_GET_FAST_C                                                          \
---
>  BZ_GET_FAST_C                                                          \
390c390
<     ;
---
>     
392c392
< #define BZ_GET_FAST_C                                                          \
---
> #define                                                           \
(89.6 %, 21397 bytes)
392c392
< #define BZ_GET_FAST_C                                                          \
---
> define BZ_GET_FAST_C                                                          \
392c392
< #define BZ_GET_FAST_C                                                          \
---
>  BZ_GET_FAST_C                                                          \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> define                                                           \
392c392
< #define BZ_GET_FAST_C                                                          \
---
>                                                            \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> define BZ_GET_FAST_C                                                          
392c392
< #define BZ_GET_FAST_C                                                          \
---
>  BZ_GET_FAST_C                                                          
392c392
< #define BZ_GET_FAST_C                                                          \
---
> define                                                           
392c392
< #define BZ_GET_FAST_C                                                          \
---
>                                                            
392c392
< #define BZ_GET_FAST_C                                                          \
---
> # BZ_GET_FAST_C                                                          \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> #                                                           \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> # BZ_GET_FAST_C                                                          
392c392
< #define BZ_GET_FAST_C                                                          \
---
> #                                                           
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> # BZ_GET_FAST_C                                                          \
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #                                                           \
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> # BZ_GET_FAST_C                                                          
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #                                                           
>    = c_tt[c_tPos];                                                       \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> #define                                                           \
392c392
< #define BZ_GET_FAST_C                                                          \
---
> #define                                                           
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           \
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           \
>   c_tPos  c_tt[c_tPos];                                                       \
(89.6 %, 21384 bytes)
392c392
< #define                                                           \
---
> #define                                                           
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>    = c_tt[c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>   c_tPos  c_tt[c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>     c_tt[c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>   c_tPos = [c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>    = [c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>   c_tPos  [c_tPos];                                                       \
392,393c392,393
< #define                                                           \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                           
>     [c_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = c_tt[c_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     c_tt[c_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = [c_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     [c_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = c_ttc_tPos];                                                       \
393c393
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     c_ttc_tPos];                                                       \
(89.6 %, 21377 bytes)
393c393
<     c_tt[c_tPos];                                                       \
---
>     c_tPos];                                                       \
393c393
<     c_tt[c_tPos];                                                       \
---
>     [];                                                       \
393c393
<     c_tt[c_tPos];                                                       \
---
>     ];                                                       \
393c393
<     c_tt[c_tPos];                                                       \
---
>     [c_tPos;                                                       \
393c393
<     c_tt[c_tPos];                                                       \
---
>     c_tPos;                                                       \
(89.6 %, 21372 bytes)
393c393
<     c_tPos];                                                       \
---
>     ;                                                       \
393c393
<     c_tPos];                                                       \
---
>     ]                                                       \
393c393
<     c_tPos];                                                       \
---
>                                                            \
393c393
<     c_tPos];                                                       \
---
>     ];                                                       
393c393
<     c_tPos];                                                       \
---
>     ;                                                       
393c393
<     c_tPos];                                                       \
---
>     ]                                                       
393c393
<     c_tPos];                                                       \
---
>                                                            
393c393
<     c_tPos];                                                       \
---
>     c_tPos;                                                       \
(89.6 %, 21364 bytes)
393,394c393,394
<                                                            \
<   cccc = ;                                                                     \
---
>                                                            
>     ;                                                                     \
393,394c393,394
<                                                            \
<   cccc = ;                                                                     \
---
>                                                            
>   cccc =                                                                      \
393,394c393,394
<                                                            \
<   cccc = ;                                                                     \
---
>                                                            
>    =                                                                      \
393,394c393,394
<                                                            \
<   cccc = ;                                                                     \
---
>                                                            
>   cccc                                                                       \
393,394c393,394
<                                                            \
<   cccc = ;                                                                     \
---
>                                                            
>                                                                          \
394c394
<   cccc = ;                                                                     \
---
>    = ;                                                                     \
394c394
<   cccc = ;                                                                     \
---
>     ;                                                                     \
394c394
<   cccc = ;                                                                     \
---
>    =                                                                      \
394c394
<   cccc = ;                                                                     \
---
>                                                                          \
394c394
<   cccc = ;                                                                     \
---
>    = ;                                                                     
394c394
<   cccc = ;                                                                     \
---
>     ;                                                                     
394c394
<   cccc = ;                                                                     \
---
>    =                                                                      
394c394
<   cccc = ;                                                                     \
---
>                                                                          
394c394
<   cccc = ;                                                                     \
---
>   cccc  ;                                                                     \
(89.6 %, 21358 bytes)
394,395c394,395
<                                                                          \
<   c_tPos >>= 8;
---
>                                                                          
>     8;
394,395c394,395
<                                                                          \
<   c_tPos >>= 8;
---
>                                                                          
>   c_tPos >>= ;
394,395c394,395
<                                                                          \
<   c_tPos >>= 8;
---
>                                                                          
>    >>= ;
394,395c394,395
<                                                                          \
<   c_tPos >>= 8;
---
>                                                                          
>   c_tPos  ;
394,395c394,395
<                                                                          \
<   c_tPos >>= 8;
---
>                                                                          
>     ;
395c395
<   c_tPos >>= 8;
---
>    >>= 8;
395c395
<   c_tPos >>= 8;
---
>     8;
395c395
<   c_tPos >>= 8;
---
>    >>= ;
395c395
<   c_tPos >>= 8;
---
>     ;
395c395
<   c_tPos >>= 8;
---
>    >>= 8
395c395
<   c_tPos >>= 8;
---
>     8
395c395
<   c_tPos >>= 8;
---
>    >>= 
395c395
<   c_tPos >>= 8;
---
>     
395c395
<   c_tPos >>= 8;
---
>   c_tPos  8;
395c395
<   c_tPos >>= 8;
---
>   c_tPos  ;
395c395
<   c_tPos >>= 8;
---
>   c_tPos  8
(89.6 %, 21355 bytes)
395c395
<   c_tPos  8;
---
>   c_tPos  ;
395c395
<   c_tPos  8;
---
>   c_tPos  
(89.6 %, 21354 bytes)
395c395
<   c_tPos  ;
---
>   c_tPos  
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
> define SET_LL4
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
> # SET_LL4
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
>  SET_LL4
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
> #define 
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
> define 
395c395
<   c_tPos  ;
---
>   c_tPos  
397c397
< #define SET_LL4
---
> # 
(89.6 %, 21353 bytes)
397c397
< #define SET_LL4
---
> define SET_LL4
397c397
< #define SET_LL4
---
>  SET_LL4
397c397
< #define SET_LL4
---
> define 
397c397
< #define SET_LL4
---
>  
397c397
< #define SET_LL4
---
> define SET_LL4
399c399
< #define GET_LL4
---
> define GET_LL4
397c397
< #define SET_LL4
---
>  SET_LL4
399c399
< #define GET_LL4
---
> define GET_LL4
397c397
< #define SET_LL4
---
> define 
399c399
< #define GET_LL4
---
> define GET_LL4
397c397
< #define SET_LL4
---
>  
399c399
< #define GET_LL4
---
> define GET_LL4
397c397
< #define SET_LL4
---
> # SET_LL4
397c397
< #define SET_LL4
---
> # 
(89.6 %, 21339 bytes)
399c399
< #define GET_LL4
---
>  
399c399
< #define GET_LL4
---
> define GET_LL4
401c401
< #define SET_LL
---
> define SET_LL
399c399
< #define GET_LL4
---
>  GET_LL4
401c401
< #define SET_LL
---
> define SET_LL
399c399
< #define GET_LL4
---
> define 
401c401
< #define SET_LL
---
> define SET_LL
399c399
< #define GET_LL4
---
>  
401c401
< #define SET_LL
---
> define SET_LL
399c399
< #define GET_LL4
---
> # GET_LL4
399c399
< #define GET_LL4
---
> # 
(89.6 %, 21325 bytes)
401c401
< #define SET_LL
---
>  
401c401
< #define SET_LL
---
> define SET_LL
403c403
< #define GET_LL
---
> define GET_LL
401c401
< #define SET_LL
---
>  SET_LL
403c403
< #define GET_LL
---
> define GET_LL
401c401
< #define SET_LL
---
> define 
403c403
< #define GET_LL
---
> define GET_LL
401c401
< #define SET_LL
---
>  
403c403
< #define GET_LL
---
> define GET_LL
401c401
< #define SET_LL
---
> # SET_LL
401c401
< #define SET_LL
---
> # 
(89.6 %, 21312 bytes)
403c403
< #define GET_LL
---
>  
403c403
< #define GET_LL
---
> define GET_LL
405c405
< #define BZ_GET_SMALL                                                           \
---
> define BZ_GET_SMALL                                                           \
403c403
< #define GET_LL
---
>  GET_LL
405c405
< #define BZ_GET_SMALL                                                           \
---
> define BZ_GET_SMALL                                                           \
403c403
< #define GET_LL
---
> define 
405c405
< #define BZ_GET_SMALL                                                           \
---
> define BZ_GET_SMALL                                                           \
403c403
< #define GET_LL
---
>  
405c405
< #define BZ_GET_SMALL                                                           \
---
> define BZ_GET_SMALL                                                           \
403c403
< #define GET_LL
---
> # GET_LL
403c403
< #define GET_LL
---
> # 
(89.6 %, 21299 bytes)
405c405
< #define BZ_GET_SMALL                                                           \
---
>                                                             \
405c405
< #define BZ_GET_SMALL                                                           \
---
> define BZ_GET_SMALL                                                           
405c405
< #define BZ_GET_SMALL                                                           \
---
>  BZ_GET_SMALL                                                           
405c405
< #define BZ_GET_SMALL                                                           \
---
> define                                                            
405c405
< #define BZ_GET_SMALL                                                           \
---
>                                                             
405c405
< #define BZ_GET_SMALL                                                           \
---
> # BZ_GET_SMALL                                                           \
405c405
< #define BZ_GET_SMALL                                                           \
---
> #                                                            \
405c405
< #define BZ_GET_SMALL                                                           \
---
> # BZ_GET_SMALL                                                           
405c405
< #define BZ_GET_SMALL                                                           \
---
> #                                                            
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> # BZ_GET_SMALL                                                           \
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #                                                            \
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> # BZ_GET_SMALL                                                           
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #                                                            
>    = BZ2_indexIntoF;                                                       \
405c405
< #define BZ_GET_SMALL                                                           \
---
> #define                                                            \
405c405
< #define BZ_GET_SMALL                                                           \
---
> #define                                                            
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            \
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            \
>   cccc  BZ2_indexIntoF;                                                       \
(89.6 %, 21287 bytes)
405c405
< #define                                                            \
---
> #define                                                            
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>    = BZ2_indexIntoF;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>   cccc  BZ2_indexIntoF;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>     BZ2_indexIntoF;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>   cccc = ;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>    = ;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>   cccc  ;                                                       \
405,406c405,406
< #define                                                            \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define                                                            
>     ;                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>    = BZ2_indexIntoF;                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>     BZ2_indexIntoF;                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>    = ;                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>     ;                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>    = BZ2_indexIntoF                                                       \
406c406
<   cccc = BZ2_indexIntoF;                                                       \
---
>     BZ2_indexIntoF                                                       \
(89.6 %, 21282 bytes)
406c406
<     BZ2_indexIntoF;                                                       \
---
>                                                            \
406c406
<     BZ2_indexIntoF;                                                       \
---
>     ;                                                       
406c406
<     BZ2_indexIntoF;                                                       \
---
>                                                            
406,407c406,407
<     BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
---
>     ;                                                       \
>   ->tPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
---
>                                                            \
>   ->tPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
---
>     ;                                                       
>   ->tPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
---
>                                                            
>   ->tPos = GET_LL;
406c406
<     BZ2_indexIntoF;                                                       \
---
>     BZ2_indexIntoF                                                       \
406c406
<     BZ2_indexIntoF;                                                       \
---
>     BZ2_indexIntoF                                                       
406,407c406,407
<     BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       \
>   ->tPos = GET_LL;
(89.6 %, 21281 bytes)
406c406
<     BZ2_indexIntoF                                                       \
---
>     BZ2_indexIntoF                                                       
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   ->tPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   stPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   tPos = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   s-> = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   -> = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>   s = GET_LL;
406,407c406,407
<     BZ2_indexIntoF                                                       \
<   s->tPos = GET_LL;
---
>     BZ2_indexIntoF                                                       
>    = GET_LL;
407c407
<   s->tPos = GET_LL;
---
>   ->tPos = GET_LL;
407c407
<   s->tPos = GET_LL;
---
>   tPos = GET_LL;
407c407
<   s->tPos = GET_LL;
---
>   -> = GET_LL;
(89.6 %, 21280 bytes)
407c407
<   ->tPos = GET_LL;
---
>   tPos = GET_LL;
407c407
<   ->tPos = GET_LL;
---
>    = GET_LL;
407c407
<   ->tPos = GET_LL;
---
>   tPos  GET_LL;
(89.6 %, 21278 bytes)
407c407
<   tPos = GET_LL;
---
>    = GET_LL;
407c407
<   tPos = GET_LL;
---
>     GET_LL;
(89.6 %, 21274 bytes)
407c407
<    = GET_LL;
---
>     GET_LL;
407c407
<    = GET_LL;
---
>     ;
407c407
<    = GET_LL;
---
>     GET_LL
(89.6 %, 21273 bytes)
407c407
<     GET_LL;
---
>     ;
407c407
<     GET_LL;
---
>     
407c407
<     GET_LL;
---
>     ;
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress(DState *);
407c407
<     GET_LL;
---
>     
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress(DState *);
407c407
<     GET_LL;
---
>     ;
409c409
< void BZ2_decompress(DState *);
---
> void (DState *);
407c407
<     GET_LL;
---
>     
409c409
< void BZ2_decompress(DState *);
---
> void (DState *);
407c407
<     GET_LL;
---
>     ;
409c409
< void BZ2_decompress(DState *);
---
>  (DState *);
(89.6 %, 21267 bytes)
407c407
<     ;
---
>     
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress(DState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
> void (DState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
>  (DState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompressDState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompressDState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
> void DState *);
407c407
<     ;
---
>     
409c409
< void BZ2_decompress(DState *);
---
>  DState *);
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress(DState *);
409c409
< void BZ2_decompress(DState *);
---
>  (DState *);
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompressDState *);
409c409
< void BZ2_decompress(DState *);
---
>  DState *);
(89.6 %, 21266 bytes)
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress(DState *);
409c409
< void BZ2_decompress(DState *);
---
>  (DState *);
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompressDState *);
409c409
< void BZ2_decompress(DState *);
---
>  DState *);
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress( *);
409c409
< void BZ2_decompress(DState *);
---
>  ( *);
409c409
< void BZ2_decompress(DState *);
---
>  BZ2_decompress *);
409c409
< void BZ2_decompress(DState *);
---
>   *);
409c409
< void BZ2_decompress(DState *);
---
> void (DState *);
409c409
< void BZ2_decompress(DState *);
---
> void DState *);
409c409
< void BZ2_decompress(DState *);
---
> void ( *);
409c409
< void BZ2_decompress(DState *);
---
> void  *);
409c409
< void BZ2_decompress(DState *);
---
> void (DState );
409c409
< void BZ2_decompress(DState *);
---
> void DState );
409c409
< void BZ2_decompress(DState *);
---
> void ( );
409c409
< void BZ2_decompress(DState *);
---
> void  );
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompressDState *);
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress *);
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompressDState );
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress );
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompressDState *;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress *;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompressDState ;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress ;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( *);
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( );
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( *;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( ;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( *)
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( )
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( *
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress( 
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState );
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState ;
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState )
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState 
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState );
411c411
< #define fswap
---
> define fswap
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState ;
411c411
< #define fswap
---
> define fswap
409c409
< void BZ2_decompress(DState *);
---
> void BZ2_decompress(DState )
411c411
< #define fswap
---
> define fswap
(89.6 %, 21259 bytes)
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( 
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( ;
411c411
< #define fswap
---
> define fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( 
411c411
< #define fswap
---
> define fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( ;
411c411
< #define fswap
---
> # fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( 
411c411
< #define fswap
---
> # fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( ;
411c411
< #define fswap
---
>  fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( 
411c411
< #define fswap
---
>  fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
> define fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
> # fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
>  fswap
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
> #define 
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
> define 
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
> # 
409c409
< void BZ2_decompress( );
---
> void BZ2_decompress( )
411c411
< #define fswap
---
>  
411c411
< #define fswap
---
> define fswap
411c411
< #define fswap
---
>  fswap
411c411
< #define fswap
---
> define 
411c411
< #define fswap
---
>  
411c411
< #define fswap
---
> define fswap
413c413
< #define fvswap
---
> define fvswap
411c411
< #define fswap
---
>  fswap
413c413
< #define fvswap
---
> define fvswap
411c411
< #define fswap
---
> define 
413c413
< #define fvswap
---
> define fvswap
411c411
< #define fswap
---
>  
413c413
< #define fvswap
---
> define fvswap
411c411
< #define fswap
---
> # fswap
411c411
< #define fswap
---
> # 
(89.6 %, 21247 bytes)
413c413
< #define fvswap
---
>  
413c413
< #define fvswap
---
> define fvswap
415c415
< #define fmin ?:
---
> define fmin ?:
413c413
< #define fvswap
---
>  fvswap
415c415
< #define fmin ?:
---
> define fmin ?:
413c413
< #define fvswap
---
> define 
415c415
< #define fmin ?:
---
> define fmin ?:
413c413
< #define fvswap
---
>  
415c415
< #define fmin ?:
---
> define fmin ?:
413c413
< #define fvswap
---
> # fvswap
413c413
< #define fvswap
---
> # 
(89.6 %, 21234 bytes)
415c415
< #define fmin ?:
---
>   ?:
415c415
< #define fmin ?:
---
> define fmin :
415c415
< #define fmin ?:
---
>  fmin :
415c415
< #define fmin ?:
---
> define  :
415c415
< #define fmin ?:
---
>   :
415c415
< #define fmin ?:
---
> # fmin ?:
415c415
< #define fmin ?:
---
> #  ?:
415c415
< #define fmin ?:
---
> # fmin :
415c415
< #define fmin ?:
---
> #  :
415c415
< #define fmin ?:
---
> # fmin ?
415c415
< #define fmin ?:
---
> #  ?
415c415
< #define fmin ?:
---
> # fmin 
415c415
< #define fmin ?:
---
> #  
415c415
< #define fmin ?:
---
> #define  ?:
415c415
< #define fmin ?:
---
> #define  :
415c415
< #define fmin ?:
---
> #define  ?
415c415
< #define fmin ?:
---
> #define  
415c415
< #define fmin ?:
---
> #define  ?:
417c417
< #define fpush
---
> define fpush
415c415
< #define fmin ?:
---
> #define  :
417c417
< #define fpush
---
> define fpush
415c415
< #define fmin ?:
---
> #define  ?
417c417
< #define fpush
---
> define fpush
(89.6 %, 21222 bytes)
417c417
< #define fpush
---
>  
419c419
< #define fpop
---
> define fpop
417c417
< #define fpush
---
> # fpush
417c417
< #define fpush
---
> # 
417c417
< #define fpush
---
> # fpush
419c419
< #define fpop
---
> define fpop
417c417
< #define fpush
---
> # 
419c419
< #define fpop
---
> define fpop
417c417
< #define fpush
---
> # fpush
419c419
< #define fpop
---
> # fpop
417c417
< #define fpush
---
> # 
419c419
< #define fpop
---
> # fpop
417c417
< #define fpush
---
> # fpush
419c419
< #define fpop
---
>  fpop
417c417
< #define fpush
---
> # 
419c419
< #define fpop
---
>  fpop
417c417
< #define fpush
---
> #define 
417c417
< #define fpush
---
> #define 
419c419
< #define fpop
---
> define fpop
417c417
< #define fpush
---
> #define 
419c419
< #define fpop
---
> # fpop
(89.6 %, 21211 bytes)
419c419
< #define fpop
---
>  fpop
419c419
< #define fpop
---
> define 
419c419
< #define fpop
---
>  
419c419
< #define fpop
---
> define fpop
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 10
419c419
< #define fpop
---
>  fpop
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 10
419c419
< #define fpop
---
> define 
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 10
419c419
< #define fpop
---
>  
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 10
419c419
< #define fpop
---
> # fpop
419c419
< #define fpop
---
> # 
(89.7 %, 21200 bytes)
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
>   10
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
>  FALLBACK_QSORT_SMALL_THRESH 
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define  
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
>   
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> # FALLBACK_QSORT_SMALL_THRESH 10
421c421
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #  10
(89.7 %, 21164 bytes)
422c422
< #define FALLBACK_QSORT_STACK_SIZE 100
---
>   
422c422
< #define FALLBACK_QSORT_STACK_SIZE 100
---
> # FALLBACK_QSORT_STACK_SIZE 100
422c422
< #define FALLBACK_QSORT_STACK_SIZE 100
---
> #  100
(89.7 %, 21129 bytes)
424,425c424,425
< #undef fmin
< #undef fpush
---
>  
> undef fpush
424c424
< #undef fmin
---
> # fmin
424c424
< #undef fmin
---
> # 
424,425c424,425
< #undef fmin
< #undef fpush
---
> # fmin
> undef fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> # 
> undef fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> # fmin
> # fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> # 
> # fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> # fmin
>  fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> # 
>  fpush
424c424
< #undef fmin
---
> #undef 
424,425c424,425
< #undef fmin
< #undef fpush
---
> #undef 
> undef fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> #undef 
> # fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> #undef 
>  fpush
424,425c424,425
< #undef fmin
< #undef fpush
---
> #undef 
> #undef 
424,425c424,425
< #undef fmin
< #undef fpush
---
> #undef 
> undef 
(89.7 %, 21120 bytes)
425c425
< #undef fpush
---
>  fpush
425c425
< #undef fpush
---
> undef 
425c425
< #undef fpush
---
>  
425,426c425,426
< #undef fpush
< #undef fpop
---
> undef fpush
> undef fpop
425,426c425,426
< #undef fpush
< #undef fpop
---
>  fpush
> undef fpop
425,426c425,426
< #undef fpush
< #undef fpop
---
> undef 
> undef fpop
425,426c425,426
< #undef fpush
< #undef fpop
---
>  
> undef fpop
425c425
< #undef fpush
---
> # fpush
425c425
< #undef fpush
---
> # 
(89.7 %, 21109 bytes)
426c426
< #undef fpop
---
>  
426,427c426,427
< #undef fpop
< #undef fswap
---
> undef fpop
> undef fswap
426,427c426,427
< #undef fpop
< #undef fswap
---
>  fpop
> undef fswap
426,427c426,427
< #undef fpop
< #undef fswap
---
> undef 
> undef fswap
426,427c426,427
< #undef fpop
< #undef fswap
---
>  
> undef fswap
426c426
< #undef fpop
---
> # fpop
426c426
< #undef fpop
---
> # 
(89.7 %, 21099 bytes)
427c427
< #undef fswap
---
>  
427,428c427,428
< #undef fswap
< #undef fvswap
---
> undef fswap
> undef fvswap
427,428c427,428
< #undef fswap
< #undef fvswap
---
>  fswap
> undef fvswap
427,428c427,428
< #undef fswap
< #undef fvswap
---
> undef 
> undef fvswap
427,428c427,428
< #undef fswap
< #undef fvswap
---
>  
> undef fvswap
427c427
< #undef fswap
---
> # fswap
427c427
< #undef fswap
---
> # 
(89.7 %, 21088 bytes)
428c428
< #undef fvswap
---
>  
428,429c428,429
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
428,429c428,429
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
428,429c428,429
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef 
> undef FALLBACK_QSORT_SMALL_THRESH
428,429c428,429
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
> undef FALLBACK_QSORT_SMALL_THRESH
428c428
< #undef fvswap
---
> # fvswap
428c428
< #undef fvswap
---
> # 
(89.7 %, 21076 bytes)
429c429
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
429,430c429,430
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
429,430c429,430
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
429,430c429,430
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
> undef FALLBACK_QSORT_STACK_SIZE
429,430c429,430
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
> undef FALLBACK_QSORT_STACK_SIZE
429c429
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # FALLBACK_QSORT_SMALL_THRESH
429c429
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # 
(89.7 %, 21043 bytes)
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_STACK_SIZE
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define SET_BH bhtab[ >> 5] |=
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_STACK_SIZE
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define SET_BH bhtab[ >> 5] |=
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define SET_BH bhtab[ >> 5] |=
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define SET_BH bhtab[ >> 5] |=
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # FALLBACK_QSORT_STACK_SIZE
430c430
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # 
(89.7 %, 21012 bytes)
432c432
< #define SET_BH bhtab[ >> 5] |=
---
>   bhtab[ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define SET_BH [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
>  SET_BH [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> define  [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
>   [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> # SET_BH bhtab[ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #  bhtab[ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> # SET_BH [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #  [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> # SET_BH bhtab >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #  bhtab >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> # SET_BH  >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #   >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #define  bhtab[ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #define  [ >> 5] |=
432c432
< #define SET_BH bhtab[ >> 5] |=
---
> #define  bhtab >> 5] |=
(89.7 %, 21006 bytes)
432c432
< #define  bhtab[ >> 5] |=
---
> #define  [ >> 5] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define   >> 5] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define  [  5] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define    5] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define  [ >> ] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define   >> ] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define  [  ] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define    ] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define  bhtab >> 5] |=
432c432
< #define  bhtab[ >> 5] |=
---
> #define  bhtab  5] |=
(89.8 %, 21005 bytes)
432c432
< #define  bhtab >> 5] |=
---
> #define  bhtab  5] |=
432c432
< #define  bhtab >> 5] |=
---
> #define  bhtab  ] |=
(89.8 %, 21003 bytes)
432c432
< #define  bhtab  5] |=
---
> #define  bhtab  ] |=
432c432
< #define  bhtab  5] |=
---
> #define  bhtab   |=
(89.8 %, 21002 bytes)
432c432
< #define  bhtab  ] |=
---
> #define  bhtab   |=
432c432
< #define  bhtab  ] |=
---
> #define  bhtab   
(89.8 %, 21001 bytes)
432c432
< #define  bhtab   |=
---
> #define  bhtab   
432,433c432,433
< #define  bhtab   |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab   
> define CLEAR_BH bhtab[ >> 5] &= ~
432,433c432,433
< #define  bhtab   |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab   
> # CLEAR_BH bhtab[ >> 5] &= ~
432,433c432,433
< #define  bhtab   |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab   
>  CLEAR_BH bhtab[ >> 5] &= ~
432,433c432,433
< #define  bhtab   |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab   
> #define  bhtab[ >> 5] &= ~
(89.8 %, 20999 bytes)
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> define CLEAR_BH bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
>  CLEAR_BH bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> define  bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
>   bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> define CLEAR_BH [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
>  CLEAR_BH [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> define  [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
>   [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> # CLEAR_BH bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #  bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> # CLEAR_BH [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #  [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> # CLEAR_BH bhtab >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #  bhtab >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> # CLEAR_BH  >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #   >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab[ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  [ >> 5] &= ~
433c433
< #define CLEAR_BH bhtab[ >> 5] &= ~
---
> #define  bhtab >> 5] &= ~
(89.8 %, 20991 bytes)
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  [ >> 5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define   >> 5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  [  5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define    5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  [ >> ] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define   >> ] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  [  ] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define    ] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  bhtab >> 5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  bhtab  5] &= ~
433c433
< #define  bhtab[ >> 5] &= ~
---
> #define  bhtab >> ] &= ~
(89.8 %, 20990 bytes)
433c433
< #define  bhtab >> 5] &= ~
---
> #define  bhtab  5] &= ~
433c433
< #define  bhtab >> 5] &= ~
---
> #define  bhtab  ] &= ~
(89.8 %, 20988 bytes)
433c433
< #define  bhtab  5] &= ~
---
> #define  bhtab  ] &= ~
433c433
< #define  bhtab  5] &= ~
---
> #define  bhtab   &= ~
(89.8 %, 20987 bytes)
433c433
< #define  bhtab  ] &= ~
---
> #define  bhtab   &= ~
433c433
< #define  bhtab  ] &= ~
---
> #define  bhtab    ~
(89.8 %, 20986 bytes)
433c433
< #define  bhtab   &= ~
---
> #define  bhtab    ~
433c433
< #define  bhtab   &= ~
---
> #define  bhtab    
433,434c433,434
< #define  bhtab   &= ~
< #define ISSET_BH
---
> #define  bhtab    ~
> define ISSET_BH
(89.8 %, 20984 bytes)
433c433
< #define  bhtab    ~
---
> #define  bhtab    
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
> define ISSET_BH
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
> # ISSET_BH
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
>  ISSET_BH
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
> #define 
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
> define 
433,434c433,434
< #define  bhtab    ~
< #define ISSET_BH
---
> #define  bhtab    
> # 
(89.8 %, 20983 bytes)
434c434
< #define ISSET_BH
---
> define ISSET_BH
434c434
< #define ISSET_BH
---
>  ISSET_BH
434c434
< #define ISSET_BH
---
> define 
434c434
< #define ISSET_BH
---
>  
434,435c434,435
< #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
---
> define ISSET_BH
> define WORD_BH bhtab[ >> 5]
434,435c434,435
< #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
---
>  ISSET_BH
> define WORD_BH bhtab[ >> 5]
434,435c434,435
< #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
---
> define 
> define WORD_BH bhtab[ >> 5]
434,435c434,435
< #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
---
>  
> define WORD_BH bhtab[ >> 5]
434c434
< #define ISSET_BH
---
> # ISSET_BH
434c434
< #define ISSET_BH
---
> # 
(89.8 %, 20968 bytes)
435c435
< #define WORD_BH bhtab[ >> 5]
---
>   bhtab[ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> define WORD_BH [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
>  WORD_BH [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> define  [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
>   [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> # WORD_BH bhtab[ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #  bhtab[ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> # WORD_BH [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #  [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> # WORD_BH bhtab >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #  bhtab >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> # WORD_BH  >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #   >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #define  bhtab[ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #define  [ >> 5]
435c435
< #define WORD_BH bhtab[ >> 5]
---
> #define  bhtab >> 5]
(89.8 %, 20961 bytes)
435c435
< #define  bhtab[ >> 5]
---
> #define  [ >> 5]
435c435
< #define  bhtab[ >> 5]
---
> #define   >> 5]
435c435
< #define  bhtab[ >> 5]
---
> #define  [  5]
435c435
< #define  bhtab[ >> 5]
---
> #define    5]
435c435
< #define  bhtab[ >> 5]
---
> #define  [ >> ]
435c435
< #define  bhtab[ >> 5]
---
> #define   >> ]
435c435
< #define  bhtab[ >> 5]
---
> #define  [  ]
435c435
< #define  bhtab[ >> 5]
---
> #define    ]
435c435
< #define  bhtab[ >> 5]
---
> #define  bhtab >> 5]
435c435
< #define  bhtab[ >> 5]
---
> #define  bhtab  5]
435c435
< #define  bhtab[ >> 5]
---
> #define  bhtab >> ]
(89.8 %, 20960 bytes)
435c435
< #define  bhtab >> 5]
---
> #define  bhtab  5]
435c435
< #define  bhtab >> 5]
---
> #define  bhtab  ]
435c435
< #define  bhtab >> 5]
---
> #define  bhtab  5
(89.8 %, 20958 bytes)
435c435
< #define  bhtab  5]
---
> #define  bhtab  ]
435c435
< #define  bhtab  5]
---
> #define  bhtab  
(89.8 %, 20957 bytes)
435c435
< #define  bhtab  ]
---
> #define  bhtab  
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
> define UNALIGNED_BH
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
> # UNALIGNED_BH
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
>  UNALIGNED_BH
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
> #define 
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
> define 
435,436c435,436
< #define  bhtab  ]
< #define UNALIGNED_BH
---
> #define  bhtab  
> # 
(89.8 %, 20956 bytes)
436c436
< #define UNALIGNED_BH
---
> define UNALIGNED_BH
436c436
< #define UNALIGNED_BH
---
>  UNALIGNED_BH
436c436
< #define UNALIGNED_BH
---
> define 
436c436
< #define UNALIGNED_BH
---
>  
436c436
< #define UNALIGNED_BH
---
> define UNALIGNED_BH
438c438
< #undef SET_BH
---
> undef SET_BH
436c436
< #define UNALIGNED_BH
---
>  UNALIGNED_BH
438c438
< #undef SET_BH
---
> undef SET_BH
436c436
< #define UNALIGNED_BH
---
> define 
438c438
< #undef SET_BH
---
> undef SET_BH
436c436
< #define UNALIGNED_BH
---
>  
438c438
< #undef SET_BH
---
> undef SET_BH
436c436
< #define UNALIGNED_BH
---
> # UNALIGNED_BH
436c436
< #define UNALIGNED_BH
---
> # 
(89.8 %, 20937 bytes)
438c438
< #undef SET_BH
---
>  
438,439c438,439
< #undef SET_BH
< #undef CLEAR_BH
---
> undef SET_BH
> undef CLEAR_BH
438,439c438,439
< #undef SET_BH
< #undef CLEAR_BH
---
>  SET_BH
> undef CLEAR_BH
438,439c438,439
< #undef SET_BH
< #undef CLEAR_BH
---
> undef 
> undef CLEAR_BH
438,439c438,439
< #undef SET_BH
< #undef CLEAR_BH
---
>  
> undef CLEAR_BH
438c438
< #undef SET_BH
---
> # SET_BH
438c438
< #undef SET_BH
---
> # 
(89.8 %, 20925 bytes)
439c439
< #undef CLEAR_BH
---
>  
439,440c439,440
< #undef CLEAR_BH
< #undef ISSET_BH
---
> undef CLEAR_BH
> undef ISSET_BH
439,440c439,440
< #undef CLEAR_BH
< #undef ISSET_BH
---
>  CLEAR_BH
> undef ISSET_BH
439,440c439,440
< #undef CLEAR_BH
< #undef ISSET_BH
---
> undef 
> undef ISSET_BH
439,440c439,440
< #undef CLEAR_BH
< #undef ISSET_BH
---
>  
> undef ISSET_BH
439c439
< #undef CLEAR_BH
---
> # CLEAR_BH
439c439
< #undef CLEAR_BH
---
> # 
(89.8 %, 20911 bytes)
440c440
< #undef ISSET_BH
---
>  
440,441c440,441
< #undef ISSET_BH
< #undef WORD_BH
---
> undef ISSET_BH
> undef WORD_BH
440,441c440,441
< #undef ISSET_BH
< #undef WORD_BH
---
>  ISSET_BH
> undef WORD_BH
440,441c440,441
< #undef ISSET_BH
< #undef WORD_BH
---
> undef 
> undef WORD_BH
440,441c440,441
< #undef ISSET_BH
< #undef WORD_BH
---
>  
> undef WORD_BH
440c440
< #undef ISSET_BH
---
> # ISSET_BH
440c440
< #undef ISSET_BH
---
> # 
(89.8 %, 20897 bytes)
441c441
< #undef WORD_BH
---
>  
441,442c441,442
< #undef WORD_BH
< #undef UNALIGNED_BH
---
> undef WORD_BH
> undef UNALIGNED_BH
441,442c441,442
< #undef WORD_BH
< #undef UNALIGNED_BH
---
>  WORD_BH
> undef UNALIGNED_BH
441,442c441,442
< #undef WORD_BH
< #undef UNALIGNED_BH
---
> undef 
> undef UNALIGNED_BH
441,442c441,442
< #undef WORD_BH
< #undef UNALIGNED_BH
---
>  
> undef UNALIGNED_BH
441c441
< #undef WORD_BH
---
> # WORD_BH
441c441
< #undef WORD_BH
---
> # 
(89.8 %, 20884 bytes)
442c442
< #undef UNALIGNED_BH
---
>  
442c442
< #undef UNALIGNED_BH
---
> undef UNALIGNED_BH
444c444
< #define mswap
---
> define mswap
442c442
< #undef UNALIGNED_BH
---
>  UNALIGNED_BH
444c444
< #define mswap
---
> define mswap
442c442
< #undef UNALIGNED_BH
---
> undef 
444c444
< #define mswap
---
> define mswap
442c442
< #undef UNALIGNED_BH
---
>  
444c444
< #define mswap
---
> define mswap
442c442
< #undef UNALIGNED_BH
---
> # UNALIGNED_BH
442c442
< #undef UNALIGNED_BH
---
> # 
(89.8 %, 20866 bytes)
444c444
< #define mswap
---
>  
444c444
< #define mswap
---
> define mswap
446c446
< #define mvswap
---
> define mvswap
444c444
< #define mswap
---
>  mswap
446c446
< #define mvswap
---
> define mvswap
444c444
< #define mswap
---
> define 
446c446
< #define mvswap
---
> define mvswap
444c444
< #define mswap
---
>  
446c446
< #define mvswap
---
> define mvswap
444c444
< #define mswap
---
> # mswap
444c444
< #define mswap
---
> # 
(89.8 %, 20854 bytes)
446c446
< #define mvswap
---
>  
446c446
< #define mvswap
---
> define mvswap
448c448
< #define mmin ?:
---
> define mmin ?:
446c446
< #define mvswap
---
>  mvswap
448c448
< #define mmin ?:
---
> define mmin ?:
446c446
< #define mvswap
---
> define 
448c448
< #define mmin ?:
---
> define mmin ?:
446c446
< #define mvswap
---
>  
448c448
< #define mmin ?:
---
> define mmin ?:
446c446
< #define mvswap
---
> # mvswap
446c446
< #define mvswap
---
> # 
(89.8 %, 20841 bytes)
448c448
< #define mmin ?:
---
>   ?:
448c448
< #define mmin ?:
---
> define mmin :
448c448
< #define mmin ?:
---
>  mmin :
448c448
< #define mmin ?:
---
> define  :
448c448
< #define mmin ?:
---
>   :
448c448
< #define mmin ?:
---
> # mmin ?:
448c448
< #define mmin ?:
---
> #  ?:
448c448
< #define mmin ?:
---
> # mmin :
448c448
< #define mmin ?:
---
> #  :
448c448
< #define mmin ?:
---
> # mmin ?
448c448
< #define mmin ?:
---
> #  ?
448c448
< #define mmin ?:
---
> # mmin 
448c448
< #define mmin ?:
---
> #  
448c448
< #define mmin ?:
---
> #define  ?:
448c448
< #define mmin ?:
---
> #define  :
448c448
< #define mmin ?:
---
> #define  ?
448c448
< #define mmin ?:
---
> #define  
448c448
< #define mmin ?:
---
> #define  ?:
450c450
< #define mpush
---
> define mpush
448c448
< #define mmin ?:
---
> #define  :
450c450
< #define mpush
---
> define mpush
448c448
< #define mmin ?:
---
> #define  ?
450c450
< #define mpush
---
> define mpush
448c448
< #define mmin ?:
---
> #define  
450c450
< #define mpush
---
> define mpush
448c448
< #define mmin ?:
---
> #define mmin :
(89.8 %, 20829 bytes)
450c450
< #define mpush
---
>  
452c452
< #define mpop
---
> define mpop
450c450
< #define mpush
---
> # mpush
450c450
< #define mpush
---
> # 
450c450
< #define mpush
---
> # mpush
452c452
< #define mpop
---
> define mpop
450c450
< #define mpush
---
> # 
452c452
< #define mpop
---
> define mpop
450c450
< #define mpush
---
> # mpush
452c452
< #define mpop
---
> # mpop
450c450
< #define mpush
---
> # 
452c452
< #define mpop
---
> # mpop
450c450
< #define mpush
---
> # mpush
452c452
< #define mpop
---
>  mpop
450c450
< #define mpush
---
> # 
452c452
< #define mpop
---
>  mpop
450c450
< #define mpush
---
> #define 
450c450
< #define mpush
---
> #define 
452c452
< #define mpop
---
> define mpop
450c450
< #define mpush
---
> #define 
452c452
< #define mpop
---
> # mpop
(89.8 %, 20818 bytes)
452c452
< #define mpop
---
>  mpop
452c452
< #define mpop
---
> define 
452c452
< #define mpop
---
>  
452c452
< #define mpop
---
> define mpop
454c454
< #define mnextsize
---
> define mnextsize
452c452
< #define mpop
---
>  mpop
454c454
< #define mnextsize
---
> define mnextsize
452c452
< #define mpop
---
> define 
454c454
< #define mnextsize
---
> define mnextsize
452c452
< #define mpop
---
>  
454c454
< #define mnextsize
---
> define mnextsize
452c452
< #define mpop
---
> # mpop
452c452
< #define mpop
---
> # 
(89.8 %, 20807 bytes)
454c454
< #define mnextsize
---
>  
454c454
< #define mnextsize
---
> define mnextsize
456c456
< #define mnextswap
---
> define mnextswap
454c454
< #define mnextsize
---
>  mnextsize
456c456
< #define mnextswap
---
> define mnextswap
454c454
< #define mnextsize
---
> define 
456c456
< #define mnextswap
---
> define mnextswap
454c454
< #define mnextsize
---
>  
456c456
< #define mnextswap
---
> define mnextswap
454c454
< #define mnextsize
---
> # mnextsize
454c454
< #define mnextsize
---
> # 
(89.9 %, 20791 bytes)
456c456
< #define mnextswap
---
>  
456c456
< #define mnextswap
---
> define mnextswap
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define MAIN_QSORT_SMALL_THRESH 20
456c456
< #define mnextswap
---
>  mnextswap
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define MAIN_QSORT_SMALL_THRESH 20
456c456
< #define mnextswap
---
> define 
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define MAIN_QSORT_SMALL_THRESH 20
456c456
< #define mnextswap
---
>  
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define MAIN_QSORT_SMALL_THRESH 20
456c456
< #define mnextswap
---
> # mnextswap
456c456
< #define mnextswap
---
> # 
(89.9 %, 20775 bytes)
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
>   20
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define MAIN_QSORT_SMALL_THRESH 
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
>  MAIN_QSORT_SMALL_THRESH 
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> define  
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
>   
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> # MAIN_QSORT_SMALL_THRESH 20
458c458
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #  20
(89.9 %, 20743 bytes)
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
>  
> define MAIN_QSORT_STACK_SIZE 100
459c459
< #define MAIN_QSORT_DEPTH_THRESH
---
> # MAIN_QSORT_DEPTH_THRESH
459c459
< #define MAIN_QSORT_DEPTH_THRESH
---
> # 
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # MAIN_QSORT_DEPTH_THRESH
> define MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # 
> define MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # MAIN_QSORT_DEPTH_THRESH
> # MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # 
> # MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # MAIN_QSORT_DEPTH_THRESH
>  MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> # 
>  MAIN_QSORT_STACK_SIZE 100
459c459
< #define MAIN_QSORT_DEPTH_THRESH
---
> #define 
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define 
> define MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define 
> # MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define 
>  MAIN_QSORT_STACK_SIZE 100
459,460c459,460
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define 
> #define  100
(89.9 %, 20714 bytes)
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
>  MAIN_QSORT_STACK_SIZE 100
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
> define  100
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
>   100
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
> define MAIN_QSORT_STACK_SIZE 
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
>  MAIN_QSORT_STACK_SIZE 
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
> define  
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
>   
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
> # MAIN_QSORT_STACK_SIZE 100
460c460
< #define MAIN_QSORT_STACK_SIZE 100
---
> #  100
(89.9 %, 20683 bytes)
462,463c462,463
< #undef mswap
< #undef mvswap
---
>  
> undef mvswap
462c462
< #undef mswap
---
> # mswap
462c462
< #undef mswap
---
> # 
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # mswap
> undef mvswap
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # 
> undef mvswap
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # mswap
> # mvswap
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # 
> # mvswap
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # mswap
>  mvswap
462,463c462,463
< #undef mswap
< #undef mvswap
---
> # 
>  mvswap
462c462
< #undef mswap
---
> #undef 
462,463c462,463
< #undef mswap
< #undef mvswap
---
> #undef 
> undef mvswap
(89.9 %, 20673 bytes)
463c463
< #undef mvswap
---
>  mvswap
463c463
< #undef mvswap
---
> undef 
463c463
< #undef mvswap
---
>  
463,464c463,464
< #undef mvswap
< #undef mpush
---
> undef mvswap
> undef mpush
463,464c463,464
< #undef mvswap
< #undef mpush
---
>  mvswap
> undef mpush
463,464c463,464
< #undef mvswap
< #undef mpush
---
> undef 
> undef mpush
463,464c463,464
< #undef mvswap
< #undef mpush
---
>  
> undef mpush
463c463
< #undef mvswap
---
> # mvswap
463c463
< #undef mvswap
---
> # 
(89.9 %, 20661 bytes)
464c464
< #undef mpush
---
>  
464,465c464,465
< #undef mpush
< #undef mpop
---
> undef mpush
> undef mpop
464,465c464,465
< #undef mpush
< #undef mpop
---
>  mpush
> undef mpop
464,465c464,465
< #undef mpush
< #undef mpop
---
> undef 
> undef mpop
464,465c464,465
< #undef mpush
< #undef mpop
---
>  
> undef mpop
464c464
< #undef mpush
---
> # mpush
464c464
< #undef mpush
---
> # 
(89.9 %, 20650 bytes)
465c465
< #undef mpop
---
>  
465,466c465,466
< #undef mpop
< #undef mmin
---
> undef mpop
> undef mmin
465,466c465,466
< #undef mpop
< #undef mmin
---
>  mpop
> undef mmin
465,466c465,466
< #undef mpop
< #undef mmin
---
> undef 
> undef mmin
465,466c465,466
< #undef mpop
< #undef mmin
---
>  
> undef mmin
465c465
< #undef mpop
---
> # mpop
465c465
< #undef mpop
---
> # 
(89.9 %, 20640 bytes)
466c466
< #undef mmin
---
>  
466,467c466,467
< #undef mmin
< #undef mnextsize
---
> undef mmin
> undef mnextsize
466,467c466,467
< #undef mmin
< #undef mnextsize
---
>  mmin
> undef mnextsize
466,467c466,467
< #undef mmin
< #undef mnextsize
---
> undef 
> undef mnextsize
466,467c466,467
< #undef mmin
< #undef mnextsize
---
>  
> undef mnextsize
466c466
< #undef mmin
---
> # mmin
466c466
< #undef mmin
---
> # 
(89.9 %, 20630 bytes)
467c467
< #undef mnextsize
---
>  
467,468c467,468
< #undef mnextsize
< #undef mnextswap
---
> undef mnextsize
> undef mnextswap
467,468c467,468
< #undef mnextsize
< #undef mnextswap
---
>  mnextsize
> undef mnextswap
467,468c467,468
< #undef mnextsize
< #undef mnextswap
---
> undef 
> undef mnextswap
467,468c467,468
< #undef mnextsize
< #undef mnextswap
---
>  
> undef mnextswap
467c467
< #undef mnextsize
---
> # mnextsize
467c467
< #undef mnextsize
---
> # 
(89.9 %, 20615 bytes)
468c468
< #undef mnextswap
---
>  
468,469c468,469
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef mnextswap
> undef MAIN_QSORT_SMALL_THRESH
468,469c468,469
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  mnextswap
> undef MAIN_QSORT_SMALL_THRESH
468,469c468,469
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef 
> undef MAIN_QSORT_SMALL_THRESH
468,469c468,469
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
> undef MAIN_QSORT_SMALL_THRESH
468c468
< #undef mnextswap
---
> # mnextswap
468c468
< #undef mnextswap
---
> # 
(89.9 %, 20600 bytes)
469c469
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
469,470c469,470
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
469,470c469,470
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
469,470c469,470
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef 
> undef MAIN_QSORT_DEPTH_THRESH
469,470c469,470
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
> undef MAIN_QSORT_DEPTH_THRESH
469c469
< #undef MAIN_QSORT_SMALL_THRESH
---
> # MAIN_QSORT_SMALL_THRESH
469c469
< #undef MAIN_QSORT_SMALL_THRESH
---
> # 
(90.0 %, 20571 bytes)
470c470
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
470,471c470,471
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
470,471c470,471
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
470,471c470,471
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
> undef MAIN_QSORT_STACK_SIZE
470,471c470,471
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  
> undef MAIN_QSORT_STACK_SIZE
470c470
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # MAIN_QSORT_DEPTH_THRESH
470c470
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # 
(90.0 %, 20542 bytes)
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
>  
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_STACK_SIZE
473c473
< #define BIGFREQ
---
> define BIGFREQ
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_STACK_SIZE
473c473
< #define BIGFREQ
---
> define BIGFREQ
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
473c473
< #define BIGFREQ
---
> define BIGFREQ
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
>  
473c473
< #define BIGFREQ
---
> define BIGFREQ
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
> # MAIN_QSORT_STACK_SIZE
471c471
< #undef MAIN_QSORT_STACK_SIZE
---
> # 
(90.0 %, 20515 bytes)
473c473
< #define BIGFREQ
---
>  
473,474c473,474
< #define BIGFREQ
< #define SETMASK
---
> define BIGFREQ
> define SETMASK
473,474c473,474
< #define BIGFREQ
< #define SETMASK
---
>  BIGFREQ
> define SETMASK
473,474c473,474
< #define BIGFREQ
< #define SETMASK
---
> define 
> define SETMASK
473,474c473,474
< #define BIGFREQ
< #define SETMASK
---
>  
> define SETMASK
473c473
< #define BIGFREQ
---
> # BIGFREQ
473c473
< #define BIGFREQ
---
> # 
(90.0 %, 20501 bytes)
474c474
< #define SETMASK
---
>  
474,475c474,475
< #define SETMASK
< #define CLEARMASK
---
> define SETMASK
> define CLEARMASK
474,475c474,475
< #define SETMASK
< #define CLEARMASK
---
>  SETMASK
> define CLEARMASK
474,475c474,475
< #define SETMASK
< #define CLEARMASK
---
> define 
> define CLEARMASK
474,475c474,475
< #define SETMASK
< #define CLEARMASK
---
>  
> define CLEARMASK
474c474
< #define SETMASK
---
> # SETMASK
474c474
< #define SETMASK
---
> # 
(90.0 %, 20487 bytes)
475c475
< #define CLEARMASK
---
>  
475c475
< #define CLEARMASK
---
> define CLEARMASK
477c477
< #undef BIGFREQ
---
> undef BIGFREQ
475c475
< #define CLEARMASK
---
>  CLEARMASK
477c477
< #undef BIGFREQ
---
> undef BIGFREQ
475c475
< #define CLEARMASK
---
> define 
477c477
< #undef BIGFREQ
---
> undef BIGFREQ
475c475
< #define CLEARMASK
---
>  
477c477
< #undef BIGFREQ
---
> undef BIGFREQ
475c475
< #define CLEARMASK
---
> # CLEARMASK
475c475
< #define CLEARMASK
---
> # 
(90.0 %, 20471 bytes)
477c477
< #undef BIGFREQ
---
>  
477,478c477,478
< #undef BIGFREQ
< #undef SETMASK
---
> undef BIGFREQ
> undef SETMASK
477,478c477,478
< #undef BIGFREQ
< #undef SETMASK
---
>  BIGFREQ
> undef SETMASK
477,478c477,478
< #undef BIGFREQ
< #undef SETMASK
---
> undef 
> undef SETMASK
477,478c477,478
< #undef BIGFREQ
< #undef SETMASK
---
>  
> undef SETMASK
477c477
< #undef BIGFREQ
---
> # BIGFREQ
477c477
< #undef BIGFREQ
---
> # 
(90.0 %, 20458 bytes)
478c478
< #undef SETMASK
---
>  
478,479c478,479
< #undef SETMASK
< #undef CLEARMASK
---
> undef SETMASK
> undef CLEARMASK
478,479c478,479
< #undef SETMASK
< #undef CLEARMASK
---
>  SETMASK
> undef CLEARMASK
478,479c478,479
< #undef SETMASK
< #undef CLEARMASK
---
> undef 
> undef CLEARMASK
478,479c478,479
< #undef SETMASK
< #undef CLEARMASK
---
>  
> undef CLEARMASK
478c478
< #undef SETMASK
---
> # SETMASK
478c478
< #undef SETMASK
---
> # 
(90.0 %, 20445 bytes)
479c479
< #undef CLEARMASK
---
>  
479c479
< #undef CLEARMASK
---
> undef CLEARMASK
481c481
< #define WEIGHTOF
---
> define WEIGHTOF
479c479
< #undef CLEARMASK
---
>  CLEARMASK
481c481
< #define WEIGHTOF
---
> define WEIGHTOF
479c479
< #undef CLEARMASK
---
> undef 
481c481
< #define WEIGHTOF
---
> define WEIGHTOF
479c479
< #undef CLEARMASK
---
>  
481c481
< #define WEIGHTOF
---
> define WEIGHTOF
479c479
< #undef CLEARMASK
---
> # CLEARMASK
479c479
< #undef CLEARMASK
---
> # 
(90.0 %, 20430 bytes)
481c481
< #define WEIGHTOF
---
>  
481,482c481,482
< #define WEIGHTOF
< #define DEPTHOF
---
> define WEIGHTOF
> define DEPTHOF
481,482c481,482
< #define WEIGHTOF
< #define DEPTHOF
---
>  WEIGHTOF
> define DEPTHOF
481,482c481,482
< #define WEIGHTOF
< #define DEPTHOF
---
> define 
> define DEPTHOF
481,482c481,482
< #define WEIGHTOF
< #define DEPTHOF
---
>  
> define DEPTHOF
481c481
< #define WEIGHTOF
---
> # WEIGHTOF
481c481
< #define WEIGHTOF
---
> # 
(90.0 %, 20415 bytes)
482c482
< #define DEPTHOF
---
>  
482,483c482,483
< #define DEPTHOF
< #define MYMAX
---
> define DEPTHOF
> define MYMAX
482,483c482,483
< #define DEPTHOF
< #define MYMAX
---
>  DEPTHOF
> define MYMAX
482,483c482,483
< #define DEPTHOF
< #define MYMAX
---
> define 
> define MYMAX
482,483c482,483
< #define DEPTHOF
< #define MYMAX
---
>  
> define MYMAX
482c482
< #define DEPTHOF
---
> # DEPTHOF
482c482
< #define DEPTHOF
---
> # 
(90.0 %, 20401 bytes)
483c483
< #define MYMAX
---
>  
483c483
< #define MYMAX
---
> define MYMAX
485c485
< #define ADDWEIGHTS |
---
> define ADDWEIGHTS |
483c483
< #define MYMAX
---
>  MYMAX
485c485
< #define ADDWEIGHTS |
---
> define ADDWEIGHTS |
483c483
< #define MYMAX
---
> define 
485c485
< #define ADDWEIGHTS |
---
> define ADDWEIGHTS |
483c483
< #define MYMAX
---
>  
485c485
< #define ADDWEIGHTS |
---
> define ADDWEIGHTS |
483c483
< #define MYMAX
---
> # MYMAX
483c483
< #define MYMAX
---
> # 
(90.1 %, 20389 bytes)
485c485
< #define ADDWEIGHTS |
---
>   |
485c485
< #define ADDWEIGHTS |
---
> define ADDWEIGHTS 
485c485
< #define ADDWEIGHTS |
---
>  ADDWEIGHTS 
485c485
< #define ADDWEIGHTS |
---
> define  
485c485
< #define ADDWEIGHTS |
---
>   
485c485
< #define ADDWEIGHTS |
---
> # ADDWEIGHTS |
485c485
< #define ADDWEIGHTS |
---
> #  |
485c485
< #define ADDWEIGHTS |
---
> # ADDWEIGHTS 
485c485
< #define ADDWEIGHTS |
---
> #  
(90.1 %, 20371 bytes)
487c487
< #define UPHEAP
---
>  
489c489
< #define DOWNHEAP
---
> define DOWNHEAP
487c487
< #define UPHEAP
---
> # UPHEAP
487c487
< #define UPHEAP
---
> # 
487c487
< #define UPHEAP
---
> # UPHEAP
489c489
< #define DOWNHEAP
---
> define DOWNHEAP
487c487
< #define UPHEAP
---
> # 
489c489
< #define DOWNHEAP
---
> define DOWNHEAP
487c487
< #define UPHEAP
---
> # UPHEAP
489c489
< #define DOWNHEAP
---
> # DOWNHEAP
487c487
< #define UPHEAP
---
> # 
489c489
< #define DOWNHEAP
---
> # DOWNHEAP
487c487
< #define UPHEAP
---
> # UPHEAP
489c489
< #define DOWNHEAP
---
>  DOWNHEAP
487c487
< #define UPHEAP
---
> # 
489c489
< #define DOWNHEAP
---
>  DOWNHEAP
487c487
< #define UPHEAP
---
> #define 
487c487
< #define UPHEAP
---
> #define 
489c489
< #define DOWNHEAP
---
> define DOWNHEAP
487c487
< #define UPHEAP
---
> #define 
489c489
< #define DOWNHEAP
---
> # DOWNHEAP
487c487
< #define UPHEAP
---
> #define 
489c489
< #define DOWNHEAP
---
>  DOWNHEAP
487c487
< #define UPHEAP
---
> #define 
489c489
< #define DOWNHEAP
---
> #define 
487c487
< #define UPHEAP
---
> #define 
489c489
< #define DOWNHEAP
---
> define 
(90.1 %, 20359 bytes)
489c489
< #define DOWNHEAP
---
>  DOWNHEAP
489c489
< #define DOWNHEAP
---
> define 
489c489
< #define DOWNHEAP
---
>  
489c489
< #define DOWNHEAP
---
> define DOWNHEAP
491c491
< #define bsNEEDW
---
> define bsNEEDW
489c489
< #define DOWNHEAP
---
>  DOWNHEAP
491c491
< #define bsNEEDW
---
> define bsNEEDW
489c489
< #define DOWNHEAP
---
> define 
491c491
< #define bsNEEDW
---
> define bsNEEDW
489c489
< #define DOWNHEAP
---
>  
491c491
< #define bsNEEDW
---
> define bsNEEDW
489c489
< #define DOWNHEAP
---
> # DOWNHEAP
489c489
< #define DOWNHEAP
---
> # 
(90.1 %, 20344 bytes)
491c491
< #define bsNEEDW
---
>  
491c491
< #define bsNEEDW
---
> define bsNEEDW
493c493
< EState  makeMaps_e_s;
---
>   makeMaps_e_s;
491c491
< #define bsNEEDW
---
>  bsNEEDW
493c493
< EState  makeMaps_e_s;
---
>   makeMaps_e_s;
491c491
< #define bsNEEDW
---
> define 
493c493
< EState  makeMaps_e_s;
---
>   makeMaps_e_s;
491c491
< #define bsNEEDW
---
>  
493c493
< EState  makeMaps_e_s;
---
>   makeMaps_e_s;
491c491
< #define bsNEEDW
---
> # bsNEEDW
491c491
< #define bsNEEDW
---
> # 
(90.1 %, 20330 bytes)
493c493
< EState  makeMaps_e_s;
---
>   
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
>   makeMaps_e_s;
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
>   ;
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
>   makeMaps_e_s
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
>   
>  void makeMaps_e(void) {
493c493
< EState  makeMaps_e_s;
---
> EState  ;
493c493
< EState  makeMaps_e_s;
---
> EState  
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  ;
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  ;
> static  makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  
> static  makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  ;
>   makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  
>   makeMaps_e(void) {
493c493
< EState  makeMaps_e_s;
---
> EState  makeMaps_e_s
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
>  void makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
> static  makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
>   makeMaps_e(void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
> static void (void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
>  void (void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
> static  (void) {
493,494c493,494
< EState  makeMaps_e_s;
< static void makeMaps_e(void) {
---
> EState  makeMaps_e_s
>   (void) {
494c494
< static void makeMaps_e(void) {
---
>  void makeMaps_e(void) {
494c494
< static void makeMaps_e(void) {
---
>   makeMaps_e(void) {
(90.1 %, 20324 bytes)
494c494
<  void makeMaps_e(void) {
---
>   makeMaps_e(void) {
494c494
<  void makeMaps_e(void) {
---
>   (void) {
494c494
<  void makeMaps_e(void) {
---
>   makeMaps_evoid) {
494c494
<  void makeMaps_e(void) {
---
>   void) {
494c494
<  void makeMaps_e(void) {
---
>   makeMaps_e() {
(90.1 %, 20320 bytes)
494c494
<   makeMaps_e(void) {
---
>   (void) {
494c494
<   makeMaps_e(void) {
---
>   void) {
494c494
<   makeMaps_e(void) {
---
>   () {
494c494
<   makeMaps_e(void) {
---
>   ) {
494c494
<   makeMaps_e(void) {
---
>   (void {
494c494
<   makeMaps_e(void) {
---
>   void {
494c494
<   makeMaps_e(void) {
---
>   ( {
494c494
<   makeMaps_e(void) {
---
>    {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_evoid) {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e) {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_evoid {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_evoid) 
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e) 
494c494
<   makeMaps_e(void) {
---
>   makeMaps_evoid 
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e 
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e() {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e( {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e() 
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e( 
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e() {
>    i;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e( {
>    i;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e() 
>    i;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e( 
>    i;
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e(void {
494c494
<   makeMaps_e(void) {
---
>   makeMaps_e(void 
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e(void {
>    i;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e(void 
>    i;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e(void {
>   Int32 ;
494,495c494,495
<   makeMaps_e(void) {
<   Int32 i;
---
>   makeMaps_e(void 
>   Int32 ;
(90.1 %, 20316 bytes)
494c494
<   makeMaps_e() {
---
>   makeMaps_e( {
494c494
<   makeMaps_e() {
---
>   makeMaps_e( 
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( {
>    i;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( 
>    i;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( {
>   Int32 ;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( 
>   Int32 ;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( {
>    ;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e( 
>    ;
494c494
<   makeMaps_e() {
---
>   makeMaps_e() 
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>    i;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>   Int32 ;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>    ;
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>   Int32 i
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>    i
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>   Int32 
494,495c494,495
<   makeMaps_e() {
<   Int32 i;
---
>   makeMaps_e() 
>    
495c495
<   Int32 i;
---
>    i;
495c495
<   Int32 i;
---
>    ;
495c495
<   Int32 i;
---
>    i
495c495
<   Int32 i;
---
>    
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>    i;
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>    ;
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>    i
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>    
>   .nInUse = 0;
495c495
<   Int32 i;
---
>   Int32 ;
495c495
<   Int32 i;
---
>   Int32 
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 ;
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 ;
>   makeMaps_e_snInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 
>   makeMaps_e_snInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 ;
>   nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 
>   nInUse = 0;
495c495
<   Int32 i;
---
>   Int32 i
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   .nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   makeMaps_e_snInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   nInUse = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   makeMaps_e_s. = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   . = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>   makeMaps_e_s = 0;
495,496c495,496
<   Int32 i;
<   makeMaps_e_s.nInUse = 0;
---
>   Int32 i
>    = 0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   .nInUse = 0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   nInUse = 0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   . = 0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>    = 0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   .nInUse  0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   nInUse  0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>   .  0;
496c496
<   makeMaps_e_s.nInUse = 0;
---
>     0;
(90.1 %, 20296 bytes)
495a496
>     
497d497
<   i = 0;
496c496
<    = 0;
---
>    = ;
496c496
<    = 0;
---
>    = 
(90.1 %, 20292 bytes)
497c497
<    = 0;
---
>     
499c499
<   for (0; 0 < 256; i++)
---
>    (0; 0 < 256; i++)
497c497
<    = 0;
---
>    = ;
497c497
<    = 0;
---
>    = 
497c497
<    = 0;
---
>    = ;
499c499
<   for (0; 0 < 256; i++)
---
>    (0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 
499c499
<   for (0; 0 < 256; i++)
---
>    (0; 0 < 256; i++)
497c497
<    = 0;
---
>    = ;
499c499
<   for (0; 0 < 256; i++)
---
>   for 0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 
499c499
<   for (0; 0 < 256; i++)
---
>   for 0; 0 < 256; i++)
497c497
<    = 0;
---
>    = ;
499c499
<   for (0; 0 < 256; i++)
---
>    0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 
499c499
<   for (0; 0 < 256; i++)
---
>    0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>    (0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>   for 0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>    0; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>   for (; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>    (; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>   for ; 0 < 256; i++)
497c497
<    = 0;
---
>    = 0
499c499
<   for (0; 0 < 256; i++)
---
>    ; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    (0; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    0; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    (; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    ; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    (0 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    0 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>    ( 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>     0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for 0; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for ; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for 0 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for  0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for 0;  < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for ;  < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for 0  < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for   < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for (; 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for ( 0 < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for (;  < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for (  < 256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for (; 0  256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for ( 0  256; i++)
499c499
<   for (0; 0 < 256; i++)
---
>   for (;   256; i++)
(90.1 %, 20291 bytes)
499c499
<   for (; 0 < 256; i++)
---
>   for ( 0 < 256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (  < 256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for ( 0  256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (   256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for ( 0 < ; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (  < ; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for ( 0  ; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (   ; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (;  < 256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (;   256; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (;  < ; i++)
499c499
<   for (; 0 < 256; i++)
---
>   for (;   ; i++)
(90.1 %, 20289 bytes)
499c499
<   for (;   256; i++)
---
>   for (;    i++)
499c499
<   for (;   256; i++)
---
>   for (;   ; ++)
499c499
<   for (;   256; i++)
---
>   for (;    ++)
499c499
<   for (;   256; i++)
---
>   for (;   ; i)
499c499
<   for (;   256; i++)
---
>   for (;    i)
499c499
<   for (;   256; i++)
---
>   for (;   ; )
(90.1 %, 20284 bytes)
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;    i)
>     
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;    )
>     
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;    i
>     
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;    
>     
499c499
<   for (;   ; i)
---
>   for (;   ; )
499c499
<   for (;   ; i)
---
>   for (;   ; 
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;   ; )
>     
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;   ; 
>     
499c499
<   for (;   ; i)
---
>   for (;   ; )
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse[0];
499c499
<   for (;   ; i)
---
>   for (;   ; 
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse[0];
499,501c499,501
<   for (;   ; i)
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; )
>     
>     .inUse[0];
499,501c499,501
<   for (;   ; i)
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; 
>     
>     .inUse[0];
499c499
<   for (;   ; i)
---
>   for (;   ; i
499,500c499,500
<   for (;   ; i)
<     {
---
>   for (;   ; i
>     
499c499
<   for (;   ; i)
---
>   for (;   ; i
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse[0];
499,501c499,501
<   for (;   ; i)
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; i
>     
>     .inUse[0];
499c499
<   for (;   ; i)
---
>   for (;   ; i
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse[0];
499,501c499,501
<   for (;   ; i)
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; i
>     
>     makeMaps_e_sinUse[0];
(90.1 %, 20283 bytes)
499c499
<   for (;   ; )
---
>   for (;   ; 
499,500c499,500
<   for (;   ; )
<     {
---
>   for (;   ; 
>     
499c499
<   for (;   ; )
---
>   for (;   ; 
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse[0];
499,501c499,501
<   for (;   ; )
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; 
>     
>     .inUse[0];
499c499
<   for (;   ; )
---
>   for (;   ; 
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse[0];
499,501c499,501
<   for (;   ; )
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; 
>     
>     makeMaps_e_sinUse[0];
499c499
<   for (;   ; )
---
>   for (;   ; 
501c501
<     makeMaps_e_s.inUse[0];
---
>     inUse[0];
499,501c499,501
<   for (;   ; )
<     {
<     makeMaps_e_s.inUse[0];
---
>   for (;   ; 
>     
>     inUse[0];
500c500
<     {
---
>     
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     .inUse[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     makeMaps_e_sinUse[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     inUse[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     makeMaps_e_s.[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     .[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     makeMaps_e_s[0];
500,501c500,501
<     {
<     makeMaps_e_s.inUse[0];
---
>     
>     [0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     inUse[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     .[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     [0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     .inUse0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     inUse0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     .0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse[];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s[];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_sinUse];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.[0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.[];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.[0;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.0;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.[;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse0];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse0;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse0]
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse]
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse0
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[];
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[]
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[];
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .unseqToSeq[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .unseqToSeq[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse[0];
---
>     makeMaps_e_s.inUse[]
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .unseqToSeq[0] = makeMaps_e_s.nInUse;
(90.1 %, 20280 bytes)
501c501
<     makeMaps_e_s.inUse;
---
>     makeMaps_e_s.inUse
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      unseqToSeq[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse;
---
>     makeMaps_e_s.inUse
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_s.[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse;
---
>     makeMaps_e_s.inUse
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse;
---
>     makeMaps_e_s.inUse
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_s[0] = makeMaps_e_s.nInUse;
501c501
<     makeMaps_e_s.inUse;
---
>     makeMaps_e_s.inUse
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .unseqToSeq[0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      unseqToSeq[0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .[0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .unseqToSeq0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      unseqToSeq0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      .0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_sunseqToSeq[0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_s[0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_sunseqToSeq0] = makeMaps_e_s.nInUse;
503c503
<      makeMaps_e_s.unseqToSeq[0] = makeMaps_e_s.nInUse;
---
>      makeMaps_e_s0] = makeMaps_e_s.nInUse;
(90.1 %, 20256 bytes)
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>        makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [] = makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [ = makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      []  makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [  makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [] = .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [ = .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      []  .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [  .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0 = makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0  makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0 = .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0  .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0 = makeMaps_e_snInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0  makeMaps_e_snInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0 = nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0  nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  makeMaps_e_s.nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  makeMaps_e_snInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  makeMaps_e_s.;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  .;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  makeMaps_e_s;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0]  ;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = .nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = nInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = .;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = ;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = .nInUse
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = nInUse
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = .
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = 
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_snInUse;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_s;
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_snInUse
503c503
<      [0] = makeMaps_e_s.nInUse;
---
>      [0] = makeMaps_e_s
(90.1 %, 20236 bytes)
503,505c503,505
<      [0]  ;
<     }
<   makeMaps_e_s.nInUse++;
---
>      [0]  
>     
>   nInUse++;
504c504
<     }
---
>     
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   .nInUse++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   makeMaps_e_snInUse++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   nInUse++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   makeMaps_e_s.++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   .++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   makeMaps_e_s++;
504,505c504,505
<     }
<   makeMaps_e_s.nInUse++;
---
>     
>   ++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   .nInUse++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   nInUse++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   .++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   ++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   .nInUse;
505c505
<   makeMaps_e_s.nInUse++;
---
>   nInUse;
505c505
<   makeMaps_e_s.nInUse++;
---
>   .;
505c505
<   makeMaps_e_s.nInUse++;
---
>   ;
505c505
<   makeMaps_e_s.nInUse++;
---
>   makeMaps_e_snInUse++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   makeMaps_e_s++;
505c505
<   makeMaps_e_s.nInUse++;
---
>   makeMaps_e_snInUse;
505c505
<   makeMaps_e_s.nInUse++;
---
>   makeMaps_e_s;
(90.1 %, 20215 bytes)
505,506c505,506
<   ;
< }
---
>   
> 
508c508
< EState  generateMTFValues_s;
---
>   ;
506c506
< }
---
> 
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
>   generateMTFValues_s;
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
> EState  ;
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
>   ;
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
> EState  generateMTFValues_s
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
>   generateMTFValues_s
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
> EState  
506d505
< }
508c507,508
< EState  generateMTFValues_s;
---
> 
>   
508c508
< EState  generateMTFValues_s;
---
>   generateMTFValues_s;
508c508
< EState  generateMTFValues_s;
---
>   ;
508c508
< EState  generateMTFValues_s;
---
>   generateMTFValues_s
508c508
< EState  generateMTFValues_s;
---
>   
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
>   generateMTFValues_s;
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
>   ;
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
>   generateMTFValues_s
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
>   
>  void generateMTFValues(void) {
508c508
< EState  generateMTFValues_s;
---
> EState  ;
508c508
< EState  generateMTFValues_s;
---
> EState  
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  ;
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  ;
> static  generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  
> static  generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  ;
>   generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  
>   generateMTFValues(void) {
508c508
< EState  generateMTFValues_s;
---
> EState  generateMTFValues_s
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
>  void generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
> static  generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
>   generateMTFValues(void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
> static void (void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
>  void (void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
> static  (void) {
508,509c508,509
< EState  generateMTFValues_s;
< static void generateMTFValues(void) {
---
> EState  generateMTFValues_s
>   (void) {
509c509
< static void generateMTFValues(void) {
---
>  void generateMTFValues(void) {
509c509
< static void generateMTFValues(void) {
---
>   generateMTFValues(void) {
509c509
< static void generateMTFValues(void) {
---
>  void (void) {
509c509
< static void generateMTFValues(void) {
---
>   (void) {
(90.1 %, 20209 bytes)
509c509
<  void generateMTFValues(void) {
---
>   generateMTFValues(void) {
509c509
<  void generateMTFValues(void) {
---
>   (void) {
509c509
<  void generateMTFValues(void) {
---
>   generateMTFValuesvoid) {
509c509
<  void generateMTFValues(void) {
---
>   void) {
509c509
<  void generateMTFValues(void) {
---
>   generateMTFValues() {
(90.1 %, 20205 bytes)
509c509
<   generateMTFValues(void) {
---
>   (void) {
509c509
<   generateMTFValues(void) {
---
>   void) {
509c509
<   generateMTFValues(void) {
---
>   () {
509c509
<   generateMTFValues(void) {
---
>   ) {
509c509
<   generateMTFValues(void) {
---
>   (void {
509c509
<   generateMTFValues(void) {
---
>   void {
509c509
<   generateMTFValues(void) {
---
>   ( {
509c509
<   generateMTFValues(void) {
---
>    {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid) {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues) {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid) 
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues) 
509c509
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid 
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues 
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues() {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues( {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues() 
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues( 
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues() {
>    char yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues( {
>    char yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues() 
>    char yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues( 
>    char yy;
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues(void {
509c509
<   generateMTFValues(void) {
---
>   generateMTFValues(void 
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues(void {
>    char yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues(void 
>    char yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues(void {
>   unsigned  yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues(void 
>   unsigned  yy;
509,510c509,510
<   generateMTFValues(void) {
<   unsigned char yy;
---
>   generateMTFValues(void {
>     yy;
(90.1 %, 20201 bytes)
509c509
<   generateMTFValues() {
---
>   generateMTFValues( {
509c509
<   generateMTFValues() {
---
>   generateMTFValues( 
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( {
>    char yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( 
>    char yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( {
>   unsigned  yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( 
>   unsigned  yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( {
>     yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues( 
>     yy;
509c509
<   generateMTFValues() {
---
>   generateMTFValues() 
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>    char yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>   unsigned  yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>     yy;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>   unsigned char ;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>    char ;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>   unsigned  ;
509,510c509,510
<   generateMTFValues() {
<   unsigned char yy;
---
>   generateMTFValues() 
>     ;
510c510
<   unsigned char yy;
---
>    char yy;
510c510
<   unsigned char yy;
---
>     yy;
510c510
<   unsigned char yy;
---
>    char ;
510c510
<   unsigned char yy;
---
>     ;
510c510
<   unsigned char yy;
---
>    char yy
510c510
<   unsigned char yy;
---
>     yy
510c510
<   unsigned char yy;
---
>    char 
510c510
<   unsigned char yy;
---
>     
510c510
<   unsigned char yy;
---
>   unsigned  yy;
510c510
<   unsigned char yy;
---
>   unsigned  ;
510c510
<   unsigned char yy;
---
>   unsigned  yy
510c510
<   unsigned char yy;
---
>   unsigned  
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned  yy;
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned  ;
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned  yy
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned  
>    i, j;
510c510
<   unsigned char yy;
---
>   unsigned char ;
510c510
<   unsigned char yy;
---
>   unsigned char 
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char ;
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char 
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char ;
>   Int32 , j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char 
>   Int32 , j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char ;
>    , j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char 
>    , j;
510c510
<   unsigned char yy;
---
>   unsigned char yy
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>    i, j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>   Int32 , j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>    , j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>   Int32 i j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>    i j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>   Int32  j;
510,511c510,511
<   unsigned char yy;
<   Int32 i, j;
---
>   unsigned char yy
>     j;
511c511
<   Int32 i, j;
---
>    i, j;
511c511
<   Int32 i, j;
---
>    , j;
511c511
<   Int32 i, j;
---
>    i j;
511c511
<   Int32 i, j;
---
>     j;
511c511
<   Int32 i, j;
---
>    i, ;
511c511
<   Int32 i, j;
---
>    , ;
511c511
<   Int32 i, j;
---
>    i ;
511c511
<   Int32 i, j;
---
>     ;
511c511
<   Int32 i, j;
---
>   Int32 , j;
511c511
<   Int32 i, j;
---
>   Int32  j;
511c511
<   Int32 i, j;
---
>   Int32 , ;
511c511
<   Int32 i, j;
---
>   Int32  ;
511c511
<   Int32 i, j;
---
>   Int32 , j
511c511
<   Int32 i, j;
---
>   Int32  j
511c511
<   Int32 i, j;
---
>   Int32 , 
511c511
<   Int32 i, j;
---
>   Int32  
511c511
<   Int32 i, j;
---
>   Int32 i j;
511c511
<   Int32 i, j;
---
>   Int32 i ;
511c511
<   Int32 i, j;
---
>   Int32 i j
511c511
<   Int32 i, j;
---
>   Int32 i 
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i j;
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i ;
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i j
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i 
>    zPend;
511c511
<   Int32 i, j;
---
>   Int32 i, ;
511c511
<   Int32 i, j;
---
>   Int32 i, 
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>   Int32 ;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>   Int32 ;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>    ;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>    ;
511c511
<   Int32 i, j;
---
>   Int32 i, j
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    zPend;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 ;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    ;
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 zPend
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    zPend
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 
511,512c511,512
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    
512c512
<   Int32 zPend;
---
>    zPend;
512c512
<   Int32 zPend;
---
>    ;
512c512
<   Int32 zPend;
---
>    zPend
512c512
<   Int32 zPend;
---
>    
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>    zPend;
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>    ;
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>    zPend
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>    
>    wr;
512c512
<   Int32 zPend;
---
>   Int32 ;
512c512
<   Int32 zPend;
---
>   Int32 
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>   Int32 ;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>   Int32 ;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>    ;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>    ;
512c512
<   Int32 zPend;
---
>   Int32 zPend
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    wr;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 ;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    ;
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 wr
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    wr
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 
512,513c512,513
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    
513c513
<   Int32 wr;
---
>    wr;
513c513
<   Int32 wr;
---
>    ;
513c513
<   Int32 wr;
---
>    wr
513c513
<   Int32 wr;
---
>    
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>    wr;
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>    ;
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>    wr
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>    
>    EOB;
513c513
<   Int32 wr;
---
>   Int32 ;
513c513
<   Int32 wr;
---
>   Int32 
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>   Int32 ;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>   Int32 ;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>    ;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>    ;
513c513
<   Int32 wr;
---
>   Int32 wr
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    EOB;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 ;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    ;
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 EOB
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    EOB
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 
513,514c513,514
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    
514c514
<   Int32 EOB;
---
>    EOB;
514c514
<   Int32 EOB;
---
>    ;
514c514
<   Int32 EOB;
---
>    EOB
514c514
<   Int32 EOB;
---
>    
514c514
<   Int32 EOB;
---
>    EOB;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>    ;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>    EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>    
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 ;
514c514
<   Int32 EOB;
---
>   Int32 
514c514
<   Int32 EOB;
---
>   Int32 ;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 ;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 ;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    ptr = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 * = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    * = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32  = generateMTFValues_s.ptr;
514c514
<   Int32 EOB;
---
>   Int32 EOB
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>     = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    ptr = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    * = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>     = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *ptr  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    ptr  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>    *  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>      generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32  = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32   generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr = .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32  = .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 ptr  .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32   .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 * = generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 * = .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *  .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 * = generateMTFValues_sptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *  generateMTFValues_sptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 * = ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *  ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  generateMTFValues_s.ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  .ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  generateMTFValues_sptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  ptr;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  generateMTFValues_s.;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  .;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  generateMTFValues_s;
516c516
<   UInt32 *ptr = generateMTFValues_s.ptr;
---
>   UInt32 *ptr  ;
(90.2 %, 20177 bytes)
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  
>     *block = &generateMTFValues_s.block;
516c516
<   UInt32 *  ptr;
---
>   UInt32 *  ptr
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>    char *block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>   unsigned  *block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>     *block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>   unsigned char block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>    char block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>   unsigned  block = &generateMTFValues_s.block;
516,517c516,517
<   UInt32 *  ptr;
<   unsigned char *block = &generateMTFValues_s.block;
---
>   UInt32 *  ptr
>     block = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>    char *block = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>     *block = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>    char block = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>     block = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>    char * = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>     * = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>    char  = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>      = &generateMTFValues_s.block;
517c517
<   unsigned char *block = &generateMTFValues_s.block;
---
>   unsigned  *block = &generateMTFValues_s.block;
(90.2 %, 20169 bytes)
517c517
<    char *block = &generateMTFValues_s.block;
---
>     *block = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>     block = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>     * = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>      = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>     *block  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>     block  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>     *  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>       &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char block = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char  = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char block  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char   &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char block = generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char  = generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char block  generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char   generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char * = &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char * = generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *  generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char * = &.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *  &.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char * = .block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *  .block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  &generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  &.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  .block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  &generateMTFValues_sblock;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  generateMTFValues_sblock;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  &block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block  block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block = generateMTFValues_s.block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block = .block;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block = generateMTFValues_sblock;
517c517
<    char *block = &generateMTFValues_s.block;
---
>    char *block = block;
(90.2 %, 20168 bytes)
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = .block;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = block;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = .;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = ;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = .block
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = block
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = .
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = 
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = generateMTFValues_sblock;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = generateMTFValues_s;
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = generateMTFValues_sblock
517c517
<    char *block = generateMTFValues_s.block;
---
>    char *block = generateMTFValues_s
(90.2 %, 20148 bytes)
517c517
<    char *block = block;
---
>    char *block = 
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = ;
>    short mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = 
>    short mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = ;
>   unsigned  mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = 
>   unsigned  mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = ;
>     mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = 
>     mtfv = (&generateMTFValues_s.mtfv);
517c517
<    char *block = block;
---
>    char *block = block
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>    short mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>   unsigned  mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>     mtfv = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>   unsigned short  = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>    short  = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>   unsigned   = (&generateMTFValues_s.mtfv);
517,518c517,518
<    char *block = block;
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    char *block = block
>      = (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv = (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    short  = (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>      = (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv  (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>    short   (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>       (&generateMTFValues_s.mtfv);
518c518
<   unsigned short mtfv = (&generateMTFValues_s.mtfv);
---
>   unsigned  mtfv = (&generateMTFValues_s.mtfv);
(90.2 %, 20140 bytes)
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv = (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>      = (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv  (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>       (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv = &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>      = &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>     mtfv  &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>       &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short  = (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short   (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short  = &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short   &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short  = (generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short   (generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short  = generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short   generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  (&generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  (generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  (&.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  &.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  (.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv  .mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = &generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = &.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = .mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = &generateMTFValues_smtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = generateMTFValues_smtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = &mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_s.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = (.mtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_smtfv);
518c518
<    short mtfv = (&generateMTFValues_s.mtfv);
---
>    short mtfv = (mtfv);
(90.2 %, 20139 bytes)
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (.mtfv);
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (mtfv);
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (.);
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = ();
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (.mtfv;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (mtfv;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (.;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_smtfv);
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_s);
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_smtfv;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_s;
518c518
<    short mtfv = (generateMTFValues_s.mtfv);
---
>    short mtfv = (generateMTFValues_smtfv)
(90.2 %, 20119 bytes)
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = ()
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = ();
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (;
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = ()
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv;
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv;
521c521
<   EOB = generateMTFValues_s.nInUse + 1;
---
>    = generateMTFValues_s.nInUse + 1;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv
521c521
<   EOB = generateMTFValues_s.nInUse + 1;
---
>    = generateMTFValues_s.nInUse + 1;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>    = generateMTFValues_s.nInUse + 1;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>    = generateMTFValues_s.nInUse + 1;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv)
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv)
520c520
<   ;
---
>   
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv)
521c521
<   EOB = generateMTFValues_s.nInUse + 1;
---
>    = generateMTFValues_s.nInUse + 1;
518c518
<    short mtfv = (mtfv);
---
>    short mtfv = (mtfv)
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>    = generateMTFValues_s.nInUse + 1;
(90.2 %, 20118 bytes)
520c520
<   ;
---
>   
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>    = generateMTFValues_s.nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>   EOB  generateMTFValues_s.nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>     generateMTFValues_s.nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>   EOB = .nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>    = .nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>   EOB  .nInUse + 1;
520,521c520,521
<   ;
<   EOB = generateMTFValues_s.nInUse + 1;
---
>   
>     .nInUse + 1;
521c521
<   EOB = generateMTFValues_s.nInUse + 1;
---
>    = generateMTFValues_s.nInUse + 1;
521c521
<   EOB = generateMTFValues_s.nInUse + 1;
---
>     generateMTFValues_s.nInUse + 1;
(90.2 %, 20114 bytes)
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     .nInUse + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     generateMTFValues_snInUse + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     nInUse + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     generateMTFValues_s. + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     . + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>     generateMTFValues_s + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>      + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>    = .nInUse + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>    = nInUse + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>    = . + 1;
521c521
<    = generateMTFValues_s.nInUse + 1;
---
>    =  + 1;
(90.2 %, 20087 bytes)
521c521
<      + 1;
---
>       
523c523
<   i = 0;
---
>    = 0;
521c521
<      + 1;
---
>      + ;
521c521
<      + 1;
---
>      + 
521c521
<      + 1;
---
>      + ;
523c523
<   i = 0;
---
>    = 0;
521c521
<      + 1;
---
>      + 
523c523
<   i = 0;
---
>    = 0;
521c521
<      + 1;
---
>      + ;
523c523
<   i = 0;
---
>   i  0;
521c521
<      + 1;
---
>      + 
523c523
<   i = 0;
---
>   i  0;
521c521
<      + 1;
---
>      + ;
523c523
<   i = 0;
---
>     0;
521c521
<      + 1;
---
>      + 
523c523
<   i = 0;
---
>     0;
(90.2 %, 20083 bytes)
523c523
<    = 0;
---
>     
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = ;
523c523
<    = 0;
---
>    = 
523c523
<    = 0;
---
>    = ;
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = ;
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = ;
525c525
<   for (0; 0 <= EOB; i++)
---
>    0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 
525c525
<   for (0; 0 <= EOB; i++)
---
>    0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>    0; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>    (; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>   for ; 0 <= EOB; i++)
523c523
<    = 0;
---
>    = 0
525c525
<   for (0; 0 <= EOB; i++)
---
>    ; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    0; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    (; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    ; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    (0 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    0 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>    ( 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>     0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for ; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for  0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0;  <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for ;  <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for 0  <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for   <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (; 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for ( 0 <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (;  <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (  <= EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (; 0  EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for ( 0  EOB; i++)
525c525
<   for (0; 0 <= EOB; i++)
---
>   for (;   EOB; i++)
(90.2 %, 20082 bytes)
525c525
<   for (; 0 <= EOB; i++)
---
>   for ( 0 <= EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (  <= EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for ( 0  EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (   EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for ( 0 <= ; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (  <= ; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for ( 0  ; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (   ; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (;  <= EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (;   EOB; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (;  <= ; i++)
525c525
<   for (; 0 <= EOB; i++)
---
>   for (;   ; i++)
(90.2 %, 20079 bytes)
525c525
<   for (;   EOB; i++)
---
>   for (;    i++)
525c525
<   for (;   EOB; i++)
---
>   for (;   ; ++)
525c525
<   for (;   EOB; i++)
---
>   for (;    ++)
525c525
<   for (;   EOB; i++)
---
>   for (;   ; i)
525c525
<   for (;   EOB; i++)
---
>   for (;    i)
525c525
<   for (;   EOB; i++)
---
>   for (;   ; )
(90.2 %, 20074 bytes)
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;    i)
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;    )
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;    i
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;    
>     .mtfFreq[0] = 0;
525c525
<   for (;   ; i)
---
>   for (;   ; )
525c525
<   for (;   ; i)
---
>   for (;   ; 
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; )
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; )
>     generateMTFValues_smtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     generateMTFValues_smtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; )
>     mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     mtfFreq[0] = 0;
525c525
<   for (;   ; i)
---
>   for (;   ; i
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; i
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; i
>     generateMTFValues_smtfFreq[0] = 0;
525,526c525,526
<   for (;   ; i)
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; i
>     mtfFreq[0] = 0;
(90.2 %, 20073 bytes)
525c525
<   for (;   ; )
---
>   for (;   ; 
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     .mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     generateMTFValues_smtfFreq[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     mtfFreq[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     generateMTFValues_s.[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     .[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     generateMTFValues_s[0] = 0;
525,526c525,526
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>   for (;   ; 
>     [0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     .mtfFreq[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     mtfFreq[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     .[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     [0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     .mtfFreq0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     mtfFreq0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     .0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_smtfFreq[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_smtfFreq0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_smtfFreq[] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s[] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_smtfFreq] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.[0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.[] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.[0 = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.0 = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.[ = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s. = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq0] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq0 = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq0]  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq]  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq0  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[] = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[ = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[]  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[] = ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[ = ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[]  ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[  ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0 = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0 = ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0  ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0 = 0
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0  0
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0 = 
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0  
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  ;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  0
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  0;
528c528
<   wr = 0;
---
>    = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  ;
528c528
<   wr = 0;
---
>    = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  0
528c528
<   wr = 0;
---
>    = 0;
526c526
<     generateMTFValues_s.mtfFreq[0] = 0;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>    = 0;
(90.2 %, 20071 bytes)
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>    = 0;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>   wr  0;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>     0;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>   wr = ;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>    = ;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>   wr  ;
526c526
<     generateMTFValues_s.mtfFreq[0]  ;
---
>     generateMTFValues_s.mtfFreq[0]  
528c528
<   wr = 0;
---
>     ;
(90.2 %, 20068 bytes)
528c528
<    = 0;
---
>     ;
528c528
<    = 0;
---
>     0
528c528
<    = 0;
---
>     
527a528
>     0;
529d529
<   zPend = 0;
527a528
>     ;
529d529
<   zPend = 0;
527a528
>     0
529d529
<   zPend = 0;
527a528
>     
529d529
<   zPend = 0;
(90.2 %, 20066 bytes)
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>    = 0;
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>   zPend  0;
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>     0;
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>   zPend = ;
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>    = ;
528,529c528,529
<     ;
<   zPend = 0;
---
>     
>   zPend  ;
527a528
>     
529d529
<   zPend = 0;
(90.2 %, 20060 bytes)
529c529
<    = 0;
---
>     ;
529c529
<    = 0;
---
>     0
529c529
<    = 0;
---
>     
528a529
>     0;
530d530
<   i = 0;
528a529
>     ;
530d530
<   i = 0;
528a529
>     0
530d530
<   i = 0;
528a529
>     
530d530
<   i = 0;
(90.2 %, 20058 bytes)
529,530c529,530
<     ;
<   i = 0;
---
>     
>    = 0;
529,530c529,530
<     ;
<   i = 0;
---
>     
>   i  0;
529,530c529,530
<     ;
<   i = 0;
---
>     
>     0;
529,530c529,530
<     ;
<   i = 0;
---
>     
>   i = ;
529,530c529,530
<     ;
<   i = 0;
---
>     
>    = ;
529,530c529,530
<     ;
<   i = 0;
---
>     
>   i  ;
528a529
>     
530d530
<   i = 0;
(90.2 %, 20056 bytes)
530c530
<    = 0;
---
>     ;
530c530
<    = 0;
---
>     0
530c530
<    = 0;
---
>     
530c530
<    = 0;
---
>     0;
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<    = 0;
---
>     ;
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<    = 0;
---
>     0
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<    = 0;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<    = 0;
---
>    = ;
530c530
<    = 0;
---
>    = 
530c530
<    = 0;
---
>    = ;
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<    = 0;
---
>    = 
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
(90.2 %, 20054 bytes)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for 0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    0; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ; 0 < generateMTFValues_s.nInUse; i++)
530c530
<     ;
---
>     
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    ; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    0; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    ; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    (0 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    0 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>    ( 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>     0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for 0; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for 0 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for  0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for 0;  < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ;  < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for 0  < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for   < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;  < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (  < generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0  generateMTFValues_s.nInUse; i++)
532c532
<   for (0; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_s.nInUse; i++)
(90.2 %, 20053 bytes)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0 < generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (  < generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0  generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (   generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0 < .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (  < .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for ( 0  .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (   .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;  < generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;  < .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;   .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;  < generateMTFValues_snInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_snInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;  < nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (;   nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  generateMTFValues_s.nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  .nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  generateMTFValues_snInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  nInUse; i++)
532c532
<   for (; 0 < generateMTFValues_s.nInUse; i++)
---
>   for (; 0  generateMTFValues_s.; i++)
(90.2 %, 20051 bytes)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   nInUse; i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   .; i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   ; i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   .nInUse i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   nInUse i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   . i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;    i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_snInUse; i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_s; i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_snInUse i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_s i++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_snInUse; ++)
532c532
<   for (;   generateMTFValues_s.nInUse; i++)
---
>   for (;   generateMTFValues_s; ++)
(90.2 %, 20025 bytes)
532c532
<   for (;   ; i++)
---
>   for (;    )
532c532
<   for (;   ; i++)
---
>   for (;    i++
532c532
<   for (;   ; i++)
---
>   for (;    ++
532c532
<   for (;   ; i++)
---
>   for (;    i
532c532
<   for (;   ; i++)
---
>   for (;    
532c532
<   for (;   ; i++)
---
>   for (;   ; ++)
532c532
<   for (;   ; i++)
---
>   for (;   ; )
532c532
<   for (;   ; i++)
---
>   for (;   ; ++
532c532
<   for (;   ; i++)
---
>   for (;   ; 
532,533c532,533
<   for (;   ; i++)
<     yy = 0;
---
>   for (;   ; ++)
>      = 0;
532,533c532,533
<   for (;   ; i++)
<     yy = 0;
---
>   for (;   ; )
>      = 0;
532,533c532,533
<   for (;   ; i++)
<     yy = 0;
---
>   for (;   ; ++
>      = 0;
532,533c532,533
<   for (;   ; i++)
<     yy = 0;
---
>   for (;   ; 
>      = 0;
532c532
<   for (;   ; i++)
---
>   for (;   ; i)
(90.2 %, 20022 bytes)
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>      = 0;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>     yy  0;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>       0;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>     yy = ;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>      = ;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>     yy  ;
532,533c532,533
<   for (;   ; )
<     yy = 0;
---
>   for (;   ; 
>       ;
533c533
<     yy = 0;
---
>      = 0;
533c533
<     yy = 0;
---
>       0;
533c533
<     yy = 0;
---
>      = ;
533c533
<     yy = 0;
---
>       ;
(90.2 %, 20019 bytes)
533c533
<       0;
---
>       
533c533
<       0;
---
>       ;
535c535
<   i = 0;
---
>    = 0;
533c533
<       0;
---
>       
535c535
<   i = 0;
---
>    = 0;
533c533
<       0;
---
>       ;
535c535
<   i = 0;
---
>   i  0;
533c533
<       0;
---
>       
535c535
<   i = 0;
---
>   i  0;
533c533
<       0;
---
>       ;
535c535
<   i = 0;
---
>     0;
(90.2 %, 20017 bytes)
535c535
<   i = 0;
---
>     0;
535c535
<   i = 0;
---
>    = ;
535c535
<   i = 0;
---
>     ;
(90.2 %, 20015 bytes)
535c535
<     0;
---
>     
535c535
<     0;
---
>     ;
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    (0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    (0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     ;
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     ;
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     0
535c535
<     0;
---
>     0
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    (0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     0
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     0
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    0; 0 < generateMTFValues_s.nblock; i++) {
535c535
<     0;
---
>     0
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0 < generateMTFValues_s.nblock; i++) {
(90.2 %, 20013 bytes)
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    0; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    (; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    ; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    (0 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    0 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>    ( 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>     0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for  0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0;  < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ;  < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for 0  < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for   < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;  < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (  < generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0  generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0  generateMTFValues_s.nblock; i++) {
537c537
<   for (0; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_s.nblock; i++) {
(90.2 %, 20012 bytes)
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0 < generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (  < generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0  generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (   generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0 < .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (  < .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for ( 0  .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (   .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;  < generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;  < .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;   .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;  < generateMTFValues_snblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_snblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;  < nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (;   nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0  generateMTFValues_s.nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0  .nblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0  generateMTFValues_snblock; i++) {
537c537
<   for (; 0 < generateMTFValues_s.nblock; i++) {
---
>   for (; 0  nblock; i++) {
(90.2 %, 20010 bytes)
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   nblock; i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   .; i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   ; i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   .nblock i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   nblock i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   . i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;    i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_snblock; i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_s; i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_snblock i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_s i++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_snblock; ++) {
537c537
<   for (;   generateMTFValues_s.nblock; i++) {
---
>   for (;   generateMTFValues_s; ++) {
(90.2 %, 19984 bytes)
537c537
<   for (;   ; i++) {
---
>   for (;    ) {
537c537
<   for (;   ; i++) {
---
>   for (;    i++ {
537c537
<   for (;   ; i++) {
---
>   for (;    ++ {
537c537
<   for (;   ; i++) {
---
>   for (;    i {
537c537
<   for (;   ; i++) {
---
>   for (;     {
537c537
<   for (;   ; i++) {
---
>   for (;   ; ++) {
537c537
<   for (;   ; i++) {
---
>   for (;   ; ) {
537c537
<   for (;   ; i++) {
---
>   for (;   ; ++ {
537c537
<   for (;   ; i++) {
---
>   for (;   ;  {
537c537
<   for (;   ; i++) {
---
>   for (;   ; ++) 
537c537
<   for (;   ; i++) {
---
>   for (;   ; ) 
537c537
<   for (;   ; i++) {
---
>   for (;   ; ++ 
537c537
<   for (;   ; i++) {
---
>   for (;   ;  
537c537
<   for (;   ; i++) {
---
>   for (;   ; i) {
(90.3 %, 19981 bytes)
537c537
<   for (;   ; ) {
---
>   for (;   ;  
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  {
>      char ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  
>      char ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  {
>     unsigned  ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  
>     unsigned  ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  {
>       ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ;  
>       ll_i;
537c537
<   for (;   ; ) {
---
>   for (;   ; ) 
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>      char ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>     unsigned  ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>       ll_i;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>     unsigned char ;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>      char ;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>     unsigned  ;
537,538c537,538
<   for (;   ; ) {
<     unsigned char ll_i;
---
>   for (;   ; ) 
>       ;
538c538
<     unsigned char ll_i;
---
>      char ll_i;
538c538
<     unsigned char ll_i;
---
>       ll_i;
538c538
<     unsigned char ll_i;
---
>      char ;
538c538
<     unsigned char ll_i;
---
>       ;
538c538
<     unsigned char ll_i;
---
>      char ll_i
(90.3 %, 19973 bytes)
538c538
<      char ll_i;
---
>       ll_i;
538c538
<      char ll_i;
---
>       ;
538c538
<      char ll_i;
---
>       ll_i
538c538
<      char ll_i;
---
>       
538,539c538,539
<      char ll_i;
<     AssertD;
---
>       ll_i;
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>       ;
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>       ll_i
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>       
>     ;
538c538
<      char ll_i;
---
>      char ;
538c538
<      char ll_i;
---
>      char 
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char ;
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char 
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char ;
>     AssertD
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char 
>     AssertD
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char ;
>     
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char 
>     
538c538
<      char ll_i;
---
>      char ll_i
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char ll_i
>     ;
538,539c538,539
<      char ll_i;
<     AssertD;
---
>      char ll_i
>     AssertD
(90.3 %, 19972 bytes)
539c539
<     AssertD;
---
>     ;
539c539
<     AssertD;
---
>     
539,540c539,540
<     AssertD;
<     j = ptr[0] - 1;
---
>     ;
>      = ptr[0] - 1;
539,540c539,540
<     AssertD;
<     j = ptr[0] - 1;
---
>     
>      = ptr[0] - 1;
(90.3 %, 19965 bytes)
539c539
<     ;
---
>     
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>      = ptr[0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>     j  ptr[0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>       ptr[0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>     j = [0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>      = [0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>     j  [0] - 1;
539,540c539,540
<     ;
<     j = ptr[0] - 1;
---
>     
>       [0] - 1;
540c540
<     j = ptr[0] - 1;
---
>      = ptr[0] - 1;
540c540
<     j = ptr[0] - 1;
---
>       ptr[0] - 1;
(90.3 %, 19963 bytes)
540c540
<      = ptr[0] - 1;
---
>       [0] - 1;
540c540
<      = ptr[0] - 1;
---
>       ptr0] - 1;
540c540
<      = ptr[0] - 1;
---
>       0] - 1;
540c540
<      = ptr[0] - 1;
---
>       ptr[] - 1;
540c540
<      = ptr[0] - 1;
---
>       [] - 1;
540c540
<      = ptr[0] - 1;
---
>       ptr] - 1;
540c540
<      = ptr[0] - 1;
---
>       ] - 1;
540c540
<      = ptr[0] - 1;
---
>      = [0] - 1;
540c540
<      = ptr[0] - 1;
---
>      = 0] - 1;
540c540
<      = ptr[0] - 1;
---
>      = [] - 1;
540c540
<      = ptr[0] - 1;
---
>      = ] - 1;
540c540
<      = ptr[0] - 1;
---
>      = [0 - 1;
540c540
<      = ptr[0] - 1;
---
>      = 0 - 1;
540c540
<      = ptr[0] - 1;
---
>      = [ - 1;
540c540
<      = ptr[0] - 1;
---
>      =  - 1;
(90.3 %, 19958 bytes)
540c540
<      = 0 - 1;
---
>      =   1
540c540
<      = 0 - 1;
---
>      =  - 
540c540
<      = 0 - 1;
---
>      =   
(90.3 %, 19955 bytes)
540,541c540,541
<      =  - 
<     j < 0;
---
>      =   
>     j  ;
540,541c540,541
<      =  - 
<     j < 0;
---
>      =   
>       ;
541c541
<     j < 0;
---
>      < 0;
541c541
<     j < 0;
---
>       0;
(90.3 %, 19952 bytes)
541c541
<     j  ;
---
>       ;
543c543
<      j += generateMTFValues_s.nblock;
---
>        generateMTFValues_s.nblock;
541c541
<     j  ;
---
>       
543c543
<      j += generateMTFValues_s.nblock;
---
>        generateMTFValues_s.nblock;
541c541
<     j  ;
---
>     j  
541c541
<     j  ;
---
>     j  
543c543
<      j += generateMTFValues_s.nblock;
---
>       += generateMTFValues_s.nblock;
(90.3 %, 19947 bytes)
543c543
<        generateMTFValues_s.nblock;
---
>        
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_snblock;
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_s;
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_snblock
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_s
543,544c543,544
<        generateMTFValues_s.nblock;
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>        generateMTFValues_snblock;
>      = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
543,544c543,544
<        generateMTFValues_s.nblock;
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>        generateMTFValues_s;
>      = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
543,544c543,544
<        generateMTFValues_s.nblock;
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>        generateMTFValues_snblock
>      = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
543,544c543,544
<        generateMTFValues_s.nblock;
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>        generateMTFValues_s
>      = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_s.;
543c543
<        generateMTFValues_s.nblock;
---
>        generateMTFValues_s.
543,544c543,544
<        generateMTFValues_s.nblock;
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>        generateMTFValues_s.;
>      = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
(90.3 %, 19920 bytes)
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>       unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  .unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  generateMTFValues_sunseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  generateMTFValues_s.[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  .[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  generateMTFValues_s[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i  [block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = .unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = unseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = .[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = [block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = .unseqToSeqblock[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = unseqToSeqblock[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = .block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_sunseqToSeq[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_sunseqToSeqblock[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_sblock[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_sunseqToSeq[[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s[[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_sunseqToSeq[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.[block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.block[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.[[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.[blockgenerateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.blockgenerateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeqblock[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeqblockgenerateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeqgenerateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeqblock[.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeqblock.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[generateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[[.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[[generateMTFValues_snblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[generateMTFValues_snblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[[nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[blockgenerateMTFValues_s.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[blockgenerateMTFValues_snblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[blocknblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[blockgenerateMTFValues_s.]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block.]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[blockgenerateMTFValues_s]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[.nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[nblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[.]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[.nblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[nblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[.];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_snblock]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_snblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_snblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_snblock;
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s;
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.]];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.;
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.]]
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.]
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.]
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock;
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
>     ;
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock;
>     ;
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
>     ;
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock
>     ;
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
>     ;
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
>     ;
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
>     AssertD
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
>     AssertD
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock];
>     
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]
>     
544c544
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]]
544,545c544,545
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]];
<     AssertD;
---
>     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]]
>     ;
(90.3 %, 19919 bytes)
545c545
<     AssertD;
---
>     ;
545c545
<     AssertD;
---
>     
545c545
<     AssertD;
---
>     ;
547c547
<     0 == ll_i;
---
>      == ll_i;
545c545
<     AssertD;
---
>     
547c547
<     0 == ll_i;
---
>      == ll_i;
(90.3 %, 19912 bytes)
545c545
<     ;
---
>     
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>      == ll_i;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>     0  ll_i;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>       ll_i;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>     0 == ;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>      == ;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>     0  ;
545c545
<     ;
---
>     
547c547
<     0 == ll_i;
---
>       ;
(90.3 %, 19910 bytes)
547c547
<      == ll_i;
---
>       ;
547c547
<      == ll_i;
---
>       ll_i
547c547
<      == ll_i;
---
>       
547c547
<      == ll_i;
---
>       ll_i;
549c549
<      zPend++;
---
>      ++;
547c547
<      == ll_i;
---
>       ;
549c549
<      zPend++;
---
>      ++;
547c547
<      == ll_i;
---
>       ll_i
549c549
<      zPend++;
---
>      ++;
547c547
<      == ll_i;
---
>       
549c549
<      zPend++;
---
>      ++;
(90.3 %, 19904 bytes)
547c547
<       ;
---
>       
549c549
<      zPend++;
---
>      ++;
547c547
<       ;
---
>       
549c549
<      zPend++;
---
>      zPend;
547c547
<       ;
---
>       
549c549
<      zPend++;
---
>      ;
(90.3 %, 19898 bytes)
549c549
<      ++;
---
>      
549c549
<      ++;
---
>      ;
552c552
<         0 > 0;
---
>          > 0;
549c549
<      ++;
---
>      
552c552
<         0 > 0;
---
>          > 0;
549c549
<      ++;
---
>      ;
552c552
<         0 > 0;
---
>         0  0;
549c549
<      ++;
---
>      
552c552
<         0 > 0;
---
>         0  0;
549c549
<      ++;
---
>      ;
552c552
<         0 > 0;
---
>           0;
549c549
<      ++;
---
>      
552c552
<         0 > 0;
---
>           0;
549c549
<      ++;
---
>      ++
549c549
<      ++;
---
>      ++
552c552
<         0 > 0;
---
>          > 0;
(90.3 %, 19894 bytes)
552c552
<          > 0;
---
>           
552c552
<          > 0;
---
>           0;
554c554
<          {
---
>          
552c552
<          > 0;
---
>           ;
554c554
<          {
---
>          
552c552
<          > 0;
---
>           0
554c554
<          {
---
>          
552c552
<          > 0;
---
>           
554c554
<          {
---
>          
552c552
<          > 0;
---
>          > ;
552c552
<          > 0;
---
>          > 
552c552
<          > 0;
---
>          > ;
554c554
<          {
---
>          
552c552
<          > 0;
---
>          > 
554c554
<          {
---
>          
552c552
<          > 0;
---
>          > ;
555c555
<       register unsigned char rtmp;
---
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > 
555c555
<       register unsigned char rtmp;
---
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > ;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > 
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > 0
552c552
<          > 0;
---
>          > 0
554c554
<          {
---
>          
552c552
<          > 0;
---
>          > 0
555c555
<       register unsigned char rtmp;
---
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > 0
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>        unsigned char rtmp;
552c552
<          > 0;
---
>          > 0
555c555
<       register unsigned char rtmp;
---
>       register  char rtmp;
552c552
<          > 0;
---
>          > 0
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>       register  char rtmp;
552c552
<          > 0;
---
>          > 0
555c555
<       register unsigned char rtmp;
---
>         char rtmp;
552c552
<          > 0;
---
>          > 0
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>         char rtmp;
554c554
<          {
---
>          
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>        unsigned char rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>       register  char rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>         char rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>       register unsigned  rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>        unsigned  rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>       register   rtmp;
554,555c554,555
<          {
<       register unsigned char rtmp;
---
>          
>          rtmp;
555c555
<       register unsigned char rtmp;
---
>        unsigned char rtmp;
555c555
<       register unsigned char rtmp;
---
>         char rtmp;
555c555
<       register unsigned char rtmp;
---
>        unsigned  rtmp;
(90.3 %, 19886 bytes)
555c555
<        unsigned char rtmp;
---
>         char rtmp;
555c555
<        unsigned char rtmp;
---
>          rtmp;
555c555
<        unsigned char rtmp;
---
>         char ;
555c555
<        unsigned char rtmp;
---
>          ;
555c555
<        unsigned char rtmp;
---
>         char rtmp
555c555
<        unsigned char rtmp;
---
>          rtmp
555c555
<        unsigned char rtmp;
---
>         char 
555c555
<        unsigned char rtmp;
---
>          
555c555
<        unsigned char rtmp;
---
>        unsigned  rtmp;
(90.3 %, 19878 bytes)
555c555
<         char rtmp;
---
>          rtmp;
555c555
<         char rtmp;
---
>          ;
555c555
<         char rtmp;
---
>          rtmp
555c555
<         char rtmp;
---
>          
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>          rtmp;
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>          ;
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>          rtmp
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>          
>        unsigned char *ryy_j;
555c555
<         char rtmp;
---
>         char ;
555c555
<         char rtmp;
---
>         char 
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char ;
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char 
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char ;
>       register  char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char 
>       register  char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char ;
>         char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char 
>         char *ryy_j;
555c555
<         char rtmp;
---
>         char rtmp
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>        unsigned char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>       register  char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>         char *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>       register unsigned  *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>        unsigned  *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>       register   *ryy_j;
555,556c555,556
<         char rtmp;
<       register unsigned char *ryy_j;
---
>         char rtmp
>          *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>        unsigned char *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>         char *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>        unsigned  *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>          *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>        unsigned char ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>         char ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>        unsigned  ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>          ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>       register  char *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>       register   *ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>       register  char ryy_j;
556c556
<       register unsigned char *ryy_j;
---
>       register   ryy_j;
(90.3 %, 19870 bytes)
556c556
<        unsigned char *ryy_j;
---
>         char *ryy_j;
556c556
<        unsigned char *ryy_j;
---
>          *ryy_j;
556c556
<        unsigned char *ryy_j;
---
>         char ryy_j;
556c556
<        unsigned char *ryy_j;
---
>          ryy_j;
556c556
<        unsigned char *ryy_j;
---
>         char *;
556c556
<        unsigned char *ryy_j;
---
>          *;
556c556
<        unsigned char *ryy_j;
---
>         char ;
556c556
<        unsigned char *ryy_j;
---
>          ;
556c556
<        unsigned char *ryy_j;
---
>        unsigned  *ryy_j;
556c556
<        unsigned char *ryy_j;
---
>        unsigned  ryy_j;
556c556
<        unsigned char *ryy_j;
---
>        unsigned  *;
556c556
<        unsigned char *ryy_j;
---
>        unsigned  ;
556c556
<        unsigned char *ryy_j;
---
>        unsigned  *ryy_j
556c556
<        unsigned char *ryy_j;
---
>        unsigned  ryy_j
556c556
<        unsigned char *ryy_j;
---
>        unsigned  *
556c556
<        unsigned char *ryy_j;
---
>        unsigned  
556c556
<        unsigned char *ryy_j;
---
>        unsigned char ryy_j;
556c556
<        unsigned char *ryy_j;
---
>        unsigned char ;
556c556
<        unsigned char *ryy_j;
---
>        unsigned char ryy_j
556c556
<        unsigned char *ryy_j;
---
>        unsigned char 
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char ryy_j;
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char ;
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char ryy_j
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char 
>        unsigned char rll_i;
556c556
<        unsigned char *ryy_j;
---
>        unsigned char *;
556c556
<        unsigned char *ryy_j;
---
>        unsigned char *
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *;
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *;
>       register  char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *
>       register  char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *;
>         char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *
>         char rll_i;
556c556
<        unsigned char *ryy_j;
---
>        unsigned char *ryy_j
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>        unsigned char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>       register  char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>         char rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>       register unsigned  rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>        unsigned  rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>       register   rll_i;
556,557c556,557
<        unsigned char *ryy_j;
<       register unsigned char rll_i;
---
>        unsigned char *ryy_j
>          rll_i;
557c557
<       register unsigned char rll_i;
---
>        unsigned char rll_i;
557c557
<       register unsigned char rll_i;
---
>         char rll_i;
557c557
<       register unsigned char rll_i;
---
>        unsigned  rll_i;
(90.3 %, 19862 bytes)
557c557
<        unsigned char rll_i;
---
>         char rll_i;
557c557
<        unsigned char rll_i;
---
>          rll_i;
557c557
<        unsigned char rll_i;
---
>         char ;
557c557
<        unsigned char rll_i;
---
>          ;
557c557
<        unsigned char rll_i;
---
>         char rll_i
557c557
<        unsigned char rll_i;
---
>          rll_i
557c557
<        unsigned char rll_i;
---
>         char 
557c557
<        unsigned char rll_i;
---
>          
557c557
<        unsigned char rll_i;
---
>        unsigned  rll_i;
(90.3 %, 19854 bytes)
557c557
<         char rll_i;
---
>          rll_i;
557c557
<         char rll_i;
---
>          ;
557c557
<         char rll_i;
---
>          rll_i
557c557
<         char rll_i;
---
>          
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>          rll_i;
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>          ;
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>          rll_i
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>          
>        = 0;
557c557
<         char rll_i;
---
>         char ;
557c557
<         char rll_i;
---
>         char 
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char ;
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char 
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char ;
>       rtmp  0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char 
>       rtmp  0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char ;
>         0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char 
>         0;
557c557
<         char rll_i;
---
>         char rll_i
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>        = 0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>       rtmp  0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>         0;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>       rtmp = ;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>        = ;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>       rtmp  ;
557,558c557,558
<         char rll_i;
<       rtmp = 0;
---
>         char rll_i
>         ;
(90.3 %, 19849 bytes)
558c558
<        = 0;
---
>         ;
558c558
<        = 0;
---
>         0
558c558
<        = 0;
---
>         
558,559c558,559
<        = 0;
<       yy = yy;
---
>         0;
>        = yy;
558,559c558,559
<        = 0;
<       yy = yy;
---
>         ;
>        = yy;
558,559c558,559
<        = 0;
<       yy = yy;
---
>         0
>        = yy;
558,559c558,559
<        = 0;
<       yy = yy;
---
>         
>        = yy;
(90.3 %, 19847 bytes)
558,559c558,559
<         ;
<       yy = yy;
---
>         
>        = yy;
558,559c558,559
<         ;
<       yy = yy;
---
>         
>       yy  yy;
558,559c558,559
<         ;
<       yy = yy;
---
>         
>         yy;
558,559c558,559
<         ;
<       yy = yy;
---
>         
>       yy = ;
558,559c558,559
<         ;
<       yy = yy;
---
>         
>        = ;
558,559c558,559
<         ;
<       yy = yy;
---
>         
>       yy  ;
557a558
>         
559d559
<       yy = yy;
(90.3 %, 19844 bytes)
559c559
<        = yy;
---
>         ;
559c559
<        = yy;
---
>         yy
559c559
<        = yy;
---
>         
559,560c559,560
<        = yy;
<       ryy_j = &(yy);
---
>         yy;
>        = &(yy);
559,560c559,560
<        = yy;
<       ryy_j = &(yy);
---
>         ;
>        = &(yy);
559,560c559,560
<        = yy;
<       ryy_j = &(yy);
---
>         yy
>        = &(yy);
559,560c559,560
<        = yy;
<       ryy_j = &(yy);
---
>         
>        = &(yy);
(90.3 %, 19841 bytes)
559,560c559,560
<         ;
<       ryy_j = &(yy);
---
>         
>        = &(yy);
559,560c559,560
<         ;
<       ryy_j = &(yy);
---
>         
>       ryy_j  &(yy);
559,560c559,560
<         ;
<       ryy_j = &(yy);
---
>         
>         &(yy);
559,560c559,560
<         ;
<       ryy_j = &(yy);
---
>         
>       ryy_j = (yy);
559,560c559,560
<         ;
<       ryy_j = &(yy);
---
>         
>        = (yy);
(90.3 %, 19835 bytes)
560c560
<        = &(yy);
---
>         (yy);
560c560
<        = &(yy);
---
>         &yy);
560c560
<        = &(yy);
---
>         yy);
560c560
<        = &(yy);
---
>         &();
560c560
<        = &(yy);
---
>         ();
560c560
<        = &(yy);
---
>         &);
560c560
<        = &(yy);
---
>         );
560c560
<        = &(yy);
---
>        = (yy);
560c560
<        = &(yy);
---
>        = yy);
560c560
<        = &(yy);
---
>        = ();
560c560
<        = &(yy);
---
>        = );
560c560
<        = &(yy);
---
>        = (yy;
560c560
<        = &(yy);
---
>        = yy;
(90.3 %, 19834 bytes)
560c560
<        = (yy);
---
>        = yy);
560c560
<        = (yy);
---
>        = );
560c560
<        = (yy);
---
>        = yy;
560c560
<        = (yy);
---
>        = ;
560c560
<        = (yy);
---
>        = yy)
560c560
<        = (yy);
---
>        = )
560c560
<        = (yy);
---
>        = yy
560c560
<        = (yy);
---
>        = 
(90.3 %, 19832 bytes)
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = ;
>        = ll_i;
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = 
>        = ll_i;
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = ;
>       rll_i  ll_i;
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = 
>       rll_i  ll_i;
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = ;
>         ll_i;
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = 
>         ll_i;
560c560
<        = yy;
---
>        = yy
560,561c560,561
<        = yy;
<       rll_i = ll_i;
---
>        = yy
>        = ll_i;
(90.3 %, 19823 bytes)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         
>        ll_i != 0)
561c561
<         ll_i;
---
>         ll_i
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>        (ll_i != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>       while ll_i != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>        ll_i != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>       while ( != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>        ( != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>       while  != 0)
561,562c561,562
<         ll_i;
<       while (ll_i != 0)
---
>         ll_i
>         != 0)
562c562
<       while (ll_i != 0)
---
>        (ll_i != 0)
562c562
<       while (ll_i != 0)
---
>        ll_i != 0)
562c562
<       while (ll_i != 0)
---
>        ( != 0)
562c562
<       while (ll_i != 0)
---
>         != 0)
562c562
<       while (ll_i != 0)
---
>        (ll_i  0)
562c562
<       while (ll_i != 0)
---
>        ll_i  0)
562c562
<       while (ll_i != 0)
---
>        (  0)
(90.3 %, 19818 bytes)
562c562
<        (ll_i != 0)
---
>        ll_i != 0)
562c562
<        (ll_i != 0)
---
>         != 0)
562c562
<        (ll_i != 0)
---
>        ll_i  0)
562c562
<        (ll_i != 0)
---
>          0)
562c562
<        (ll_i != 0)
---
>        ll_i != )
562c562
<        (ll_i != 0)
---
>         != )
562c562
<        (ll_i != 0)
---
>        ll_i  )
562c562
<        (ll_i != 0)
---
>          )
562c562
<        (ll_i != 0)
---
>        ( != 0)
562c562
<        (ll_i != 0)
---
>        (  0)
562c562
<        (ll_i != 0)
---
>        ( != )
562c562
<        (ll_i != 0)
---
>        (  )
562c562
<        (ll_i != 0)
---
>        ( != 0
562c562
<        (ll_i != 0)
---
>        (  0
562c562
<        (ll_i != 0)
---
>        ( != 
562c562
<        (ll_i != 0)
---
>        (  
562c562
<        (ll_i != 0)
---
>        (ll_i  0)
562c562
<        (ll_i != 0)
---
>        (ll_i  )
(90.3 %, 19812 bytes)
562c562
<        (  0)
---
>        (  
562,563c562,563
<        (  0)
<         ;
---
>        (  )
>         
562,563c562,563
<        (  0)
<         ;
---
>        (  
>         
562c562
<        (  0)
---
>        (  )
564c564
<       yy = 0;
---
>        = 0;
562c562
<        (  0)
---
>        (  
564c564
<       yy = 0;
---
>        = 0;
562,564c562,564
<        (  0)
<         ;
<       yy = 0;
---
>        (  )
>         
>        = 0;
562,564c562,564
<        (  0)
<         ;
<       yy = 0;
---
>        (  
>         
>        = 0;
562c562
<        (  0)
---
>        (  0
562,563c562,563
<        (  0)
<         ;
---
>        (  0
>         
562c562
<        (  0)
---
>        (  0
564c564
<       yy = 0;
---
>        = 0;
562,564c562,564
<        (  0)
<         ;
<       yy = 0;
---
>        (  0
>         
>        = 0;
562c562
<        (  0)
---
>        (  0
564c564
<       yy = 0;
---
>       yy  0;
562,564c562,564
<        (  0)
<         ;
<       yy = 0;
---
>        (  0
>         
>       yy  0;
562c562
<        (  0)
---
>        (  0
564c564
<       yy = 0;
---
>         0;
562,564c562,564
<        (  0)
<         ;
<       yy = 0;
---
>        (  0
>         
>         0;
563c563
<         ;
---
>         
563,564c563,564
<         ;
<       yy = 0;
---
>         
>        = 0;
563,564c563,564
<         ;
<       yy = 0;
---
>         
>       yy  0;
563,564c563,564
<         ;
<       yy = 0;
---
>         
>         0;
563,564c563,564
<         ;
<       yy = 0;
---
>         
>       yy = ;
563,564c563,564
<         ;
<       yy = 0;
---
>         
>        = ;
563,564c563,564
<         ;
<       yy = 0;
---
>         
>       yy  ;
562a563
>         
564d564
<       yy = 0;
564c564
<       yy = 0;
---
>        = 0;
564c564
<       yy = 0;
---
>         0;
(90.3 %, 19807 bytes)
564,565c564,565
<         ;
<       j = ryy_j - &(yy);
---
>         
>          - &(yy);
565c565
<       j = ryy_j - &(yy);
---
>        = ryy_j - &(yy);
565c565
<       j = ryy_j - &(yy);
---
>         ryy_j - &(yy);
565c565
<       j = ryy_j - &(yy);
---
>        =  - &(yy);
565c565
<       j = ryy_j - &(yy);
---
>          - &(yy);
565c565
<       j = ryy_j - &(yy);
---
>        = ryy_j  &(yy);
565c565
<       j = ryy_j - &(yy);
---
>         ryy_j  &(yy);
565c565
<       j = ryy_j - &(yy);
---
>        =   &(yy);
565c565
<       j = ryy_j - &(yy);
---
>           &(yy);
(90.3 %, 19805 bytes)
565c565
<         ryy_j - &(yy);
---
>           &(yy);
565c565
<         ryy_j - &(yy);
---
>          - (yy);
(90.3 %, 19799 bytes)
565c565
<           &(yy);
---
>           yy);
565c565
<           &(yy);
---
>           ();
565c565
<           &(yy);
---
>           );
565c565
<           &(yy);
---
>           (yy;
565c565
<           &(yy);
---
>           yy;
565c565
<           &(yy);
---
>           (;
565c565
<           &(yy);
---
>           ;
(90.3 %, 19796 bytes)
565,566c565,566
<           yy;
<       mtfv = j + 1;
---
>           
>       mtfv  j + 1;
565,566c565,566
<           yy;
<       mtfv = j + 1;
---
>           ;
>         j + 1;
565,566c565,566
<           yy;
<       mtfv = j + 1;
---
>           
>         j + 1;
(90.3 %, 19789 bytes)
565,566c565,566
<           ;
<         j + 1;
---
>           
>         j  ;
564a565
>           
566d566
<         j + 1;
(90.3 %, 19786 bytes)
566,567c566,567
<         j  ;
<       wr++;
---
>           ;
>       ;
566,567c566,567
<         j  ;
<       wr++;
---
>           
>       ;
(90.3 %, 19781 bytes)
566c566
<           ;
---
>           
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       mtfFreq[j + 1]++;
566,568c566,568
<           ;
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>           
>       
>       mtfFreq[j + 1]++;
567c567
<       ;
---
>       
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       .mtfFreq[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       generateMTFValues_smtfFreq[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       mtfFreq[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       generateMTFValues_s.[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       .[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       generateMTFValues_s[j + 1]++;
567,568c567,568
<       ;
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       
>       [j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .mtfFreq[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       mtfFreq[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       [j + 1]++;
(90.3 %, 19780 bytes)
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .mtfFreq[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       mtfFreq[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       [j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .mtfFreqj + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       mtfFreqj + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       .j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_smtfFreq[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_smtfFreqj + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_sj + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_smtfFreq[ + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s[ + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_smtfFreq + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.[j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.j + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.[ + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s. + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.[j  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.j  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.[  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreqj + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreqj  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreqj + ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq + ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreqj  ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq  ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[ + 1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[  1]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[ + ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[  ]++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[ + 1++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[  1++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[ + ++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[  ++;
568c568
<       generateMTFValues_s.mtfFreq[j + 1]++;
---
>       generateMTFValues_s.mtfFreq[j  1]++;
(90.3 %, 19779 bytes)
568c568
<       generateMTFValues_s.mtfFreq[ + 1]++;
---
>       generateMTFValues_s.mtfFreq[  1]++;
568c568
<       generateMTFValues_s.mtfFreq[ + 1]++;
---
>       generateMTFValues_s.mtfFreq[  ]++;
568c568
<       generateMTFValues_s.mtfFreq[ + 1]++;
---
>       generateMTFValues_s.mtfFreq[  1++;
568c568
<       generateMTFValues_s.mtfFreq[ + 1]++;
---
>       generateMTFValues_s.mtfFreq[  ++;
568c568
<       generateMTFValues_s.mtfFreq[ + 1]++;
---
>       generateMTFValues_s.mtfFreq[  1];
(90.3 %, 19778 bytes)
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ]++;
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ++;
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ];
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ;
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ]++
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ++
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  ]
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1++;
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1;
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1++
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1++;
>     
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1;
>     
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1++
>     
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1
>     
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1];
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1]
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1];
>     
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1];
570c570
<   }
---
>   
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1]
570c570
<   }
---
>   
568,570c568,570
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
<   }
---
>       generateMTFValues_s.mtfFreq[  1];
>     
>   
568,570c568,570
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
<   }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
>   
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1]++
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
---
>       generateMTFValues_s.mtfFreq[  1]++
>     
568c568
<       generateMTFValues_s.mtfFreq[  1]++;
---
>       generateMTFValues_s.mtfFreq[  1]++
570c570
<   }
---
>   
568,570c568,570
<       generateMTFValues_s.mtfFreq[  1]++;
<     }
<   }
---
>       generateMTFValues_s.mtfFreq[  1]++
>     
>   
(90.4 %, 19776 bytes)
568c568
<       generateMTFValues_s.mtfFreq[  1];
---
>       generateMTFValues_s.mtfFreq[  1]
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1];
<     }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
568c568
<       generateMTFValues_s.mtfFreq[  1];
---
>       generateMTFValues_s.mtfFreq[  1]
570c570
<   }
---
>   
568,570c568,570
<       generateMTFValues_s.mtfFreq[  1];
<     }
<   }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
>   
568c568
<       generateMTFValues_s.mtfFreq[  1];
---
>       generateMTFValues_s.mtfFreq[  1]
572c572
<   0 > 0;
---
>    > 0;
568,569c568,569
<       generateMTFValues_s.mtfFreq[  1];
<     }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
572c572
<   0 > 0;
---
>    > 0;
568c568
<       generateMTFValues_s.mtfFreq[  1];
---
>       generateMTFValues_s.mtfFreq[  1]
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>    > 0;
568,570c568,570
<       generateMTFValues_s.mtfFreq[  1];
<     }
<   }
---
>       generateMTFValues_s.mtfFreq[  1]
>     
>   
572c572
<   0 > 0;
---
>    > 0;
569c569
<     }
---
>     
569,570c569,570
<     }
<   }
---
>     
>   
569c569
<     }
---
>     
572c572
<   0 > 0;
---
>    > 0;
569,570c569,570
<     }
<   }
---
>     
>   
572c572
<   0 > 0;
---
>    > 0;
569c569
<     }
---
>     
572c572
<   0 > 0;
---
>   0  0;
569,570c569,570
<     }
<   }
---
>     
>   
572c572
<   0 > 0;
---
>   0  0;
569c569
<     }
---
>     
572c572
<   0 > 0;
---
>     0;
569,570c569,570
<     }
<   }
---
>     
>   
572c572
<   0 > 0;
---
>     0;
570c570
<   }
---
>   
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>    > 0;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>   0  0;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>     0;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>   0 > ;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>    > ;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>   0  ;
570c570
<   }
---
>   
572c572
<   0 > 0;
---
>     ;
572c572
<   0 > 0;
---
>    > 0;
572c572
<   0 > 0;
---
>     0;
572c572
<   0 > 0;
---
>    > ;
572c572
<   0 > 0;
---
>     ;
(90.4 %, 19774 bytes)
572c572
<     0;
---
>     
572c572
<     0;
---
>     ;
574c574
<    mtfv = EOB;
---
>     = EOB;
572c572
<     0;
---
>     
574c574
<    mtfv = EOB;
---
>     = EOB;
572c572
<     0;
---
>     ;
574c574
<    mtfv = EOB;
---
>    mtfv  EOB;
572c572
<     0;
---
>     
574c574
<    mtfv = EOB;
---
>    mtfv  EOB;
572c572
<     0;
---
>     ;
574c574
<    mtfv = EOB;
---
>      EOB;
(90.4 %, 19772 bytes)
574c574
<    mtfv = EOB;
---
>      EOB;
574c574
<    mtfv = EOB;
---
>     = ;
574c574
<    mtfv = EOB;
---
>      ;
(90.4 %, 19767 bytes)
574c574
<      EOB;
---
>      
574,575c574,575
<      EOB;
<   wr++;
---
>      ;
>   ++;
574,575c574,575
<      EOB;
<   wr++;
---
>      
>   ++;
574,575c574,575
<      EOB;
<   wr++;
---
>      ;
>   wr;
(90.4 %, 19763 bytes)
575c575
<   wr++;
---
>   ;
575c575
<   wr++;
---
>   ++
575c575
<   wr++;
---
>   
(90.4 %, 19759 bytes)
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   .mtfFreq[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   generateMTFValues_smtfFreq[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   mtfFreq[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   generateMTFValues_s.[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   .[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   generateMTFValues_s[EOB]++;
575,576c575,576
<   ;
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   
>   [EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   .mtfFreq[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   mtfFreq[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   .[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   [EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   .mtfFreqEOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   mtfFreqEOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   .EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_smtfFreq[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_smtfFreqEOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_sEOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_smtfFreq[]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s[]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_smtfFreq]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.[EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.EOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.[]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.[EOB++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.EOB++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.[++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreqEOB]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreqEOB++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreqEOB];
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq];
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreqEOB;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[]++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[];
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[]++
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[++
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[]
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[EOB++;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[EOB;
576c576
<   generateMTFValues_s.mtfFreq[EOB]++;
---
>   generateMTFValues_s.mtfFreq[EOB++
(90.4 %, 19752 bytes)
576c576
<   generateMTFValues_s.mtfFreq;
---
>   generateMTFValues_s.mtfFreq
578c578
<   generateMTFValues_s.nMTF = 0;
---
>    = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   .nMTF = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   nMTF = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   . = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>    = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   .nMTF  0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   nMTF  0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   .  0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>     0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_snMTF = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_s = 0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_snMTF  0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_s  0;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_snMTF = ;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_s = ;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_snMTF  ;
578c578
<   generateMTFValues_s.nMTF = 0;
---
>   generateMTFValues_s  ;
(90.4 %, 19727 bytes)
578,579c578
<     0;
< }
---
>     
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
578c578
<     0;
---
>     0
578,579c578,579
<     0;
< }
---
>     0
> 
578c578
<     0;
---
>     0
581c581
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 0
578,579c578
<     0;
< }
---
>     0
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
578c578
<     0;
---
>     0
581c581
< #define BZ_LESSER_ICOST 0
---
> # BZ_LESSER_ICOST 0
578,579c578
<     0;
< }
---
>     0
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> # BZ_LESSER_ICOST 0
578c578
<     0;
---
>     0
581c581
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 0
578,579c578
<     0;
< }
---
>     0
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
>  BZ_LESSER_ICOST 0
579c579
< }
---
> 
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> # BZ_LESSER_ICOST 0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
>  BZ_LESSER_ICOST 0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> #define  0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> define  0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
> #  0
579d578
< }
581c580,581
< #define BZ_LESSER_ICOST 0
---
> 
>   0
581c581
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 0
581c581
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 0
581c581
< #define BZ_LESSER_ICOST 0
---
> define  0
581c581
< #define BZ_LESSER_ICOST 0
---
>   0
581c581
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 
581c581
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 
581c581
< #define BZ_LESSER_ICOST 0
---
> define  
581c581
< #define BZ_LESSER_ICOST 0
---
>   
581c581
< #define BZ_LESSER_ICOST 0
---
> # BZ_LESSER_ICOST 0
581c581
< #define BZ_LESSER_ICOST 0
---
> #  0
581c581
< #define BZ_LESSER_ICOST 0
---
> # BZ_LESSER_ICOST 
581c581
< #define BZ_LESSER_ICOST 0
---
> #  
(90.4 %, 19704 bytes)
582c582
< #define BZ_GREATER_ICOST 15
---
>   
582c582
< #define BZ_GREATER_ICOST 15
---
> # BZ_GREATER_ICOST 15
582c582
< #define BZ_GREATER_ICOST 15
---
> #  15
(90.4 %, 19679 bytes)
584c584
< #define RETURN ;
---
>   
584c584
< #define RETURN ;
---
> # RETURN ;
584c584
< #define RETURN ;
---
> #  ;
584c584
< #define RETURN ;
---
> # RETURN 
584c584
< #define RETURN ;
---
> #  
584c584
< #define RETURN ;
---
> # RETURN ;
586c586
< #define GET_BITS                                                               \
---
> define GET_BITS                                                               \
(90.4 %, 19665 bytes)
586c586
< #define GET_BITS                                                               \
---
>                                                                 
586c586
< #define GET_BITS                                                               \
---
> # GET_BITS                                                               \
586c586
< #define GET_BITS                                                               \
---
> #                                                                \
586c586
< #define GET_BITS                                                               \
---
> # GET_BITS                                                               
586c586
< #define GET_BITS                                                               \
---
> #                                                                
586,587c586,587
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> # GET_BITS                                                               \
>    lll:                                                                    \
586,587c586,587
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> #                                                                \
>    lll:                                                                    \
586,587c586,587
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> # GET_BITS                                                               
>    lll:                                                                    \
586,587c586,587
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> #                                                                
>    lll:                                                                    \
586c586
< #define GET_BITS                                                               \
---
> #define                                                                \
586c586
< #define GET_BITS                                                               \
---
> #define                                                                
586,587c586,587
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> #define                                                                \
>    lll:                                                                    \
(90.4 %, 19657 bytes)
586c586
< #define                                                                \
---
> #define                                                                
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>    lll:                                                                    \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>   case :                                                                    \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>    :                                                                    \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>   case lll                                                                    \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>    lll                                                                    \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>   case                                                                     \
586,587c586,587
< #define                                                                \
<   case lll:                                                                    \
---
> #define                                                                
>                                                                        \
587c587
<   case lll:                                                                    \
---
>    lll:                                                                    \
587c587
<   case lll:                                                                    \
---
>    :                                                                    \
587c587
<   case lll:                                                                    \
---
>    lll                                                                    \
(90.4 %, 19653 bytes)
587c587
<    lll:                                                                    \
---
>    :                                                                    \
587c587
<    lll:                                                                    \
---
>                                                                        \
587c587
<    lll:                                                                    \
---
>    :                                                                    
587c587
<    lll:                                                                    \
---
>                                                                        
587,588c587,588
<    lll:                                                                    \
<     s->state = lll;                                                            \
---
>    :                                                                    \
>     ->state = lll;                                                            \
587,588c587,588
<    lll:                                                                    \
<     s->state = lll;                                                            \
---
>                                                                        \
>     ->state = lll;                                                            \
587,588c587,588
<    lll:                                                                    \
<     s->state = lll;                                                            \
---
>    :                                                                    
>     ->state = lll;                                                            \
587,588c587,588
<    lll:                                                                    \
<     s->state = lll;                                                            \
---
>                                                                        
>     ->state = lll;                                                            \
587c587
<    lll:                                                                    \
---
>    lll                                                                    \
587c587
<    lll:                                                                    \
---
>    lll                                                                    
587,588c587,588
<    lll:                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    \
>     ->state = lll;                                                            \
(90.4 %, 19652 bytes)
587c587
<    lll                                                                    \
---
>    lll                                                                    
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     ->state = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     sstate = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     state = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     s-> = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     -> = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>     s = lll;                                                            \
587,588c587,588
<    lll                                                                    \
<     s->state = lll;                                                            \
---
>    lll                                                                    
>      = lll;                                                            \
588c588
<     s->state = lll;                                                            \
---
>     ->state = lll;                                                            \
588c588
<     s->state = lll;                                                            \
---
>     state = lll;                                                            \
(90.4 %, 19651 bytes)
588c588
<     ->state = lll;                                                            \
---
>     state = lll;                                                            \
588c588
<     ->state = lll;                                                            \
---
>      = lll;                                                            \
588c588
<     ->state = lll;                                                            \
---
>     state  lll;                                                            \
(90.4 %, 19649 bytes)
588c588
<     state = lll;                                                            \
---
>      = lll;                                                            \
588c588
<     state = lll;                                                            \
---
>       lll;                                                            \
588c588
<     state = lll;                                                            \
---
>      = ;                                                            \
(90.4 %, 19644 bytes)
588c588
<      = lll;                                                            \
---
>       lll;                                                            \
588c588
<      = lll;                                                            \
---
>       ;                                                            \
588c588
<      = lll;                                                            \
---
>       lll                                                            \
588c588
<      = lll;                                                            \
---
>                                                                   \
(90.4 %, 19643 bytes)
588c588
<       lll;                                                            \
---
>       ;                                                            \
588c588
<       lll;                                                            \
---
>                                                                   \
588c588
<       lll;                                                            \
---
>       ;                                                            
(90.4 %, 19640 bytes)
588c588
<       ;                                                            \
---
>                                                                   \
588c588
<       ;                                                            \
---
>                                                                   
588,589c588,589
<       ;                                                            \
<     while
---
>                                                                   \
>     
(90.4 %, 19639 bytes)
588c588
<                                                                   \
---
>                                                                   
588,589c588,589
<                                                                   \
<     while
---
>                                                                   
>     
588c588
<                                                                   \
---
>                                                                   
591c591
< #define GET_UCHAR GET_BITS
---
> define GET_UCHAR GET_BITS
588,589c588,589
<                                                                   \
<     while
---
>                                                                   
>     
591c591
< #define GET_UCHAR GET_BITS
---
> define GET_UCHAR GET_BITS
588c588
<                                                                   \
---
>                                                                   
591c591
< #define GET_UCHAR GET_BITS
---
> # GET_UCHAR GET_BITS
588,589c588,589
<                                                                   \
<     while
---
>                                                                   
>     
591c591
< #define GET_UCHAR GET_BITS
---
> # GET_UCHAR GET_BITS
588c588
<                                                                   \
---
>                                                                   
591c591
< #define GET_UCHAR GET_BITS
---
>  GET_UCHAR GET_BITS
588,589c588,589
<                                                                   \
<     while
---
>                                                                   
>     
591c591
< #define GET_UCHAR GET_BITS
---
>  GET_UCHAR GET_BITS
589c589
<     while
---
>     
(90.4 %, 19633 bytes)
591c591
< #define GET_UCHAR GET_BITS
---
>  GET_UCHAR GET_BITS
591c591
< #define GET_UCHAR GET_BITS
---
> define  GET_BITS
591c591
< #define GET_UCHAR GET_BITS
---
>   GET_BITS
591c591
< #define GET_UCHAR GET_BITS
---
> define GET_UCHAR 
591c591
< #define GET_UCHAR GET_BITS
---
>  GET_UCHAR 
591c591
< #define GET_UCHAR GET_BITS
---
> define  
591c591
< #define GET_UCHAR GET_BITS
---
>   
591c591
< #define GET_UCHAR GET_BITS
---
> # GET_UCHAR GET_BITS
591c591
< #define GET_UCHAR GET_BITS
---
> #  GET_BITS
591c591
< #define GET_UCHAR GET_BITS
---
> # GET_UCHAR 
591c591
< #define GET_UCHAR GET_BITS
---
> #  
(90.4 %, 19609 bytes)
593c593
< #define GET_BIT GET_BITS
---
>   
593c593
< #define GET_BIT GET_BITS
---
> # GET_BIT GET_BITS
593c593
< #define GET_BIT GET_BITS
---
> #  GET_BITS
593c593
< #define GET_BIT GET_BITS
---
> # GET_BIT 
593c593
< #define GET_BIT GET_BITS
---
> #  
(90.4 %, 19587 bytes)
595c595
< #define GET_MTF_VAL
---
>  
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress(DState *s);
595c595
< #define GET_MTF_VAL
---
> # GET_MTF_VAL
595c595
< #define GET_MTF_VAL
---
> # 
595c595
< #define GET_MTF_VAL
---
> # GET_MTF_VAL
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress(DState *s);
595c595
< #define GET_MTF_VAL
---
> # 
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress(DState *s);
595c595
< #define GET_MTF_VAL
---
> # GET_MTF_VAL
597c597
< void BZ2_decompress(DState *s);
---
> void (DState *s);
595c595
< #define GET_MTF_VAL
---
> # 
597c597
< void BZ2_decompress(DState *s);
---
> void (DState *s);
595c595
< #define GET_MTF_VAL
---
> # GET_MTF_VAL
597c597
< void BZ2_decompress(DState *s);
---
>  (DState *s);
595c595
< #define GET_MTF_VAL
---
> # 
597c597
< void BZ2_decompress(DState *s);
---
>  (DState *s);
595c595
< #define GET_MTF_VAL
---
> #define 
595c595
< #define GET_MTF_VAL
---
> #define 
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress(DState *s);
595c595
< #define GET_MTF_VAL
---
> #define 
597c597
< void BZ2_decompress(DState *s);
---
> void (DState *s);
595c595
< #define GET_MTF_VAL
---
> #define 
597c597
< void BZ2_decompress(DState *s);
---
>  (DState *s);
(90.5 %, 19570 bytes)
597c597
< void BZ2_decompress(DState *s);
---
>  (DState *s);
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompressDState *s);
597c597
< void BZ2_decompress(DState *s);
---
>  DState *s);
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress( *s);
597c597
< void BZ2_decompress(DState *s);
---
>  ( *s);
597c597
< void BZ2_decompress(DState *s);
---
>  BZ2_decompress *s);
597c597
< void BZ2_decompress(DState *s);
---
>   *s);
597c597
< void BZ2_decompress(DState *s);
---
> void (DState *s);
597c597
< void BZ2_decompress(DState *s);
---
> void DState *s);
597c597
< void BZ2_decompress(DState *s);
---
> void ( *s);
(90.5 %, 19546 bytes)
597c597
<  ( *s);
---
>   s;
597c597
<  ( *s);
---
>   *;
597c597
<  ( *s);
---
>   ;
(90.5 %, 19543 bytes)
597c597
<   s;
---
>   
599c599
< void BZ2_bz__AssertH__fail(void);
---
> void (void);
597c597
<   s;
---
>   ;
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  (void);
597c597
<   s;
---
>   
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  (void);
597c597
<   s;
---
>   s
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  BZ2_bz__AssertH__fail(void);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
> void (void);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  (void);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
> void BZ2_bz__AssertH__failvoid);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  BZ2_bz__AssertH__failvoid);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
> void void);
597c597
<   s;
---
>   s
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  void);
599c599
< void BZ2_bz__AssertH__fail(void);
---
>  BZ2_bz__AssertH__fail(void);
(90.5 %, 19517 bytes)
599c599
<  (void);
---
>  ;
599c599
<  (void);
---
>  void)
599c599
<  (void);
---
>  )
599c599
<  (void);
---
>  void
599c599
<  (void);
---
>  
599c599
<  (void);
---
>  ();
(90.5 %, 19511 bytes)
599c599
<  ;
---
>  
601c601
< void bz_config_ok(void);
---
>  (void);
599c599
<  ;
---
>  
601c601
< void bz_config_ok(void);
---
> void bz_config_okvoid);
599c599
<  ;
---
>  
601c601
< void bz_config_ok(void);
---
>  bz_config_okvoid);
599c599
<  ;
---
>  
601c601
< void bz_config_ok(void);
---
> void void);
599c599
<  ;
---
>  
601c601
< void bz_config_ok(void);
---
>  void);
601c601
< void bz_config_ok(void);
---
>  bz_config_ok(void);
(90.5 %, 19494 bytes)
601c601
<  (void);
---
>  ;
601c601
<  (void);
---
>  void)
601c601
<  (void);
---
>  )
601c601
<  (void);
---
>  void
601c601
<  (void);
---
>  
601c601
<  (void);
---
>  ();
(90.5 %, 19488 bytes)
601c601
<  ;
---
>  
603c603
< void default_bzalloc(  void);
---
>  (  void);
601c601
<  ;
---
>  
603c603
< void default_bzalloc(  void);
---
> void default_bzalloc  void);
601c601
<  ;
---
>  
603c603
< void default_bzalloc(  void);
---
>  default_bzalloc  void);
601c601
<  ;
---
>  
603c603
< void default_bzalloc(  void);
---
> void   void);
601c601
<  ;
---
>  
603c603
< void default_bzalloc(  void);
---
>    void);
603c603
< void default_bzalloc(  void);
---
>  default_bzalloc(  void);
603c603
< void default_bzalloc(  void);
---
>  (  void);
603c603
< void default_bzalloc(  void);
---
>  default_bzalloc  void);
603c603
< void default_bzalloc(  void);
---
>    void);
603c603
< void default_bzalloc(  void);
---
>  default_bzalloc(  );
(90.5 %, 19484 bytes)
603c603
<  default_bzalloc(  void);
---
>  (  void);
603c603
<  default_bzalloc(  void);
---
>    void);
603c603
<  default_bzalloc(  void);
---
>  (  );
603c603
<  default_bzalloc(  void);
---
>    );
603c603
<  default_bzalloc(  void);
---
>  (  void;
603c603
<  default_bzalloc(  void);
---
>    void;
603c603
<  default_bzalloc(  void);
---
>  (  ;
603c603
<  default_bzalloc(  void);
---
>    ;
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  void);
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  );
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  void;
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  ;
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  void)
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  )
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  void
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc  
603c603
<  default_bzalloc(  void);
---
>  default_bzalloc(  );
(90.5 %, 19478 bytes)
603c603
<  default_bzalloc  ;
---
>  default_bzalloc  
605c605
< static void default_bzfree( void);
---
>   default_bzfree( void);
603c603
<  default_bzalloc  ;
---
>  default_bzalloc  
605c605
< static void default_bzfree( void);
---
> static void ( void);
603c603
<  default_bzalloc  ;
---
>  default_bzalloc  
605c605
< static void default_bzfree( void);
---
>  void ( void);
603c603
<  default_bzalloc  ;
---
>  default_bzalloc  
605c605
< static void default_bzfree( void);
---
> static  ( void);
603c603
<  default_bzalloc  ;
---
>  default_bzalloc  
605c605
< static void default_bzfree( void);
---
>   ( void);
605c605
< static void default_bzfree( void);
---
>  void default_bzfree( void);
605c605
< static void default_bzfree( void);
---
>   default_bzfree( void);
(90.5 %, 19472 bytes)
605c605
<  void default_bzfree( void);
---
>   default_bzfree( void);
605c605
<  void default_bzfree( void);
---
>   ( void);
605c605
<  void default_bzfree( void);
---
>   default_bzfree void);
605c605
<  void default_bzfree( void);
---
>    void);
605c605
<  void default_bzfree( void);
---
>   default_bzfree( );
(90.5 %, 19468 bytes)
605c605
<   default_bzfree( void);
---
>   ( void);
605c605
<   default_bzfree( void);
---
>    void);
605c605
<   default_bzfree( void);
---
>   ( );
605c605
<   default_bzfree( void);
---
>    );
605c605
<   default_bzfree( void);
---
>   ( void;
605c605
<   default_bzfree( void);
---
>    void;
605c605
<   default_bzfree( void);
---
>   ( ;
605c605
<   default_bzfree( void);
---
>    ;
605c605
<   default_bzfree( void);
---
>   default_bzfree void);
605c605
<   default_bzfree( void);
---
>   default_bzfree );
605c605
<   default_bzfree( void);
---
>   default_bzfree void;
605c605
<   default_bzfree( void);
---
>   default_bzfree ;
605c605
<   default_bzfree( void);
---
>   default_bzfree void)
605c605
<   default_bzfree( void);
---
>   default_bzfree )
605c605
<   default_bzfree( void);
---
>   default_bzfree void
605c605
<   default_bzfree( void);
---
>   default_bzfree 
605c605
<   default_bzfree( void);
---
>   default_bzfree( );
(90.5 %, 19462 bytes)
605c605
<   default_bzfree ;
---
>   default_bzfree 
607c607
< static void prepare_new_block(void);
---
>   prepare_new_block(void);
605c605
<   default_bzfree ;
---
>   default_bzfree 
607c607
< static void prepare_new_block(void);
---
> static void (void);
605c605
<   default_bzfree ;
---
>   default_bzfree 
607c607
< static void prepare_new_block(void);
---
>  void (void);
605c605
<   default_bzfree ;
---
>   default_bzfree 
607c607
< static void prepare_new_block(void);
---
> static  (void);
605c605
<   default_bzfree ;
---
>   default_bzfree 
607c607
< static void prepare_new_block(void);
---
>   (void);
607c607
< static void prepare_new_block(void);
---
>  void prepare_new_block(void);
607c607
< static void prepare_new_block(void);
---
>   prepare_new_block(void);
(90.5 %, 19434 bytes)
607c607
<   (void);
---
>   
607c607
<   (void);
---
>   ();
607c607
<   (void);
---
>   (;
607c607
<   (void);
---
>   ()
607c607
<   (void);
---
>   (
607c607
<   (void);
---
>   ();
609c609
< static void init_RL(void);
---
>  void init_RL(void);
(90.5 %, 19430 bytes)
607c607
<   ();
---
>   (;
607c607
<   ();
---
>   (
607c607
<   ();
---
>   (;
609c609
< static void init_RL(void);
---
>  void init_RL(void);
607c607
<   ();
---
>   (
609c609
< static void init_RL(void);
---
>  void init_RL(void);
607c607
<   ();
---
>   (;
609c609
< static void init_RL(void);
---
> static  init_RL(void);
607c607
<   ();
---
>   (
609c609
< static void init_RL(void);
---
> static  init_RL(void);
607c607
<   ();
---
>   (;
609c609
< static void init_RL(void);
---
>   init_RL(void);
607c607
<   ();
---
>   (
609c609
< static void init_RL(void);
---
>   init_RL(void);
607c607
<   ();
---
>   ()
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
>  void init_RL(void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
> static  init_RL(void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
>   init_RL(void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
> static void (void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
>  void (void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
> static  (void);
607c607
<   ();
---
>   ()
609c609
< static void init_RL(void);
---
>   (void);
609c609
< static void init_RL(void);
---
>  void init_RL(void);
609c609
< static void init_RL(void);
---
>   init_RL(void);
(90.5 %, 19424 bytes)
609c609
<  void init_RL(void);
---
>   init_RL(void);
609c609
<  void init_RL(void);
---
>   (void);
609c609
<  void init_RL(void);
---
>   init_RLvoid);
609c609
<  void init_RL(void);
---
>   void);
609c609
<  void init_RL(void);
---
>   init_RL();
(90.5 %, 19420 bytes)
609c609
<   init_RL(void);
---
>   (void);
609c609
<   init_RL(void);
---
>   void);
609c609
<   init_RL(void);
---
>   ();
609c609
<   init_RL(void);
---
>   );
609c609
<   init_RL(void);
---
>   (void;
609c609
<   init_RL(void);
---
>   void;
609c609
<   init_RL(void);
---
>   (;
609c609
<   init_RL(void);
---
>   ;
(90.5 %, 19411 bytes)
609c609
<   void;
---
>   
611c611
< void isempty_RL(void);
---
> void (void);
609c609
<   void;
---
>   ;
611c611
< void isempty_RL(void);
---
>  (void);
609c609
<   void;
---
>   
611c611
< void isempty_RL(void);
---
>  (void);
609c609
<   void;
---
>   void
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
>  isempty_RL(void);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
> void (void);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
>  (void);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
> void isempty_RLvoid);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
>  isempty_RLvoid);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
> void void);
609c609
<   void;
---
>   void
611c611
< void isempty_RL(void);
---
>  void);
611c611
< void isempty_RL(void);
---
>  isempty_RL(void);
(90.5 %, 19406 bytes)
611c611
<  isempty_RL(void);
---
>  void);
611c611
<  isempty_RL(void);
---
>  ();
611c611
<  isempty_RL(void);
---
>  );
611c611
<  isempty_RL(void);
---
>  (void;
611c611
<  isempty_RL(void);
---
>  void;
611c611
<  isempty_RL(void);
---
>  (;
611c611
<  isempty_RL(void);
---
>  ;
611c611
<  isempty_RL(void);
---
>  isempty_RLvoid);
611c611
<  isempty_RL(void);
---
>  isempty_RL);
611c611
<  isempty_RL(void);
---
>  isempty_RLvoid;
611c611
<  isempty_RL(void);
---
>  isempty_RL;
611c611
<  isempty_RL(void);
---
>  isempty_RLvoid)
(90.5 %, 19390 bytes)
611c611
<  ;
---
>  
613c613
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
613c613
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
613c613
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(90.5 %, 19387 bytes)
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  ()(bz_stream *strm, int blockSize100k,
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  )(bz_stream *strm, int blockSize100k,
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
613c613
<  BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
(90.5 %, 19381 bytes)
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  )(bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  )bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInitbz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  ()(bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  ((bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  ()bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (bz_stream *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  ()( *strm, int blockSize100k,
613c613
<  (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>  (( *strm, int blockSize100k,
(90.5 %, 19379 bytes)
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  ( *strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   *strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  (bz_stream strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  bz_stream strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  ( strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>   strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInitbz_stream *strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit *strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInitbz_stream strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInitbz_stream *, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit *, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInitbz_stream , int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit , int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( *strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( *, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( , int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( *strm int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( strm int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( * int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(  int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream strm, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream , int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream strm int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream  int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream strm,  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream ,  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream strm  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream   blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *, int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream * int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *,  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *, int ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream * int ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *,  ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *  ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm int blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm int ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm  ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm int blockSize100k
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm  blockSize100k
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm int 
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm  
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm,  blockSize100k,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm,  ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm,  blockSize100k
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm,  
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm,  blockSize100k,
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm,  ,
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm,  blockSize100k
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm,  
>                                 verbosity, int workFactor) {
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, int ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, int 
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int ,
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int 
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int ,
>                                int , int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int 
>                                int , int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int ,
>                                 , int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int 
>                                 , int workFactor) {
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                 verbosity, int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                int , int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                 , int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                int verbosity int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                 verbosity int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                int  int workFactor) {
613,614c613,614
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity, int workFactor) {
---
>  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k
>                                  int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 verbosity, int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 , int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 verbosity int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                  int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 verbosity,  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 ,  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                 verbosity  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                   workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int , int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int  int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int ,  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int   workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int , int ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int  int ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int ,  ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int   ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity int workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity int ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity  ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity int workFactor {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity  workFactor {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity int  {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity   {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  workFactor) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  workFactor {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,   {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  workFactor) 
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  ) 
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,  workFactor 
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity,   
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int ) {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int  {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int ) 
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int  
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int ) {
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int  {
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int ) 
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int  
>    n;
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int workFactor {
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int workFactor 
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor {
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor 
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor {
>   Int32 ;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor 
>   Int32 ;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor {
>    ;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor 
>    ;
614c614
<                                int verbosity, int workFactor) {
---
>                                int verbosity, int workFactor) 
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>    n;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>   Int32 ;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>    ;
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>   Int32 n
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>    n
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>   Int32 
614,615c614,615
<                                int verbosity, int workFactor) {
<   Int32 n;
---
>                                int verbosity, int workFactor) 
>    
615c615
<   Int32 n;
---
>    n;
615c615
<   Int32 n;
---
>    ;
615c615
<   Int32 n;
---
>    n
615c615
<   Int32 n;
---
>    
615,616c615,616
<   Int32 n;
<   EState *s;
---
>    n;
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>    ;
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>    n
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>    
>    *s;
615c615
<   Int32 n;
---
>   Int32 ;
615c615
<   Int32 n;
---
>   Int32 
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>   EState s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 
>   EState s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>    s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 
>    s;
615c615
<   Int32 n;
---
>   Int32 n
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    *s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    s;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState *;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    *;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState ;
615,616c615,616
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    ;
616c616
<   EState *s;
---
>    *s;
616c616
<   EState *s;
---
>    s;
616c616
<   EState *s;
---
>    *;
616c616
<   EState *s;
---
>    ;
616c616
<   EState *s;
---
>    *s
616c616
<   EState *s;
---
>    s
616c616
<   EState *s;
---
>    *
616c616
<   EState *s;
---
>    
616c616
<   EState *s;
---
>   EState s;
616c616
<   EState *s;
---
>   EState ;
616c616
<   EState *s;
---
>   EState s
616c616
<   EState *s;
---
>   EState 
616c616
<   EState *s;
---
>   EState s;
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState ;
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState s
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState 
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState *;
616c616
<   EState *s;
---
>   EState *
616c616
<   EState *s;
---
>   EState *;
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState *
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState *;
618c618
<   if (!0)
---
>   if !0)
616c616
<   EState *s;
---
>   EState *
618c618
<   if (!0)
---
>   if !0)
616c616
<   EState *s;
---
>   EState *;
618c618
<   if (!0)
---
>    !0)
616c616
<   EState *s;
---
>   EState *
618c618
<   if (!0)
---
>    !0)
616c616
<   EState *s;
---
>   EState *s
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>    (!0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>   if !0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>    !0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>   if (0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>    (0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>   if 0)
616c616
<   EState *s;
---
>   EState *s
618c618
<   if (!0)
---
>    0)
618c618
<   if (!0)
---
>    (!0)
618c618
<   if (!0)
---
>    !0)
618c618
<   if (!0)
---
>    (0)
618c618
<   if (!0)
---
>    0)
618c618
<   if (!0)
---
>    (!)
618c618
<   if (!0)
---
>    !)
618c618
<   if (!0)
---
>    ()
618c618
<   if (!0)
---
>    )
618c618
<   if (!0)
---
>   if !0)
618c618
<   if (!0)
---
>   if 0)
618c618
<   if (!0)
---
>   if !)
618c618
<   if (!0)
---
>   if )
618c618
<   if (!0)
---
>   if !0
618c618
<   if (!0)
---
>   if 0
618c618
<   if (!0)
---
>   if !
618c618
<   if (!0)
---
>   if 
618c618
<   if (!0)
---
>   if (0)
618c618
<   if (!0)
---
>   if ()
618c618
<   if (!0)
---
>   if (0
618c618
<   if (!0)
---
>   if (
618,619c618,619
<   if (!0)
<     return BZ_CONFIG_ERROR;
---
>   if (0)
>      BZ_CONFIG_ERROR;
(90.5 %, 19378 bytes)
618c618
<   if (0)
---
>   if ()
618c618
<   if (0)
---
>   if (
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>      BZ_CONFIG_ERROR;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>      BZ_CONFIG_ERROR;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>     return ;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>     return ;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>      ;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>      ;
618c618
<   if (0)
---
>   if (0
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      BZ_CONFIG_ERROR;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return ;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      ;
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return BZ_CONFIG_ERROR
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      BZ_CONFIG_ERROR
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return 
618,619c618,619
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      
619c619
<     return BZ_CONFIG_ERROR;
---
>      BZ_CONFIG_ERROR;
619c619
<     return BZ_CONFIG_ERROR;
---
>      ;
619c619
<     return BZ_CONFIG_ERROR;
---
>      BZ_CONFIG_ERROR
619c619
<     return BZ_CONFIG_ERROR;
---
>      
(90.5 %, 19372 bytes)
619c619
<      BZ_CONFIG_ERROR;
---
>      ;
619c619
<      BZ_CONFIG_ERROR;
---
>      
(90.6 %, 19357 bytes)
619c619
<      ;
---
>      
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  == NULL || blockSize100k < 1 || blockSize100k > 9 ||
619c619
<      ;
---
>      
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
(90.6 %, 19356 bytes)
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>      NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if   NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm ==  || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  ==  || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm   || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if    || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( ==  || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   || blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL  blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (  NULL  blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( ==   blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k < 1 || blockSize100k > 9 ||
(90.6 %, 19350 bytes)
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k < 1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   ||  < 1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     < 1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   || blockSize100k  1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k  1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   ||   1 || blockSize100k > 9 ||
621c621
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1 || blockSize100k > 9 ||
(90.6 %, 19344 bytes)
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1 || blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     <  || blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (       || blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     < 1  blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1  blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     <   blockSize100k > 9 ||
621c621
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (        blockSize100k > 9 ||
(90.6 %, 19330 bytes)
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (        blockSize100k > 9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (       ||  > 9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (         > 9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (       || blockSize100k  9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (        blockSize100k  9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (       ||   9 ||
621c621
<   if (      1 || blockSize100k > 9 ||
---
>   if (          9 ||
(90.6 %, 19327 bytes)
621c621
<   if (        blockSize100k > 9 ||
---
>   if (          9 ||
621c621
<   if (        blockSize100k > 9 ||
---
>   if (         >  ||
621c621
<   if (        blockSize100k > 9 ||
---
>   if (           ||
621c621
<   if (        blockSize100k > 9 ||
---
>   if (         > 9 
621c621
<   if (        blockSize100k > 9 ||
---
>   if (          9 
621c621
<   if (        blockSize100k > 9 ||
---
>   if (         >  
621c621
<   if (        blockSize100k > 9 ||
---
>   if (           
(90.6 %, 19313 bytes)
621c621
<   if (          9 ||
---
>   if (           
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           ||
>        < 0 || workFactor > 250)
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           
>        < 0 || workFactor > 250)
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           ||
>       workFactor  0 || workFactor > 250)
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           
>       workFactor  0 || workFactor > 250)
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           ||
>         0 || workFactor > 250)
621,622c621,622
<   if (          9 ||
<       workFactor < 0 || workFactor > 250)
---
>   if (           
>         0 || workFactor > 250)
(90.6 %, 19310 bytes)
622c622
<       workFactor < 0 || workFactor > 250)
---
>         0 || workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>        <  || workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>          || workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>        < 0  workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>         0  workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>        <   workFactor > 250)
622c622
<       workFactor < 0 || workFactor > 250)
---
>           workFactor > 250)
(90.6 %, 19299 bytes)
622c622
<         0 || workFactor > 250)
---
>           workFactor > 250)
622c622
<         0 || workFactor > 250)
---
>          ||  > 250)
622c622
<         0 || workFactor > 250)
---
>            > 250)
622c622
<         0 || workFactor > 250)
---
>          || workFactor  250)
622c622
<         0 || workFactor > 250)
---
>           workFactor  250)
622c622
<         0 || workFactor > 250)
---
>          ||   250)
622c622
<         0 || workFactor > 250)
---
>             250)
(90.6 %, 19296 bytes)
622c622
<           workFactor > 250)
---
>             250)
622c622
<           workFactor > 250)
---
>            > )
622c622
<           workFactor > 250)
---
>             )
622c622
<           workFactor > 250)
---
>            > 250
622c622
<           workFactor > 250)
---
>             250
622c622
<           workFactor > 250)
---
>            > 
622c622
<           workFactor > 250)
---
>             
622c622
<           workFactor > 250)
---
>           workFactor  250)
622c622
<           workFactor > 250)
---
>           workFactor  )
(90.6 %, 19285 bytes)
622c622
<             250)
---
>             
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             )
>      BZ_PARAM_ERROR;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             
>      BZ_PARAM_ERROR;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             )
>     return ;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             
>     return ;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             )
>      ;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             
>      ;
622c622
<             250)
---
>             250
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>      BZ_PARAM_ERROR;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>     return ;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>      ;
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>     return BZ_PARAM_ERROR
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>      BZ_PARAM_ERROR
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>     return 
622,623c622,623
<             250)
<     return BZ_PARAM_ERROR;
---
>             250
>      
623c623
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
623c623
<     return BZ_PARAM_ERROR;
---
>      ;
(90.6 %, 19279 bytes)
623c623
<      BZ_PARAM_ERROR;
---
>      ;
623c623
<      BZ_PARAM_ERROR;
---
>      
623c623
<      BZ_PARAM_ERROR;
---
>      ;
625c625
<   if (workFactor == 0)
---
>    (workFactor == 0)
(90.6 %, 19265 bytes)
623c623
<      ;
---
>      
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>    (workFactor == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>   if workFactor == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>    workFactor == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>   if ( == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>    ( == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>   if  == 0)
623c623
<      ;
---
>      
625c625
<   if (workFactor == 0)
---
>     == 0)
625c625
<   if (workFactor == 0)
---
>    (workFactor == 0)
625c625
<   if (workFactor == 0)
---
>    workFactor == 0)
625c625
<   if (workFactor == 0)
---
>    ( == 0)
625c625
<   if (workFactor == 0)
---
>     == 0)
(90.6 %, 19264 bytes)
625c625
<   if (workFactor == 0)
---
>    (workFactor == 0)
625c625
<   if (workFactor == 0)
---
>    workFactor == 0)
625c625
<   if (workFactor == 0)
---
>    ( == 0)
625c625
<   if (workFactor == 0)
---
>     == 0)
625c625
<   if (workFactor == 0)
---
>    (workFactor  0)
625c625
<   if (workFactor == 0)
---
>    workFactor  0)
625c625
<   if (workFactor == 0)
---
>    (  0)
625c625
<   if (workFactor == 0)
---
>      0)
625c625
<   if (workFactor == 0)
---
>   if workFactor == 0)
625c625
<   if (workFactor == 0)
---
>   if  == 0)
625c625
<   if (workFactor == 0)
---
>   if workFactor  0)
625c625
<   if (workFactor == 0)
---
>   if   0)
625c625
<   if (workFactor == 0)
---
>   if workFactor == )
625c625
<   if (workFactor == 0)
---
>   if  == )
625c625
<   if (workFactor == 0)
---
>   if workFactor  )
625c625
<   if (workFactor == 0)
---
>   if   )
625c625
<   if (workFactor == 0)
---
>   if ( == 0)
625c625
<   if (workFactor == 0)
---
>   if (  0)
625c625
<   if (workFactor == 0)
---
>   if ( == )
625c625
<   if (workFactor == 0)
---
>   if (  )
625c625
<   if (workFactor == 0)
---
>   if ( == 0
625c625
<   if (workFactor == 0)
---
>   if (  0
625c625
<   if (workFactor == 0)
---
>   if ( == 
625c625
<   if (workFactor == 0)
---
>   if (  
625c625
<   if (workFactor == 0)
---
>   if (workFactor  0)
625c625
<   if (workFactor == 0)
---
>   if (workFactor  )
(90.6 %, 19252 bytes)
625c625
<   if (  0)
---
>   if (  
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>      = 30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  
>      = 30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>     workFactor  30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  
>     workFactor  30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>       30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  
>       30;
625c625
<   if (  0)
---
>   if (  0
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = 30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       30;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor = ;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = ;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  ;
625,626c625,626
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       ;
626c626
<     workFactor = 30;
---
>      = 30;
626c626
<     workFactor = 30;
---
>       30;
626c626
<     workFactor = 30;
---
>      = ;
626c626
<     workFactor = 30;
---
>       ;
626c626
<     workFactor = 30;
---
>      = 30
626c626
<     workFactor = 30;
---
>       30
(90.6 %, 19241 bytes)
626c626
<       30;
---
>       
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       ;
>    (strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       
>    (strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       ;
>   if strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       
>   if strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       ;
>    strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       
>    strm->bzalloc == NULL)
626c626
<       30;
---
>       30
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       30
>    (strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       30
>   if strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       30
>    strm->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       30
>   if (->bzalloc == NULL)
626,627c626,627
<       30;
<   if (strm->bzalloc == NULL)
---
>       30
>    (->bzalloc == NULL)
(90.6 %, 19238 bytes)
627c627
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    (strmbzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    strmbzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    (bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>    bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if ->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if strmbzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if strm-> == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if -> == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if strm == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if  == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (-> == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if ( == NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc  NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc  NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (->  NULL)
627c627
<   if (strm->bzalloc == NULL)
---
>   if (  NULL)
(90.6 %, 19230 bytes)
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  )
>     ->bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  NULL
>     ->bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  
>     ->bzalloc = default_bzalloc;
627c627
<   if (bzalloc  NULL)
---
>   if (bzalloc  )
627c627
<   if (bzalloc  NULL)
---
>   if (bzalloc  
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     ->bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     ->bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     strmbzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     strmbzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     bzalloc = default_bzalloc;
627c627
<   if (bzalloc  NULL)
---
>   if (bzalloc  NULL
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     ->bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strmbzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     bzalloc = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm-> = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     -> = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm = default_bzalloc;
627,628c627,628
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>      = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     -> = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>      = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc  default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc  default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     ->  default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>       default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     strmbzalloc = default_bzalloc;
628c628
<     strm->bzalloc = default_bzalloc;
---
>     strm = default_bzalloc;
(90.6 %, 19216 bytes)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       
>    strm->bzfree == NULL)
628c628
<       default_bzalloc;
---
>       default_bzalloc
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (strm->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if strm->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    strm->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if (->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if ->bzfree == NULL)
628,629c628,629
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    ->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    (strm->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    strm->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    (->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    ->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    (strmbzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    strmbzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    (bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>    bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if ->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if strmbzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if strm-> == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if -> == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if strm == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if  == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (->bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (bzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (-> == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if ( == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (->bzfree  NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (bzfree  NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (->  NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (  NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (strmbzfree == NULL)
629c629
<   if (strm->bzfree == NULL)
---
>   if (strm == NULL)
(90.6 %, 19208 bytes)
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  )
>     ->bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  NULL
>     ->bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  
>     ->bzfree = default_bzfree;
629c629
<   if (bzfree  NULL)
---
>   if (bzfree  )
629c629
<   if (bzfree  NULL)
---
>   if (bzfree  
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     ->bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     ->bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     strmbzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     strmbzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     bzfree = default_bzfree;
629c629
<   if (bzfree  NULL)
---
>   if (bzfree  NULL
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     ->bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strmbzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     bzfree = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm-> = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     -> = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm = default_bzfree;
629,630c629,630
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>      = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     ->bzfree = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     bzfree = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     -> = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>      = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     ->bzfree  default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     bzfree  default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     ->  default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>       default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     strmbzfree = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     strm = default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     strmbzfree  default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     strm  default_bzfree;
630c630
<     strm->bzfree = default_bzfree;
---
>     strmbzfree = ;
(90.6 %, 19195 bytes)
630c630
<       default_bzfree;
---
>       
632c632
<   s = BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>    = BZALLOC(sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>   s  BZALLOC(sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>   s = (sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>    = (sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>   s  (sizeof(EState));
630c630
<       default_bzfree;
---
>       default_bzfree
632c632
<   s = BZALLOC(sizeof(EState));
---
>     (sizeof(EState));
(90.6 %, 19178 bytes)
632c632
<     BZALLOC(sizeof(EState));
---
>     EState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOCsizeof(EState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(EState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOCsizeofEState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOCEState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOCsizeof());
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC());
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOCsizeof));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC((EState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(EState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(());
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC());
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC((EState);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(EState);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(();
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC();
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeofEState));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof));
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeofEState);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeofEState);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof);
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeofEState;
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof;
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof());
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof();
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof();
632c632
<     BZALLOC(sizeof(EState));
---
>     BZALLOC(sizeof(;
(90.6 %, 19164 bytes)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC(
>    s == NULL)
632c632
<     BZALLOC();
---
>     BZALLOC()
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    (s == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if s == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    s == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if ( == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    ( == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if  == NULL)
632,633c632,633
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>     == NULL)
633c633
<   if (s == NULL)
---
>    (s == NULL)
633c633
<   if (s == NULL)
---
>    s == NULL)
633c633
<   if (s == NULL)
---
>    ( == NULL)
633c633
<   if (s == NULL)
---
>     == NULL)
633c633
<   if (s == NULL)
---
>    (s  NULL)
633c633
<   if (s == NULL)
---
>    s  NULL)
633c633
<   if (s == NULL)
---
>    (  NULL)
633c633
<   if (s == NULL)
---
>      NULL)
633c633
<   if (s == NULL)
---
>   if s == NULL)
633c633
<   if (s == NULL)
---
>   if  == NULL)
633c633
<   if (s == NULL)
---
>   if s  NULL)
633c633
<   if (s == NULL)
---
>   if   NULL)
633c633
<   if (s == NULL)
---
>   if s == )
633c633
<   if (s == NULL)
---
>   if  == )
633c633
<   if (s == NULL)
---
>   if s  )
633c633
<   if (s == NULL)
---
>   if   )
633c633
<   if (s == NULL)
---
>   if ( == NULL)
633c633
<   if (s == NULL)
---
>   if (  NULL)
633c633
<   if (s == NULL)
---
>   if ( == )
633c633
<   if (s == NULL)
---
>   if (  )
633c633
<   if (s == NULL)
---
>   if ( == NULL
633c633
<   if (s == NULL)
---
>   if (  NULL
633c633
<   if (s == NULL)
---
>   if ( == 
633c633
<   if (s == NULL)
---
>   if (  
633c633
<   if (s == NULL)
---
>   if (s  NULL)
633c633
<   if (s == NULL)
---
>   if (s  )
(90.7 %, 19161 bytes)
633c633
<   if (  NULL)
---
>   if (  
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      BZ_MEM_ERROR;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      BZ_MEM_ERROR;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>     return ;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>     return ;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      ;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      ;
633c633
<   if (  NULL)
---
>   if (  NULL
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return ;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      ;
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return BZ_MEM_ERROR
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return 
633,634c633,634
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      
634c634
<     return BZ_MEM_ERROR;
---
>      BZ_MEM_ERROR;
634c634
<     return BZ_MEM_ERROR;
---
>      ;
(90.7 %, 19155 bytes)
634c634
<      BZ_MEM_ERROR;
---
>      ;
634c634
<      BZ_MEM_ERROR;
---
>      
634,635c634,635
<      BZ_MEM_ERROR;
<   s->strm = *strm;
---
>      ;
>   ->strm = *strm;
(90.7 %, 19143 bytes)
634c634
<      ;
---
>      
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   ->strm = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   sstrm = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   strm = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   s-> = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   -> = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>   s = *strm;
634,635c634,635
<      ;
<   s->strm = *strm;
---
>      
>    = *strm;
635c635
<   s->strm = *strm;
---
>   ->strm = *strm;
635c635
<   s->strm = *strm;
---
>   strm = *strm;
635c635
<   s->strm = *strm;
---
>   -> = *strm;
635c635
<   s->strm = *strm;
---
>    = *strm;
(90.7 %, 19142 bytes)
635c635
<   s->strm = *strm;
---
>   ->strm = *strm;
635c635
<   s->strm = *strm;
---
>   strm = *strm;
635c635
<   s->strm = *strm;
---
>   -> = *strm;
635c635
<   s->strm = *strm;
---
>    = *strm;
635c635
<   s->strm = *strm;
---
>   ->strm  *strm;
635c635
<   s->strm = *strm;
---
>   strm  *strm;
635c635
<   s->strm = *strm;
---
>   ->  *strm;
635c635
<   s->strm = *strm;
---
>     *strm;
635c635
<   s->strm = *strm;
---
>   sstrm = *strm;
635c635
<   s->strm = *strm;
---
>   s = *strm;
635c635
<   s->strm = *strm;
---
>   sstrm  *strm;
635c635
<   s->strm = *strm;
---
>   s  *strm;
635c635
<   s->strm = *strm;
---
>   sstrm = strm;
635c635
<   s->strm = *strm;
---
>   s = strm;
(90.7 %, 19134 bytes)
635c635
<     *strm;
---
>     
637c637
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
635c635
<     *strm;
---
>     *;
635c635
<     *strm;
---
>     *
635c635
<     *strm;
---
>     *;
637c637
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
635c635
<     *strm;
---
>     *
637c637
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
635c635
<     *strm;
---
>     *;
637c637
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
635c635
<     *strm;
---
>     *
637c637
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
635c635
<     *strm;
---
>     *;
637c637
<   s->arr1 = NULL;
---
>   arr1 = NULL;
635c635
<     *strm;
---
>     *
637c637
<   s->arr1 = NULL;
---
>   arr1 = NULL;
635c635
<     *strm;
---
>     *strm
635c635
<     *strm;
---
>     *strm
637c637
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
635c635
<     *strm;
---
>     *strm
637c637
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
635c635
<     *strm;
---
>     *strm
637c637
<   s->arr1 = NULL;
---
>   arr1 = NULL;
635c635
<     *strm;
---
>     *strm
637c637
<   s->arr1 = NULL;
---
>   s-> = NULL;
(90.7 %, 19129 bytes)
637c637
<   s->arr1 = NULL;
---
>   arr1 = NULL;
637c637
<   s->arr1 = NULL;
---
>   -> = NULL;
637c637
<   s->arr1 = NULL;
---
>    = NULL;
637c637
<   s->arr1 = NULL;
---
>   ->arr1  NULL;
637c637
<   s->arr1 = NULL;
---
>   arr1  NULL;
637c637
<   s->arr1 = NULL;
---
>   ->  NULL;
637c637
<   s->arr1 = NULL;
---
>     NULL;
637c637
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
637c637
<   s->arr1 = NULL;
---
>   s = NULL;
637c637
<   s->arr1 = NULL;
---
>   sarr1  NULL;
637c637
<   s->arr1 = NULL;
---
>   s  NULL;
637c637
<   s->arr1 = NULL;
---
>   sarr1 = ;
637c637
<   s->arr1 = NULL;
---
>   s = ;
637c637
<   s->arr1 = NULL;
---
>   sarr1  ;
637c637
<   s->arr1 = NULL;
---
>   s  ;
(90.7 %, 19121 bytes)
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     
>   arr2 = NULL;
637c637
<     NULL;
---
>     NULL
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   ->arr2 = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   sarr2 = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   arr2 = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   s-> = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   -> = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>   s = NULL;
637,638c637,638
<     NULL;
<   s->arr2 = NULL;
---
>     NULL
>    = NULL;
638c638
<   s->arr2 = NULL;
---
>   ->arr2 = NULL;
638c638
<   s->arr2 = NULL;
---
>   arr2 = NULL;
638c638
<   s->arr2 = NULL;
---
>   -> = NULL;
638c638
<   s->arr2 = NULL;
---
>    = NULL;
638c638
<   s->arr2 = NULL;
---
>   ->arr2  NULL;
638c638
<   s->arr2 = NULL;
---
>   arr2  NULL;
638c638
<   s->arr2 = NULL;
---
>   ->  NULL;
638c638
<   s->arr2 = NULL;
---
>     NULL;
(90.7 %, 19117 bytes)
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>     ;
>   ->ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>     NULL
>   ->ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>     
>   ->ftab = NULL;
638c638
<   arr2  NULL;
---
>   arr2  ;
638c638
<   arr2  NULL;
---
>   arr2  
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   ->ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   ->ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   sftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   sftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   ftab = NULL;
638c638
<   arr2  NULL;
---
>   arr2  NULL
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   ->ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   sftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   ftab = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   s-> = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   -> = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   s = NULL;
638,639c638,639
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>    = NULL;
639c639
<   s->ftab = NULL;
---
>   ->ftab = NULL;
639c639
<   s->ftab = NULL;
---
>   ftab = NULL;
639c639
<   s->ftab = NULL;
---
>   -> = NULL;
639c639
<   s->ftab = NULL;
---
>    = NULL;
639c639
<   s->ftab = NULL;
---
>   ->ftab  NULL;
639c639
<   s->ftab = NULL;
---
>   ftab  NULL;
639c639
<   s->ftab = NULL;
---
>   ->  NULL;
639c639
<   s->ftab = NULL;
---
>     NULL;
639c639
<   s->ftab = NULL;
---
>   sftab = NULL;
(90.7 %, 19113 bytes)
639c639
<   ftab  NULL;
---
>     ;
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>     NULL
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>     
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  ;
639c639
<   ftab  NULL;
---
>   ftab  
639c639
<   ftab  NULL;
---
>   ftab  ;
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  ;
641c641
<   n = 100000 * blockSize100k;
---
>   n  100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  
641c641
<   n = 100000 * blockSize100k;
---
>   n  100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  ;
641c641
<   n = 100000 * blockSize100k;
---
>     100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  
641c641
<   n = 100000 * blockSize100k;
---
>     100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>   n  100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>     100000 * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>   n =  * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>    =  * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>   n   * blockSize100k;
639c639
<   ftab  NULL;
---
>   ftab  NULL
641c641
<   n = 100000 * blockSize100k;
---
>      * blockSize100k;
641c641
<   n = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
641c641
<   n = 100000 * blockSize100k;
---
>     100000 * blockSize100k;
(90.7 %, 19104 bytes)
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>       
>   ->arr1 = BZALLOC(n * sizeof(UInt32));
641c641
<      * blockSize100k;
---
>      * ;
641c641
<      * blockSize100k;
---
>      * 
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * ;
>   ->arr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * 
>   ->arr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * ;
>   sarr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * 
>   sarr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * ;
>   arr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * 
>   arr1 = BZALLOC(n * sizeof(UInt32));
641c641
<      * blockSize100k;
---
>      * blockSize100k
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   ->arr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   sarr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   arr1 = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   s-> = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   -> = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>   s = BZALLOC(n * sizeof(UInt32));
641,642c641,642
<      * blockSize100k;
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>      * blockSize100k
>    = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   ->arr1 = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   arr1 = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   -> = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>    = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   ->arr1  BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   arr1  BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   ->  BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   sarr1 = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   s = BZALLOC(n * sizeof(UInt32));
642c642
<   s->arr1 = BZALLOC(n * sizeof(UInt32));
---
>   sarr1  BZALLOC(n * sizeof(UInt32));
(90.7 %, 19096 bytes)
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>       sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOCn * sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC * sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOCn  sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC  sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOCn * (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC * (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOCn  (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC  (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC( * sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(  sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC( * (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(  (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC( * sizeofUInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC( * UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(  UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  sizeof(UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  (UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  sizeofUInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  UInt32));
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  sizeof());
642c642
<     BZALLOC(n * sizeof(UInt32));
---
>     BZALLOC(n  ());
(90.7 %, 19094 bytes)
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  UInt32));
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ());
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ));
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  (UInt32);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  UInt32);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ();
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  );
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32));
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof));
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof);
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32;
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof;
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof());
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof();
642c642
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof();
(90.7 %, 19080 bytes)
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  
>   arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642c642
<     BZALLOC(  );
---
>     BZALLOC(  )
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   ->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   sarr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   s-> = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   -> = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>   s = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
642,643c642,643
<     BZALLOC(  );
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  )
>    = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   ->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   -> = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>    = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   ->arr2  BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   arr2  BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   ->  BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   sarr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<   s->arr2 = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   s = BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
(90.7 %, 19072 bytes)
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>      + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOCn + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC( + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOCn  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC( + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n + ) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC( + ) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(n  ) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(  ) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC((n + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
(90.7 %, 19071 bytes)
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  ) * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((   * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  )  sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT  sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((    sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( + ) * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( +  * sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( + )  sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( +   sizeof(UInt32));
643c643
<     BZALLOC(( + BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC(( + ) * (UInt32));
(90.7 %, 19070 bytes)
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  ) * sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((   * sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  )  sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((    sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  ) * (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((   * (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  )  (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((    (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT * sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT  sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT * (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT  (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT * sizeofUInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT  sizeofUInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT * UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT  UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  sizeofUInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  sizeof());
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  ());
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  sizeof));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT)  ));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * (UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * ());
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * ));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * (UInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * UInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * ();
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * );
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeofUInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeofUInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeofUInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeofUInt32;
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof;
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof());
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof();
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof();
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(;
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof())
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof()
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof()
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32;
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32;
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
>   sftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
>   sftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32);
>   ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32)
>   ftab = BZALLOC(65537 * sizeof(UInt32));
643c643
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   sftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   ftab = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   s-> = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   -> = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>   s = BZALLOC(65537 * sizeof(UInt32));
643,644c643,644
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32))
>    = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   ->ftab = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   ftab = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   -> = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>    = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   ->ftab  BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   ftab  BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   ->  BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   sftab = BZALLOC(65537 * sizeof(UInt32));
644c644
<   s->ftab = BZALLOC(65537 * sizeof(UInt32));
---
>   s = BZALLOC(65537 * sizeof(UInt32));
(90.7 %, 19062 bytes)
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>       sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC65537 * sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC * sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC65537  sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC  sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC65537 * (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC * (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC65537  (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC  (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC( * sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(  sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC( * (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(  (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC( * sizeofUInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC( * UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(  UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537  sizeof(UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537  (UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537  sizeofUInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537  UInt32));
644c644
<     BZALLOC(65537 * sizeof(UInt32));
---
>     BZALLOC(65537  sizeof());
(90.7 %, 19056 bytes)
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  UInt32));
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ());
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ));
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  (UInt32);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  UInt32);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  ();
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  );
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32));
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof));
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof);
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeofUInt32;
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof;
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof());
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof();
644c644
<     BZALLOC(  sizeof(UInt32));
---
>     BZALLOC(  sizeof();
(90.7 %, 19042 bytes)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
644c644
<     BZALLOC(  );
---
>     BZALLOC(  )
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s-> == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if -> == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if  == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (-> == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ( == NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->  NULL || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
(90.7 %, 19037 bytes)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (   || ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (  NULL  ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1   || s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1    s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1   || ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1    ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1   || sarr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1    sarr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1   || arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1    arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  s->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  sarr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  s-> == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  -> == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL  s == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL || ->arr2 == NULL || s->ftab == NULL)
646c646
<   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL || arr2 == NULL || s->ftab == NULL)
(90.7 %, 19028 bytes)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL      ->ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==  || s->ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==   s->ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==  || ->ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==   ->ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==  || sftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==   sftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==  || ftab == NULL)
646c646
<   if (arr1  NULL   == NULL || s->ftab == NULL)
---
>   if (arr1  NULL   ==   ftab == NULL)
(90.7 %, 19022 bytes)
646c646
<   if (arr1  NULL   ==   s->ftab == NULL)
---
>   if (arr1  NULL   ==   ftab == NULL)
646c646
<   if (arr1  NULL   ==   s->ftab == NULL)
---
>   if (arr1  NULL   ==   -> == NULL)
646c646
<   if (arr1  NULL   ==   s->ftab == NULL)
---
>   if (arr1  NULL   ==    == NULL)
646c646
<   if (arr1  NULL   ==   s->ftab == NULL)
---
>   if (arr1  NULL   ==   ->ftab  NULL)
646c646
<   if (arr1  NULL   ==   s->ftab == NULL)
---
>   if (arr1  NULL   ==   ftab  NULL)
(90.7 %, 19019 bytes)
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==     NULL)
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==    == )
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==     )
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==    == NULL
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==     NULL
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==    == 
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==     
646c646
<   if (arr1  NULL   ==   ftab == NULL)
---
>   if (arr1  NULL   ==   ftab  NULL)
(90.7 %, 19013 bytes)
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     )
648c648
<     s->blockNo = 0;
---
>     ->blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     
648c648
<     s->blockNo = 0;
---
>     ->blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     )
648c648
<     s->blockNo = 0;
---
>     sblockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     
648c648
<     s->blockNo = 0;
---
>     sblockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     )
648c648
<     s->blockNo = 0;
---
>     blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     
648c648
<     s->blockNo = 0;
---
>     blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     ->blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     sblockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     blockNo = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     s-> = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     -> = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>     s = 0;
646c646
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1  NULL   ==     NULL
648c648
<     s->blockNo = 0;
---
>      = 0;
648c648
<     s->blockNo = 0;
---
>     ->blockNo = 0;
648c648
<     s->blockNo = 0;
---
>     blockNo = 0;
648c648
<     s->blockNo = 0;
---
>     -> = 0;
648c648
<     s->blockNo = 0;
---
>      = 0;
648c648
<     s->blockNo = 0;
---
>     ->blockNo  0;
648c648
<     s->blockNo = 0;
---
>     blockNo  0;
648c648
<     s->blockNo = 0;
---
>     ->  0;
648c648
<     s->blockNo = 0;
---
>       0;
648c648
<     s->blockNo = 0;
---
>     sblockNo = 0;
648c648
<     s->blockNo = 0;
---
>     s = 0;
(90.7 %, 19002 bytes)
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       
>   state = BZ_S_INPUT;
648c648
<       0;
---
>       0
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   ->state = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   sstate = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   state = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   s-> = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   -> = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>   s = BZ_S_INPUT;
648,649c648,649
<       0;
<   s->state = BZ_S_INPUT;
---
>       0
>    = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   ->state = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   state = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   -> = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>    = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   ->state  BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   state  BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   ->  BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>     BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   sstate = BZ_S_INPUT;
649c649
<   s->state = BZ_S_INPUT;
---
>   s = BZ_S_INPUT;
(90.7 %, 18993 bytes)
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     
>   mode = BZ_M_RUNNING;
649c649
<     BZ_S_INPUT;
---
>     BZ_S_INPUT
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   ->mode = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   smode = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   mode = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   s-> = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   -> = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   s = BZ_M_RUNNING;
649,650c649,650
<     BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>    = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   ->mode = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   mode = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   -> = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>    = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   ->mode  BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   mode  BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   ->  BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>     BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   smode = BZ_M_RUNNING;
650c650
<   s->mode = BZ_M_RUNNING;
---
>   s = BZ_M_RUNNING;
(90.7 %, 18985 bytes)
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     
>   combinedCRC = 0;
650c650
<     BZ_M_RUNNING;
---
>     BZ_M_RUNNING
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   ->combinedCRC = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   scombinedCRC = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   combinedCRC = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   s-> = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   -> = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>   s = 0;
650,651c650,651
<     BZ_M_RUNNING;
<   s->combinedCRC = 0;
---
>     BZ_M_RUNNING
>    = 0;
651c651
<   s->combinedCRC = 0;
---
>   ->combinedCRC = 0;
651c651
<   s->combinedCRC = 0;
---
>   combinedCRC = 0;
651c651
<   s->combinedCRC = 0;
---
>   -> = 0;
651c651
<   s->combinedCRC = 0;
---
>    = 0;
651c651
<   s->combinedCRC = 0;
---
>   ->combinedCRC  0;
651c651
<   s->combinedCRC = 0;
---
>   combinedCRC  0;
651c651
<   s->combinedCRC = 0;
---
>   ->  0;
651c651
<   s->combinedCRC = 0;
---
>     0;
651c651
<   s->combinedCRC = 0;
---
>   scombinedCRC = 0;
651c651
<   s->combinedCRC = 0;
---
>   s = 0;
651c651
<   s->combinedCRC = 0;
---
>   scombinedCRC  0;
651c651
<   s->combinedCRC = 0;
---
>   s  0;
651c651
<   s->combinedCRC = 0;
---
>   scombinedCRC = ;
(90.7 %, 18970 bytes)
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     
>   blockSize100k = blockSize100k;
651c651
<     0;
---
>     0
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   ->blockSize100k = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   sblockSize100k = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   blockSize100k = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   s-> = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   -> = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>   s = blockSize100k;
651,652c651,652
<     0;
<   s->blockSize100k = blockSize100k;
---
>     0
>    = blockSize100k;
652c652
<   s->blockSize100k = blockSize100k;
---
>   ->blockSize100k = blockSize100k;
652c652
<   s->blockSize100k = blockSize100k;
---
>   blockSize100k = blockSize100k;
(90.7 %, 18965 bytes)
652c652
<   blockSize100k = blockSize100k;
---
>     
652c652
<   blockSize100k = blockSize100k;
---
>   blockSize100k  blockSize100k;
652c652
<   blockSize100k = blockSize100k;
---
>   blockSize100k  ;
(90.8 %, 18937 bytes)
653c653
<   s->nblockMAX = 100000 * blockSize100k - 19;
---
>     100000 * blockSize100k - 19;
653c653
<   s->nblockMAX = 100000 * blockSize100k - 19;
---
>   snblockMAX = 100000 * blockSize100k - 19;
653c653
<   s->nblockMAX = 100000 * blockSize100k - 19;
---
>   s = 100000 * blockSize100k - 19;
(90.8 %, 18924 bytes)
653c653
<     100000 * blockSize100k - 19;
---
>         19;
653c653
<     100000 * blockSize100k - 19;
---
>     100000  blockSize100k - 19;
653c653
<     100000 * blockSize100k - 19;
---
>     100000   - 19;
(90.8 %, 18903 bytes)
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         
>   verbosity = verbosity;
653c653
<         19;
---
>         19
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   ->verbosity = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   sverbosity = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   verbosity = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   s-> = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   -> = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>   s = verbosity;
653,654c653,654
<         19;
<   s->verbosity = verbosity;
---
>         19
>    = verbosity;
654c654
<   s->verbosity = verbosity;
---
>   ->verbosity = verbosity;
654c654
<   s->verbosity = verbosity;
---
>   verbosity = verbosity;
(90.8 %, 18897 bytes)
654c654
<   verbosity = verbosity;
---
>     
654c654
<   verbosity = verbosity;
---
>   verbosity  verbosity;
654c654
<   verbosity = verbosity;
---
>   verbosity  ;
(90.8 %, 18877 bytes)
655c655
<   s->workFactor = 30;
---
>     30;
655c655
<   s->workFactor = 30;
---
>   sworkFactor = 30;
655c655
<   s->workFactor = 30;
---
>   s = 30;
(90.8 %, 18863 bytes)
655c655
<     30;
---
>     
657c657
<   s->block = *s->arr2;
---
>   block = *s->arr2;
655c655
<     30;
---
>     30
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   ->block = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   sblock = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   block = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   s-> = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   -> = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>   s = *s->arr2;
655c655
<     30;
---
>     30
657c657
<   s->block = *s->arr2;
---
>    = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   ->block = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   block = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   -> = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>    = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   ->block  *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   block  *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   ->  *s->arr2;
657c657
<   s->block = *s->arr2;
---
>     *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   sblock = *s->arr2;
657c657
<   s->block = *s->arr2;
---
>   s = *s->arr2;
(90.8 %, 18854 bytes)
657c657
<     *s->arr2;
---
>     ;
657c657
<     *s->arr2;
---
>     *->arr2;
657c657
<     *s->arr2;
---
>     *arr2;
(90.8 %, 18846 bytes)
657,658c657,658
<     ;
<   s->mtfv = *s->arr1;
---
>     
>    = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   ->mtfv = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   mtfv = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   -> = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>    = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   ->mtfv  *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   mtfv  *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   ->  *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>     *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   smtfv = *s->arr1;
658c658
<   s->mtfv = *s->arr1;
---
>   s = *s->arr1;
(90.8 %, 18838 bytes)
658c658
<     *s->arr1;
---
>     ;
658c658
<     *s->arr1;
---
>     *->arr1;
658c658
<     *s->arr1;
---
>     *arr1;
(90.8 %, 18830 bytes)
658,659c658,659
<     ;
<   s->zbits = NULL;
---
>     
>    = NULL;
659c659
<   s->zbits = NULL;
---
>   ->zbits = NULL;
659c659
<   s->zbits = NULL;
---
>   zbits = NULL;
659c659
<   s->zbits = NULL;
---
>   -> = NULL;
659c659
<   s->zbits = NULL;
---
>    = NULL;
659c659
<   s->zbits = NULL;
---
>   ->zbits  NULL;
659c659
<   s->zbits = NULL;
---
>   zbits  NULL;
659c659
<   s->zbits = NULL;
---
>   ->  NULL;
659c659
<   s->zbits = NULL;
---
>     NULL;
(90.8 %, 18826 bytes)
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>     ;
>   ->ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>     NULL
>   ->ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>     
>   ->ptr = s->arr1;
659c659
<   zbits  NULL;
---
>   zbits  ;
659c659
<   zbits  NULL;
---
>   zbits  
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  ;
>   ->ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  
>   ->ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  ;
>   sptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  
>   sptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  ;
>   ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  
>   ptr = s->arr1;
659c659
<   zbits  NULL;
---
>   zbits  NULL
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   ->ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   sptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   ptr = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   s-> = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   -> = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>   s = s->arr1;
659,660c659,660
<   zbits  NULL;
<   s->ptr = s->arr1;
---
>   zbits  NULL
>    = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   ->ptr = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   ptr = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   -> = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>    = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   ->ptr  s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   ptr  s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   ->  s->arr1;
660c660
<   s->ptr = s->arr1;
---
>     s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   sptr = s->arr1;
660c660
<   s->ptr = s->arr1;
---
>   s = s->arr1;
(90.8 %, 18819 bytes)
660c660
<     s->arr1;
---
>     
660c660
<     s->arr1;
---
>     sarr1;
660c660
<     s->arr1;
---
>     s;
(90.8 %, 18811 bytes)
662c662
<   strm->state = s;
---
>     s;
662c662
<   strm->state = s;
---
>   strmstate = s;
662c662
<   strm->state = s;
---
>   strm = s;
(90.8 %, 18799 bytes)
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     
>   total_in_lo32 = 0;
662c662
<     s;
---
>     s
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   ->total_in_lo32 = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strmtotal_in_lo32 = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   total_in_lo32 = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strm-> = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   -> = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strm = 0;
662,663c662,663
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>    = 0;
663c663
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32 = 0;
663c663
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32 = 0;
663c663
<   strm->total_in_lo32 = 0;
---
>   -> = 0;
663c663
<   strm->total_in_lo32 = 0;
---
>    = 0;
663c663
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32  0;
663c663
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32  0;
663c663
<   strm->total_in_lo32 = 0;
---
>   ->  0;
663c663
<   strm->total_in_lo32 = 0;
---
>     0;
(90.8 %, 18779 bytes)
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>     
>   ->total_in_hi32 = 0;
663c663
<    = 0;
---
>    = ;
663c663
<    = 0;
---
>    = 
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   ->total_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   ->total_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   strmtotal_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   strmtotal_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   total_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   total_in_hi32 = 0;
663c663
<    = 0;
---
>    = 0
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   ->total_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strmtotal_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   total_in_hi32 = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strm-> = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   -> = 0;
663,664c663,664
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strm = 0;
(90.8 %, 18777 bytes)
664c664
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32 = 0;
664c664
<   strm->total_in_hi32 = 0;
---
>   -> = 0;
664c664
<   strm->total_in_hi32 = 0;
---
>    = 0;
664c664
<   strm->total_in_hi32 = 0;
---
>   ->total_in_hi32  0;
664c664
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32  0;
664c664
<   strm->total_in_hi32 = 0;
---
>   ->  0;
664c664
<   strm->total_in_hi32 = 0;
---
>     0;
664c664
<   strm->total_in_hi32 = 0;
---
>   strmtotal_in_hi32 = 0;
664c664
<   strm->total_in_hi32 = 0;
---
>   strm = 0;
(90.8 %, 18757 bytes)
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     
>   total_out_lo32 = 0;
664c664
<     0;
---
>     0
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   ->total_out_lo32 = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strmtotal_out_lo32 = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   total_out_lo32 = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm-> = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   -> = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm = 0;
664,665c664,665
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>    = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32 = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32 = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>   -> = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>    = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32  0;
665c665
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32  0;
665c665
<   strm->total_out_lo32 = 0;
---
>   ->  0;
665c665
<   strm->total_out_lo32 = 0;
---
>     0;
665c665
<   strm->total_out_lo32 = 0;
---
>   strmtotal_out_lo32 = 0;
665c665
<   strm->total_out_lo32 = 0;
---
>   strm = 0;
(90.9 %, 18736 bytes)
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     
>   total_out_hi32 = 0;
665c665
<     0;
---
>     0
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   ->total_out_hi32 = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strmtotal_out_hi32 = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   total_out_hi32 = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm-> = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   -> = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm = 0;
665,666c665,666
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>    = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32 = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32 = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>   -> = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>    = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32  0;
666c666
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32  0;
666c666
<   strm->total_out_hi32 = 0;
---
>   ->  0;
666c666
<   strm->total_out_hi32 = 0;
---
>     0;
666c666
<   strm->total_out_hi32 = 0;
---
>   strmtotal_out_hi32 = 0;
666c666
<   strm->total_out_hi32 = 0;
---
>   strm = 0;
(90.9 %, 18715 bytes)
666,668c666,668
<     0;
<   ;
<   ;
---
>     
>   
>   
666c666
<     0;
---
>     0
(90.9 %, 18711 bytes)
669,670c669,670
<   return BZ_OK;
< }
---
>    
> 
669c669
<   return BZ_OK;
---
>   return ;
669c669
<   return BZ_OK;
---
>   return 
669,670c669,670
<   return BZ_OK;
< }
---
>   return ;
> 
669,670c669,670
<   return BZ_OK;
< }
---
>   return 
> 
669c669
<   return BZ_OK;
---
>   return ;
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define ADD_CHAR_TO_BLOCK
669c669
<   return BZ_OK;
---
>   return 
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define ADD_CHAR_TO_BLOCK
669,670c669
<   return BZ_OK;
< }
---
>   return ;
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> define ADD_CHAR_TO_BLOCK
669,670c669
<   return BZ_OK;
< }
---
>   return 
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> define ADD_CHAR_TO_BLOCK
669c669
<   return BZ_OK;
---
>   return BZ_OK
669,670c669,670
<   return BZ_OK;
< }
---
>   return BZ_OK
> 
669c669
<   return BZ_OK;
---
>   return BZ_OK
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define ADD_CHAR_TO_BLOCK
669,670c669
<   return BZ_OK;
< }
---
>   return BZ_OK
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> define ADD_CHAR_TO_BLOCK
669c669
<   return BZ_OK;
---
>   return BZ_OK
672c672
< #define ADD_CHAR_TO_BLOCK
---
> # ADD_CHAR_TO_BLOCK
669,670c669
<   return BZ_OK;
< }
---
>   return BZ_OK
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> # ADD_CHAR_TO_BLOCK
669c669
<   return BZ_OK;
---
>   return BZ_OK
672c672
< #define ADD_CHAR_TO_BLOCK
---
>  ADD_CHAR_TO_BLOCK
669,670c669
<   return BZ_OK;
< }
---
>   return BZ_OK
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
>  ADD_CHAR_TO_BLOCK
670c670
< }
---
> 
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> define ADD_CHAR_TO_BLOCK
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> # ADD_CHAR_TO_BLOCK
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
>  ADD_CHAR_TO_BLOCK
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> #define 
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> define 
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
> # 
670d669
< }
672c671,672
< #define ADD_CHAR_TO_BLOCK
---
> 
>  
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define ADD_CHAR_TO_BLOCK
672c672
< #define ADD_CHAR_TO_BLOCK
---
>  ADD_CHAR_TO_BLOCK
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define 
672c672
< #define ADD_CHAR_TO_BLOCK
---
>  
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define ADD_CHAR_TO_BLOCK
674c674
< void handle_compress(void);
---
>  handle_compress(void);
672c672
< #define ADD_CHAR_TO_BLOCK
---
>  ADD_CHAR_TO_BLOCK
674c674
< void handle_compress(void);
---
>  handle_compress(void);
672c672
< #define ADD_CHAR_TO_BLOCK
---
> define 
674c674
< void handle_compress(void);
---
>  handle_compress(void);
672c672
< #define ADD_CHAR_TO_BLOCK
---
>  
674c674
< void handle_compress(void);
---
>  handle_compress(void);
(90.9 %, 18687 bytes)
674c674
< void handle_compress(void);
---
>  void);
674c674
< void handle_compress(void);
---
>  handle_compress();
674c674
< void handle_compress(void);
---
>  ();
674c674
< void handle_compress(void);
---
>  handle_compress);
674c674
< void handle_compress(void);
---
>  );
674c674
< void handle_compress(void);
---
> void (void);
674c674
< void handle_compress(void);
---
> void void);
674c674
< void handle_compress(void);
---
> void ();
674c674
< void handle_compress(void);
---
> void );
674c674
< void handle_compress(void);
---
> void (void;
674c674
< void handle_compress(void);
---
> void void;
674c674
< void handle_compress(void);
---
> void (;
674c674
< void handle_compress(void);
---
> void ;
(90.9 %, 18679 bytes)
674c674
<  handle_compress();
---
>  ()
674c674
<  handle_compress();
---
>  )
674c674
<  handle_compress();
---
>  (
674c674
<  handle_compress();
---
>  
674c674
<  handle_compress();
---
>  handle_compress);
674c674
<  handle_compress();
---
>  handle_compress;
(90.9 %, 18661 bytes)
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
>  )(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int (BZ2_bzCompress)(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompress)(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int ()(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int )(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int (BZ2_bzCompress(bz_stream *strm, int action) {
676c676
< int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) {
(90.9 %, 18655 bytes)
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompress)(bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int )(bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int (bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompress)bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int )bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int BZ2_bzCompressbz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int ()(bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int ((bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int ()bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int (bz_stream *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int ()( *strm, int action) {
676c676
< int (BZ2_bzCompress)(bz_stream *strm, int action) {
---
> int (( *strm, int action) {
(90.9 %, 18653 bytes)
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int ( *strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int  *strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int (bz_stream strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int bz_stream strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int ( strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int  strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompressbz_stream *strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress *strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompressbz_stream strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompressbz_stream *, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress *, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompressbz_stream , int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress , int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( *strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( *, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( , int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( *strm int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( strm int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( * int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(  int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream strm, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream , int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream strm int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream  int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream strm,  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream ,  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream strm  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream   action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *, int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream * int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *,  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *, int ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream * int ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *,  ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *  ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm int action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm int ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm  ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm int action {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm  action {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm int  {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm   {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  action) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  action {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,   {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  action) 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  ) 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,  action 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm,   
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int ) {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int  {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int ) 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int  
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int ) {
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int  {
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int ) 
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int  
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action {
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action {
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action 
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action {
678c678
<   EState *s;
---
>   EState s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action 
678c678
<   EState *s;
---
>   EState s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action {
678c678
<   EState *s;
---
>    s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action 
678c678
<   EState *s;
---
>    s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>    *s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>   EState s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>    s;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>   EState *;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>    *;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>   EState ;
676c676
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm, int action) 
678c678
<   EState *s;
---
>    ;
678c678
<   EState *s;
---
>    *s;
678c678
<   EState *s;
---
>    s;
678c678
<   EState *s;
---
>    *;
678c678
<   EState *s;
---
>    ;
678c678
<   EState *s;
---
>    *s
678c678
<   EState *s;
---
>    s
678c678
<   EState *s;
---
>    *
678c678
<   EState *s;
---
>    
678c678
<   EState *s;
---
>   EState s;
678c678
<   EState *s;
---
>   EState ;
678c678
<   EState *s;
---
>   EState s
678c678
<   EState *s;
---
>   EState 
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState s;
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState ;
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState s
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState 
>    (strm == NULL)
678c678
<   EState *s;
---
>   EState *;
678c678
<   EState *s;
---
>   EState *
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>   if strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>   if strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>    strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>    strm == NULL)
678c678
<   EState *s;
---
>   EState *s
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    (strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    strm == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if ( == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    ( == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if  == NULL)
678,679c678,679
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>     == NULL)
679c679
<   if (strm == NULL)
---
>    (strm == NULL)
679c679
<   if (strm == NULL)
---
>    strm == NULL)
679c679
<   if (strm == NULL)
---
>    ( == NULL)
679c679
<   if (strm == NULL)
---
>     == NULL)
679c679
<   if (strm == NULL)
---
>    (strm  NULL)
679c679
<   if (strm == NULL)
---
>    strm  NULL)
679c679
<   if (strm == NULL)
---
>    (  NULL)
679c679
<   if (strm == NULL)
---
>      NULL)
679c679
<   if (strm == NULL)
---
>   if strm == NULL)
679c679
<   if (strm == NULL)
---
>   if  == NULL)
679c679
<   if (strm == NULL)
---
>   if strm  NULL)
679c679
<   if (strm == NULL)
---
>   if   NULL)
679c679
<   if (strm == NULL)
---
>   if strm == )
679c679
<   if (strm == NULL)
---
>   if  == )
679c679
<   if (strm == NULL)
---
>   if strm  )
679c679
<   if (strm == NULL)
---
>   if   )
679c679
<   if (strm == NULL)
---
>   if ( == NULL)
679c679
<   if (strm == NULL)
---
>   if (  NULL)
679c679
<   if (strm == NULL)
---
>   if ( == )
679c679
<   if (strm == NULL)
---
>   if (  )
679c679
<   if (strm == NULL)
---
>   if ( == NULL
679c679
<   if (strm == NULL)
---
>   if (  NULL
679c679
<   if (strm == NULL)
---
>   if ( == 
679c679
<   if (strm == NULL)
---
>   if (  
679c679
<   if (strm == NULL)
---
>   if (strm  NULL)
679c679
<   if (strm == NULL)
---
>   if (strm  )
(90.9 %, 18647 bytes)
679c679
<   if (  NULL)
---
>   if (  
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
679c679
<   if (  NULL)
---
>   if (  NULL
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
679,680c679,680
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
680c680
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
680c680
<     return BZ_PARAM_ERROR;
---
>      ;
(90.9 %, 18641 bytes)
680c680
<      BZ_PARAM_ERROR;
---
>      ;
680c680
<      BZ_PARAM_ERROR;
---
>      
(90.9 %, 18627 bytes)
680c680
<      ;
---
>      
680,681c680,681
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
680,681c680,681
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
680,681c680,681
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(90.9 %, 18626 bytes)
681c681
<   s = strm->state;
---
>    = strm->state;
681c681
<   s = strm->state;
---
>     strm->state;
681c681
<   s = strm->state;
---
>    = ->state;
681c681
<   s = strm->state;
---
>     ->state;
681c681
<   s = strm->state;
---
>    = strmstate;
681c681
<   s = strm->state;
---
>     strmstate;
681c681
<   s = strm->state;
---
>    = state;
681c681
<   s = strm->state;
---
>     state;
681c681
<   s = strm->state;
---
>   s  strm->state;
681c681
<   s = strm->state;
---
>   s  ->state;
(90.9 %, 18624 bytes)
681c681
<     strm->state;
---
>     state;
681c681
<     strm->state;
---
>     ->;
681c681
<     strm->state;
---
>     ;
681c681
<     strm->state;
---
>     ->state
681c681
<     strm->state;
---
>     state
681c681
<     strm->state;
---
>     ->
681c681
<     strm->state;
---
>     
(90.9 %, 18613 bytes)
681,682c681,682
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
681,682c681,682
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
681,682c681,682
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
681,682c681,682
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
681,682c681,682
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
682c682
<   if (s == NULL)
---
>    (s == NULL)
682c682
<   if (s == NULL)
---
>    s == NULL)
682c682
<   if (s == NULL)
---
>    ( == NULL)
682c682
<   if (s == NULL)
---
>     == NULL)
682c682
<   if (s == NULL)
---
>    (s  NULL)
682c682
<   if (s == NULL)
---
>    s  NULL)
682c682
<   if (s == NULL)
---
>    (  NULL)
682c682
<   if (s == NULL)
---
>      NULL)
682c682
<   if (s == NULL)
---
>   if s == NULL)
682c682
<   if (s == NULL)
---
>   if  == NULL)
682c682
<   if (s == NULL)
---
>   if s  NULL)
682c682
<   if (s == NULL)
---
>   if   NULL)
682c682
<   if (s == NULL)
---
>   if s == )
682c682
<   if (s == NULL)
---
>   if  == )
682c682
<   if (s == NULL)
---
>   if s  )
682c682
<   if (s == NULL)
---
>   if   )
682c682
<   if (s == NULL)
---
>   if ( == NULL)
682c682
<   if (s == NULL)
---
>   if (  NULL)
682c682
<   if (s == NULL)
---
>   if ( == )
682c682
<   if (s == NULL)
---
>   if (  )
682c682
<   if (s == NULL)
---
>   if ( == NULL
682c682
<   if (s == NULL)
---
>   if (  NULL
682c682
<   if (s == NULL)
---
>   if ( == 
682c682
<   if (s == NULL)
---
>   if (  
682c682
<   if (s == NULL)
---
>   if (s  NULL)
682c682
<   if (s == NULL)
---
>   if (s  )
(90.9 %, 18610 bytes)
682c682
<   if (  NULL)
---
>   if (  
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
682c682
<   if (  NULL)
---
>   if (  NULL
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
682,683c682,683
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
683c683
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
683c683
<     return BZ_PARAM_ERROR;
---
>      ;
(90.9 %, 18604 bytes)
683c683
<      BZ_PARAM_ERROR;
---
>      ;
683c683
<      BZ_PARAM_ERROR;
---
>      
(90.9 %, 18590 bytes)
683c683
<      ;
---
>      
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>    (&s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>   if &s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>    &s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>   if (s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>    (s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>   if s->strm != strm)
683,684c683,684
<      ;
<   if (&s->strm != strm)
---
>      
>    s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    &s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    (s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    s->strm != strm)
(90.9 %, 18589 bytes)
684c684
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    &s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    (s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    (&->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    &->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    (->strm != strm)
684c684
<   if (&s->strm != strm)
---
>    ->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if &s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if &->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if ->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if &sstrm != strm)
684c684
<   if (&s->strm != strm)
---
>   if sstrm != strm)
684c684
<   if (&s->strm != strm)
---
>   if &strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if (s->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if (->strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if (sstrm != strm)
684c684
<   if (&s->strm != strm)
---
>   if (strm != strm)
684c684
<   if (&s->strm != strm)
---
>   if (s-> != strm)
684c684
<   if (&s->strm != strm)
---
>   if (-> != strm)
684c684
<   if (&s->strm != strm)
---
>   if (s != strm)
(90.9 %, 18585 bytes)
684c684
<   if (strm != strm)
---
>   if (  )
684c684
<   if (strm != strm)
---
>   if ( != strm
684c684
<   if (strm != strm)
---
>   if (  strm
684c684
<   if (strm != strm)
---
>   if ( != 
684c684
<   if (strm != strm)
---
>   if (  
684c684
<   if (strm != strm)
---
>   if (strm  strm)
684c684
<   if (strm != strm)
---
>   if (strm  )
684c684
<   if (strm != strm)
---
>   if (strm  strm
684c684
<   if (strm != strm)
---
>   if (strm  
684,685c684,685
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  strm)
>      BZ_PARAM_ERROR;
684,685c684,685
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  )
>      BZ_PARAM_ERROR;
(90.9 %, 18579 bytes)
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR;
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return ;
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      ;
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return BZ_PARAM_ERROR
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return 
684,685c684,685
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      
685c685
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
685c685
<     return BZ_PARAM_ERROR;
---
>      ;
685c685
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
685c685
<     return BZ_PARAM_ERROR;
---
>      
(90.9 %, 18573 bytes)
685c685
<      BZ_PARAM_ERROR;
---
>      ;
685c685
<      BZ_PARAM_ERROR;
---
>      
(90.9 %, 18559 bytes)
685c685
<      ;
---
>      
685c685
<      ;
---
>      
687c687
< preswitch:
---
> :
685c685
<      ;
---
>      
687c687
< preswitch:
---
> preswitch
685c685,686
<      ;
---
>      
> 
687d687
< preswitch:
(90.9 %, 18558 bytes)
687c687
< preswitch:
---
> :
687c687
< preswitch:
---
> 
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> :
>    (s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> 
>    (s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> :
>   switch s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> 
>   switch s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> :
>    s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> 
>    s->mode)
687c687
< preswitch:
---
> preswitch
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> preswitch
>    (s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> preswitch
>   switch s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> preswitch
>    s->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> preswitch
>   switch (->mode)
687,688c687,688
< preswitch:
<   switch (s->mode)
---
> preswitch
>    (->mode)
(90.9 %, 18548 bytes)
688c688
<   switch (s->mode)
---
>    s->mode)
688c688
<   switch (s->mode)
---
>    (->mode)
688c688
<   switch (s->mode)
---
>    ->mode)
688c688
<   switch (s->mode)
---
>    (smode)
688c688
<   switch (s->mode)
---
>    smode)
688c688
<   switch (s->mode)
---
>    (mode)
688c688
<   switch (s->mode)
---
>    mode)
688c688
<   switch (s->mode)
---
>   switch s->mode)
688c688
<   switch (s->mode)
---
>   switch ->mode)
688c688
<   switch (s->mode)
---
>   switch smode)
688c688
<   switch (s->mode)
---
>   switch mode)
688c688
<   switch (s->mode)
---
>   switch s->)
688c688
<   switch (s->mode)
---
>   switch ->)
688c688
<   switch (s->mode)
---
>   switch s)
688c688
<   switch (s->mode)
---
>   switch )
688c688
<   switch (s->mode)
---
>   switch (->mode)
688c688
<   switch (s->mode)
---
>   switch (mode)
688c688
<   switch (s->mode)
---
>   switch (->)
688c688
<   switch (s->mode)
---
>   switch ()
688c688
<   switch (s->mode)
---
>   switch (->mode
688c688
<   switch (s->mode)
---
>   switch (mode
688c688
<   switch (s->mode)
---
>   switch (->
688c688
<   switch (s->mode)
---
>   switch (
688c688
<   switch (s->mode)
---
>   switch (smode)
688c688
<   switch (s->mode)
---
>   switch (s)
688c688
<   switch (s->mode)
---
>   switch (smode
688c688
<   switch (s->mode)
---
>   switch (s
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (smode)
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s)
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (smode
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s
>      BZ_OK;
688c688
<   switch (s->mode)
---
>   switch (s->)
688c688
<   switch (s->mode)
---
>   switch (s->
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->)
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->)
>     return ;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->
>     return ;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->)
>      ;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->
>      ;
688c688
<   switch (s->mode)
---
>   switch (s->mode
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>      BZ_OK;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>     return ;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>      ;
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>     return BZ_OK
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>      BZ_OK
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>     return 
688,689c688,689
<   switch (s->mode)
<     return BZ_OK;
---
>   switch (s->mode
>      
689c689
<     return BZ_OK;
---
>      BZ_OK;
689c689
<     return BZ_OK;
---
>      ;
(91.0 %, 18542 bytes)
689c689
<      BZ_OK;
---
>      ;
689c689
<      BZ_OK;
---
>      
689,690c689,690
<      BZ_OK;
< }
---
>      ;
> 
689,690c689,690
<      BZ_OK;
< }
---
>      
> 
689c689
<      BZ_OK;
---
>      ;
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
(91.0 %, 18537 bytes)
689c689
<      ;
---
>      
689,690c689,690
<      ;
< }
---
>      
> 
689c689
<      ;
---
>      
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
689,690c689
<      ;
< }
---
>      
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
689c689
<      ;
---
>      
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> int (BZ2_bzCompressEnd)(bz_stream *strm) {
689,690c689
<      ;
< }
---
>      
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
> int (BZ2_bzCompressEnd)(bz_stream *strm) {
689c689
<      ;
---
>      
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzCompressEnd)(bz_stream *strm) {
689,690c689
<      ;
< }
---
>      
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  (BZ2_bzCompressEnd)(bz_stream *strm) {
690c690
< }
---
> 
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
> int (BZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  (BZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
> int BZ_APIBZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  BZ_APIBZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
> int BZ2_bzCompressEnd)(bz_stream *strm) {
690d689
< }
692c691,692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
> 
>  BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
< int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ_APIBZ2_bzCompressEnd)(bz_stream *strm) {
(91.0 %, 18534 bytes)
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  ()(bz_stream *strm) {
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  )(bz_stream *strm) {
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzCompressEnd(bz_stream *strm) {
692c692
<  BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *strm) {
(91.0 %, 18528 bytes)
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEnd)(bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  )(bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEnd)bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  )bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  BZ2_bzCompressEndbz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  ()(bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  ((bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  ()bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (bz_stream *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  ()( *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  (( *strm) {
692c692
<  (BZ2_bzCompressEnd)(bz_stream *strm) {
---
>  () *strm) {
(91.0 %, 18526 bytes)
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  ( *strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>   *strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  (bz_stream strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  bz_stream strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  ( strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>   strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEndbz_stream *strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd *strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEndbz_stream strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEndbz_stream *) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd *) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEndbz_stream ) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd ) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( *strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( *) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( ) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( *strm {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( strm {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd( * {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(  {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream strm) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream ) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream strm {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream  {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream strm) 
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream ) 
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream strm 
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream  
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *) {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream * {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *) 
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream * 
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *) {
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream * {
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *) 
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream * 
>    *s;
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *strm {
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *strm 
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm {
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm 
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm {
>   EState s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm 
>   EState s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm {
>    s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm 
>    s;
692c692
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>    *s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>   EState s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>    s;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>   EState *;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>    *;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>   EState ;
692,693c692,693
<  BZ2_bzCompressEnd(bz_stream *strm) {
<   EState *s;
---
>  BZ2_bzCompressEnd(bz_stream *strm) 
>    ;
693c693
<   EState *s;
---
>    *s;
693c693
<   EState *s;
---
>    s;
693c693
<   EState *s;
---
>    *;
693c693
<   EState *s;
---
>    ;
693c693
<   EState *s;
---
>    *s
693c693
<   EState *s;
---
>    s
693c693
<   EState *s;
---
>    *
693c693
<   EState *s;
---
>    
693c693
<   EState *s;
---
>   EState s;
693c693
<   EState *s;
---
>   EState ;
693c693
<   EState *s;
---
>   EState s
693c693
<   EState *s;
---
>   EState 
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState s;
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState ;
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState s
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState 
>    (strm == NULL)
693c693
<   EState *s;
---
>   EState *;
693c693
<   EState *s;
---
>   EState *
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>   if strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>   if strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *;
>    strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *
>    strm == NULL)
693c693
<   EState *s;
---
>   EState *s
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    (strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    strm == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if ( == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>    ( == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>   if  == NULL)
693,694c693,694
<   EState *s;
<   if (strm == NULL)
---
>   EState *s
>     == NULL)
694c694
<   if (strm == NULL)
---
>    (strm == NULL)
694c694
<   if (strm == NULL)
---
>    strm == NULL)
694c694
<   if (strm == NULL)
---
>    ( == NULL)
694c694
<   if (strm == NULL)
---
>     == NULL)
694c694
<   if (strm == NULL)
---
>    (strm  NULL)
694c694
<   if (strm == NULL)
---
>    strm  NULL)
694c694
<   if (strm == NULL)
---
>    (  NULL)
694c694
<   if (strm == NULL)
---
>      NULL)
694c694
<   if (strm == NULL)
---
>   if strm == NULL)
694c694
<   if (strm == NULL)
---
>   if  == NULL)
694c694
<   if (strm == NULL)
---
>   if strm  NULL)
694c694
<   if (strm == NULL)
---
>   if   NULL)
694c694
<   if (strm == NULL)
---
>   if strm == )
694c694
<   if (strm == NULL)
---
>   if  == )
694c694
<   if (strm == NULL)
---
>   if strm  )
694c694
<   if (strm == NULL)
---
>   if   )
694c694
<   if (strm == NULL)
---
>   if ( == NULL)
694c694
<   if (strm == NULL)
---
>   if (  NULL)
694c694
<   if (strm == NULL)
---
>   if ( == )
694c694
<   if (strm == NULL)
---
>   if (  )
694c694
<   if (strm == NULL)
---
>   if ( == NULL
694c694
<   if (strm == NULL)
---
>   if (  NULL
694c694
<   if (strm == NULL)
---
>   if ( == 
694c694
<   if (strm == NULL)
---
>   if (  
694c694
<   if (strm == NULL)
---
>   if (strm  NULL)
694c694
<   if (strm == NULL)
---
>   if (strm  )
(91.0 %, 18520 bytes)
694c694
<   if (  NULL)
---
>   if (  
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
694c694
<   if (  NULL)
---
>   if (  NULL
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
694,695c694,695
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
695c695
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
695c695
<     return BZ_PARAM_ERROR;
---
>      ;
695c695
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
695c695
<     return BZ_PARAM_ERROR;
---
>      
(91.0 %, 18514 bytes)
695c695
<      BZ_PARAM_ERROR;
---
>      ;
695c695
<      BZ_PARAM_ERROR;
---
>      
(91.0 %, 18500 bytes)
695c695
<      ;
---
>      
695,696c695,696
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
695,696c695,696
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
695,696c695,696
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(91.0 %, 18499 bytes)
696c696
<   s = strm->state;
---
>    = strm->state;
696c696
<   s = strm->state;
---
>     strm->state;
696c696
<   s = strm->state;
---
>    = ->state;
696c696
<   s = strm->state;
---
>     ->state;
696c696
<   s = strm->state;
---
>    = strmstate;
696c696
<   s = strm->state;
---
>     strmstate;
696c696
<   s = strm->state;
---
>    = state;
696c696
<   s = strm->state;
---
>     state;
696c696
<   s = strm->state;
---
>   s  strm->state;
696c696
<   s = strm->state;
---
>   s  ->state;
(91.0 %, 18497 bytes)
696c696
<     strm->state;
---
>     state;
696c696
<     strm->state;
---
>     ->;
696c696
<     strm->state;
---
>     ;
696c696
<     strm->state;
---
>     ->state
696c696
<     strm->state;
---
>     state
696c696
<     strm->state;
---
>     ->
696c696
<     strm->state;
---
>     
(91.0 %, 18486 bytes)
696,697c696,697
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
696,697c696,697
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
696,697c696,697
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
696,697c696,697
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
696,697c696,697
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
697c697
<   if (s == NULL)
---
>    (s == NULL)
697c697
<   if (s == NULL)
---
>    s == NULL)
697c697
<   if (s == NULL)
---
>    ( == NULL)
697c697
<   if (s == NULL)
---
>     == NULL)
697c697
<   if (s == NULL)
---
>    (s  NULL)
697c697
<   if (s == NULL)
---
>    s  NULL)
697c697
<   if (s == NULL)
---
>    (  NULL)
697c697
<   if (s == NULL)
---
>      NULL)
697c697
<   if (s == NULL)
---
>   if s == NULL)
697c697
<   if (s == NULL)
---
>   if  == NULL)
697c697
<   if (s == NULL)
---
>   if s  NULL)
697c697
<   if (s == NULL)
---
>   if   NULL)
697c697
<   if (s == NULL)
---
>   if s == )
697c697
<   if (s == NULL)
---
>   if  == )
697c697
<   if (s == NULL)
---
>   if s  )
697c697
<   if (s == NULL)
---
>   if   )
697c697
<   if (s == NULL)
---
>   if ( == NULL)
697c697
<   if (s == NULL)
---
>   if (  NULL)
697c697
<   if (s == NULL)
---
>   if ( == )
697c697
<   if (s == NULL)
---
>   if (  )
697c697
<   if (s == NULL)
---
>   if ( == NULL
697c697
<   if (s == NULL)
---
>   if (  NULL
697c697
<   if (s == NULL)
---
>   if ( == 
697c697
<   if (s == NULL)
---
>   if (  
697c697
<   if (s == NULL)
---
>   if (s  NULL)
697c697
<   if (s == NULL)
---
>   if (s  )
(91.0 %, 18483 bytes)
697c697
<   if (  NULL)
---
>   if (  
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
697c697
<   if (  NULL)
---
>   if (  NULL
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
697,698c697,698
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
698c698
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
698c698
<     return BZ_PARAM_ERROR;
---
>      ;
(91.0 %, 18477 bytes)
698c698
<      BZ_PARAM_ERROR;
---
>      ;
698c698
<      BZ_PARAM_ERROR;
---
>      
(91.0 %, 18463 bytes)
698c698
<      ;
---
>      
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>    (&s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>   if &s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>    &s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>   if (s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>    (s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>   if s->strm != strm)
698,699c698,699
<      ;
<   if (&s->strm != strm)
---
>      
>    s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    &s->strm != strm)
(91.0 %, 18462 bytes)
699c699
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    &s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    (s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    (&->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    &->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    (->strm != strm)
699c699
<   if (&s->strm != strm)
---
>    ->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if &s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if &->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if ->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if &sstrm != strm)
699c699
<   if (&s->strm != strm)
---
>   if sstrm != strm)
699c699
<   if (&s->strm != strm)
---
>   if &strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if (s->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if (->strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if (sstrm != strm)
699c699
<   if (&s->strm != strm)
---
>   if (strm != strm)
699c699
<   if (&s->strm != strm)
---
>   if (s-> != strm)
699c699
<   if (&s->strm != strm)
---
>   if (-> != strm)
699c699
<   if (&s->strm != strm)
---
>   if (s != strm)
(91.0 %, 18458 bytes)
699c699
<   if (strm != strm)
---
>   if (  )
699c699
<   if (strm != strm)
---
>   if ( != strm
699c699
<   if (strm != strm)
---
>   if (  strm
699c699
<   if (strm != strm)
---
>   if ( != 
699c699
<   if (strm != strm)
---
>   if (  
699c699
<   if (strm != strm)
---
>   if (strm  strm)
699c699
<   if (strm != strm)
---
>   if (strm  )
699c699
<   if (strm != strm)
---
>   if (strm  strm
699c699
<   if (strm != strm)
---
>   if (strm  
699,700c699,700
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  strm)
>      BZ_PARAM_ERROR;
699,700c699,700
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  )
>      BZ_PARAM_ERROR;
(91.0 %, 18452 bytes)
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR;
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return ;
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      ;
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return BZ_PARAM_ERROR
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return 
699,700c699,700
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      
700c700
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
700c700
<     return BZ_PARAM_ERROR;
---
>      ;
700c700
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
700c700
<     return BZ_PARAM_ERROR;
---
>      
(91.0 %, 18446 bytes)
700c700
<      BZ_PARAM_ERROR;
---
>      ;
700c700
<      BZ_PARAM_ERROR;
---
>      
700c700
<      BZ_PARAM_ERROR;
---
>      ;
702c702
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
(91.0 %, 18432 bytes)
700c700
<      ;
---
>      
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>   if s->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>    s->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>   if (->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>    (->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>   if ->arr1 != NULL)
700c700
<      ;
---
>      
702c702
<   if (s->arr1 != NULL)
---
>    ->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    s->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    (->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    ->arr1 != NULL)
(91.0 %, 18431 bytes)
702c702
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    s->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    (->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    ->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    (sarr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    sarr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    (arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>    arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if s->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if ->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if sarr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if s-> != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if -> != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if s != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if  != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (->arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (arr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (-> != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if ( != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (->arr1  NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (arr1  NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (->  NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (  NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (sarr1 != NULL)
702c702
<   if (s->arr1 != NULL)
---
>   if (s != NULL)
(91.0 %, 18426 bytes)
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  )
>     (s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  NULL
>     (s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  
>     (s->arr1);
702c702
<   if (arr1  NULL)
---
>   if (arr1  )
702c702
<   if (arr1  NULL)
---
>   if (arr1  
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     (s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     (s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     BZFREEs->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     BZFREEs->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     s->arr1);
702c702
<   if (arr1  NULL)
---
>   if (arr1  NULL
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     (s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREEs->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     s->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREE(->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     (->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREE->arr1);
702,703c702,703
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     ->arr1);
703c703
<     BZFREE(s->arr1);
---
>     (s->arr1);
703c703
<     BZFREE(s->arr1);
---
>     s->arr1);
703c703
<     BZFREE(s->arr1);
---
>     (->arr1);
703c703
<     BZFREE(s->arr1);
---
>     ->arr1);
703c703
<     BZFREE(s->arr1);
---
>     (sarr1);
703c703
<     BZFREE(s->arr1);
---
>     sarr1);
703c703
<     BZFREE(s->arr1);
---
>     (arr1);
(91.0 %, 18420 bytes)
703c703
<     (s->arr1);
---
>     s->arr1);
703c703
<     (s->arr1);
---
>     ->arr1);
703c703
<     (s->arr1);
---
>     sarr1);
703c703
<     (s->arr1);
---
>     arr1);
703c703
<     (s->arr1);
---
>     s->);
703c703
<     (s->arr1);
---
>     ->);
703c703
<     (s->arr1);
---
>     s);
703c703
<     (s->arr1);
---
>     );
703c703
<     (s->arr1);
---
>     (->arr1);
703c703
<     (s->arr1);
---
>     (arr1);
703c703
<     (s->arr1);
---
>     (->);
703c703
<     (s->arr1);
---
>     ();
703c703
<     (s->arr1);
---
>     (->arr1;
703c703
<     (s->arr1);
---
>     (arr1;
703c703
<     (s->arr1);
---
>     (->;
703c703
<     (s->arr1);
---
>     (;
703c703
<     (s->arr1);
---
>     (sarr1);
703c703
<     (s->arr1);
---
>     (s);
(91.0 %, 18417 bytes)
703c703
<     (arr1);
---
>     (;
703c703
<     (arr1);
---
>     ()
703c703
<     (arr1);
---
>     (
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     ();
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (;
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     ()
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (
>    (s->arr2 != NULL)
703c703
<     (arr1);
---
>     (arr1;
703c703
<     (arr1);
---
>     (arr1
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1;
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1;
>   if s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1
>   if s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1;
>    s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1
>    s->arr2 != NULL)
703c703
<     (arr1);
---
>     (arr1)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>    (s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>   if s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>    s->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>   if (->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>    (->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>   if ->arr2 != NULL)
703,704c703,704
<     (arr1);
<   if (s->arr2 != NULL)
---
>     (arr1)
>    ->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    (s->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    s->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    (->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    ->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    (sarr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    sarr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    (arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>    arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if s->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if ->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if sarr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if s-> != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if -> != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if s != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if  != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (->arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (arr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (-> != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if ( != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (->arr2  NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (arr2  NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (->  NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (  NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (sarr2 != NULL)
704c704
<   if (s->arr2 != NULL)
---
>   if (s != NULL)
(91.0 %, 18412 bytes)
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (  )
>     (s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (  NULL
>     (s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (  
>     (s->arr2);
704c704
<   if (arr2  NULL)
---
>   if (arr2  )
704c704
<   if (arr2  NULL)
---
>   if (arr2  
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  )
>     (s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  
>     (s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  )
>     BZFREEs->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  
>     BZFREEs->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  )
>     s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  
>     s->arr2);
704c704
<   if (arr2  NULL)
---
>   if (arr2  NULL
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     (s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     BZFREEs->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     s->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     BZFREE(->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     (->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     BZFREE->arr2);
704,705c704,705
<   if (arr2  NULL)
<     BZFREE(s->arr2);
---
>   if (arr2  NULL
>     ->arr2);
705c705
<     BZFREE(s->arr2);
---
>     (s->arr2);
705c705
<     BZFREE(s->arr2);
---
>     s->arr2);
705c705
<     BZFREE(s->arr2);
---
>     (->arr2);
705c705
<     BZFREE(s->arr2);
---
>     ->arr2);
705c705
<     BZFREE(s->arr2);
---
>     (sarr2);
705c705
<     BZFREE(s->arr2);
---
>     sarr2);
705c705
<     BZFREE(s->arr2);
---
>     (arr2);
(91.0 %, 18406 bytes)
705c705
<     (s->arr2);
---
>     s->arr2);
705c705
<     (s->arr2);
---
>     ->arr2);
705c705
<     (s->arr2);
---
>     sarr2);
705c705
<     (s->arr2);
---
>     arr2);
705c705
<     (s->arr2);
---
>     s->);
705c705
<     (s->arr2);
---
>     ->);
705c705
<     (s->arr2);
---
>     s);
705c705
<     (s->arr2);
---
>     );
705c705
<     (s->arr2);
---
>     (->arr2);
705c705
<     (s->arr2);
---
>     (arr2);
705c705
<     (s->arr2);
---
>     (->);
705c705
<     (s->arr2);
---
>     ();
705c705
<     (s->arr2);
---
>     (->arr2;
705c705
<     (s->arr2);
---
>     (arr2;
705c705
<     (s->arr2);
---
>     (->;
705c705
<     (s->arr2);
---
>     (;
705c705
<     (s->arr2);
---
>     (sarr2);
705c705
<     (s->arr2);
---
>     (s);
(91.0 %, 18403 bytes)
705c705
<     (arr2);
---
>     (;
705c705
<     (arr2);
---
>     ()
705c705
<     (arr2);
---
>     (
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     ();
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (;
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     ()
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (
>    (s->ftab != NULL)
705c705
<     (arr2);
---
>     (arr2;
705c705
<     (arr2);
---
>     (arr2
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2;
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2;
>   if s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2
>   if s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2;
>    s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2
>    s->ftab != NULL)
705c705
<     (arr2);
---
>     (arr2)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>    (s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>   if s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>    s->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>   if (->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>    (->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>   if ->ftab != NULL)
705,706c705,706
<     (arr2);
<   if (s->ftab != NULL)
---
>     (arr2)
>    ->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    (s->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    s->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    (->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    ->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    (sftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    sftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    (ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>    ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if s->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if ->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if sftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if s-> != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if -> != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if s != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if  != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (->ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (ftab != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (-> != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if ( != NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (->ftab  NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (ftab  NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (->  NULL)
706c706
<   if (s->ftab != NULL)
---
>   if (  NULL)
(91.0 %, 18398 bytes)
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (  )
>     (s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (  NULL
>     (s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (  
>     (s->ftab);
706c706
<   if (ftab  NULL)
---
>   if (ftab  )
706c706
<   if (ftab  NULL)
---
>   if (ftab  
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  )
>     (s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  
>     (s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  )
>     BZFREEs->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  
>     BZFREEs->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  )
>     s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  
>     s->ftab);
706c706
<   if (ftab  NULL)
---
>   if (ftab  NULL
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     (s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     BZFREEs->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     s->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     BZFREE(->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     (->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     BZFREE->ftab);
706,707c706,707
<   if (ftab  NULL)
<     BZFREE(s->ftab);
---
>   if (ftab  NULL
>     ->ftab);
707c707
<     BZFREE(s->ftab);
---
>     (s->ftab);
707c707
<     BZFREE(s->ftab);
---
>     s->ftab);
707c707
<     BZFREE(s->ftab);
---
>     (->ftab);
707c707
<     BZFREE(s->ftab);
---
>     ->ftab);
707c707
<     BZFREE(s->ftab);
---
>     (sftab);
707c707
<     BZFREE(s->ftab);
---
>     sftab);
707c707
<     BZFREE(s->ftab);
---
>     (ftab);
(91.0 %, 18392 bytes)
707c707
<     (s->ftab);
---
>     s->ftab);
707c707
<     (s->ftab);
---
>     ->ftab);
707c707
<     (s->ftab);
---
>     sftab);
707c707
<     (s->ftab);
---
>     ftab);
707c707
<     (s->ftab);
---
>     s->);
707c707
<     (s->ftab);
---
>     ->);
707c707
<     (s->ftab);
---
>     s);
707c707
<     (s->ftab);
---
>     );
707c707
<     (s->ftab);
---
>     (->ftab);
707c707
<     (s->ftab);
---
>     (ftab);
707c707
<     (s->ftab);
---
>     (->);
707c707
<     (s->ftab);
---
>     ();
707c707
<     (s->ftab);
---
>     (->ftab;
707c707
<     (s->ftab);
---
>     (ftab;
707c707
<     (s->ftab);
---
>     (->;
707c707
<     (s->ftab);
---
>     (;
707c707
<     (s->ftab);
---
>     (sftab);
707c707
<     (s->ftab);
---
>     (s);
(91.0 %, 18389 bytes)
707c707
<     (ftab);
---
>     (;
707c707
<     (ftab);
---
>     ()
707c707
<     (ftab);
---
>     (
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     ();
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (;
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     ()
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (
>   (strm->state);
707c707
<     (ftab);
---
>     (ftab;
707c707
<     (ftab);
---
>     (ftab
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab;
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab;
>   BZFREEstrm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab
>   BZFREEstrm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab;
>   strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab
>   strm->state);
707c707
<     (ftab);
---
>     (ftab)
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   (strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   BZFREEstrm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   strm->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   BZFREE(->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   (->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   BZFREE->state);
707,708c707,708
<     (ftab);
<   BZFREE(strm->state);
---
>     (ftab)
>   ->state);
708c708
<   BZFREE(strm->state);
---
>   (strm->state);
(91.0 %, 18382 bytes)
708c708
<   (strm->state);
---
>   ->state);
708c708
<   (strm->state);
---
>   strmstate);
708c708
<   (strm->state);
---
>   state);
708c708
<   (strm->state);
---
>   strm->);
708c708
<   (strm->state);
---
>   ->);
708c708
<   (strm->state);
---
>   strm);
708c708
<   (strm->state);
---
>   );
708c708
<   (strm->state);
---
>   (->state);
708c708
<   (strm->state);
---
>   (state);
708c708
<   (strm->state);
---
>   (->);
708c708
<   (strm->state);
---
>   ();
708c708
<   (strm->state);
---
>   (->state;
708c708
<   (strm->state);
---
>   (state;
708c708
<   (strm->state);
---
>   (->;
708c708
<   (strm->state);
---
>   (;
708c708
<   (strm->state);
---
>   (strmstate);
708c708
<   (strm->state);
---
>   (strm);
(91.0 %, 18371 bytes)
708c708
<   ();
---
>   (
710c710
<   strm->state = NULL;
---
>   ->state = NULL;
708c708
<   ();
---
>   (;
710c710
<   strm->state = NULL;
---
>   strmstate = NULL;
708c708
<   ();
---
>   (
710c710
<   strm->state = NULL;
---
>   strmstate = NULL;
708c708
<   ();
---
>   (;
710c710
<   strm->state = NULL;
---
>   state = NULL;
708c708
<   ();
---
>   (
710c710
<   strm->state = NULL;
---
>   state = NULL;
708c708
<   ();
---
>   ()
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   ->state = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   strmstate = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   state = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   strm-> = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   -> = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>   strm = NULL;
708c708
<   ();
---
>   ()
710c710
<   strm->state = NULL;
---
>    = NULL;
710c710
<   strm->state = NULL;
---
>   ->state = NULL;
710c710
<   strm->state = NULL;
---
>   state = NULL;
710c710
<   strm->state = NULL;
---
>   -> = NULL;
710c710
<   strm->state = NULL;
---
>    = NULL;
710c710
<   strm->state = NULL;
---
>   ->state  NULL;
710c710
<   strm->state = NULL;
---
>   state  NULL;
710c710
<   strm->state = NULL;
---
>   ->  NULL;
710c710
<   strm->state = NULL;
---
>     NULL;
(91.0 %, 18364 bytes)
710c710
<   state  NULL;
---
>     ;
712c712
<   return BZ_OK;
---
>    BZ_OK;
710c710
<   state  NULL;
---
>     NULL
712c712
<   return BZ_OK;
---
>    BZ_OK;
710c710
<   state  NULL;
---
>     
712c712
<   return BZ_OK;
---
>    BZ_OK;
(91.0 %, 18349 bytes)
710c710,712
<     ;
---
>     
> 
>    ;
712,713d713
<    BZ_OK;
< }
710c710,712
<     ;
---
>     
> 
>    BZ_OK
712,713d713
<    BZ_OK;
< }
710c710,712
<     ;
---
>     
> 
>    
712,713d713
<    BZ_OK;
< }
712c712
<    BZ_OK;
---
>    ;
712c712
<    BZ_OK;
---
>    
(91.0 %, 18344 bytes)
712c712
<    ;
---
>    
712,713c712,713
<    ;
< }
---
>    
> 
712c712
<    ;
---
>    
715c715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
712,713c712
<    ;
< }
---
>    
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
>  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
(91.0 %, 18343 bytes)
713c713
< }
---
> 
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
>  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
> int (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
>  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
> int BZ_APIBZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
>  BZ_APIBZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
> int BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
713d712
< }
715c714,715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
> 
>  BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
715c715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
715c715
< int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
(91.1 %, 18340 bytes)
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  ()(bz_stream *strm, int verbosity, int small) {
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  )(bz_stream *strm, int verbosity, int small) {
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  (BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
715c715
<  BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
(91.1 %, 18334 bytes)
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  )(bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  (bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit)bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  )bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInitbz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  ()(bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  ((bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  ()bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  (bz_stream *strm, int verbosity, int small) {
715c715
<  (BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
---
>  ()( *strm, int verbosity, int small) {
(91.1 %, 18332 bytes)
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  ( *strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>   *strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  (bz_stream strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  bz_stream strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  ( strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>   strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInitbz_stream *strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit *strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInitbz_stream strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInitbz_stream *, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit *, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInitbz_stream , int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit , int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( *strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( *, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( , int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( *strm int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( strm int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( * int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(  int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream strm, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream , int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream strm int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream  int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream strm,  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream ,  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream strm  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream   verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *, int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream * int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *,  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *, int , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream * int , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *,  , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *  , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm int verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm int , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm  , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm int verbosity int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm  verbosity int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm int  int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm   int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  verbosity, int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  verbosity int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,   int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  verbosity,  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  ,  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  verbosity  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,    small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int , int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int  int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int ,  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int   small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int , int ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int  int ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int ,  ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int   ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity int small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity int ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity  ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity int small {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity  small {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity int  {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity   {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  small) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  small {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,   {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  small) 
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  ) 
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,  small 
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity,   
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int ) {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int  {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int ) 
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int  
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int ) {
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int  {
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int ) 
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int  
>    *s;
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small {
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small 
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small {
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small 
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small {
>   DState s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small 
>   DState s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small {
>    s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small 
>    s;
715c715
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>    *s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>   DState s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>    s;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>   DState *;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>    *;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>   DState ;
715,716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
<   DState *s;
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) 
>    ;
716c716
<   DState *s;
---
>    *s;
716c716
<   DState *s;
---
>    s;
716c716
<   DState *s;
---
>    *;
716c716
<   DState *s;
---
>    ;
716c716
<   DState *s;
---
>    *s
716c716
<   DState *s;
---
>    s
716c716
<   DState *s;
---
>    *
716c716
<   DState *s;
---
>    
716c716
<   DState *s;
---
>   DState s;
716c716
<   DState *s;
---
>   DState ;
716c716
<   DState *s;
---
>   DState s
716c716
<   DState *s;
---
>   DState 
716c716
<   DState *s;
---
>   DState s;
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState ;
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState s
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState 
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState *;
716c716
<   DState *s;
---
>   DState *
716c716
<   DState *s;
---
>   DState *;
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState *
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState *;
718c718
<   if (!0)
---
>   if !0)
716c716
<   DState *s;
---
>   DState *
718c718
<   if (!0)
---
>   if !0)
716c716
<   DState *s;
---
>   DState *;
718c718
<   if (!0)
---
>    !0)
716c716
<   DState *s;
---
>   DState *
718c718
<   if (!0)
---
>    !0)
716c716
<   DState *s;
---
>   DState *s
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>    (!0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>   if !0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>    !0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>   if (0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>    (0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>   if 0)
716c716
<   DState *s;
---
>   DState *s
718c718
<   if (!0)
---
>    0)
718c718
<   if (!0)
---
>    (!0)
718c718
<   if (!0)
---
>    !0)
718c718
<   if (!0)
---
>    (0)
718c718
<   if (!0)
---
>    0)
718c718
<   if (!0)
---
>    (!)
718c718
<   if (!0)
---
>    !)
718c718
<   if (!0)
---
>    ()
718c718
<   if (!0)
---
>    )
718c718
<   if (!0)
---
>   if !0)
718c718
<   if (!0)
---
>   if 0)
718c718
<   if (!0)
---
>   if !)
718c718
<   if (!0)
---
>   if )
718c718
<   if (!0)
---
>   if !0
718c718
<   if (!0)
---
>   if 0
718c718
<   if (!0)
---
>   if !
718c718
<   if (!0)
---
>   if 
718c718
<   if (!0)
---
>   if (0)
718c718
<   if (!0)
---
>   if ()
718c718
<   if (!0)
---
>   if (0
718c718
<   if (!0)
---
>   if (
718,719c718,719
<   if (!0)
<     return BZ_CONFIG_ERROR;
---
>   if (0)
>      BZ_CONFIG_ERROR;
(91.1 %, 18331 bytes)
718c718
<   if (0)
---
>   if ()
718c718
<   if (0)
---
>   if (
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>      BZ_CONFIG_ERROR;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>      BZ_CONFIG_ERROR;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>     return ;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>     return ;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if ()
>      ;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (
>      ;
718c718
<   if (0)
---
>   if (0
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      BZ_CONFIG_ERROR;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return ;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      ;
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return BZ_CONFIG_ERROR
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      BZ_CONFIG_ERROR
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>     return 
718,719c718,719
<   if (0)
<     return BZ_CONFIG_ERROR;
---
>   if (0
>      
719c719
<     return BZ_CONFIG_ERROR;
---
>      BZ_CONFIG_ERROR;
719c719
<     return BZ_CONFIG_ERROR;
---
>      ;
719c719
<     return BZ_CONFIG_ERROR;
---
>      BZ_CONFIG_ERROR
719c719
<     return BZ_CONFIG_ERROR;
---
>      
(91.1 %, 18325 bytes)
719c719
<      BZ_CONFIG_ERROR;
---
>      ;
719c719
<      BZ_CONFIG_ERROR;
---
>      
719c719
<      BZ_CONFIG_ERROR;
---
>      ;
721c721
<   if (strm == NULL)
---
>    (strm == NULL)
719c719
<      BZ_CONFIG_ERROR;
---
>      
721c721
<   if (strm == NULL)
---
>    (strm == NULL)
719c719
<      BZ_CONFIG_ERROR;
---
>      ;
721c721
<   if (strm == NULL)
---
>   if strm == NULL)
719c719
<      BZ_CONFIG_ERROR;
---
>      
721c721
<   if (strm == NULL)
---
>   if strm == NULL)
719c719
<      BZ_CONFIG_ERROR;
---
>      ;
721c721
<   if (strm == NULL)
---
>    strm == NULL)
(91.1 %, 18310 bytes)
719c719
<      ;
---
>      
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>    (strm == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>   if strm == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>    strm == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>   if ( == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>    ( == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>   if  == NULL)
719c719
<      ;
---
>      
721c721
<   if (strm == NULL)
---
>     == NULL)
721c721
<   if (strm == NULL)
---
>    (strm == NULL)
721c721
<   if (strm == NULL)
---
>    strm == NULL)
721c721
<   if (strm == NULL)
---
>    ( == NULL)
(91.1 %, 18309 bytes)
721c721
<   if (strm == NULL)
---
>    (strm == NULL)
721c721
<   if (strm == NULL)
---
>    strm == NULL)
721c721
<   if (strm == NULL)
---
>    ( == NULL)
721c721
<   if (strm == NULL)
---
>     == NULL)
721c721
<   if (strm == NULL)
---
>    (strm  NULL)
721c721
<   if (strm == NULL)
---
>    strm  NULL)
721c721
<   if (strm == NULL)
---
>    (  NULL)
721c721
<   if (strm == NULL)
---
>      NULL)
721c721
<   if (strm == NULL)
---
>   if strm == NULL)
721c721
<   if (strm == NULL)
---
>   if  == NULL)
721c721
<   if (strm == NULL)
---
>   if strm  NULL)
721c721
<   if (strm == NULL)
---
>   if   NULL)
721c721
<   if (strm == NULL)
---
>   if strm == )
721c721
<   if (strm == NULL)
---
>   if  == )
721c721
<   if (strm == NULL)
---
>   if strm  )
721c721
<   if (strm == NULL)
---
>   if   )
721c721
<   if (strm == NULL)
---
>   if ( == NULL)
721c721
<   if (strm == NULL)
---
>   if (  NULL)
721c721
<   if (strm == NULL)
---
>   if ( == )
721c721
<   if (strm == NULL)
---
>   if (  )
721c721
<   if (strm == NULL)
---
>   if ( == NULL
721c721
<   if (strm == NULL)
---
>   if (  NULL
721c721
<   if (strm == NULL)
---
>   if ( == 
721c721
<   if (strm == NULL)
---
>   if (  
721c721
<   if (strm == NULL)
---
>   if (strm  NULL)
721c721
<   if (strm == NULL)
---
>   if (strm  )
(91.1 %, 18303 bytes)
721c721
<   if (  NULL)
---
>   if (  
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
721c721
<   if (  NULL)
---
>   if (  NULL
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
721,722c721,722
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
722c722
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
722c722
<     return BZ_PARAM_ERROR;
---
>      ;
(91.1 %, 18297 bytes)
722c722
<      BZ_PARAM_ERROR;
---
>      ;
722c722
<      BZ_PARAM_ERROR;
---
>      
722,723c722,723
<      BZ_PARAM_ERROR;
<   if (small != 0 && small != 1)
---
>      ;
>    (small != 0 && small != 1)
(91.1 %, 18283 bytes)
722c722
<      ;
---
>      
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>    (small != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>   if small != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>    small != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>   if ( != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>    ( != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>   if  != 0 && small != 1)
722,723c722,723
<      ;
<   if (small != 0 && small != 1)
---
>      
>     != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    (small != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    small != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    ( != 0 && small != 1)
(91.1 %, 18282 bytes)
723c723
<   if (small != 0 && small != 1)
---
>    (small != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    small != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    ( != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>     != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    (small  0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    small  0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>    (  0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>      0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if small != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if  != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if small  0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if   0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if small !=  && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if  !=  && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if small   && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if    && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if ( != 0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if (  0 && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if ( !=  && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if (   && small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if ( != 0  small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if (  0  small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if ( !=   small != 1)
723c723
<   if (small != 0 && small != 1)
---
>   if (    small != 1)
(91.1 %, 18275 bytes)
723c723
<   if (  0 && small != 1)
---
>   if (    small != 1)
723c723
<   if (  0 && small != 1)
---
>   if (   &&  != 1)
723c723
<   if (  0 && small != 1)
---
>   if (     != 1)
723c723
<   if (  0 && small != 1)
---
>   if (   && small  1)
723c723
<   if (  0 && small != 1)
---
>   if (    small  1)
723c723
<   if (  0 && small != 1)
---
>   if (   &&   1)
723c723
<   if (  0 && small != 1)
---
>   if (      1)
(91.1 %, 18272 bytes)
723c723
<   if (    small != 1)
---
>   if (      1)
723c723
<   if (    small != 1)
---
>   if (     != )
723c723
<   if (    small != 1)
---
>   if (      )
723c723
<   if (    small != 1)
---
>   if (     != 1
723c723
<   if (    small != 1)
---
>   if (      1
723c723
<   if (    small != 1)
---
>   if (     != 
723c723
<   if (    small != 1)
---
>   if (      
723c723
<   if (    small != 1)
---
>   if (    small  1)
723c723
<   if (    small != 1)
---
>   if (    small  )
(91.1 %, 18265 bytes)
723c723
<   if (      1)
---
>   if (      
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>      BZ_PARAM_ERROR;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      
>      BZ_PARAM_ERROR;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>     return ;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      
>     return ;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>      ;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      
>      ;
723c723
<   if (      1)
---
>   if (      1
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>      BZ_PARAM_ERROR;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>     return ;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>      ;
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>     return BZ_PARAM_ERROR
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>      BZ_PARAM_ERROR
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>     return 
723,724c723,724
<   if (      1)
<     return BZ_PARAM_ERROR;
---
>   if (      1
>      
724c724
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
724c724
<     return BZ_PARAM_ERROR;
---
>      ;
724c724
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(91.1 %, 18259 bytes)
724c724
<      BZ_PARAM_ERROR;
---
>      ;
724c724
<      BZ_PARAM_ERROR;
---
>      
724,725c724,725
<      BZ_PARAM_ERROR;
<   if (verbosity < 0 || verbosity > 4)
---
>      ;
>    (verbosity < 0 || verbosity > 4)
(91.1 %, 18245 bytes)
724c724
<      ;
---
>      
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>    (verbosity < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>   if verbosity < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>    verbosity < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>   if ( < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>    ( < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>   if  < 0 || verbosity > 4)
724,725c724,725
<      ;
<   if (verbosity < 0 || verbosity > 4)
---
>      
>     < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    (verbosity < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    verbosity < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    ( < 0 || verbosity > 4)
(91.1 %, 18244 bytes)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    (verbosity < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    verbosity < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    ( < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>     < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    (verbosity  0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    verbosity  0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>    (  0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>      0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if verbosity < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if  < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if verbosity  0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if   0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if verbosity <  || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if  <  || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if verbosity   || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if    || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if ( < 0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if (  0 || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if ( <  || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if (   || verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if ( < 0  verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if (  0  verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if ( <   verbosity > 4)
725c725
<   if (verbosity < 0 || verbosity > 4)
---
>   if (    verbosity > 4)
(91.1 %, 18234 bytes)
725c725
<   if (  0 || verbosity > 4)
---
>   if (    verbosity > 4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (   ||  > 4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (     > 4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (   || verbosity  4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (    verbosity  4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (   ||   4)
725c725
<   if (  0 || verbosity > 4)
---
>   if (      4)
(91.1 %, 18231 bytes)
725c725
<   if (    verbosity > 4)
---
>   if (      4)
725c725
<   if (    verbosity > 4)
---
>   if (     > )
725c725
<   if (    verbosity > 4)
---
>   if (      )
725c725
<   if (    verbosity > 4)
---
>   if (     > 4
725c725
<   if (    verbosity > 4)
---
>   if (      4
725c725
<   if (    verbosity > 4)
---
>   if (     > 
725c725
<   if (    verbosity > 4)
---
>   if (      
725c725
<   if (    verbosity > 4)
---
>   if (    verbosity  4)
725c725
<   if (    verbosity > 4)
---
>   if (    verbosity  )
(91.1 %, 18221 bytes)
725c725
<   if (      4)
---
>   if (      
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>      BZ_PARAM_ERROR;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      
>      BZ_PARAM_ERROR;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>     return ;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      
>     return ;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      )
>      ;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      
>      ;
725c725
<   if (      4)
---
>   if (      4
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>      BZ_PARAM_ERROR;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>     return ;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>      ;
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>     return BZ_PARAM_ERROR
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>      BZ_PARAM_ERROR
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>     return 
725,726c725,726
<   if (      4)
<     return BZ_PARAM_ERROR;
---
>   if (      4
>      
726c726
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
726c726
<     return BZ_PARAM_ERROR;
---
>      ;
(91.1 %, 18215 bytes)
726c726
<      BZ_PARAM_ERROR;
---
>      ;
726c726
<      BZ_PARAM_ERROR;
---
>      
(91.1 %, 18201 bytes)
726c726
<      ;
---
>      
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>    (strm->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>   if ->bzalloc == NULL)
726c726
<      ;
---
>      
728c728
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    (strm->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
(91.1 %, 18200 bytes)
728c728
<   if (strm->bzalloc == NULL)
---
>    (strm->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    (strmbzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    strmbzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    (bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>    bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if ->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if strmbzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if strm-> == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if -> == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if strm == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if  == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (-> == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if ( == NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc  NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc  NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (->  NULL)
728c728
<   if (strm->bzalloc == NULL)
---
>   if (  NULL)
(91.1 %, 18192 bytes)
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  )
>     ->bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  NULL
>     ->bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  
>     ->bzalloc = default_bzalloc;
728c728
<   if (bzalloc  NULL)
---
>   if (bzalloc  )
728c728
<   if (bzalloc  NULL)
---
>   if (bzalloc  
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     ->bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     ->bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     strmbzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     strmbzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     bzalloc = default_bzalloc;
728c728
<   if (bzalloc  NULL)
---
>   if (bzalloc  NULL
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     ->bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strmbzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     bzalloc = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm-> = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     -> = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm = default_bzalloc;
728,729c728,729
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>      = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     -> = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>      = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc  default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc  default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     ->  default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>       default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     strmbzalloc = default_bzalloc;
729c729
<     strm->bzalloc = default_bzalloc;
---
>     strm = default_bzalloc;
(91.1 %, 18178 bytes)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       
>    strm->bzfree == NULL)
729c729
<       default_bzalloc;
---
>       default_bzalloc
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (strm->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if strm->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    strm->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if (->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if ->bzfree == NULL)
729,730c729,730
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    ->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    (strm->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    strm->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    (->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    ->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    (strmbzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    strmbzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    (bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>    bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if ->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if strmbzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if strm-> == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if -> == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if strm == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if  == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (->bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (bzfree == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (-> == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if ( == NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (->bzfree  NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (bzfree  NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (->  NULL)
730c730
<   if (strm->bzfree == NULL)
---
>   if (  NULL)
(91.1 %, 18170 bytes)
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  )
>     ->bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  NULL
>     ->bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  
>     ->bzfree = default_bzfree;
730c730
<   if (bzfree  NULL)
---
>   if (bzfree  )
730c730
<   if (bzfree  NULL)
---
>   if (bzfree  
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     ->bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     ->bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     strmbzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     strmbzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     bzfree = default_bzfree;
730c730
<   if (bzfree  NULL)
---
>   if (bzfree  NULL
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     ->bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strmbzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     bzfree = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm-> = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     -> = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm = default_bzfree;
730,731c730,731
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>      = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     ->bzfree = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     bzfree = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     -> = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>      = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     ->bzfree  default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     bzfree  default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     ->  default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>       default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     strmbzfree = default_bzfree;
731c731
<     strm->bzfree = default_bzfree;
---
>     strm = default_bzfree;
(91.1 %, 18157 bytes)
731c731
<       default_bzfree;
---
>       
733c733
<   s = BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>    = BZALLOC(sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>   s  BZALLOC(sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>   s = (sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>    = (sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>   s  (sizeof(DState));
731c731
<       default_bzfree;
---
>       default_bzfree
733c733
<   s = BZALLOC(sizeof(DState));
---
>     (sizeof(DState));
(91.1 %, 18140 bytes)
733c733
<     BZALLOC(sizeof(DState));
---
>     DState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOCsizeof(DState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(DState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOCsizeofDState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOCDState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOCsizeof());
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC());
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOCsizeof));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC((DState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(DState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(());
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC());
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC((DState);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(DState);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(();
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC();
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeofDState));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof));
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeofDState);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeofDState);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof);
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeofDState;
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof;
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof());
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof();
733c733
<     BZALLOC(sizeof(DState));
---
>     BZALLOC(sizeof();
(91.2 %, 18126 bytes)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC(
>    s == NULL)
733c733
<     BZALLOC();
---
>     BZALLOC()
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    (s == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if s == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    s == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if ( == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>    ( == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>   if  == NULL)
733,734c733,734
<     BZALLOC();
<   if (s == NULL)
---
>     BZALLOC()
>     == NULL)
734c734
<   if (s == NULL)
---
>    (s == NULL)
734c734
<   if (s == NULL)
---
>    s == NULL)
734c734
<   if (s == NULL)
---
>    ( == NULL)
734c734
<   if (s == NULL)
---
>     == NULL)
734c734
<   if (s == NULL)
---
>    (s  NULL)
734c734
<   if (s == NULL)
---
>    s  NULL)
734c734
<   if (s == NULL)
---
>    (  NULL)
734c734
<   if (s == NULL)
---
>      NULL)
734c734
<   if (s == NULL)
---
>   if s == NULL)
734c734
<   if (s == NULL)
---
>   if  == NULL)
734c734
<   if (s == NULL)
---
>   if s  NULL)
734c734
<   if (s == NULL)
---
>   if   NULL)
734c734
<   if (s == NULL)
---
>   if s == )
734c734
<   if (s == NULL)
---
>   if  == )
734c734
<   if (s == NULL)
---
>   if s  )
734c734
<   if (s == NULL)
---
>   if   )
734c734
<   if (s == NULL)
---
>   if ( == NULL)
734c734
<   if (s == NULL)
---
>   if (  NULL)
734c734
<   if (s == NULL)
---
>   if ( == )
734c734
<   if (s == NULL)
---
>   if (  )
734c734
<   if (s == NULL)
---
>   if ( == NULL
734c734
<   if (s == NULL)
---
>   if (  NULL
734c734
<   if (s == NULL)
---
>   if ( == 
734c734
<   if (s == NULL)
---
>   if (  
734c734
<   if (s == NULL)
---
>   if (s  NULL)
734c734
<   if (s == NULL)
---
>   if (s  )
(91.2 %, 18123 bytes)
734c734
<   if (  NULL)
---
>   if (  
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      BZ_MEM_ERROR;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      BZ_MEM_ERROR;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>     return ;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>     return ;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      ;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      ;
734c734
<   if (  NULL)
---
>   if (  NULL
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return ;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      ;
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return BZ_MEM_ERROR
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return 
734,735c734,735
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      
735c735
<     return BZ_MEM_ERROR;
---
>      BZ_MEM_ERROR;
735c735
<     return BZ_MEM_ERROR;
---
>      ;
735c735
<     return BZ_MEM_ERROR;
---
>      BZ_MEM_ERROR
(91.2 %, 18117 bytes)
735c735
<      BZ_MEM_ERROR;
---
>      ;
735c735
<      BZ_MEM_ERROR;
---
>      
735,736c735,736
<      BZ_MEM_ERROR;
<   s->strm = *strm;
---
>      ;
>   ->strm = *strm;
(91.2 %, 18105 bytes)
735c735
<      ;
---
>      
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   ->strm = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   sstrm = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   strm = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   s-> = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   -> = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>   s = *strm;
735,736c735,736
<      ;
<   s->strm = *strm;
---
>      
>    = *strm;
736c736
<   s->strm = *strm;
---
>   ->strm = *strm;
736c736
<   s->strm = *strm;
---
>   strm = *strm;
736c736
<   s->strm = *strm;
---
>   -> = *strm;
736c736
<   s->strm = *strm;
---
>    = *strm;
(91.2 %, 18104 bytes)
736c736
<   s->strm = *strm;
---
>   ->strm = *strm;
736c736
<   s->strm = *strm;
---
>   strm = *strm;
736c736
<   s->strm = *strm;
---
>   -> = *strm;
736c736
<   s->strm = *strm;
---
>    = *strm;
736c736
<   s->strm = *strm;
---
>   ->strm  *strm;
736c736
<   s->strm = *strm;
---
>   strm  *strm;
736c736
<   s->strm = *strm;
---
>   ->  *strm;
736c736
<   s->strm = *strm;
---
>     *strm;
736c736
<   s->strm = *strm;
---
>   sstrm = *strm;
736c736
<   s->strm = *strm;
---
>   s = *strm;
736c736
<   s->strm = *strm;
---
>   sstrm  *strm;
736c736
<   s->strm = *strm;
---
>   s  *strm;
736c736
<   s->strm = *strm;
---
>   sstrm = strm;
736c736
<   s->strm = *strm;
---
>   s = strm;
(91.2 %, 18096 bytes)
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     
>   ->state = s;
736c736
<     *strm;
---
>     *;
736c736
<     *strm;
---
>     *
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *;
>   ->state = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *
>   ->state = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *;
>   strmstate = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *
>   strmstate = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *;
>   state = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *
>   state = s;
736c736
<     *strm;
---
>     *strm
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   ->state = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   strmstate = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   state = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   strm-> = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   -> = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>   strm = s;
736,737c736,737
<     *strm;
<   strm->state = s;
---
>     *strm
>    = s;
737c737
<   strm->state = s;
---
>   ->state = s;
737c737
<   strm->state = s;
---
>   state = s;
737c737
<   strm->state = s;
---
>   -> = s;
737c737
<   strm->state = s;
---
>    = s;
737c737
<   strm->state = s;
---
>   ->state  s;
737c737
<   strm->state = s;
---
>   state  s;
737c737
<   strm->state = s;
---
>   ->  s;
737c737
<   strm->state = s;
---
>     s;
737c737
<   strm->state = s;
---
>   strmstate = s;
737c737
<   strm->state = s;
---
>   strm = s;
(91.2 %, 18084 bytes)
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     
>   state = BZ_X_MAGIC_1;
737c737
<     s;
---
>     s
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   ->state = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   sstate = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   state = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   s-> = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   -> = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>   s = BZ_X_MAGIC_1;
737,738c737,738
<     s;
<   s->state = BZ_X_MAGIC_1;
---
>     s
>    = BZ_X_MAGIC_1;
(91.2 %, 18082 bytes)
738c738
<   ->state = BZ_X_MAGIC_1;
---
>    = BZ_X_MAGIC_1;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>   state  BZ_X_MAGIC_1;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>     BZ_X_MAGIC_1;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>   state = ;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>    = ;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>   state  ;
738c738
<   ->state = BZ_X_MAGIC_1;
---
>     ;
(91.2 %, 18075 bytes)
738c738
<    = BZ_X_MAGIC_1;
---
>     ;
738c738
<    = BZ_X_MAGIC_1;
---
>     BZ_X_MAGIC_1
738c738
<    = BZ_X_MAGIC_1;
---
>     
738,739c738,739
<    = BZ_X_MAGIC_1;
<   s->bsLive = 0;
---
>     BZ_X_MAGIC_1;
>   ->bsLive = 0;
738,739c738,739
<    = BZ_X_MAGIC_1;
<   s->bsLive = 0;
---
>     ;
>   ->bsLive = 0;
738,739c738,739
<    = BZ_X_MAGIC_1;
<   s->bsLive = 0;
---
>     BZ_X_MAGIC_1
>   ->bsLive = 0;
738,739c738,739
<    = BZ_X_MAGIC_1;
<   s->bsLive = 0;
---
>     
>   ->bsLive = 0;
(91.2 %, 18062 bytes)
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   ->bsLive = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   sbsLive = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   bsLive = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   s-> = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   -> = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>   s = 0;
738,739c738,739
<     ;
<   s->bsLive = 0;
---
>     
>    = 0;
(91.2 %, 18060 bytes)
739c739
<   ->bsLive = 0;
---
>    = 0;
739c739
<   ->bsLive = 0;
---
>   bsLive  0;
739c739
<   ->bsLive = 0;
---
>     0;
739c739
<   ->bsLive = 0;
---
>   bsLive = ;
739c739
<   ->bsLive = 0;
---
>    = ;
739c739
<   ->bsLive = 0;
---
>   bsLive  ;
739c739
<   ->bsLive = 0;
---
>     ;
(91.2 %, 18052 bytes)
739c739
<    = 0;
---
>     ;
739c739
<    = 0;
---
>     0
739c739
<    = 0;
---
>     
739,740c739,740
<    = 0;
<   s->bsBuff = 0;
---
>     0;
>   ->bsBuff = 0;
739,740c739,740
<    = 0;
<   s->bsBuff = 0;
---
>     ;
>   ->bsBuff = 0;
739,740c739,740
<    = 0;
<   s->bsBuff = 0;
---
>     0
>   ->bsBuff = 0;
739,740c739,740
<    = 0;
<   s->bsBuff = 0;
---
>     
>   ->bsBuff = 0;
(91.2 %, 18050 bytes)
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   ->bsBuff = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   sbsBuff = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   bsBuff = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   s-> = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   -> = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>   s = 0;
739,740c739,740
<     ;
<   s->bsBuff = 0;
---
>     
>    = 0;
(91.2 %, 18048 bytes)
740c740
<   ->bsBuff = 0;
---
>    = 0;
740c740
<   ->bsBuff = 0;
---
>   bsBuff  0;
740c740
<   ->bsBuff = 0;
---
>     0;
740c740
<   ->bsBuff = 0;
---
>   bsBuff = ;
740c740
<   ->bsBuff = 0;
---
>    = ;
740c740
<   ->bsBuff = 0;
---
>   bsBuff  ;
740c740
<   ->bsBuff = 0;
---
>     ;
(91.2 %, 18040 bytes)
740c740
<    = 0;
---
>     ;
740c740
<    = 0;
---
>     0
740c740
<    = 0;
---
>     
740,741c740,741
<    = 0;
<   s->calculatedCombinedCRC = 0;
---
>     0;
>   ->calculatedCombinedCRC = 0;
740,741c740,741
<    = 0;
<   s->calculatedCombinedCRC = 0;
---
>     ;
>   ->calculatedCombinedCRC = 0;
740,741c740,741
<    = 0;
<   s->calculatedCombinedCRC = 0;
---
>     0
>   ->calculatedCombinedCRC = 0;
740,741c740,741
<    = 0;
<   s->calculatedCombinedCRC = 0;
---
>     
>   ->calculatedCombinedCRC = 0;
(91.2 %, 18038 bytes)
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   ->calculatedCombinedCRC = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   scalculatedCombinedCRC = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   calculatedCombinedCRC = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   s-> = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   -> = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>   s = 0;
740,741c740,741
<     ;
<   s->calculatedCombinedCRC = 0;
---
>     
>    = 0;
(91.2 %, 18036 bytes)
741c741
<   ->calculatedCombinedCRC = 0;
---
>    = 0;
741c741
<   ->calculatedCombinedCRC = 0;
---
>   calculatedCombinedCRC  0;
741c741
<   ->calculatedCombinedCRC = 0;
---
>     0;
741c741
<   ->calculatedCombinedCRC = 0;
---
>   calculatedCombinedCRC = ;
741c741
<   ->calculatedCombinedCRC = 0;
---
>    = ;
741c741
<   ->calculatedCombinedCRC = 0;
---
>   calculatedCombinedCRC  ;
741c741
<   ->calculatedCombinedCRC = 0;
---
>     ;
(91.2 %, 18013 bytes)
741c741
<    = 0;
---
>     ;
741c741
<    = 0;
---
>     0
741c741
<    = 0;
---
>     
741,742c741,742
<    = 0;
<   strm->total_in_lo32 = 0;
---
>     0;
>   ->total_in_lo32 = 0;
741,742c741,742
<    = 0;
<   strm->total_in_lo32 = 0;
---
>     ;
>   ->total_in_lo32 = 0;
741,742c741,742
<    = 0;
<   strm->total_in_lo32 = 0;
---
>     0
>   ->total_in_lo32 = 0;
741,742c741,742
<    = 0;
<   strm->total_in_lo32 = 0;
---
>     
>   ->total_in_lo32 = 0;
741c741
<    = 0;
---
>    = ;
741c741
<    = 0;
---
>    = 
(91.2 %, 18011 bytes)
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   ->total_in_lo32 = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   strmtotal_in_lo32 = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   total_in_lo32 = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   strm-> = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   -> = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>   strm = 0;
741,742c741,742
<     ;
<   strm->total_in_lo32 = 0;
---
>     
>    = 0;
742c742
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32 = 0;
742c742
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32 = 0;
742c742
<   strm->total_in_lo32 = 0;
---
>   -> = 0;
742c742
<   strm->total_in_lo32 = 0;
---
>    = 0;
742c742
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32  0;
742c742
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32  0;
742c742
<   strm->total_in_lo32 = 0;
---
>   ->  0;
742c742
<   strm->total_in_lo32 = 0;
---
>     0;
(91.2 %, 17991 bytes)
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>     
>   ->total_in_hi32 = 0;
742c742
<    = 0;
---
>    = ;
742c742
<    = 0;
---
>    = 
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   ->total_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   ->total_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   strmtotal_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   strmtotal_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   total_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   total_in_hi32 = 0;
742c742
<    = 0;
---
>    = 0
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   ->total_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strmtotal_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   total_in_hi32 = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strm-> = 0;
742,743c742,743
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   -> = 0;
(91.2 %, 17989 bytes)
743c743
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32 = 0;
743c743
<   strm->total_in_hi32 = 0;
---
>   -> = 0;
743c743
<   strm->total_in_hi32 = 0;
---
>    = 0;
743c743
<   strm->total_in_hi32 = 0;
---
>   ->total_in_hi32  0;
743c743
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32  0;
743c743
<   strm->total_in_hi32 = 0;
---
>   ->  0;
743c743
<   strm->total_in_hi32 = 0;
---
>     0;
743c743
<   strm->total_in_hi32 = 0;
---
>   strmtotal_in_hi32 = 0;
743c743
<   strm->total_in_hi32 = 0;
---
>   strm = 0;
(91.2 %, 17969 bytes)
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     
>   total_out_lo32 = 0;
743c743
<     0;
---
>     0
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   ->total_out_lo32 = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strmtotal_out_lo32 = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   total_out_lo32 = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm-> = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   -> = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm = 0;
743,744c743,744
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>    = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32 = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32 = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   -> = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>    = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32  0;
744c744
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32  0;
744c744
<   strm->total_out_lo32 = 0;
---
>   ->  0;
744c744
<   strm->total_out_lo32 = 0;
---
>     0;
744c744
<   strm->total_out_lo32 = 0;
---
>   strmtotal_out_lo32 = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   strm = 0;
744c744
<   strm->total_out_lo32 = 0;
---
>   strmtotal_out_lo32  0;
(91.2 %, 17948 bytes)
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     
>   total_out_hi32 = 0;
744c744
<     0;
---
>     0
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   ->total_out_hi32 = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strmtotal_out_hi32 = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   total_out_hi32 = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm-> = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   -> = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm = 0;
744,745c744,745
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>    = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32 = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32 = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>   -> = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>    = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32  0;
745c745
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32  0;
745c745
<   strm->total_out_hi32 = 0;
---
>   ->  0;
745c745
<   strm->total_out_hi32 = 0;
---
>     0;
745c745
<   strm->total_out_hi32 = 0;
---
>   strmtotal_out_hi32 = 0;
745c745
<   strm->total_out_hi32 = 0;
---
>   strm = 0;
(91.3 %, 17927 bytes)
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     
>   smallDecompress = small;
745c745
<     0;
---
>     0
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   ->smallDecompress = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   ssmallDecompress = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   smallDecompress = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   s-> = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   -> = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>   s = small;
745,746c745,746
<     0;
<   s->smallDecompress = small;
---
>     0
>    = small;
746c746
<   s->smallDecompress = small;
---
>   ->smallDecompress = small;
746c746
<   s->smallDecompress = small;
---
>   smallDecompress = small;
746c746
<   s->smallDecompress = small;
---
>   -> = small;
746c746
<   s->smallDecompress = small;
---
>    = small;
746c746
<   s->smallDecompress = small;
---
>   ->smallDecompress  small;
746c746
<   s->smallDecompress = small;
---
>   smallDecompress  small;
746c746
<   s->smallDecompress = small;
---
>   ->  small;
746c746
<   s->smallDecompress = small;
---
>     small;
746c746
<   s->smallDecompress = small;
---
>   ssmallDecompress = small;
746c746
<   s->smallDecompress = small;
---
>   s = small;
(91.3 %, 17908 bytes)
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     
>   ll4 = NULL;
746c746
<     small;
---
>     small
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   ->ll4 = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   sll4 = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   ll4 = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   s-> = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   -> = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>   s = NULL;
746,747c746,747
<     small;
<   s->ll4 = NULL;
---
>     small
>    = NULL;
747c747
<   s->ll4 = NULL;
---
>   ->ll4 = NULL;
747c747
<   s->ll4 = NULL;
---
>   ll4 = NULL;
747c747
<   s->ll4 = NULL;
---
>   -> = NULL;
747c747
<   s->ll4 = NULL;
---
>    = NULL;
747c747
<   s->ll4 = NULL;
---
>   ->ll4  NULL;
747c747
<   s->ll4 = NULL;
---
>   ll4  NULL;
(91.3 %, 17901 bytes)
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>     
>   ->ll16 = NULL;
747c747
<    = NULL;
---
>    = ;
747c747
<    = NULL;
---
>    = 
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   ->ll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   ->ll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   sll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   sll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   ll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   ll16 = NULL;
747c747
<    = NULL;
---
>    = NULL
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   ->ll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   sll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   ll16 = NULL;
747,748c747,748
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   s-> = NULL;
(91.3 %, 17896 bytes)
748c748
<   s->ll16 = NULL;
---
>   ll16 = NULL;
748c748
<   s->ll16 = NULL;
---
>   -> = NULL;
748c748
<   s->ll16 = NULL;
---
>    = NULL;
748c748
<   s->ll16 = NULL;
---
>   ->ll16  NULL;
748c748
<   s->ll16 = NULL;
---
>   ll16  NULL;
748c748
<   s->ll16 = NULL;
---
>   ->  NULL;
748c748
<   s->ll16 = NULL;
---
>     NULL;
748c748
<   s->ll16 = NULL;
---
>   sll16 = NULL;
748c748
<   s->ll16 = NULL;
---
>   s = NULL;
(91.3 %, 17892 bytes)
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>     ;
>   ->tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>     NULL
>   ->tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>     
>   ->tt = NULL;
748c748
<   ll16  NULL;
---
>   ll16  ;
748c748
<   ll16  NULL;
---
>   ll16  
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   ->tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   ->tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   stt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   stt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   tt = NULL;
748c748
<   ll16  NULL;
---
>   ll16  NULL
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   ->tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   stt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   tt = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   s-> = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   -> = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   s = NULL;
748,749c748,749
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>    = NULL;
749c749
<   s->tt = NULL;
---
>   ->tt = NULL;
749c749
<   s->tt = NULL;
---
>   tt = NULL;
749c749
<   s->tt = NULL;
---
>   -> = NULL;
749c749
<   s->tt = NULL;
---
>    = NULL;
749c749
<   s->tt = NULL;
---
>   ->tt  NULL;
749c749
<   s->tt = NULL;
---
>   tt  NULL;
749c749
<   s->tt = NULL;
---
>   ->  NULL;
749c749
<   s->tt = NULL;
---
>     NULL;
749c749
<   s->tt = NULL;
---
>   stt = NULL;
749c749
<   s->tt = NULL;
---
>   s = NULL;
(91.3 %, 17888 bytes)
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>     ;
>   ->currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>     NULL
>   ->currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>     
>   ->currBlockNo = 0;
749c749
<   tt  NULL;
---
>   tt  ;
749c749
<   tt  NULL;
---
>   tt  
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  ;
>   ->currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  
>   ->currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  ;
>   scurrBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  
>   scurrBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  ;
>   currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  
>   currBlockNo = 0;
749c749
<   tt  NULL;
---
>   tt  NULL
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   ->currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   scurrBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   currBlockNo = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   s-> = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   -> = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>   s = 0;
749,750c749,750
<   tt  NULL;
<   s->currBlockNo = 0;
---
>   tt  NULL
>    = 0;
750c750
<   s->currBlockNo = 0;
---
>   ->currBlockNo = 0;
750c750
<   s->currBlockNo = 0;
---
>   currBlockNo = 0;
750c750
<   s->currBlockNo = 0;
---
>   -> = 0;
750c750
<   s->currBlockNo = 0;
---
>    = 0;
750c750
<   s->currBlockNo = 0;
---
>   ->currBlockNo  0;
750c750
<   s->currBlockNo = 0;
---
>   currBlockNo  0;
750c750
<   s->currBlockNo = 0;
---
>   ->  0;
750c750
<   s->currBlockNo = 0;
---
>     0;
750c750
<   s->currBlockNo = 0;
---
>   scurrBlockNo = 0;
750c750
<   s->currBlockNo = 0;
---
>   s = 0;
(91.3 %, 17873 bytes)
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     
>   verbosity = verbosity;
750c750
<     0;
---
>     0
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   ->verbosity = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   sverbosity = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   verbosity = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   s-> = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   -> = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>   s = verbosity;
750,751c750,751
<     0;
<   s->verbosity = verbosity;
---
>     0
>    = verbosity;
751c751
<   s->verbosity = verbosity;
---
>   ->verbosity = verbosity;
751c751
<   s->verbosity = verbosity;
---
>   verbosity = verbosity;
(91.3 %, 17868 bytes)
751c751
<   verbosity = verbosity;
---
>     
751c751
<   verbosity = verbosity;
---
>   verbosity  verbosity;
751c751
<   verbosity = verbosity;
---
>   verbosity  ;
(91.3 %, 17848 bytes)
753,754c753,754
<   return BZ_OK;
< }
---
>    
> 
753c753
<   return BZ_OK;
---
>   return ;
753c753
<   return BZ_OK;
---
>   return 
753,754c753,754
<   return BZ_OK;
< }
---
>   return ;
> 
753,754c753,754
<   return BZ_OK;
< }
---
>   return 
> 
753c753
<   return BZ_OK;
---
>   return ;
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>  void unRLE_obuf_to_output_FAST(void);
753c753
<   return BZ_OK;
---
>   return 
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>  void unRLE_obuf_to_output_FAST(void);
753,754c753
<   return BZ_OK;
< }
---
>   return ;
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>  void unRLE_obuf_to_output_FAST(void);
753,754c753
<   return BZ_OK;
< }
---
>   return 
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>  void unRLE_obuf_to_output_FAST(void);
753c753
<   return BZ_OK;
---
>   return BZ_OK
753,754c753,754
<   return BZ_OK;
< }
---
>   return BZ_OK
> 
753c753
<   return BZ_OK;
---
>   return BZ_OK
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>  void unRLE_obuf_to_output_FAST(void);
753,754c753
<   return BZ_OK;
< }
---
>   return BZ_OK
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>  void unRLE_obuf_to_output_FAST(void);
753c753
<   return BZ_OK;
---
>   return BZ_OK
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
> static  unRLE_obuf_to_output_FAST(void);
753,754c753
<   return BZ_OK;
< }
---
>   return BZ_OK
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
> static  unRLE_obuf_to_output_FAST(void);
753c753
<   return BZ_OK;
---
>   return BZ_OK
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>   unRLE_obuf_to_output_FAST(void);
753,754c753
<   return BZ_OK;
< }
---
>   return BZ_OK
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>   unRLE_obuf_to_output_FAST(void);
754c754
< }
---
> 
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>  void unRLE_obuf_to_output_FAST(void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
> static  unRLE_obuf_to_output_FAST(void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>   unRLE_obuf_to_output_FAST(void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
> static void (void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>  void (void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
> static  (void);
754d753
< }
756c755,756
< static void unRLE_obuf_to_output_FAST(void);
---
> 
>   (void);
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>  void unRLE_obuf_to_output_FAST(void);
756c756
< static void unRLE_obuf_to_output_FAST(void);
---
>   unRLE_obuf_to_output_FAST(void);
(91.3 %, 17842 bytes)
756c756
<  void unRLE_obuf_to_output_FAST(void);
---
>   unRLE_obuf_to_output_FAST(void);
756c756
<  void unRLE_obuf_to_output_FAST(void);
---
>   (void);
756c756
<  void unRLE_obuf_to_output_FAST(void);
---
>   unRLE_obuf_to_output_FASTvoid);
756c756
<  void unRLE_obuf_to_output_FAST(void);
---
>   void);
756c756
<  void unRLE_obuf_to_output_FAST(void);
---
>   unRLE_obuf_to_output_FAST();
(91.3 %, 17838 bytes)
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   (void);
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   void);
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   ();
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   );
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   (void;
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   void;
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   (;
756c756
<   unRLE_obuf_to_output_FAST(void);
---
>   ;
(91.3 %, 17811 bytes)
756c756
<   void;
---
>   
758c758
< static void unRLE_obuf_to_output_SMALL(void);
---
> static  unRLE_obuf_to_output_SMALL(void);
756c756
<   void;
---
>   ;
758c758
< static void unRLE_obuf_to_output_SMALL(void);
---
>   unRLE_obuf_to_output_SMALL(void);
(91.3 %, 17802 bytes)
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
>   ();
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
>   unRLE_obuf_to_output_SMALL);
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
>   );
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  (void);
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  void);
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  ();
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  );
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  (void;
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  void;
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  (;
758c758
< static  unRLE_obuf_to_output_SMALL(void);
---
> static  ;
(91.3 %, 17774 bytes)
758c758
< static  void;
---
> static  
760c760
< int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
---
> int (BZ2_bzDecompress)(bz_stream *strm) {
758c758
< static  void;
---
> static  ;
760c760
< int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
---
>  (BZ2_bzDecompress)(bz_stream *strm) {
758c758
< static  void;
---
> static  
760c760
< int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
---
>  (BZ2_bzDecompress)(bz_stream *strm) {
(91.3 %, 17763 bytes)
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *strm) {
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
>  ((bz_stream *strm) {
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
>  (bz_stream *strm) {
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
> int BZ2_bzDecompress)(bz_stream *strm) {
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
> int )(bz_stream *strm) {
760c760
< int (BZ2_bzDecompress)(bz_stream *strm) {
---
> int BZ2_bzDecompress(bz_stream *strm) {
(91.3 %, 17758 bytes)
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  bz_stream strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  ( strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>   strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompressbz_stream *strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress *strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompressbz_stream strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompressbz_stream *) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress *) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompressbz_stream ) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress ) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( *strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( *) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( ) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( *strm {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( strm {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress( * {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(  {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream strm) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream ) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream strm {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream  {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream strm) 
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream ) 
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream strm 
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream  
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *) {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream * {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *) 
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream * 
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *) {
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream * {
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *) 
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream * 
>    *s;
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *strm {
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *strm 
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm {
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm 
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm {
>   DState s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm 
>   DState s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm {
>    s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm 
>    s;
760c760
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(bz_stream *strm) 
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>    *s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>   DState s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>    s;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>   DState *;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>    *;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>   DState ;
760,761c760,761
<  BZ2_bzDecompress(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompress(bz_stream *strm) 
>    ;
761c761
<   DState *s;
---
>    *s;
761c761
<   DState *s;
---
>    s;
761c761
<   DState *s;
---
>    *;
761c761
<   DState *s;
---
>    ;
761c761
<   DState *s;
---
>    *s
761c761
<   DState *s;
---
>    s
761c761
<   DState *s;
---
>    *
761c761
<   DState *s;
---
>    
761c761
<   DState *s;
---
>   DState s;
761c761
<   DState *s;
---
>   DState ;
761c761
<   DState *s;
---
>   DState s
761c761
<   DState *s;
---
>   DState 
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState s;
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState ;
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState s
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState 
>    (strm == NULL)
761c761
<   DState *s;
---
>   DState *;
761c761
<   DState *s;
---
>   DState *
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>   if strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>   if strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>    strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>    strm == NULL)
761c761
<   DState *s;
---
>   DState *s
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    (strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    strm == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if ( == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    ( == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if  == NULL)
761,762c761,762
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>     == NULL)
762c762
<   if (strm == NULL)
---
>    (strm == NULL)
762c762
<   if (strm == NULL)
---
>    strm == NULL)
762c762
<   if (strm == NULL)
---
>    ( == NULL)
762c762
<   if (strm == NULL)
---
>     == NULL)
762c762
<   if (strm == NULL)
---
>    (strm  NULL)
762c762
<   if (strm == NULL)
---
>    strm  NULL)
762c762
<   if (strm == NULL)
---
>    (  NULL)
762c762
<   if (strm == NULL)
---
>      NULL)
762c762
<   if (strm == NULL)
---
>   if strm == NULL)
762c762
<   if (strm == NULL)
---
>   if  == NULL)
762c762
<   if (strm == NULL)
---
>   if strm  NULL)
762c762
<   if (strm == NULL)
---
>   if   NULL)
762c762
<   if (strm == NULL)
---
>   if strm == )
762c762
<   if (strm == NULL)
---
>   if  == )
762c762
<   if (strm == NULL)
---
>   if strm  )
762c762
<   if (strm == NULL)
---
>   if   )
762c762
<   if (strm == NULL)
---
>   if ( == NULL)
762c762
<   if (strm == NULL)
---
>   if (  NULL)
762c762
<   if (strm == NULL)
---
>   if ( == )
762c762
<   if (strm == NULL)
---
>   if (  )
762c762
<   if (strm == NULL)
---
>   if ( == NULL
762c762
<   if (strm == NULL)
---
>   if (  NULL
762c762
<   if (strm == NULL)
---
>   if ( == 
762c762
<   if (strm == NULL)
---
>   if (  
762c762
<   if (strm == NULL)
---
>   if (strm  NULL)
762c762
<   if (strm == NULL)
---
>   if (strm  )
(91.3 %, 17752 bytes)
762c762
<   if (  NULL)
---
>   if (  
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
762c762
<   if (  NULL)
---
>   if (  NULL
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
762,763c762,763
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
763c763
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
763c763
<     return BZ_PARAM_ERROR;
---
>      ;
(91.3 %, 17746 bytes)
763c763
<      BZ_PARAM_ERROR;
---
>      ;
763c763
<      BZ_PARAM_ERROR;
---
>      
(91.3 %, 17732 bytes)
763c763
<      ;
---
>      
763,764c763,764
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
763,764c763,764
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
763,764c763,764
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(91.3 %, 17731 bytes)
764c764
<   s = strm->state;
---
>    = strm->state;
764c764
<   s = strm->state;
---
>     strm->state;
764c764
<   s = strm->state;
---
>    = ->state;
764c764
<   s = strm->state;
---
>     ->state;
764c764
<   s = strm->state;
---
>    = strmstate;
764c764
<   s = strm->state;
---
>     strmstate;
764c764
<   s = strm->state;
---
>    = state;
764c764
<   s = strm->state;
---
>     state;
764c764
<   s = strm->state;
---
>   s  strm->state;
764c764
<   s = strm->state;
---
>   s  ->state;
(91.3 %, 17729 bytes)
764c764
<     strm->state;
---
>     state;
764c764
<     strm->state;
---
>     ->;
764c764
<     strm->state;
---
>     ;
764c764
<     strm->state;
---
>     ->state
764c764
<     strm->state;
---
>     state
764c764
<     strm->state;
---
>     ->
764c764
<     strm->state;
---
>     
(91.4 %, 17718 bytes)
764,765c764,765
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
764,765c764,765
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
764,765c764,765
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
764,765c764,765
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
764,765c764,765
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
765c765
<   if (s == NULL)
---
>    (s == NULL)
765c765
<   if (s == NULL)
---
>    s == NULL)
765c765
<   if (s == NULL)
---
>    ( == NULL)
765c765
<   if (s == NULL)
---
>     == NULL)
765c765
<   if (s == NULL)
---
>    (s  NULL)
765c765
<   if (s == NULL)
---
>    s  NULL)
765c765
<   if (s == NULL)
---
>    (  NULL)
765c765
<   if (s == NULL)
---
>      NULL)
765c765
<   if (s == NULL)
---
>   if s == NULL)
765c765
<   if (s == NULL)
---
>   if  == NULL)
765c765
<   if (s == NULL)
---
>   if s  NULL)
765c765
<   if (s == NULL)
---
>   if   NULL)
765c765
<   if (s == NULL)
---
>   if s == )
765c765
<   if (s == NULL)
---
>   if  == )
765c765
<   if (s == NULL)
---
>   if s  )
765c765
<   if (s == NULL)
---
>   if   )
765c765
<   if (s == NULL)
---
>   if ( == NULL)
765c765
<   if (s == NULL)
---
>   if (  NULL)
765c765
<   if (s == NULL)
---
>   if ( == )
765c765
<   if (s == NULL)
---
>   if (  )
765c765
<   if (s == NULL)
---
>   if ( == NULL
765c765
<   if (s == NULL)
---
>   if (  NULL
765c765
<   if (s == NULL)
---
>   if ( == 
765c765
<   if (s == NULL)
---
>   if (  
765c765
<   if (s == NULL)
---
>   if (s  NULL)
765c765
<   if (s == NULL)
---
>   if (s  )
(91.4 %, 17715 bytes)
765c765
<   if (  NULL)
---
>   if (  
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
765c765
<   if (  NULL)
---
>   if (  NULL
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
765,766c765,766
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
766c766
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
766c766
<     return BZ_PARAM_ERROR;
---
>      ;
(91.4 %, 17709 bytes)
766c766
<      BZ_PARAM_ERROR;
---
>      ;
766c766
<      BZ_PARAM_ERROR;
---
>      
766,767c766,767
<      BZ_PARAM_ERROR;
<   if (&s->strm != strm)
---
>      ;
>    (&s->strm != strm)
(91.4 %, 17695 bytes)
766c766
<      ;
---
>      
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>    (&s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>   if &s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>    &s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>   if (s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>    (s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>   if s->strm != strm)
766,767c766,767
<      ;
<   if (&s->strm != strm)
---
>      
>    s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    &s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    (s->strm != strm)
(91.4 %, 17694 bytes)
767c767
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    &s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    (s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    (&->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    &->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    (->strm != strm)
767c767
<   if (&s->strm != strm)
---
>    ->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if &s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if &->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if ->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if &sstrm != strm)
767c767
<   if (&s->strm != strm)
---
>   if sstrm != strm)
767c767
<   if (&s->strm != strm)
---
>   if &strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if (s->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if (->strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if (sstrm != strm)
767c767
<   if (&s->strm != strm)
---
>   if (strm != strm)
767c767
<   if (&s->strm != strm)
---
>   if (s-> != strm)
767c767
<   if (&s->strm != strm)
---
>   if (-> != strm)
767c767
<   if (&s->strm != strm)
---
>   if (s != strm)
(91.4 %, 17690 bytes)
767c767
<   if (strm != strm)
---
>   if (  )
767c767
<   if (strm != strm)
---
>   if ( != strm
767c767
<   if (strm != strm)
---
>   if (  strm
767c767
<   if (strm != strm)
---
>   if ( != 
767c767
<   if (strm != strm)
---
>   if (  
767c767
<   if (strm != strm)
---
>   if (strm  strm)
767c767
<   if (strm != strm)
---
>   if (strm  )
767c767
<   if (strm != strm)
---
>   if (strm  strm
767c767
<   if (strm != strm)
---
>   if (strm  
767,768c767,768
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  strm)
>      BZ_PARAM_ERROR;
767,768c767,768
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  )
>      BZ_PARAM_ERROR;
(91.4 %, 17684 bytes)
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR;
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return ;
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      ;
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return BZ_PARAM_ERROR
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return 
767,768c767,768
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      
768c768
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
768c768
<     return BZ_PARAM_ERROR;
---
>      ;
(91.4 %, 17678 bytes)
768c768
<      BZ_PARAM_ERROR;
---
>      ;
768c768
<      BZ_PARAM_ERROR;
---
>      
(91.4 %, 17664 bytes)
768c768
<      ;
---
>      
768c768
<      ;
---
>      
770c770
<   while
---
>   
768c768
<      ;
---
>      
772c772
<     AssertH(0, 6001);
---
>     (0, 6001);
(91.4 %, 17663 bytes)
770c770
<   while
---
>   
770c770
<   while
---
>   
772c772
<     AssertH(0, 6001);
---
>     (0, 6001);
770c770
<   while
---
>   
772c772
<     AssertH(0, 6001);
---
>     AssertH0, 6001);
(91.4 %, 17658 bytes)
772c772
<     AssertH(0, 6001);
---
>     (0, 6001);
772c772
<     AssertH(0, 6001);
---
>     0, 6001);
772c772
<     AssertH(0, 6001);
---
>     (, 6001);
772c772
<     AssertH(0, 6001);
---
>     , 6001);
772c772
<     AssertH(0, 6001);
---
>     (0 6001);
772c772
<     AssertH(0, 6001);
---
>     0 6001);
772c772
<     AssertH(0, 6001);
---
>     ( 6001);
(91.4 %, 17651 bytes)
772c772
<     (0, 6001);
---
>     0, 6001);
772c772
<     (0, 6001);
---
>     , 6001);
772c772
<     (0, 6001);
---
>     0 6001);
772c772
<     (0, 6001);
---
>      6001);
772c772
<     (0, 6001);
---
>     0, );
772c772
<     (0, 6001);
---
>     , );
772c772
<     (0, 6001);
---
>     0 );
772c772
<     (0, 6001);
---
>      );
772c772
<     (0, 6001);
---
>     (, 6001);
772c772
<     (0, 6001);
---
>     ( 6001);
772c772
<     (0, 6001);
---
>     (, );
772c772
<     (0, 6001);
---
>     ( );
772c772
<     (0, 6001);
---
>     (, 6001;
772c772
<     (0, 6001);
---
>     ( 6001;
772c772
<     (0, 6001);
---
>     (, ;
772c772
<     (0, 6001);
---
>     ( ;
772c772
<     (0, 6001);
---
>     (0 6001);
772c772
<     (0, 6001);
---
>     (0 );
(91.4 %, 17649 bytes)
772c772
<     ( 6001);
---
>     ( ;
772c772
<     ( 6001);
---
>     ( )
772c772
<     ( 6001);
---
>     ( 
772c772
<     ( 6001);
---
>     ( );
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( ;
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( )
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( 
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( 6001;
772c772
<     ( 6001);
---
>     ( 6001
772c772
<     ( 6001);
---
>     ( 6001;
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( 6001
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( 6001;
774c774
<   return 0;
---
>   return ;
772c772
<     ( 6001);
---
>     ( 6001
774c774
<   return 0;
---
>   return ;
772c772
<     ( 6001);
---
>     ( 6001;
774c774
<   return 0;
---
>    ;
772c772
<     ( 6001);
---
>     ( 6001
774c774
<   return 0;
---
>    ;
772c772
<     ( 6001);
---
>     ( 6001)
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>    0;
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>   return ;
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>    ;
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>   return 0
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>    0
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>   return 
772c772
<     ( 6001);
---
>     ( 6001)
774c774
<   return 0;
---
>    
774c774
<   return 0;
---
>    0;
(91.4 %, 17641 bytes)
774,775c774
<    ;
< }
---
>    
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
774c774
<    ;
---
>    
777c777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> int (BZ2_bzDecompressEnd)(bz_stream *strm) {
774,775c774
<    ;
< }
---
>    
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
> int (BZ2_bzDecompressEnd)(bz_stream *strm) {
774c774
<    ;
---
>    
777c777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzDecompressEnd)(bz_stream *strm) {
774,775c774
<    ;
< }
---
>    
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  (BZ2_bzDecompressEnd)(bz_stream *strm) {
775c775
< }
---
> 
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
> int (BZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  (BZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
> int BZ_APIBZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  BZ_APIBZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
> int BZ2_bzDecompressEnd)(bz_stream *strm) {
775d774
< }
777c776,777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
> 
>  BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
< int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ_APIBZ2_bzDecompressEnd)(bz_stream *strm) {
(91.4 %, 17638 bytes)
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  ()(bz_stream *strm) {
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  )(bz_stream *strm) {
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (BZ2_bzDecompressEnd(bz_stream *strm) {
777c777
<  BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *strm) {
(91.4 %, 17632 bytes)
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd)(bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  )(bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd)bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  )bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  BZ2_bzDecompressEndbz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  ()(bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  ((bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  ()bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  (bz_stream *strm) {
777c777
<  (BZ2_bzDecompressEnd)(bz_stream *strm) {
---
>  ()( *strm) {
(91.4 %, 17630 bytes)
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  ( *strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>   *strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  (bz_stream strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  bz_stream strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  ( strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>   strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEndbz_stream *strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd *strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEndbz_stream strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEndbz_stream *) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd *) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEndbz_stream ) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd ) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( *strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( *) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( ) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( *strm {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( strm {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd( * {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(  {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream strm) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream ) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream strm {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream  {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream strm) 
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream ) 
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream strm 
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream  
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *) {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream * {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *) 
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream * 
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *) {
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream * {
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *) 
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream * 
>    *s;
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *strm {
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *strm 
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm {
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm 
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm {
>   DState s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm 
>   DState s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm {
>    s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm 
>    s;
777c777
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>    *s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>   DState s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>    s;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>   DState *;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>    *;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>   DState ;
777,778c777,778
<  BZ2_bzDecompressEnd(bz_stream *strm) {
<   DState *s;
---
>  BZ2_bzDecompressEnd(bz_stream *strm) 
>    ;
778c778
<   DState *s;
---
>    *s;
778c778
<   DState *s;
---
>    s;
778c778
<   DState *s;
---
>    *;
778c778
<   DState *s;
---
>    ;
778c778
<   DState *s;
---
>    *s
778c778
<   DState *s;
---
>    s
778c778
<   DState *s;
---
>    *
778c778
<   DState *s;
---
>    
778c778
<   DState *s;
---
>   DState s;
778c778
<   DState *s;
---
>   DState ;
778c778
<   DState *s;
---
>   DState s
778c778
<   DState *s;
---
>   DState 
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState s;
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState ;
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState s
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState 
>    (strm == NULL)
778c778
<   DState *s;
---
>   DState *;
778c778
<   DState *s;
---
>   DState *
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>   if strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>   if strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *;
>    strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *
>    strm == NULL)
778c778
<   DState *s;
---
>   DState *s
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    (strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    strm == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if ( == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>    ( == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>   if  == NULL)
778,779c778,779
<   DState *s;
<   if (strm == NULL)
---
>   DState *s
>     == NULL)
779c779
<   if (strm == NULL)
---
>    (strm == NULL)
779c779
<   if (strm == NULL)
---
>    strm == NULL)
779c779
<   if (strm == NULL)
---
>    ( == NULL)
779c779
<   if (strm == NULL)
---
>     == NULL)
779c779
<   if (strm == NULL)
---
>    (strm  NULL)
779c779
<   if (strm == NULL)
---
>    strm  NULL)
779c779
<   if (strm == NULL)
---
>    (  NULL)
779c779
<   if (strm == NULL)
---
>      NULL)
779c779
<   if (strm == NULL)
---
>   if strm == NULL)
779c779
<   if (strm == NULL)
---
>   if  == NULL)
779c779
<   if (strm == NULL)
---
>   if strm  NULL)
779c779
<   if (strm == NULL)
---
>   if   NULL)
779c779
<   if (strm == NULL)
---
>   if strm == )
779c779
<   if (strm == NULL)
---
>   if  == )
779c779
<   if (strm == NULL)
---
>   if strm  )
779c779
<   if (strm == NULL)
---
>   if   )
779c779
<   if (strm == NULL)
---
>   if ( == NULL)
779c779
<   if (strm == NULL)
---
>   if (  NULL)
779c779
<   if (strm == NULL)
---
>   if ( == )
779c779
<   if (strm == NULL)
---
>   if (  )
779c779
<   if (strm == NULL)
---
>   if ( == NULL
779c779
<   if (strm == NULL)
---
>   if (  NULL
779c779
<   if (strm == NULL)
---
>   if ( == 
779c779
<   if (strm == NULL)
---
>   if (  
779c779
<   if (strm == NULL)
---
>   if (strm  NULL)
779c779
<   if (strm == NULL)
---
>   if (strm  )
(91.4 %, 17624 bytes)
779c779
<   if (  NULL)
---
>   if (  
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
779c779
<   if (  NULL)
---
>   if (  NULL
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
779,780c779,780
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
780c780
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
780c780
<     return BZ_PARAM_ERROR;
---
>      ;
(91.4 %, 17618 bytes)
780c780
<      BZ_PARAM_ERROR;
---
>      ;
780c780
<      BZ_PARAM_ERROR;
---
>      
780,781c780,781
<      BZ_PARAM_ERROR;
<   s = strm->state;
---
>      ;
>    = strm->state;
(91.4 %, 17604 bytes)
780c780
<      ;
---
>      
780,781c780,781
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
780,781c780,781
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
780,781c780,781
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(91.4 %, 17603 bytes)
781c781
<   s = strm->state;
---
>    = strm->state;
781c781
<   s = strm->state;
---
>     strm->state;
781c781
<   s = strm->state;
---
>    = ->state;
781c781
<   s = strm->state;
---
>     ->state;
781c781
<   s = strm->state;
---
>    = strmstate;
781c781
<   s = strm->state;
---
>     strmstate;
781c781
<   s = strm->state;
---
>    = state;
781c781
<   s = strm->state;
---
>     state;
781c781
<   s = strm->state;
---
>   s  strm->state;
781c781
<   s = strm->state;
---
>   s  ->state;
(91.4 %, 17601 bytes)
781c781
<     strm->state;
---
>     state;
781c781
<     strm->state;
---
>     ->;
781c781
<     strm->state;
---
>     ;
781c781
<     strm->state;
---
>     ->state
781c781
<     strm->state;
---
>     state
781c781
<     strm->state;
---
>     ->
781c781
<     strm->state;
---
>     
(91.4 %, 17590 bytes)
781,782c781,782
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
781,782c781,782
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
781,782c781,782
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
781,782c781,782
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
781,782c781,782
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
782c782
<   if (s == NULL)
---
>    (s == NULL)
782c782
<   if (s == NULL)
---
>    s == NULL)
782c782
<   if (s == NULL)
---
>    ( == NULL)
782c782
<   if (s == NULL)
---
>     == NULL)
782c782
<   if (s == NULL)
---
>    (s  NULL)
782c782
<   if (s == NULL)
---
>    s  NULL)
782c782
<   if (s == NULL)
---
>    (  NULL)
782c782
<   if (s == NULL)
---
>      NULL)
782c782
<   if (s == NULL)
---
>   if s == NULL)
782c782
<   if (s == NULL)
---
>   if  == NULL)
782c782
<   if (s == NULL)
---
>   if s  NULL)
782c782
<   if (s == NULL)
---
>   if   NULL)
782c782
<   if (s == NULL)
---
>   if s == )
782c782
<   if (s == NULL)
---
>   if  == )
782c782
<   if (s == NULL)
---
>   if s  )
782c782
<   if (s == NULL)
---
>   if   )
782c782
<   if (s == NULL)
---
>   if ( == NULL)
782c782
<   if (s == NULL)
---
>   if (  NULL)
782c782
<   if (s == NULL)
---
>   if ( == )
782c782
<   if (s == NULL)
---
>   if (  )
782c782
<   if (s == NULL)
---
>   if ( == NULL
782c782
<   if (s == NULL)
---
>   if (  NULL
782c782
<   if (s == NULL)
---
>   if ( == 
782c782
<   if (s == NULL)
---
>   if (  
782c782
<   if (s == NULL)
---
>   if (s  NULL)
782c782
<   if (s == NULL)
---
>   if (s  )
(91.4 %, 17587 bytes)
782c782
<   if (  NULL)
---
>   if (  
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
782c782
<   if (  NULL)
---
>   if (  NULL
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
782,783c782,783
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
783c783
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
783c783
<     return BZ_PARAM_ERROR;
---
>      ;
783c783
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(91.4 %, 17581 bytes)
783c783
<      BZ_PARAM_ERROR;
---
>      ;
783c783
<      BZ_PARAM_ERROR;
---
>      
783,784c783,784
<      BZ_PARAM_ERROR;
<   if (&s->strm != strm)
---
>      ;
>    (&s->strm != strm)
(91.4 %, 17567 bytes)
783c783
<      ;
---
>      
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>    (&s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>   if &s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>    &s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>   if (s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>    (s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>   if s->strm != strm)
783,784c783,784
<      ;
<   if (&s->strm != strm)
---
>      
>    s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    &s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    (s->strm != strm)
(91.4 %, 17566 bytes)
784c784
<   if (&s->strm != strm)
---
>    (&s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    &s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    (s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    (&->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    &->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    (->strm != strm)
784c784
<   if (&s->strm != strm)
---
>    ->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if &s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if &->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if ->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if &sstrm != strm)
784c784
<   if (&s->strm != strm)
---
>   if sstrm != strm)
784c784
<   if (&s->strm != strm)
---
>   if &strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if (s->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if (->strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if (sstrm != strm)
784c784
<   if (&s->strm != strm)
---
>   if (strm != strm)
784c784
<   if (&s->strm != strm)
---
>   if (s-> != strm)
784c784
<   if (&s->strm != strm)
---
>   if (-> != strm)
784c784
<   if (&s->strm != strm)
---
>   if (s != strm)
(91.4 %, 17562 bytes)
784c784
<   if (strm != strm)
---
>   if (  )
784c784
<   if (strm != strm)
---
>   if ( != strm
784c784
<   if (strm != strm)
---
>   if (  strm
784c784
<   if (strm != strm)
---
>   if ( != 
784c784
<   if (strm != strm)
---
>   if (  
784c784
<   if (strm != strm)
---
>   if (strm  strm)
784c784
<   if (strm != strm)
---
>   if (strm  )
784c784
<   if (strm != strm)
---
>   if (strm  strm
784c784
<   if (strm != strm)
---
>   if (strm  
784,785c784,785
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  strm)
>      BZ_PARAM_ERROR;
784,785c784,785
<   if (strm != strm)
<     return BZ_PARAM_ERROR;
---
>   if (strm  )
>      BZ_PARAM_ERROR;
(91.4 %, 17556 bytes)
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR;
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return ;
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      ;
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return BZ_PARAM_ERROR
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      BZ_PARAM_ERROR
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>     return 
784,785c784,785
<   if (strm  )
<     return BZ_PARAM_ERROR;
---
>   if (strm  
>      
785c785
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
785c785
<     return BZ_PARAM_ERROR;
---
>      ;
785c785
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(91.4 %, 17550 bytes)
785c785
<      BZ_PARAM_ERROR;
---
>      ;
785c785
<      BZ_PARAM_ERROR;
---
>      
(91.4 %, 17536 bytes)
785c785
<      ;
---
>      
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>    (s->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>   if s->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>    s->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>   if (->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>    (->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>   if ->tt != NULL)
785c785
<      ;
---
>      
787c787
<   if (s->tt != NULL)
---
>    ->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (s->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    s->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    ->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (stt != NULL)
(91.4 %, 17535 bytes)
787c787
<   if (s->tt != NULL)
---
>    (s->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    s->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    ->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (stt != NULL)
787c787
<   if (s->tt != NULL)
---
>    stt != NULL)
787c787
<   if (s->tt != NULL)
---
>    (tt != NULL)
787c787
<   if (s->tt != NULL)
---
>    tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if s->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if ->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if stt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if s-> != NULL)
787c787
<   if (s->tt != NULL)
---
>   if -> != NULL)
787c787
<   if (s->tt != NULL)
---
>   if s != NULL)
787c787
<   if (s->tt != NULL)
---
>   if  != NULL)
787c787
<   if (s->tt != NULL)
---
>   if (->tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if (tt != NULL)
787c787
<   if (s->tt != NULL)
---
>   if (-> != NULL)
787c787
<   if (s->tt != NULL)
---
>   if ( != NULL)
787c787
<   if (s->tt != NULL)
---
>   if (->tt  NULL)
787c787
<   if (s->tt != NULL)
---
>   if (tt  NULL)
787c787
<   if (s->tt != NULL)
---
>   if (->  NULL)
787c787
<   if (s->tt != NULL)
---
>   if (  NULL)
(91.4 %, 17530 bytes)
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  )
>     (s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  NULL
>     (s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  
>     (s->tt);
787c787
<   if (tt  NULL)
---
>   if (tt  )
787c787
<   if (tt  NULL)
---
>   if (tt  
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     (s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     (s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     BZFREEs->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     BZFREEs->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     s->tt);
787c787
<   if (tt  NULL)
---
>   if (tt  NULL
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     (s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREEs->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     s->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREE(->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     (->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREE->tt);
787,788c787,788
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     ->tt);
788c788
<     BZFREE(s->tt);
---
>     (s->tt);
788c788
<     BZFREE(s->tt);
---
>     s->tt);
788c788
<     BZFREE(s->tt);
---
>     (->tt);
788c788
<     BZFREE(s->tt);
---
>     ->tt);
788c788
<     BZFREE(s->tt);
---
>     (stt);
788c788
<     BZFREE(s->tt);
---
>     stt);
788c788
<     BZFREE(s->tt);
---
>     (tt);
(91.4 %, 17524 bytes)
788c788
<     (s->tt);
---
>     s->tt);
788c788
<     (s->tt);
---
>     ->tt);
788c788
<     (s->tt);
---
>     stt);
788c788
<     (s->tt);
---
>     tt);
788c788
<     (s->tt);
---
>     s->);
788c788
<     (s->tt);
---
>     ->);
788c788
<     (s->tt);
---
>     s);
788c788
<     (s->tt);
---
>     );
788c788
<     (s->tt);
---
>     (->tt);
788c788
<     (s->tt);
---
>     (tt);
788c788
<     (s->tt);
---
>     (->);
788c788
<     (s->tt);
---
>     ();
788c788
<     (s->tt);
---
>     (->tt;
788c788
<     (s->tt);
---
>     (tt;
788c788
<     (s->tt);
---
>     (->;
788c788
<     (s->tt);
---
>     (;
788c788
<     (s->tt);
---
>     (stt);
788c788
<     (s->tt);
---
>     (s);
(91.5 %, 17521 bytes)
788c788
<     (tt);
---
>     (;
788c788
<     (tt);
---
>     ()
788c788
<     (tt);
---
>     (
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     ();
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (;
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     ()
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (
>    (s->ll16 != NULL)
788c788
<     (tt);
---
>     (tt;
788c788
<     (tt);
---
>     (tt
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt;
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt;
>   if s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt
>   if s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt;
>    s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt
>    s->ll16 != NULL)
788c788
<     (tt);
---
>     (tt)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>    (s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>   if s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>    s->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>   if (->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>    (->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>   if ->ll16 != NULL)
788,789c788,789
<     (tt);
<   if (s->ll16 != NULL)
---
>     (tt)
>    ->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    (s->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    s->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    (->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    ->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    (sll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    sll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    (ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>    ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if s->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if ->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if sll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if s-> != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if -> != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if s != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if  != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (->ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (ll16 != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (-> != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if ( != NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (->ll16  NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (ll16  NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (->  NULL)
789c789
<   if (s->ll16 != NULL)
---
>   if (  NULL)
(91.5 %, 17516 bytes)
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (  )
>     (s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (  NULL
>     (s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (  
>     (s->ll16);
789c789
<   if (ll16  NULL)
---
>   if (ll16  )
789c789
<   if (ll16  NULL)
---
>   if (ll16  
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  )
>     (s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  
>     (s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  )
>     BZFREEs->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  
>     BZFREEs->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  )
>     s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  
>     s->ll16);
789c789
<   if (ll16  NULL)
---
>   if (ll16  NULL
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     (s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     BZFREEs->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     s->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     BZFREE(->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     (->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     BZFREE->ll16);
789,790c789,790
<   if (ll16  NULL)
<     BZFREE(s->ll16);
---
>   if (ll16  NULL
>     ->ll16);
790c790
<     BZFREE(s->ll16);
---
>     (s->ll16);
790c790
<     BZFREE(s->ll16);
---
>     s->ll16);
790c790
<     BZFREE(s->ll16);
---
>     (->ll16);
790c790
<     BZFREE(s->ll16);
---
>     ->ll16);
790c790
<     BZFREE(s->ll16);
---
>     (sll16);
790c790
<     BZFREE(s->ll16);
---
>     sll16);
790c790
<     BZFREE(s->ll16);
---
>     (ll16);
(91.5 %, 17510 bytes)
790c790
<     (s->ll16);
---
>     s->ll16);
790c790
<     (s->ll16);
---
>     ->ll16);
790c790
<     (s->ll16);
---
>     sll16);
790c790
<     (s->ll16);
---
>     ll16);
790c790
<     (s->ll16);
---
>     s->);
790c790
<     (s->ll16);
---
>     ->);
790c790
<     (s->ll16);
---
>     s);
790c790
<     (s->ll16);
---
>     );
790c790
<     (s->ll16);
---
>     (->ll16);
790c790
<     (s->ll16);
---
>     (ll16);
790c790
<     (s->ll16);
---
>     (->);
790c790
<     (s->ll16);
---
>     ();
790c790
<     (s->ll16);
---
>     (->ll16;
790c790
<     (s->ll16);
---
>     (ll16;
790c790
<     (s->ll16);
---
>     (->;
790c790
<     (s->ll16);
---
>     (;
790c790
<     (s->ll16);
---
>     (sll16);
790c790
<     (s->ll16);
---
>     (s);
(91.5 %, 17507 bytes)
790c790
<     (ll16);
---
>     (;
790c790
<     (ll16);
---
>     ()
790c790
<     (ll16);
---
>     (
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     ();
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (;
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     ()
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (
>    (s->ll4 != NULL)
790c790
<     (ll16);
---
>     (ll16;
790c790
<     (ll16);
---
>     (ll16
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16;
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16;
>   if s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16
>   if s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16;
>    s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16
>    s->ll4 != NULL)
790c790
<     (ll16);
---
>     (ll16)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>    (s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>   if s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>    s->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>   if (->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>    (->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>   if ->ll4 != NULL)
790,791c790,791
<     (ll16);
<   if (s->ll4 != NULL)
---
>     (ll16)
>    ->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    (s->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    s->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    (->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    ->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    (sll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    sll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    (ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>    ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if s->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if ->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if sll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if s-> != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if -> != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if s != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if  != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (->ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (ll4 != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (-> != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if ( != NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (->ll4  NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (ll4  NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (->  NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (  NULL)
791c791
<   if (s->ll4 != NULL)
---
>   if (sll4 != NULL)
(91.5 %, 17502 bytes)
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (  )
>     (s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (  NULL
>     (s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (  
>     (s->ll4);
791c791
<   if (ll4  NULL)
---
>   if (ll4  )
791c791
<   if (ll4  NULL)
---
>   if (ll4  
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  )
>     (s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  
>     (s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  )
>     BZFREEs->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  
>     BZFREEs->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  )
>     s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  
>     s->ll4);
791c791
<   if (ll4  NULL)
---
>   if (ll4  NULL
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     (s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     BZFREEs->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     s->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     BZFREE(->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     (->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     BZFREE->ll4);
791,792c791,792
<   if (ll4  NULL)
<     BZFREE(s->ll4);
---
>   if (ll4  NULL
>     ->ll4);
792c792
<     BZFREE(s->ll4);
---
>     (s->ll4);
792c792
<     BZFREE(s->ll4);
---
>     s->ll4);
792c792
<     BZFREE(s->ll4);
---
>     (->ll4);
792c792
<     BZFREE(s->ll4);
---
>     ->ll4);
792c792
<     BZFREE(s->ll4);
---
>     (sll4);
792c792
<     BZFREE(s->ll4);
---
>     sll4);
792c792
<     BZFREE(s->ll4);
---
>     (ll4);
(91.5 %, 17496 bytes)
792c792
<     (s->ll4);
---
>     s->ll4);
792c792
<     (s->ll4);
---
>     ->ll4);
792c792
<     (s->ll4);
---
>     sll4);
792c792
<     (s->ll4);
---
>     ll4);
792c792
<     (s->ll4);
---
>     s->);
792c792
<     (s->ll4);
---
>     ->);
792c792
<     (s->ll4);
---
>     s);
792c792
<     (s->ll4);
---
>     );
792c792
<     (s->ll4);
---
>     (->ll4);
792c792
<     (s->ll4);
---
>     (ll4);
792c792
<     (s->ll4);
---
>     (->);
792c792
<     (s->ll4);
---
>     ();
792c792
<     (s->ll4);
---
>     (->ll4;
792c792
<     (s->ll4);
---
>     (ll4;
792c792
<     (s->ll4);
---
>     (->;
792c792
<     (s->ll4);
---
>     (;
792c792
<     (s->ll4);
---
>     (sll4);
792c792
<     (s->ll4);
---
>     (s);
(91.5 %, 17493 bytes)
792c792
<     (ll4);
---
>     (;
792c792
<     (ll4);
---
>     ()
792c792
<     (ll4);
---
>     (
792c792
<     (ll4);
---
>     ();
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (;
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     ()
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (ll4;
792c792
<     (ll4);
---
>     (ll4
792c792
<     (ll4);
---
>     (ll4;
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (ll4
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (ll4;
794c794
<   BZFREE(strm->state);
---
>   BZFREEstrm->state);
792c792
<     (ll4);
---
>     (ll4
794c794
<   BZFREE(strm->state);
---
>   BZFREEstrm->state);
792c792
<     (ll4);
---
>     (ll4;
794c794
<   BZFREE(strm->state);
---
>   strm->state);
792c792
<     (ll4);
---
>     (ll4
794c794
<   BZFREE(strm->state);
---
>   strm->state);
792c792
<     (ll4);
---
>     (ll4)
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   BZFREEstrm->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   strm->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   BZFREE(->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   (->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   BZFREE->state);
792c792
<     (ll4);
---
>     (ll4)
794c794
<   BZFREE(strm->state);
---
>   ->state);
794c794
<   BZFREE(strm->state);
---
>   (strm->state);
(91.5 %, 17486 bytes)
794c794
<   (strm->state);
---
>   ->state);
794c794
<   (strm->state);
---
>   strmstate);
794c794
<   (strm->state);
---
>   state);
794c794
<   (strm->state);
---
>   strm->);
794c794
<   (strm->state);
---
>   ->);
794c794
<   (strm->state);
---
>   strm);
794c794
<   (strm->state);
---
>   );
794c794
<   (strm->state);
---
>   (->state);
794c794
<   (strm->state);
---
>   (state);
794c794
<   (strm->state);
---
>   (->);
794c794
<   (strm->state);
---
>   ();
794c794
<   (strm->state);
---
>   (->state;
794c794
<   (strm->state);
---
>   (state;
794c794
<   (strm->state);
---
>   (->;
794c794
<   (strm->state);
---
>   (;
794c794
<   (strm->state);
---
>   (strmstate);
794c794
<   (strm->state);
---
>   (strm);
(91.5 %, 17475 bytes)
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   (
>   ->state = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   (;
>   strmstate = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   (
>   strmstate = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   (;
>   state = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   (
>   state = NULL;
794c794
<   ();
---
>   ()
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   ->state = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   strmstate = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   state = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   strm-> = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   -> = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>   strm = NULL;
794,795c794,795
<   ();
<   strm->state = NULL;
---
>   ()
>    = NULL;
795c795
<   strm->state = NULL;
---
>   ->state = NULL;
795c795
<   strm->state = NULL;
---
>   state = NULL;
795c795
<   strm->state = NULL;
---
>   -> = NULL;
795c795
<   strm->state = NULL;
---
>    = NULL;
795c795
<   strm->state = NULL;
---
>   ->state  NULL;
795c795
<   strm->state = NULL;
---
>   state  NULL;
795c795
<   strm->state = NULL;
---
>   ->  NULL;
795c795
<   strm->state = NULL;
---
>     NULL;
(91.5 %, 17468 bytes)
795c795
<   state  NULL;
---
>     ;
797c797
<   return BZ_OK;
---
>    BZ_OK;
795c795
<   state  NULL;
---
>     NULL
797c797
<   return BZ_OK;
---
>    BZ_OK;
795c795
<   state  NULL;
---
>     
797c797
<   return BZ_OK;
---
>    BZ_OK;
(91.5 %, 17453 bytes)
795c795,797
<     ;
---
>     
> 
>    ;
797,798d798
<    BZ_OK;
< }
795c795,797
<     ;
---
>     
> 
>    BZ_OK
797,798d798
<    BZ_OK;
< }
795c795,797
<     ;
---
>     
> 
>    
797,798d798
<    BZ_OK;
< }
797c797
<    BZ_OK;
---
>    ;
797c797
<    BZ_OK;
---
>    
(91.5 %, 17448 bytes)
797c797
<    ;
---
>    
797,798c797,798
<    ;
< }
---
>    
> 
797c797
<    ;
---
>    
800c800
< #define BZ_SETERR
---
> define BZ_SETERR
797,798c797
<    ;
< }
---
>    
800c799,800
< #define BZ_SETERR
---
> 
> define BZ_SETERR
797c797
<    ;
---
>    
800c800
< #define BZ_SETERR
---
> # BZ_SETERR
797,798c797
<    ;
< }
---
>    
800c799,800
< #define BZ_SETERR
---
> 
> # BZ_SETERR
797c797
<    ;
---
>    
800c800
< #define BZ_SETERR
---
>  BZ_SETERR
797,798c797
<    ;
< }
---
>    
800c799,800
< #define BZ_SETERR
---
> 
>  BZ_SETERR
798c798
< }
---
> 
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> define BZ_SETERR
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> # BZ_SETERR
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
>  BZ_SETERR
(91.5 %, 17447 bytes)
798c798
< }
---
> 
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> define BZ_SETERR
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> # BZ_SETERR
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
>  BZ_SETERR
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> #define 
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> define 
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
> # 
798d797
< }
800c799,800
< #define BZ_SETERR
---
> 
>  
800c800
< #define BZ_SETERR
---
> define BZ_SETERR
800c800
< #define BZ_SETERR
---
>  BZ_SETERR
800c800
< #define BZ_SETERR
---
> define 
800c800
< #define BZ_SETERR
---
>  
800c800
< #define BZ_SETERR
---
> define BZ_SETERR
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
>  BZ_SETERR
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
> define 
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
>  
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
> # BZ_SETERR
800c800
< #define BZ_SETERR
---
> # 
800c800
< #define BZ_SETERR
---
> # BZ_SETERR
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
> # 
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
> # BZ_SETERR
802c802
< typedef struct {
---
> typedef  {
800c800
< #define BZ_SETERR
---
> # 
802c802
< typedef struct {
---
> typedef  {
800c800
< #define BZ_SETERR
---
> # BZ_SETERR
802c802
< typedef struct {
---
>   {
800c800
< #define BZ_SETERR
---
> # 
802c802
< typedef struct {
---
>   {
800c800
< #define BZ_SETERR
---
> #define 
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
>  struct {
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
> typedef  {
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
>   {
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
> typedef struct 
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
>  struct 
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
> typedef  
800c800
< #define BZ_SETERR
---
> #define 
802c802
< typedef struct {
---
>   
802c802
< typedef struct {
---
>  struct {
802c802
< typedef struct {
---
>   {
802c802
< typedef struct {
---
>  struct 
802c802
< typedef struct {
---
>   
802,803c802,803
< typedef struct {
<   FILE *handle;
---
>  struct {
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
>   {
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
>  struct 
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
>   
>    *handle;
802c802
< typedef struct {
---
> typedef  {
802c802
< typedef struct {
---
> typedef  
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  {
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  {
>   FILE handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  
>   FILE handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  {
>    handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef  
>    handle;
802c802
< typedef struct {
---
> typedef struct 
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    *handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    handle;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE *;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    *;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE ;
802,803c802,803
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    ;
803c803
<   FILE *handle;
---
>    *handle;
803c803
<   FILE *handle;
---
>    handle;
803c803
<   FILE *handle;
---
>    *;
803c803
<   FILE *handle;
---
>    ;
803c803
<   FILE *handle;
---
>    *handle
803c803
<   FILE *handle;
---
>    handle
803c803
<   FILE *handle;
---
>    *
803c803
<   FILE *handle;
---
>    
803c803
<   FILE *handle;
---
>   FILE handle;
803c803
<   FILE *handle;
---
>   FILE ;
803c803
<   FILE *handle;
---
>   FILE handle
803c803
<   FILE *handle;
---
>   FILE 
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE handle;
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE ;
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE handle
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE 
>    buf[BZ_MAX_UNUSED];
803c803
<   FILE *handle;
---
>   FILE *;
803c803
<   FILE *handle;
---
>   FILE *
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>   char [BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *
>   char [BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>    [BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *
>    [BZ_MAX_UNUSED];
803c803
<   FILE *handle;
---
>   FILE *handle
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    buf[BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   char [BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    [BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   char bufBZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    bufBZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   char BZ_MAX_UNUSED];
803,804c803,804
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    buf[BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    [BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    bufBZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    buf[];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    [];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    buf];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>    ];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char [BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char BZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char [];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char ];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char [BZ_MAX_UNUSED;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char BZ_MAX_UNUSED;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char [;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char ;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char bufBZ_MAX_UNUSED];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char bufBZ_MAX_UNUSED;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char bufBZ_MAX_UNUSED]
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf]
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char bufBZ_MAX_UNUSED
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf[];
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf[;
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf[]
804c804
<   char buf[BZ_MAX_UNUSED];
---
>   char buf[
804,805c804,805
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   char buf[];
>    bufN;
804,805c804,805
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   char buf[;
>    bufN;
804,805c804,805
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   char buf[]
>    bufN;
(91.5 %, 17432 bytes)
804,805c804,805
<   char buf;
<   Int32 bufN;
---
>   char buf
>    ;
804,805c804,805
<   char buf;
<   Int32 bufN;
---
>   char buf
>   Int32 bufN
804,805c804,805
<   char buf;
<   Int32 bufN;
---
>   char buf
>    bufN
804,805c804,805
<   char buf;
<   Int32 bufN;
---
>   char buf
>   Int32 
804,805c804,805
<   char buf;
<   Int32 bufN;
---
>   char buf
>    
805c805
<   Int32 bufN;
---
>    bufN;
805c805
<   Int32 bufN;
---
>    ;
805c805
<   Int32 bufN;
---
>    bufN
805c805
<   Int32 bufN;
---
>    
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>    bufN;
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>    ;
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>    bufN
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>    
>    char writing;
805c805
<   Int32 bufN;
---
>   Int32 ;
805c805
<   Int32 bufN;
---
>   Int32 
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 ;
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 ;
>   unsigned  writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 
>   unsigned  writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 ;
>     writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 
>     writing;
805c805
<   Int32 bufN;
---
>   Int32 bufN
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>    char writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>   unsigned  writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>     writing;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>   unsigned char ;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>    char ;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>   unsigned  ;
805,806c805,806
<   Int32 bufN;
<   unsigned char writing;
---
>   Int32 bufN
>     ;
806c806
<   unsigned char writing;
---
>    char writing;
806c806
<   unsigned char writing;
---
>     writing;
806c806
<   unsigned char writing;
---
>    char ;
806c806
<   unsigned char writing;
---
>     ;
806c806
<   unsigned char writing;
---
>    char writing
806c806
<   unsigned char writing;
---
>     writing
806c806
<   unsigned char writing;
---
>    char 
806c806
<   unsigned char writing;
---
>     
806c806
<   unsigned char writing;
---
>   unsigned  writing;
(91.5 %, 17424 bytes)
806c806
<    char writing;
---
>     writing;
806c806
<    char writing;
---
>     ;
806c806
<    char writing;
---
>     writing
806c806
<    char writing;
---
>     
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>     writing;
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>     ;
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>     writing
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>     
>    strm;
806c806
<    char writing;
---
>    char ;
806c806
<    char writing;
---
>    char 
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char ;
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char 
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char ;
>   bz_stream ;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char 
>   bz_stream ;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char ;
>    ;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char 
>    ;
806c806
<    char writing;
---
>    char writing
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>    strm;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>   bz_stream ;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>    ;
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>   bz_stream strm
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>    strm
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>   bz_stream 
806,807c806,807
<    char writing;
<   bz_stream strm;
---
>    char writing
>    
807c807
<   bz_stream strm;
---
>    strm;
807c807
<   bz_stream strm;
---
>    ;
807c807
<   bz_stream strm;
---
>    strm
807c807
<   bz_stream strm;
---
>    
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>    strm;
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>    ;
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>    strm
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>    
>    lastErr;
807c807
<   bz_stream strm;
---
>   bz_stream ;
807c807
<   bz_stream strm;
---
>   bz_stream 
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>   Int32 ;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>   Int32 ;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>    ;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>    ;
807c807
<   bz_stream strm;
---
>   bz_stream strm
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    lastErr;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 ;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    ;
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 lastErr
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    lastErr
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 
807,808c807,808
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    
808c808
<   Int32 lastErr;
---
>    lastErr;
808c808
<   Int32 lastErr;
---
>    ;
808c808
<   Int32 lastErr;
---
>    lastErr
808c808
<   Int32 lastErr;
---
>    
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>    lastErr;
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>    ;
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>    lastErr
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>    
>    char initialisedOk;
808c808
<   Int32 lastErr;
---
>   Int32 ;
808c808
<   Int32 lastErr;
---
>   Int32 
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 ;
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 ;
>   unsigned  initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 
>   unsigned  initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 ;
>     initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 
>     initialisedOk;
808c808
<   Int32 lastErr;
---
>   Int32 lastErr
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>    char initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>   unsigned  initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>     initialisedOk;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>   unsigned char ;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>    char ;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>   unsigned  ;
808,809c808,809
<   Int32 lastErr;
<   unsigned char initialisedOk;
---
>   Int32 lastErr
>     ;
809c809
<   unsigned char initialisedOk;
---
>    char initialisedOk;
809c809
<   unsigned char initialisedOk;
---
>     initialisedOk;
809c809
<   unsigned char initialisedOk;
---
>    char ;
809c809
<   unsigned char initialisedOk;
---
>     ;
809c809
<   unsigned char initialisedOk;
---
>    char initialisedOk
(91.5 %, 17416 bytes)
809c809
<    char initialisedOk;
---
>     initialisedOk;
809c809
<    char initialisedOk;
---
>     ;
809c809
<    char initialisedOk;
---
>     initialisedOk
809c809
<    char initialisedOk;
---
>     
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>     initialisedOk;
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>     ;
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>     initialisedOk
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>     
>  bzFile;
809c809
<    char initialisedOk;
---
>    char ;
809c809
<    char initialisedOk;
---
>    char 
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char ;
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char 
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char ;
> } ;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char 
> } ;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char ;
>  ;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char 
>  ;
809c809
<    char initialisedOk;
---
>    char initialisedOk
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
>  bzFile;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
> } ;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
>  ;
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
> } bzFile
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
>  bzFile
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
> } 
809,810c809,810
<    char initialisedOk;
< } bzFile;
---
>    char initialisedOk
>  
810c810
< } bzFile;
---
>  bzFile;
810c810
< } bzFile;
---
>  ;
810c810
< } bzFile;
---
>  bzFile
810c810
< } bzFile;
---
>  
810c810
< } bzFile;
---
>  bzFile;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
(91.5 %, 17415 bytes)
810c810
< } bzFile;
---
>  bzFile;
810c810
< } bzFile;
---
>  ;
810c810
< } bzFile;
---
>  bzFile
810c810
< } bzFile;
---
>  
810c810
< } bzFile;
---
>  bzFile;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
>  ;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
>  bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
>  
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } ;
810c810
< } bzFile;
---
> } 
810c810
< } bzFile;
---
> } ;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } 
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } ;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } 
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } ;
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } 
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE (BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
810c810
< } bzFile;
---
> } bzFile
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  (BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
(91.5 %, 17409 bytes)
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  (BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API()(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  ()(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_API)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  )(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *()(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
(91.5 %, 17403 bytes)
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *)(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen)int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *)int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *()(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *((int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *()int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
812c812
<  *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>  *()( *bzerror, FILE *f, int blockSize100k,
(91.5 %, 17401 bytes)
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *( *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  * *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *int bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *( bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  * bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpenint bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpenint *, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen *, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpenint , FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen , FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( *bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( *, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( , FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( *bzerror FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( bzerror FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen( * FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(  FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int bzerror, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int , FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int bzerror FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int  FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int bzerror,  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int ,  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int bzerror  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int   *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *, FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int * FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *,  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *, FILE f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int * FILE f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *,  f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *  f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror FILE *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror FILE f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror  f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror FILE *, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror  *, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror FILE , int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror  , int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  *f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  *, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  , int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  *f int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  f int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,  * int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror,   int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE f, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE , int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE f int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE  int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE f,  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE ,  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE f  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE   blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *, int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE * int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *,  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *, int ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE * int ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *,  ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *  ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f int blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f int ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f  ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f int blockSize100k
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f  blockSize100k
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f int 
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f  
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k,
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  ,
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f,  
>                                  verbosity, int workFactor) {
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int 
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                                 int , int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                                 int , int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                                  , int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                                  , int workFactor) {
812c812
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                  verbosity, int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                 int , int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                  , int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                 int verbosity int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                  verbosity int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                 int  int workFactor) {
812,813c812,813
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
>  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                   int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  verbosity, int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  , int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  verbosity int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                   int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  verbosity,  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  ,  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                  verbosity  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                    workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int , int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int  int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int ,  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int   workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int , int ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int  int ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int ,  ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int   ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity int workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity int ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity  ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity int workFactor {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity  workFactor {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity int  {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity   {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  workFactor) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  workFactor {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,   {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  workFactor) 
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  ) 
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,  workFactor 
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity,   
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int ) {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int  {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int ) 
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int  
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int ) {
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int  {
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int ) 
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int  
>    ret;
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int workFactor {
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int workFactor 
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor {
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor 
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor {
>   Int32 ;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor 
>   Int32 ;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor {
>    ;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor 
>    ;
813c813
<                                 int verbosity, int workFactor) {
---
>                                 int verbosity, int workFactor) 
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>    ret;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>   Int32 ;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>    ;
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>   Int32 ret
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>    ret
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>   Int32 
813,814c813,814
<                                 int verbosity, int workFactor) {
<   Int32 ret;
---
>                                 int verbosity, int workFactor) 
>    
814c814
<   Int32 ret;
---
>    ret;
814c814
<   Int32 ret;
---
>    ;
814c814
<   Int32 ret;
---
>    ret
814c814
<   Int32 ret;
---
>    
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ret;
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ;
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ret
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    
>    *bzf = NULL;
814c814
<   Int32 ret;
---
>   Int32 ;
814c814
<   Int32 ret;
---
>   Int32 
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>   bzFile bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>   bzFile bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>    bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>    bzf = NULL;
814c814
<   Int32 ret;
---
>   Int32 ret
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    *bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    bzf = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile * = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    * = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile  = NULL;
814,815c814,815
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>     = NULL;
815c815
<   bzFile *bzf = NULL;
---
>    *bzf = NULL;
815c815
<   bzFile *bzf = NULL;
---
>    bzf = NULL;
815c815
<   bzFile *bzf = NULL;
---
>    * = NULL;
815c815
<   bzFile *bzf = NULL;
---
>     = NULL;
815c815
<   bzFile *bzf = NULL;
---
>    *bzf  NULL;
815c815
<   bzFile *bzf = NULL;
---
>    bzf  NULL;
815c815
<   bzFile *bzf = NULL;
---
>    *  NULL;
815c815
<   bzFile *bzf = NULL;
---
>      NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile bzf = NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile  = NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile bzf  NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile   NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile bzf = ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile  = ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile bzf  ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile   ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile * = ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *  ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL
815c815
<   bzFile *bzf = NULL;
---
>   bzFile * = 
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *  
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  ;
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL
815c815
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  
(91.5 %, 17396 bytes)
815c815
<   bzFile *bzf  ;
---
>   bzFile *bzf  
817c817
<   BZ_SETERR;
---
>   ;
815c815
<   bzFile *bzf  ;
---
>   bzFile *bzf  
817c817
<   BZ_SETERR;
---
>   BZ_SETERR
815c815
<   bzFile *bzf  ;
---
>   bzFile *bzf  
817c817
<   BZ_SETERR;
---
>   
815c815
<   bzFile *bzf  ;
---
>   bzFile *bzf  
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
(91.5 %, 17386 bytes)
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>   if f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>   if ( == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>   if  == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
817c817
<   ;
---
>   
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>     == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>     == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (f  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
(91.5 %, 17384 bytes)
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>     == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>      NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f ==  || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>     ==  || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    f   || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>       || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( ==  || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (   || (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( == NULL  (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ( ==   (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (blockSize100k < 1 || blockSize100k > 9) ||
(91.5 %, 17381 bytes)
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (   || blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (   || ( < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    ( < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (   ||  < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (     < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  (blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  blockSize100k < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  ( < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL   < 1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  (blockSize100k  1 || blockSize100k > 9) ||
819c819
<    (  NULL || (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (  NULL  blockSize100k  1 || blockSize100k > 9) ||
(91.5 %, 17375 bytes)
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (     < 1 || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    blockSize100k  1 || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (      1 || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    blockSize100k <  || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (     <  || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    blockSize100k   || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (       || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    ( < 1 || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (  1 || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    ( <  || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (   || blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    ( < 1  blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (  1  blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    ( <   blockSize100k > 9) ||
819c819
<    (    (blockSize100k < 1 || blockSize100k > 9) ||
---
>    (    (    blockSize100k > 9) ||
(91.5 %, 17361 bytes)
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (    blockSize100k > 9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (   ||  > 9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (     > 9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (   || blockSize100k  9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (    blockSize100k  9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (   ||   9) ||
819c819
<    (    (  1 || blockSize100k > 9) ||
---
>    (    (      9) ||
(91.5 %, 17358 bytes)
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (      9) ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (     > ) ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (      ) ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (     > 9 ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (      9 ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (     >  ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (       ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (    blockSize100k  9) ||
819c819
<    (    (    blockSize100k > 9) ||
---
>    (    (    blockSize100k  ) ||
(91.5 %, 17344 bytes)
819c819
<    (    (      9) ||
---
>    (    (       ||
819c819
<    (    (      9) ||
---
>    (    (      ) 
819c819
<    (    (      9) ||
---
>    (    (       
819,820c819,820
<    (    (      9) ||
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>    (    (      ) ||
>       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
819,820c819,820
<    (    (      9) ||
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>    (    (       ||
>       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
819,820c819,820
<    (    (      9) ||
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>    (    (      ) 
>       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
819,820c819,820
<    (    (      9) ||
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>    (    (       
>       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
819c819
<    (    (      9) ||
---
>    (    (      9 ||
819c819
<    (    (      9) ||
---
>    (    (      9 
819,820c819,820
<    (    (      9) ||
<       (workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>    (    (      9 ||
>       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
(91.5 %, 17339 bytes)
820c820
<       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor > 250) || (verbosity < 0 || verbosity > 4))
820c820
<       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>       workFactor  0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
820c820
<       workFactor < 0 || workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>       workFactor   || workFactor > 250) || (verbosity < 0 || verbosity > 4))
(91.5 %, 17325 bytes)
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>              || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  250) || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  ) || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  250 || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor   || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  250)  (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  )  (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor  250  (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor    (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor > ) || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor >  || (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor > )  (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor >   (verbosity < 0 || verbosity > 4))
820c820
<           workFactor > 250) || (verbosity < 0 || verbosity > 4))
---
>           workFactor > ) || verbosity < 0 || verbosity > 4))
(91.5 %, 17321 bytes)
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor    (verbosity < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor   || verbosity < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor    verbosity < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor   || ( < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor    ( < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor   ||  < 0 || verbosity > 4))
820c820
<           workFactor  ) || (verbosity < 0 || verbosity > 4))
---
>           workFactor     < 0 || verbosity > 4))
(91.5 %, 17319 bytes)
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor    verbosity  0 || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor      0 || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor    verbosity <  || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor     <  || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor    verbosity   || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor       || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor   ||  < 0 || verbosity > 4))
820c820
<           workFactor   || verbosity < 0 || verbosity > 4))
---
>           workFactor   ||   0 || verbosity > 4))
(91.6 %, 17306 bytes)
820c820
<           workFactor       || verbosity > 4))
---
>           workFactor          ))
820c820
<           workFactor       || verbosity > 4))
---
>           workFactor       ||  > 4))
820c820
<           workFactor       || verbosity > 4))
---
>           workFactor       ||   4))
(91.6 %, 17293 bytes)
820,821c820,821
<           workFactor          ))
<     ;
---
>           workFactor          
>     
823c823
<   if (ferror)
---
>    (ferror)
820c820
<           workFactor          ))
---
>           workFactor          )
820,821c820,821
<           workFactor          ))
<     ;
---
>           workFactor          )
>     
820c820
<           workFactor          ))
---
>           workFactor          )
823c823
<   if (ferror)
---
>    (ferror)
820,821c820,821
<           workFactor          ))
<     ;
---
>           workFactor          )
>     
823c823
<   if (ferror)
---
>    (ferror)
820c820
<           workFactor          ))
---
>           workFactor          )
823c823
<   if (ferror)
---
>   if ferror)
820,821c820,821
<           workFactor          ))
<     ;
---
>           workFactor          )
>     
823c823
<   if (ferror)
---
>   if ferror)
820c820
<           workFactor          ))
---
>           workFactor          )
823c823
<   if (ferror)
---
>    ferror)
820,821c820,821
<           workFactor          ))
<     ;
---
>           workFactor          )
>     
823c823
<   if (ferror)
---
>    ferror)
821c821
<     ;
---
>     
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>    (ferror)
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>   if ferror)
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>    ferror)
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>   if ()
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>    ()
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>   if )
821c821
<     ;
---
>     
823c823
<   if (ferror)
---
>    )
823c823
<   if (ferror)
---
>    (ferror)
823c823
<   if (ferror)
---
>    ferror)
823c823
<   if (ferror)
---
>    ()
823c823
<   if (ferror)
---
>    )
823c823
<   if (ferror)
---
>    (ferror
823c823
<   if (ferror)
---
>    ferror
(91.6 %, 17291 bytes)
823c823
<    (ferror)
---
>    ferror)
823c823
<    (ferror)
---
>    )
823c823
<    (ferror)
---
>    ferror
823c823
<    (ferror)
---
>    
(91.6 %, 17289 bytes)
823c823
<    ferror
---
>    
826c826
<   bzf = malloc;
---
>    = malloc;
823,824c823,824
<    ferror
<     ;
---
>    
>     
826c826
<   bzf = malloc;
---
>    = malloc;
823c823
<    ferror
---
>    
826c826
<   bzf = malloc;
---
>   bzf  malloc;
823,824c823,824
<    ferror
<     ;
---
>    
>     
826c826
<   bzf = malloc;
---
>   bzf  malloc;
823c823
<    ferror
---
>    
826c826
<   bzf = malloc;
---
>     malloc;
823,824c823,824
<    ferror
<     ;
---
>    
>     
826c826
<   bzf = malloc;
---
>     malloc;
(91.6 %, 17279 bytes)
824c824
<     ;
---
>     
826,827c826,827
<     malloc;
<   if (bzf == NULL)
---
>     malloc
>    (bzf == NULL)
824c824
<     ;
---
>     
826,827c826,827
<     malloc;
<   if (bzf == NULL)
---
>     
>    (bzf == NULL)
826c826
<     malloc;
---
>     ;
(91.6 %, 17275 bytes)
826,827c826,827
<     malloc
<    (bzf == NULL)
---
>     
>    (  NULL)
826,827c826,827
<     malloc
<    (bzf == NULL)
---
>     
>      NULL)
827c827
<    (bzf == NULL)
---
>    bzf == NULL)
827c827
<    (bzf == NULL)
---
>     == NULL)
827c827
<    (bzf == NULL)
---
>    bzf  NULL)
827c827
<    (bzf == NULL)
---
>      NULL)
827c827
<    (bzf == NULL)
---
>    bzf == )
827c827
<    (bzf == NULL)
---
>     == )
827c827
<    (bzf == NULL)
---
>    bzf  )
827c827
<    (bzf == NULL)
---
>      )
827c827
<    (bzf == NULL)
---
>    ( == NULL)
827c827
<    (bzf == NULL)
---
>    (  NULL)
(91.6 %, 17264 bytes)
827,828c827,828
<    (  NULL)
<     ;
---
>      NULL
>     
827,828c827,828
<    (  NULL)
<     ;
---
>      
>     
827c827
<    (  NULL)
---
>    (  )
(91.6 %, 17261 bytes)
827c827
<      NULL
---
>      
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   ->initialisedOk = False;
827c827
<      NULL
---
>      
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   
>   ->initialisedOk = False;
830c830
<   BZ_SETERR;
---
>   ;
830c830
<   BZ_SETERR;
---
>   
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   ;
>   ->initialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   
>   ->initialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   ;
>   bzfinitialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   
>   bzfinitialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   ;
>   initialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   
>   initialisedOk = False;
830c830
<   BZ_SETERR;
---
>   BZ_SETERR
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   ->initialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   bzfinitialisedOk = False;
830,831c830,831
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   initialisedOk = False;
(91.6 %, 17252 bytes)
830c830
<   ;
---
>   
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   ->initialisedOk = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   bzfinitialisedOk = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   initialisedOk = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   bzf-> = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   -> = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>   bzf = False;
830,831c830,831
<   ;
<   bzf->initialisedOk = False;
---
>   
>    = False;
831c831
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
831c831
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
831c831
<   bzf->initialisedOk = False;
---
>   -> = False;
831c831
<   bzf->initialisedOk = False;
---
>    = False;
831c831
<   bzf->initialisedOk = False;
---
>   ->initialisedOk  False;
831c831
<   bzf->initialisedOk = False;
---
>   initialisedOk  False;
831c831
<   bzf->initialisedOk = False;
---
>   ->  False;
831c831
<   bzf->initialisedOk = False;
---
>     False;
831c831
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
831c831
<   bzf->initialisedOk = False;
---
>   bzf = False;
(91.6 %, 17233 bytes)
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     
>   bufN = 0;
831c831
<     False;
---
>     False
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   ->bufN = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzfbufN = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   bufN = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzf-> = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   -> = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzf = 0;
831,832c831,832
<     False;
<   bzf->bufN = 0;
---
>     False
>    = 0;
832c832
<   bzf->bufN = 0;
---
>   ->bufN = 0;
832c832
<   bzf->bufN = 0;
---
>   bufN = 0;
832c832
<   bzf->bufN = 0;
---
>   -> = 0;
832c832
<   bzf->bufN = 0;
---
>    = 0;
832c832
<   bzf->bufN = 0;
---
>   ->bufN  0;
832c832
<   bzf->bufN = 0;
---
>   bufN  0;
832c832
<   bzf->bufN = 0;
---
>   ->  0;
832c832
<   bzf->bufN = 0;
---
>     0;
832c832
<   bzf->bufN = 0;
---
>   bzfbufN = 0;
832c832
<   bzf->bufN = 0;
---
>   bzf = 0;
(91.6 %, 17223 bytes)
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     
>   handle = f;
832c832
<     0;
---
>     0
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   ->handle = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   bzfhandle = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   handle = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   bzf-> = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   -> = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>   bzf = f;
832,833c832,833
<     0;
<   bzf->handle = f;
---
>     0
>    = f;
833c833
<   bzf->handle = f;
---
>   ->handle = f;
833c833
<   bzf->handle = f;
---
>   handle = f;
833c833
<   bzf->handle = f;
---
>   -> = f;
833c833
<   bzf->handle = f;
---
>    = f;
833c833
<   bzf->handle = f;
---
>   ->handle  f;
833c833
<   bzf->handle = f;
---
>   handle  f;
833c833
<   bzf->handle = f;
---
>   ->  f;
833c833
<   bzf->handle = f;
---
>     f;
833c833
<   bzf->handle = f;
---
>   bzfhandle = f;
833c833
<   bzf->handle = f;
---
>   bzf = f;
(91.6 %, 17211 bytes)
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     
>   writing = True;
833c833
<     f;
---
>     f
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   ->writing = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   bzfwriting = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   writing = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   bzf-> = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   -> = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>   bzf = True;
833,834c833,834
<     f;
<   bzf->writing = True;
---
>     f
>    = True;
834c834
<   bzf->writing = True;
---
>   ->writing = True;
834c834
<   bzf->writing = True;
---
>   writing = True;
834c834
<   bzf->writing = True;
---
>   -> = True;
834c834
<   bzf->writing = True;
---
>    = True;
834c834
<   bzf->writing = True;
---
>   ->writing  True;
834c834
<   bzf->writing = True;
---
>   writing  True;
834c834
<   bzf->writing = True;
---
>   ->  True;
834c834
<   bzf->writing = True;
---
>     True;
(91.6 %, 17198 bytes)
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>     
>   ->strm.bzalloc = NULL;
834c834
<    = True;
---
>    = ;
834c834
<    = True;
---
>    = 
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   ->strm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   ->strm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   bzfstrm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   bzfstrm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   strm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   strm.bzalloc = NULL;
834c834
<    = True;
---
>    = True
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   ->strm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   bzfstrm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   strm.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   bzf->.bzalloc = NULL;
834,835c834,835
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   ->.bzalloc = NULL;
(91.6 %, 17193 bytes)
835c835
<   bzf->strm.bzalloc = NULL;
---
>   strm.bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   ->.bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   ->strmbzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   ->bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm.bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf.bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrmbzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzfbzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm. = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf. = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->. = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf-> = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc  NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc  NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.  NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->  NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strmbzalloc = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strm = NULL;
835c835
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strmbzalloc  NULL;
(91.6 %, 17179 bytes)
835,836c835,836
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf  
>   ->strm.bzfree = NULL;
835c835
<   bzf = NULL;
---
>   bzf = ;
835c835
<   bzf = NULL;
---
>   bzf = 
(91.6 %, 17170 bytes)
836c836
<   ->strm.bzfree = NULL;
---
>    = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->.bzfree = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->bzfree = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->. = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   -> = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->.bzfree  NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->bzfree  NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->.  NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->  NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->strm = NULL;
836c836
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree  NULL;
(91.6 %, 17157 bytes)
836,837c836,837
<    = NULL;
<   bzf->strm.opaque = NULL;
---
>     
>   ->strm.opaque = NULL;
836c836
<    = NULL;
---
>    = ;
836c836
<    = NULL;
---
>    = 
(91.6 %, 17148 bytes)
837c837
<   ->strm.opaque = NULL;
---
>    = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->.opaque = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->opaque = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->. = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   -> = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->.opaque  NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->opaque  NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->.  NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->  NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->strmopaque = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->strm = NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->strmopaque  NULL;
837c837
<   ->strm.opaque = NULL;
---
>   ->strm  NULL;
(91.6 %, 17135 bytes)
837c837
<    = NULL;
---
>     
839c839
<   if (workFactor == 0)
---
>    (workFactor == 0)
837c837
<    = NULL;
---
>    = ;
837c837
<    = NULL;
---
>    = 
837c837
<    = NULL;
---
>    = ;
839c839
<   if (workFactor == 0)
---
>    (workFactor == 0)
837c837
<    = NULL;
---
>    = 
839c839
<   if (workFactor == 0)
---
>    (workFactor == 0)
837c837
<    = NULL;
---
>    = ;
839c839
<   if (workFactor == 0)
---
>   if workFactor == 0)
837c837
<    = NULL;
---
>    = 
839c839
<   if (workFactor == 0)
---
>   if workFactor == 0)
837c837
<    = NULL;
---
>    = ;
839c839
<   if (workFactor == 0)
---
>    workFactor == 0)
837c837
<    = NULL;
---
>    = 
839c839
<   if (workFactor == 0)
---
>    workFactor == 0)
837c837
<    = NULL;
---
>    = NULL
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>    (workFactor == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>   if workFactor == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>    workFactor == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>   if ( == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>    ( == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>   if  == 0)
837c837
<    = NULL;
---
>    = NULL
839c839
<   if (workFactor == 0)
---
>     == 0)
839c839
<   if (workFactor == 0)
---
>    (workFactor == 0)
839c839
<   if (workFactor == 0)
---
>    workFactor == 0)
839c839
<   if (workFactor == 0)
---
>    ( == 0)
839c839
<   if (workFactor == 0)
---
>     == 0)
839c839
<   if (workFactor == 0)
---
>    (workFactor  0)
839c839
<   if (workFactor == 0)
---
>    workFactor  0)
839c839
<   if (workFactor == 0)
---
>    (  0)
839c839
<   if (workFactor == 0)
---
>      0)
839c839
<   if (workFactor == 0)
---
>   if workFactor == 0)
839c839
<   if (workFactor == 0)
---
>   if  == 0)
839c839
<   if (workFactor == 0)
---
>   if workFactor  0)
839c839
<   if (workFactor == 0)
---
>   if   0)
839c839
<   if (workFactor == 0)
---
>   if workFactor == )
839c839
<   if (workFactor == 0)
---
>   if  == )
839c839
<   if (workFactor == 0)
---
>   if workFactor  )
839c839
<   if (workFactor == 0)
---
>   if   )
839c839
<   if (workFactor == 0)
---
>   if ( == 0)
839c839
<   if (workFactor == 0)
---
>   if (  0)
839c839
<   if (workFactor == 0)
---
>   if ( == )
839c839
<   if (workFactor == 0)
---
>   if (  )
839c839
<   if (workFactor == 0)
---
>   if ( == 0
839c839
<   if (workFactor == 0)
---
>   if (  0
839c839
<   if (workFactor == 0)
---
>   if ( == 
839c839
<   if (workFactor == 0)
---
>   if (  
839c839
<   if (workFactor == 0)
---
>   if (workFactor  0)
839c839
<   if (workFactor == 0)
---
>   if (workFactor  )
(91.6 %, 17123 bytes)
839c839
<   if (  0)
---
>   if (  
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>      = 30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  
>      = 30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>     workFactor  30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  
>     workFactor  30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>       30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  
>       30;
839c839
<   if (  0)
---
>   if (  0
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = 30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       30;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor = ;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = ;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  ;
839,840c839,840
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       ;
840c840
<     workFactor = 30;
---
>      = 30;
840c840
<     workFactor = 30;
---
>       30;
840c840
<     workFactor = 30;
---
>      = ;
840c840
<     workFactor = 30;
---
>       ;
(91.7 %, 17112 bytes)
840c840
<       30;
---
>       
840,841c840,841
<       30;
<   ret = BZ2_bzCompressInit;
---
>       ;
>    = BZ2_bzCompressInit;
840,841c840,841
<       30;
<   ret = BZ2_bzCompressInit;
---
>       
>    = BZ2_bzCompressInit;
840,841c840,841
<       30;
<   ret = BZ2_bzCompressInit;
---
>       ;
>   ret  BZ2_bzCompressInit;
840,841c840,841
<       30;
<   ret = BZ2_bzCompressInit;
---
>       
>   ret  BZ2_bzCompressInit;
840,841c840,841
<       30;
<   ret = BZ2_bzCompressInit;
---
>       ;
>     BZ2_bzCompressInit;
(91.7 %, 17109 bytes)
841c841
<   ret = BZ2_bzCompressInit;
---
>     BZ2_bzCompressInit;
841c841
<   ret = BZ2_bzCompressInit;
---
>    = ;
841c841
<   ret = BZ2_bzCompressInit;
---
>     ;
(91.7 %, 17105 bytes)
841c841
<     BZ2_bzCompressInit;
---
>     
841,842c841,842
<     BZ2_bzCompressInit;
<   if (BZ2_bzCompressInit != BZ_OK)
---
>     ;
>    (BZ2_bzCompressInit != BZ_OK)
(91.7 %, 17086 bytes)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>    BZ2_bzCompressInit != BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>    ( != BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>     != BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>    (BZ2_bzCompressInit  BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>    BZ2_bzCompressInit  BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>    (  BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>      BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if BZ2_bzCompressInit != BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if  != BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if BZ2_bzCompressInit  BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if   BZ_OK)
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if BZ2_bzCompressInit != )
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if  != )
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if BZ2_bzCompressInit  )
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if   )
842c842
<   if (BZ2_bzCompressInit != BZ_OK)
---
>   if ( != BZ_OK)
(91.7 %, 17064 bytes)
842,843c842,843
<    (  BZ_OK)
<     ;
---
>      BZ_OK
>     
842,843c842,843
<    (  BZ_OK)
<     ;
---
>      
>     
842c842
<    (  BZ_OK)
---
>    (  )
842c842
<    (  BZ_OK)
---
>    (  
842,843c842,843
<    (  BZ_OK)
<     ;
---
>    (  )
>     
842,843c842,843
<    (  BZ_OK)
<     ;
---
>    (  
>     
842c842
<    (  BZ_OK)
---
>    (  )
845c845
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
842c842
<    (  BZ_OK)
---
>    (  
845c845
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
842,843c842,843
<    (  BZ_OK)
<     ;
---
>    (  )
>     
845c845
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
842,843c842,843
<    (  BZ_OK)
<     ;
---
>    (  
>     
845c845
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
842c842
<    (  BZ_OK)
---
>    (  BZ_OK
842,843c842,843
<    (  BZ_OK)
<     ;
---
>    (  BZ_OK
>     
842c842
<    (  BZ_OK)
---
>    (  BZ_OK
845c845
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
(91.7 %, 17056 bytes)
845c845
<   bzf->strm.avail_in = 0;
---
>   avail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzfstrm.avail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf.avail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzfstrmavail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzfavail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzfstrm. = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf. = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzfstrm = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->.avail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->avail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->. = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf-> = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->.avail_in  0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->avail_in  0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->.  0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->  0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->strmavail_in = 0;
845c845
<   bzf->strm.avail_in = 0;
---
>   bzf->strm = 0;
(91.7 %, 17041 bytes)
845,846c845,846
<   bzf = 0;
<   bzf->initialisedOk = True;
---
>   bzf  
>   ->initialisedOk = True;
845c845
<   bzf = 0;
---
>   bzf = ;
845c845
<   bzf = 0;
---
>   bzf = 
(91.7 %, 17035 bytes)
846c846
<   ->initialisedOk = True;
---
>     ;
846c846
<   ->initialisedOk = True;
---
>   -> = True;
846c846
<   ->initialisedOk = True;
---
>   ->  True;
846c846
<   ->initialisedOk = True;
---
>   -> = ;
846c846
<   ->initialisedOk = True;
---
>   ->  ;
846c846
<   ->initialisedOk = True;
---
>   -> = True
846c846
<   ->initialisedOk = True;
---
>   ->  True
846c846
<   ->initialisedOk = True;
---
>   -> = 
846c846
<   ->initialisedOk = True;
---
>   ->  
846c846
<   ->initialisedOk = True;
---
>   ->initialisedOk  True;
846c846
<   ->initialisedOk = True;
---
>   ->initialisedOk  ;
(91.7 %, 17015 bytes)
846,847c846,847
<     ;
<   return bzf;
---
>     
>    
847c847
<   return bzf;
---
>    bzf;
847c847
<   return bzf;
---
>    ;
(91.7 %, 17009 bytes)
847c847
<    bzf;
---
>    ;
847c847
<    bzf;
---
>    
(91.7 %, 17006 bytes)
847c847
<    ;
---
>    
847,848c847,848
<    ;
< }
---
>    
> 
847c847
<    ;
---
>    
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
847,848c847
<    ;
< }
---
>    
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
847c847
<    ;
---
>    
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
(91.7 %, 17005 bytes)
848c848
< }
---
> 
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> void BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
848d847
< }
850c849,850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API()(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ()(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  )(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ()(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void )(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
(91.7 %, 16999 bytes)
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void )(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void )int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWriteint *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ()(int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ((int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ()int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (int *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ()( *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (( *bzerror, BZFILE *b, void *buf, int len) {
(91.7 %, 16997 bytes)
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ( *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void  *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void (int bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void int bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void ( bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void  bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWriteint *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWriteint bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWriteint *, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite *, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWriteint , BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite , BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( *bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( *, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( , BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( *bzerror BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( bzerror BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( * BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(  BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int bzerror, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int , BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int bzerror BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int  BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int bzerror,  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int ,  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int bzerror  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int   *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *, BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int * BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *,  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *, BZFILE b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int * BZFILE b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *,  b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *  b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror BZFILE *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror BZFILE b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror  b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror BZFILE *, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror  *, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror BZFILE , void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror  , void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  *b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  *, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  , void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  *b void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  b void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  * void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,   void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE b void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE  void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE b,  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE ,  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE b  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE   *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *, void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE * void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *,  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *, void buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE * void buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *,  buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *  buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b void *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b void buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b  buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b void *, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b  *, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b void , int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b  , int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  *buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  *, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  , int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  *buf int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  buf int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  * int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,   int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void buf, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void , int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void buf int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void  int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void buf,  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void ,  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void buf  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void   len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *, int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void * int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *,  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *, int ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void * int ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *,  ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *  ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf int len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf int ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf  ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf int len {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf  len {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf int  {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf   {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  len) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  len {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,   {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  len) 
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  ) 
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,  len 
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf,   
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ) {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int  {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ) 
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int  
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ) {
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int  {
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ) 
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int  
>    ret;
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len {
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len 
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len {
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len 
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len {
>   Int32 ;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len 
>   Int32 ;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len {
>    ;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len 
>    ;
850c850
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>    ret;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>   Int32 ;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>    ;
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>   Int32 ret
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>    ret
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>   Int32 
850,851c850,851
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
<   Int32 ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) 
>    
851c851
<   Int32 ret;
---
>    ret;
851c851
<   Int32 ret;
---
>    ;
851c851
<   Int32 ret;
---
>    ret
851c851
<   Int32 ret;
---
>    
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ret;
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ;
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ret
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>    
>    *bzf = b;
851c851
<   Int32 ret;
---
>   Int32 ;
851c851
<   Int32 ret;
---
>   Int32 
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>   bzFile bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>   bzFile bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>    bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>    bzf = b;
851c851
<   Int32 ret;
---
>   Int32 ret
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    *bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    bzf = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile * = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    * = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile  = b;
851,852c851,852
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>     = b;
852c852
<   bzFile *bzf = b;
---
>    *bzf = b;
852c852
<   bzFile *bzf = b;
---
>    bzf = b;
852c852
<   bzFile *bzf = b;
---
>    * = b;
852c852
<   bzFile *bzf = b;
---
>     = b;
852c852
<   bzFile *bzf = b;
---
>    *bzf  b;
852c852
<   bzFile *bzf = b;
---
>    bzf  b;
852c852
<   bzFile *bzf = b;
---
>    *  b;
852c852
<   bzFile *bzf = b;
---
>      b;
852c852
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
852c852
<   bzFile *bzf = b;
---
>   bzFile  = b;
852c852
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
852c852
<   bzFile *bzf = b;
---
>   bzFile   b;
852c852
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
852c852
<   bzFile *bzf = b;
---
>   bzFile  = ;
852c852
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
852c852
<   bzFile *bzf = b;
---
>   bzFile   ;
852c852
<   bzFile *bzf = b;
---
>   bzFile * = b;
852c852
<   bzFile *bzf = b;
---
>   bzFile *  b;
852c852
<   bzFile *bzf = b;
---
>   bzFile * = ;
852c852
<   bzFile *bzf = b;
---
>   bzFile *  ;
852c852
<   bzFile *bzf = b;
---
>   bzFile * = b
852c852
<   bzFile *bzf = b;
---
>   bzFile *  b
852c852
<   bzFile *bzf = b;
---
>   bzFile * = 
852c852
<   bzFile *bzf = b;
---
>   bzFile *  
852c852
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
852c852
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
852c852
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
852c852
<   bzFile *bzf = b;
---
>   bzFile *bzf  
(91.7 %, 16995 bytes)
852c852
<   bzFile *bzf  ;
---
>   bzFile *bzf  
854c854
<   BZ_SETERR;
---
>   ;
852c852
<   bzFile *bzf  ;
---
>   bzFile *bzf  
854c854
<   BZ_SETERR;
---
>   BZ_SETERR
852c852
<   bzFile *bzf  ;
---
>   bzFile *bzf  
854c854
<   BZ_SETERR;
---
>   
852c852
<   bzFile *bzf  ;
---
>   bzFile *bzf  
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
(91.7 %, 16985 bytes)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    (bzf == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if bzf == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    bzf == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if ( == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    ( == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if  == NULL || buf == NULL || len < 0)
854,855c854,855
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>     == NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf  NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
855c855
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
(91.7 %, 16983 bytes)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>      NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf ==  || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>     ==  || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf   || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>       || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==  || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (   || buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL  buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL  buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==   buf == NULL || len < 0)
855c855
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
(91.7 %, 16978 bytes)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||  == NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (     == NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (   || buf  NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf  NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||   NULL || len < 0)
855c855
<    (  NULL || buf == NULL || len < 0)
---
>    (      NULL || len < 0)
(91.7 %, 16972 bytes)
855c855
<    (    buf == NULL || len < 0)
---
>    (      NULL || len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (     ==  || len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (       || len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (     == NULL  len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (      NULL  len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (     ==   len < 0)
855c855
<    (    buf == NULL || len < 0)
---
>    (        len < 0)
(91.7 %, 16967 bytes)
855c855
<    (      NULL || len < 0)
---
>    (        len < 0)
855c855
<    (      NULL || len < 0)
---
>    (       ||  < 0)
855c855
<    (      NULL || len < 0)
---
>    (         < 0)
855c855
<    (      NULL || len < 0)
---
>    (       || len  0)
855c855
<    (      NULL || len < 0)
---
>    (        len  0)
855c855
<    (      NULL || len < 0)
---
>    (       ||   0)
855c855
<    (      NULL || len < 0)
---
>    (          0)
(91.7 %, 16961 bytes)
855c855
<    (        len < 0)
---
>    (          0)
855c855
<    (        len < 0)
---
>    (         < )
855c855
<    (        len < 0)
---
>    (          )
855c855
<    (        len < 0)
---
>    (         < 0
855c855
<    (        len < 0)
---
>    (          0
855c855
<    (        len < 0)
---
>    (         < 
(91.7 %, 16957 bytes)
855c855
<    (          0)
---
>    (          
855,856c855,856
<    (          0)
<     ;
---
>    (          )
>     
855,856c855,856
<    (          0)
<     ;
---
>    (          
>     
855c855
<    (          0)
---
>    (          )
857c857
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
855c855
<    (          0)
---
>    (          
857c857
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
855,857c855,857
<    (          0)
<     ;
<   if (!(bzf->writing))
---
>    (          )
>     
>    (!(bzf->writing))
855,857c855,857
<    (          0)
<     ;
<   if (!(bzf->writing))
---
>    (          
>     
>    (!(bzf->writing))
855c855
<    (          0)
---
>    (          0
855,856c855,856
<    (          0)
<     ;
---
>    (          0
>     
855c855
<    (          0)
---
>    (          0
857c857
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
855,857c855,857
<    (          0)
<     ;
<   if (!(bzf->writing))
---
>    (          0
>     
>    (!(bzf->writing))
855c855
<    (          0)
---
>    (          0
857c857
<   if (!(bzf->writing))
---
>   if !(bzf->writing))
855,857c855,857
<    (          0)
<     ;
<   if (!(bzf->writing))
---
>    (          0
>     
>   if !(bzf->writing))
855c855
<    (          0)
---
>    (          0
857c857
<   if (!(bzf->writing))
---
>    !(bzf->writing))
855,857c855,857
<    (          0)
<     ;
<   if (!(bzf->writing))
---
>    (          0
>     
>    !(bzf->writing))
856c856
<     ;
---
>     
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>    (!(bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>   if !(bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>    !(bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>   if ((bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>    ((bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>   if (bzf->writing))
856,857c856,857
<     ;
<   if (!(bzf->writing))
---
>     
>    (bzf->writing))
857c857
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
857c857
<   if (!(bzf->writing))
---
>    !(bzf->writing))
857c857
<   if (!(bzf->writing))
---
>    ((bzf->writing))
(91.7 %, 16955 bytes)
857c857
<    (!(bzf->writing))
---
>    !(bzf->writing))
857c857
<    (!(bzf->writing))
---
>    (bzf->writing))
857c857
<    (!(bzf->writing))
---
>    !bzf->writing))
857c857
<    (!(bzf->writing))
---
>    bzf->writing))
857c857
<    (!(bzf->writing))
---
>    !(->writing))
857c857
<    (!(bzf->writing))
---
>    (->writing))
857c857
<    (!(bzf->writing))
---
>    !->writing))
857c857
<    (!(bzf->writing))
---
>    ->writing))
857c857
<    (!(bzf->writing))
---
>    ((bzf->writing))
857c857
<    (!(bzf->writing))
---
>    (bzf->writing))
857c857
<    (!(bzf->writing))
---
>    ((->writing))
857c857
<    (!(bzf->writing))
---
>    (->writing))
857c857
<    (!(bzf->writing))
---
>    ((bzfwriting))
857c857
<    (!(bzf->writing))
---
>    (bzfwriting))
857c857
<    (!(bzf->writing))
---
>    ((writing))
857c857
<    (!(bzf->writing))
---
>    (writing))
857c857
<    (!(bzf->writing))
---
>    (!bzf->writing))
857c857
<    (!(bzf->writing))
---
>    (!->writing))
857c857
<    (!(bzf->writing))
---
>    (!bzfwriting))
857c857
<    (!(bzf->writing))
---
>    (!writing))
857c857
<    (!(bzf->writing))
---
>    (!bzf->))
(91.7 %, 16954 bytes)
857c857
<    ((bzf->writing))
---
>    (bzf->writing))
857c857
<    ((bzf->writing))
---
>    (->writing))
857c857
<    ((bzf->writing))
---
>    (bzfwriting))
857c857
<    ((bzf->writing))
---
>    (writing))
857c857
<    ((bzf->writing))
---
>    (bzf->))
857c857
<    ((bzf->writing))
---
>    (->))
857c857
<    ((bzf->writing))
---
>    (bzf))
857c857
<    ((bzf->writing))
---
>    ())
857c857
<    ((bzf->writing))
---
>    ((->writing))
857c857
<    ((bzf->writing))
---
>    ((writing))
857c857
<    ((bzf->writing))
---
>    ((->))
857c857
<    ((bzf->writing))
---
>    (())
857c857
<    ((bzf->writing))
---
>    ((->writing)
857c857
<    ((bzf->writing))
---
>    ((writing)
857c857
<    ((bzf->writing))
---
>    ((->)
857c857
<    ((bzf->writing))
---
>    (()
857c857
<    ((bzf->writing))
---
>    ((bzfwriting))
857c857
<    ((bzf->writing))
---
>    ((bzf))
857c857
<    ((bzf->writing))
---
>    ((bzfwriting)
857c857
<    ((bzf->writing))
---
>    ((bzf)
857c857
<    ((bzf->writing))
---
>    ((bzfwriting)
857c857
<    ((bzf->writing))
---
>    ((bzf)
857c857
<    ((bzf->writing))
---
>    ((bzfwriting
857c857
<    ((bzf->writing))
---
>    ((bzf
857c857
<    ((bzf->writing))
---
>    ((bzf->))
857c857
<    ((bzf->writing))
---
>    ((bzf->)
857c857
<    ((bzf->writing))
---
>    ((bzf->)
857c857
<    ((bzf->writing))
---
>    ((bzf->
857,858c857,858
<    ((bzf->writing))
<     ;
---
>    ((bzf->))
>     
857,858c857,858
<    ((bzf->writing))
<     ;
---
>    ((bzf->)
>     
857,858c857,858
<    ((bzf->writing))
<     ;
---
>    ((bzf->)
>     
(91.7 %, 16945 bytes)
857c857
<    ((bzf))
---
>    ((bzf
857,858c857,858
<    ((bzf))
<     ;
---
>    ((bzf)
>     
857,858c857,858
<    ((bzf))
<     ;
---
>    ((bzf
>     
857c857
<    ((bzf))
---
>    ((bzf)
859c859
<   if (ferror)
---
>    (ferror)
857c857
<    ((bzf))
---
>    ((bzf
859c859
<   if (ferror)
---
>    (ferror)
857,859c857,859
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    (ferror)
857,859c857,859
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf
>     
>    (ferror)
857c857
<    ((bzf))
---
>    ((bzf)
857,858c857,858
<    ((bzf))
<     ;
---
>    ((bzf)
>     
857c857
<    ((bzf))
---
>    ((bzf)
859c859
<   if (ferror)
---
>    (ferror)
857,859c857,859
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    (ferror)
857c857
<    ((bzf))
---
>    ((bzf)
859c859
<   if (ferror)
---
>   if ferror)
857,859c857,859
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>   if ferror)
857c857
<    ((bzf))
---
>    ((bzf)
859c859
<   if (ferror)
---
>    ferror)
857,859c857,859
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    ferror)
858c858
<     ;
---
>     
858,859c858,859
<     ;
<   if (ferror)
---
>     
>    (ferror)
858,859c858,859
<     ;
<   if (ferror)
---
>     
>   if ferror)
858,859c858,859
<     ;
<   if (ferror)
---
>     
>    ferror)
858,859c858,859
<     ;
<   if (ferror)
---
>     
>   if ()
858,859c858,859
<     ;
<   if (ferror)
---
>     
>    ()
858,859c858,859
<     ;
<   if (ferror)
---
>     
>   if )
858,859c858,859
<     ;
<   if (ferror)
---
>     
>    )
859c859
<   if (ferror)
---
>    (ferror)
859c859
<   if (ferror)
---
>    ferror)
859c859
<   if (ferror)
---
>    ()
859c859
<   if (ferror)
---
>    )
859c859
<   if (ferror)
---
>    (ferror
859c859
<   if (ferror)
---
>    ferror
(91.7 %, 16943 bytes)
859c859
<    (ferror)
---
>    ferror)
859c859
<    (ferror)
---
>    )
859c859
<    (ferror)
---
>    ferror
859c859
<    (ferror)
---
>    
(91.7 %, 16941 bytes)
859c859
<    ferror
---
>    
862c862
<   if (len == 0)
---
>    (len == 0)
859,860c859,860
<    ferror
<     ;
---
>    
>     
862c862
<   if (len == 0)
---
>    (len == 0)
(91.7 %, 16933 bytes)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>    ( == 0)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>     == 0)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>    (len  0)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>    len  0)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>    (  0)
860c860
<     ;
---
>     
862c862
<    (len == 0)
---
>      0)
862c862
<    (len == 0)
---
>    len == 0)
862c862
<    (len == 0)
---
>     == 0)
862c862
<    (len == 0)
---
>    len  0)
862c862
<    (len == 0)
---
>      0)
862c862
<    (len == 0)
---
>    len == )
862c862
<    (len == 0)
---
>     == )
862c862
<    (len == 0)
---
>    len  )
862c862
<    (len == 0)
---
>      )
862c862
<    (len == 0)
---
>    ( == 0)
862c862
<    (len == 0)
---
>    (  0)
(91.7 %, 16927 bytes)
862,863c862,863
<    (  0)
<     ;
---
>      0
>     
862,863c862,863
<    (  0)
<     ;
---
>      
>     
862c862
<    (  0)
---
>    (  )
862c862
<    (  0)
---
>    (  
862,863c862,863
<    (  0)
<     ;
---
>    (  )
>     
862,863c862,863
<    (  0)
<     ;
---
>    (  
>     
862c862
<    (  0)
---
>    (  )
865c865
<   bzf->strm.avail_in = len;
---
>   ->strm.avail_in = len;
862c862
<    (  0)
---
>    (  
865c865
<   bzf->strm.avail_in = len;
---
>   ->strm.avail_in = len;
862,863c862,863
<    (  0)
<     ;
---
>    (  )
>     
865c865
<   bzf->strm.avail_in = len;
---
>   ->strm.avail_in = len;
862,863c862,863
<    (  0)
<     ;
---
>    (  
>     
865c865
<   bzf->strm.avail_in = len;
---
>   ->strm.avail_in = len;
862c862
<    (  0)
---
>    (  0
862,863c862,863
<    (  0)
<     ;
---
>    (  0
>     
862c862
<    (  0)
---
>    (  0
865c865
<   bzf->strm.avail_in = len;
---
>   ->strm.avail_in = len;
(91.7 %, 16923 bytes)
865c865
<   bzf->strm.avail_in = len;
---
>   avail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzfstrm.avail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf.avail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzfstrmavail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzfavail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzfstrm. = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf. = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzfstrm = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->.avail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->avail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->. = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf-> = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->.avail_in  len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->avail_in  len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->.  len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->  len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->strmavail_in = len;
865c865
<   bzf->strm.avail_in = len;
---
>   bzf->strm = len;
(91.7 %, 16908 bytes)
865,866c865,866
<   bzf = len;
<   bzf->strm.next_in = buf;
---
>   bzf  
>   ->strm.next_in = buf;
865c865
<   bzf = len;
---
>   bzf = ;
865c865
<   bzf = len;
---
>   bzf = 
(91.8 %, 16900 bytes)
866c866
<   ->strm.next_in = buf;
---
>    = buf;
866c866
<   ->strm.next_in = buf;
---
>   ->.next_in = buf;
866c866
<   ->strm.next_in = buf;
---
>   ->next_in = buf;
866c866
<   ->strm.next_in = buf;
---
>   ->. = buf;
866c866
<   ->strm.next_in = buf;
---
>   -> = buf;
866c866
<   ->strm.next_in = buf;
---
>   ->.next_in  buf;
866c866
<   ->strm.next_in = buf;
---
>   ->next_in  buf;
866c866
<   ->strm.next_in = buf;
---
>   ->.  buf;
866c866
<   ->strm.next_in = buf;
---
>   ->  buf;
(91.8 %, 16886 bytes)
866c866
<    = buf;
---
>     
868c868
<   while (True)
---
>    (True)
866c866
<    = buf;
---
>    = ;
866c866
<    = buf;
---
>    = 
866c866
<    = buf;
---
>    = ;
868c868
<   while (True)
---
>    (True)
866c866
<    = buf;
---
>    = 
868c868
<   while (True)
---
>    (True)
866c866
<    = buf;
---
>    = ;
868c868
<   while (True)
---
>   while True)
866c866
<    = buf;
---
>    = 
868c868
<   while (True)
---
>   while True)
866c866
<    = buf;
---
>    = ;
868c868
<   while (True)
---
>    True)
866c866
<    = buf;
---
>    = 
868c868
<   while (True)
---
>    True)
866c866
<    = buf;
---
>    = buf
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>    (True)
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>   while True)
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>    True)
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>   while ()
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>    ()
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>   while )
866c866
<    = buf;
---
>    = buf
868c868
<   while (True)
---
>    )
868c868
<   while (True)
---
>    (True)
868c868
<   while (True)
---
>    True)
868c868
<   while (True)
---
>    ()
868c868
<   while (True)
---
>    )
868c868
<   while (True)
---
>    (True
868c868
<   while (True)
---
>    True
868c868
<   while (True)
---
>    (
868c868
<   while (True)
---
>    
868c868
<   while (True)
---
>   while True)
868c868
<   while (True)
---
>   while )
868c868
<   while (True)
---
>   while True
868c868
<   while (True)
---
>   while 
868,869c868,869
<   while (True)
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>   while True)
>     ->strm.avail_out = BZ_MAX_UNUSED;
868,869c868,869
<   while (True)
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>   while )
>     ->strm.avail_out = BZ_MAX_UNUSED;
868,869c868,869
<   while (True)
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>   while True
>     ->strm.avail_out = BZ_MAX_UNUSED;
868,869c868,869
<   while (True)
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>   while 
>     ->strm.avail_out = BZ_MAX_UNUSED;
868c868
<   while (True)
---
>   while ()
868c868
<   while (True)
---
>   while (
(91.8 %, 16875 bytes)
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     avail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzfstrm.avail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf.avail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzfstrmavail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzfavail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzfstrm. = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf. = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzfstrm = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->.avail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->avail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->. = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf-> = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->.avail_out  BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->avail_out  BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->.  BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->  BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->strmavail_out = BZ_MAX_UNUSED;
869c869
<     bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>     bzf->strm = BZ_MAX_UNUSED;
(91.8 %, 16859 bytes)
869,870c869,870
<     bzf = BZ_MAX_UNUSED;
<   bzf->strm.next_out = bzf->buf;
---
>     bzf  
>   ->strm.next_out = bzf->buf;
869c869
<     bzf = BZ_MAX_UNUSED;
---
>     bzf = ;
869c869
<     bzf = BZ_MAX_UNUSED;
---
>     bzf = 
(91.8 %, 16841 bytes)
870c870
<   ->strm.next_out = bzf->buf;
---
>    = bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->.next_out = bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->next_out = bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->. = bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   -> = bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->.next_out  bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->next_out  bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->.  bzf->buf;
870c870
<   ->strm.next_out = bzf->buf;
---
>   ->  bzf->buf;
(91.8 %, 16826 bytes)
870c870
<    = bzf->buf;
---
>     ;
870c870
<    = bzf->buf;
---
>    = ->buf;
870c870
<    = bzf->buf;
---
>    = buf;
(91.8 %, 16817 bytes)
869a870
>     
871d871
<   ret = 0;
871c871
<   ret = 0;
---
>    = 0;
871c871
<   ret = 0;
---
>     0;
(91.8 %, 16811 bytes)
871,872c871,872
<     ;
<   if (0 != BZ_RUN_OK)
---
>     
>     != BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    (0 != BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    0 != BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    ( != BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>     != BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    (0  BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    0  BZ_RUN_OK)
872c872
<   if (0 != BZ_RUN_OK)
---
>    (  BZ_RUN_OK)
(91.8 %, 16809 bytes)
872c872
<    (0 != BZ_RUN_OK)
---
>    0 != BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>     != BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>    0  BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>      BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>    0 != )
872c872
<    (0 != BZ_RUN_OK)
---
>     != )
872c872
<    (0 != BZ_RUN_OK)
---
>    0  )
872c872
<    (0 != BZ_RUN_OK)
---
>      )
872c872
<    (0 != BZ_RUN_OK)
---
>    ( != BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>    (  BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>    ( != )
872c872
<    (0 != BZ_RUN_OK)
---
>    (  )
872c872
<    (0 != BZ_RUN_OK)
---
>    ( != BZ_RUN_OK
872c872
<    (0 != BZ_RUN_OK)
---
>    (  BZ_RUN_OK
872c872
<    (0 != BZ_RUN_OK)
---
>    ( != 
872c872
<    (0 != BZ_RUN_OK)
---
>    (  
872c872
<    (0 != BZ_RUN_OK)
---
>    (0  BZ_RUN_OK)
872c872
<    (0 != BZ_RUN_OK)
---
>    (0  )
(91.8 %, 16806 bytes)
872c872
<    (  BZ_RUN_OK)
---
>    (  
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  )
>     
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  
>     
872c872
<    (  BZ_RUN_OK)
---
>    (  )
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872c872
<    (  BZ_RUN_OK)
---
>    (  
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  )
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872c872
<    (  BZ_RUN_OK)
---
>    (  BZ_RUN_OK
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  BZ_RUN_OK
>     
872c872
<    (  BZ_RUN_OK)
---
>    (  BZ_RUN_OK
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  BZ_RUN_OK
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
872c872
<    (  BZ_RUN_OK)
---
>    (  BZ_RUN_OK
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf->strm.avail_out < BZ_MAX_UNUSED)
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  BZ_RUN_OK
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf->strm.avail_out < BZ_MAX_UNUSED)
872c872
<    (  BZ_RUN_OK)
---
>    (  BZ_RUN_OK
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    bzf->strm.avail_out < BZ_MAX_UNUSED)
872,873c872,873
<    (  BZ_RUN_OK)
<     ;
---
>    (  BZ_RUN_OK
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    bzf->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    bzf->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if ->strm.avail_out < BZ_MAX_UNUSED)
873c873
<     ;
---
>     
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    ->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzf->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    bzf->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    ->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (bzfstrm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    bzfstrm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    (strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>    strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if ->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzfstrm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf->.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if ->.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if bzf.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if .avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (->strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (strm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (->.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (->strmavail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (strmavail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (->avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzfstrm.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzfstrmavail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzfavail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzfstrm. < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf. < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzfstrm < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->.avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->avail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->. < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf-> < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->.avail_out  BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->avail_out  BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->.  BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->  BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->strmavail_out < BZ_MAX_UNUSED)
875c875
<   if (bzf->strm.avail_out < BZ_MAX_UNUSED)
---
>   if (bzf->strm < BZ_MAX_UNUSED)
(91.8 %, 16790 bytes)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf  
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < )
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < 
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < )
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < 
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < )
877c877
<     if (bzf->strm.avail_in == 0)
---
>     if bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < 
877c877
<     if (bzf->strm.avail_in == 0)
---
>     if bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < )
877c877
<     if (bzf->strm.avail_in == 0)
---
>      bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < 
877c877
<     if (bzf->strm.avail_in == 0)
---
>      bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>     if bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>      bzf->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>     if (->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>     if ->strm.avail_in == 0)
875c875
<   if (bzf < BZ_MAX_UNUSED)
---
>   if (bzf < BZ_MAX_UNUSED
877c877
<     if (bzf->strm.avail_in == 0)
---
>      ->strm.avail_in == 0)
877c877
<     if (bzf->strm.avail_in == 0)
---
>      (bzf->strm.avail_in == 0)
(91.8 %, 16773 bytes)
877c877
<      bzf->strm.avail_in == 0)
---
>      avail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzfstrm.avail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf.avail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzfstrmavail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzfavail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzfstrm. == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf. == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzfstrm == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->.avail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->avail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->. == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf-> == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->.avail_in  0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->avail_in  0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->.  0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->  0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->strmavail_in == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->strm == 0)
877c877
<      bzf->strm.avail_in == 0)
---
>      bzf->strmavail_in  0)
(91.8 %, 16758 bytes)
877,878c877,878
<      bzf == 0)
<       ;
---
>      bzf  
>       
877c877
<      bzf == 0)
---
>      bzf == )
877c877
<      bzf == 0)
---
>      bzf == 
877,878c877,878
<      bzf == 0)
<       ;
---
>      bzf == )
>       
877,878c877,878
<      bzf == 0)
<       ;
---
>      bzf == 
>       
877c877
<      bzf == 0)
---
>      bzf == )
879c879
< }
---
> 
877c877
<      bzf == 0)
---
>      bzf == 
879c879
< }
---
> 
877,879c877,879
<      bzf == 0)
<       ;
< }
---
>      bzf == )
>       
> 
877,879c877,879
<      bzf == 0)
<       ;
< }
---
>      bzf == 
>       
> 
877c877
<      bzf == 0)
---
>      bzf == 0
877,878c877,878
<      bzf == 0)
<       ;
---
>      bzf == 0
>       
877c877
<      bzf == 0)
---
>      bzf == 0
879c879
< }
---
> 
877,879c877,879
<      bzf == 0)
<       ;
< }
---
>      bzf == 0
>       
> 
877c877
<      bzf == 0)
---
>      bzf == 0
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
877,878c877,878
<      bzf == 0)
<       ;
---
>      bzf == 0
>       
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
877c877
<      bzf == 0)
---
>      bzf == 0
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
877,879c877,878
<      bzf == 0)
<       ;
< }
---
>      bzf == 0
>       
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878c878
<       ;
---
>       
878,879c878,879
<       ;
< }
---
>       
> 
878c878
<       ;
---
>       
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878,879c878
<       ;
< }
---
>       
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878c878
<       ;
---
>       
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878,879c878
<       ;
< }
---
>       
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878c878
<       ;
---
>       
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
878,879c878
<       ;
< }
---
>       
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879c879
< }
---
> 
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
> void BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
> void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
879d878
< }
881c880,881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> 
>  BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API()(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  ()(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
>  )(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void )(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
881c881
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
(91.8 %, 16752 bytes)
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void )(int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void )int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ((int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (int *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()( *bzerror, BZFILE *b, int abandon,
881c881
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (( *bzerror, BZFILE *b, int abandon,
(91.8 %, 16750 bytes)
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void ( *bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void  *bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void (int bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void int bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void ( bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void  bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose *bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteCloseint bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteCloseint *, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose *, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteCloseint , BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose , BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( *bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( *, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( , BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( *bzerror BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( bzerror BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose( * BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(  BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int bzerror, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int , BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int bzerror BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int  BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int bzerror,  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int ,  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int bzerror  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int   *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *, BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int * BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *,  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *, BZFILE b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int * BZFILE b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *,  b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *  b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror BZFILE *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror BZFILE b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror  b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror BZFILE *, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror  *, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror BZFILE , int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror  , int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  *b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  *, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  , int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  *b int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  b int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,  * int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror,   int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE  int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b,  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE ,  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE   abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *, int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE * int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *,  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *, int ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE * int ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *,  ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *  ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b int abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b int ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b  ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b int abandon
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b  abandon
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b int 
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b  
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  abandon,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  abandon
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  abandon,
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  ,
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  abandon
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b,  
>                                int *nbytes_in,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int ,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int 
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int ,
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int 
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int ,
>                               unsigned  *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int 
>                               unsigned  *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int ,
>                                 *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int 
>                                 *nbytes_in,
881c881
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                                int *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                               unsigned  *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                                 *nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                               unsigned int nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                                int nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                               unsigned  nbytes_in,
881,882c881,882
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon
>                                 nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                                int *nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                                 *nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                                int nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                                 nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                                int *,
882c882
<                               unsigned int *nbytes_in,
---
>                                 *,
882c882
<                               unsigned int *nbytes_in,
---
>                                int ,
882c882
<                               unsigned int *nbytes_in,
---
>                                 ,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  *nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  *,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  ,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  *nbytes_in
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  nbytes_in
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  *
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned  
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned int nbytes_in,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned int ,
882c882
<                               unsigned int *nbytes_in,
---
>                               unsigned int nbytes_in
(91.8 %, 16747 bytes)
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  nbytes_in,
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  ,
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  nbytes_in
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  nbytes_in,
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  ,
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  nbytes_in
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  
>                                int *nbytes_out) {
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  *,
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  *
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *,
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *,
>                               unsigned  *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *
>                               unsigned  *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *,
>                                 *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *
>                                 *nbytes_out) {
882c882
<                               unsigned  *nbytes_in,
---
>                               unsigned  *nbytes_in
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                                int *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                               unsigned  *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                                 *nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                               unsigned int nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                                int nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                               unsigned  nbytes_out) {
882,883c882,883
<                               unsigned  *nbytes_in,
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_in
>                                 nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                int *nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                 *nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                int nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                 nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                int *) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                 *) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                int ) {
883c883
<                               unsigned int *nbytes_out) {
---
>                                 ) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  ) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  *nbytes_out {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  nbytes_out {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned  * {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned   {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned int nbytes_out) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned int ) {
883c883
<                               unsigned int *nbytes_out) {
---
>                               unsigned int nbytes_out {
(91.8 %, 16744 bytes)
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  nbytes_out) {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  ) {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  nbytes_out {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned   {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  nbytes_out) 
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  ) 
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  nbytes_out 
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned   
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *) {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  * {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *) 
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  * 
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *) {
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  * {
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *) 
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  * 
>   ;
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *nbytes_out {
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *nbytes_out 
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out {
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out 
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out {
>   BZ2_bzWriteClose64
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out 
>   BZ2_bzWriteClose64
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out {
>   
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out 
>   
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *nbytes_out) 
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out) 
>   ;
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out) 
>   BZ2_bzWriteClose64
883,884c883,884
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
---
>                               unsigned  *nbytes_out) 
>   
883c883
<                               unsigned  *nbytes_out) {
---
>                               unsigned  *nbytes_out) 
885c885
< }
---
> 
883,885c883,885
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
< }
---
>                               unsigned  *nbytes_out) 
>   ;
> 
883,885c883,885
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
< }
---
>                               unsigned  *nbytes_out) 
>   BZ2_bzWriteClose64
> 
883,885c883,885
<                               unsigned  *nbytes_out) {
<   BZ2_bzWriteClose64;
< }
---
>                               unsigned  *nbytes_out) 
>   
> 
884c884
<   BZ2_bzWriteClose64;
---
>   ;
(91.8 %, 16724 bytes)
884c884
<   ;
---
>   
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_APIBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
884c884
<   ;
---
>   
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
884c884
<   ;
---
>   
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_APIBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API()(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  ()(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  BZ_API)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  )(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void )(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
(91.8 %, 16718 bytes)
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void )(int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void )int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ((int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (int *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()( *bzerror, BZFILE *b, int abandon,
887c887
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (( *bzerror, BZFILE *b, int abandon,
(91.8 %, 16716 bytes)
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void ( *bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void  *bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void (int bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void int bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void ( bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void  bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64 *bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64 bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int *, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64 *, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int , BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64 , BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( *bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( *, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( , BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( *bzerror BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( bzerror BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( * BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(  BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int bzerror, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int , BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int bzerror BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int  BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int bzerror,  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int ,  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int bzerror  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int   *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int * BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *,  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int * BZFILE b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *,  b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *  b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror BZFILE *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror BZFILE b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror  b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror BZFILE *, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror  *, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror BZFILE , int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror  , int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  *b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  *, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  , int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  *b int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  b int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  * int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,   int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE  int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b,  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE ,  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE   abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *, int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE * int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *,  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *, int ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE * int ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *,  ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *  ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b int abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b int ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b  ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b int abandon
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b  abandon
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b int 
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b  
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  abandon,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  abandon
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  abandon,
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  ,
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  abandon
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b,  
>                                  int *nbytes_in_lo32,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int ,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int 
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int ,
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int 
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int ,
>                                 unsigned  *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int 
>                                 unsigned  *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int ,
>                                   *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int 
>                                   *nbytes_in_lo32,
887c887
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                  int *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                 unsigned  *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                   *nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                 unsigned int nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                  int nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                 unsigned  nbytes_in_lo32,
887,888c887,888
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon
>                                   nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                  int *nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                   *nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                  int nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                   nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                  int *,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                   *,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                  int ,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                   ,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  *nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  *,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  ,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  *nbytes_in_lo32
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  nbytes_in_lo32
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  *
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned  
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int nbytes_in_lo32,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int ,
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int nbytes_in_lo32
888c888
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int 
(91.8 %, 16713 bytes)
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  nbytes_in_lo32,
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  ,
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  nbytes_in_lo32
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_lo32,
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  ,
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_lo32
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  
>                                  int *nbytes_in_hi32,
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  *,
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  *
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *,
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *,
>                                 unsigned  *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *
>                                 unsigned  *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *,
>                                   *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *
>                                   *nbytes_in_hi32,
888c888
<                                 unsigned  *nbytes_in_lo32,
---
>                                 unsigned  *nbytes_in_lo32
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                  int *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                 unsigned  *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                   *nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                 unsigned int nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                  int nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                 unsigned  nbytes_in_hi32,
888,889c888,889
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_lo32
>                                   nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                  int *nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                   *nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                  int nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                   nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                  int *,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                   *,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                  int ,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                   ,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  ,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_hi32
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_hi32
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  *
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned  
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int nbytes_in_hi32,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int ,
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int nbytes_in_hi32
889c889
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int 
(91.8 %, 16710 bytes)
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_hi32,
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  ,
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  nbytes_in_hi32
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  nbytes_in_hi32,
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  ,
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  nbytes_in_hi32
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  
>                                  int *nbytes_out_lo32,
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  *,
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  *
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *,
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *,
>                                 unsigned  *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *
>                                 unsigned  *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *,
>                                   *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *
>                                   *nbytes_out_lo32,
889c889
<                                 unsigned  *nbytes_in_hi32,
---
>                                 unsigned  *nbytes_in_hi32
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                  int *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                 unsigned  *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                   *nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                 unsigned int nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                  int nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                 unsigned  nbytes_out_lo32,
889,890c889,890
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_in_hi32
>                                   nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                  int *nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                   *nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                  int nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                   nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                  int *,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                   *,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                  int ,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                   ,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  ,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_out_lo32
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  nbytes_out_lo32
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  *
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned  
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int nbytes_out_lo32,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int ,
890c890
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int nbytes_out_lo32
(91.8 %, 16707 bytes)
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  nbytes_out_lo32,
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  ,
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  nbytes_out_lo32
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_lo32,
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  ,
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_lo32
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  
>                                  int *nbytes_out_hi32) {
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  *,
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  *
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *,
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *,
>                                 unsigned  *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *
>                                 unsigned  *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *,
>                                   *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *
>                                   *nbytes_out_hi32) {
890c890
<                                 unsigned  *nbytes_out_lo32,
---
>                                 unsigned  *nbytes_out_lo32
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                  int *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                 unsigned  *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                   *nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                 unsigned int nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                  int nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                 unsigned  nbytes_out_hi32) {
890,891c890,891
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32
>                                   nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                  int *nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                   *nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                  int nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                   nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                  int *) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                   *) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                  int ) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                   ) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  ) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32 {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned  * {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned   {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned int nbytes_out_hi32) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned int ) {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned int nbytes_out_hi32 {
891c891
<                                 unsigned int *nbytes_out_hi32) {
---
>                                 unsigned int  {
(91.8 %, 16704 bytes)
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32) {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  ) {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32 {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned   {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32) 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  ) 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  nbytes_out_hi32 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned   
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *) {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  * {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *) 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  * 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *) {
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  * {
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *) 
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  * 
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 {
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 {
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 {
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 {
893c893
<   bzFile *bzf = b;
---
>    bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32 
893c893
<   bzFile *bzf = b;
---
>    bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>    bzf = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>   bzFile * = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>    * = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>   bzFile  = b;
891c891
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_hi32) 
893c893
<   bzFile *bzf = b;
---
>     = b;
893c893
<   bzFile *bzf = b;
---
>    *bzf = b;
893c893
<   bzFile *bzf = b;
---
>    bzf = b;
893c893
<   bzFile *bzf = b;
---
>    * = b;
893c893
<   bzFile *bzf = b;
---
>     = b;
893c893
<   bzFile *bzf = b;
---
>    *bzf  b;
893c893
<   bzFile *bzf = b;
---
>    bzf  b;
893c893
<   bzFile *bzf = b;
---
>    *  b;
893c893
<   bzFile *bzf = b;
---
>      b;
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
893c893
<   bzFile *bzf = b;
---
>   bzFile  = b;
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
893c893
<   bzFile *bzf = b;
---
>   bzFile   b;
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
893c893
<   bzFile *bzf = b;
---
>   bzFile  = ;
893c893
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
893c893
<   bzFile *bzf = b;
---
>   bzFile   ;
893c893
<   bzFile *bzf = b;
---
>   bzFile * = b;
893c893
<   bzFile *bzf = b;
---
>   bzFile *  b;
893c893
<   bzFile *bzf = b;
---
>   bzFile * = ;
893c893
<   bzFile *bzf = b;
---
>   bzFile *  ;
893c893
<   bzFile *bzf = b;
---
>   bzFile * = b
893c893
<   bzFile *bzf = b;
---
>   bzFile *  b
893c893
<   bzFile *bzf = b;
---
>   bzFile * = 
893c893
<   bzFile *bzf = b;
---
>   bzFile *  
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
895c895
<   if (bzf == NULL)
---
>    (bzf == NULL)
893c893
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
895c895
<   if (bzf == NULL)
---
>    (bzf == NULL)
(91.9 %, 16702 bytes)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>    (bzf == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>   if bzf == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>    bzf == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>   if ( == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>    ( == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>   if  == NULL)
893c893
<   bzFile *bzf  ;
---
>   bzFile *bzf  
895c895
<   if (bzf == NULL)
---
>     == NULL)
895c895
<   if (bzf == NULL)
---
>    (bzf == NULL)
895c895
<   if (bzf == NULL)
---
>    bzf == NULL)
895c895
<   if (bzf == NULL)
---
>    ( == NULL)
895c895
<   if (bzf == NULL)
---
>     == NULL)
895c895
<   if (bzf == NULL)
---
>    (bzf  NULL)
895c895
<   if (bzf == NULL)
---
>    bzf  NULL)
895c895
<   if (bzf == NULL)
---
>    (  NULL)
(91.9 %, 16700 bytes)
895c895
<    (bzf == NULL)
---
>    bzf == NULL)
895c895
<    (bzf == NULL)
---
>     == NULL)
895c895
<    (bzf == NULL)
---
>    bzf  NULL)
895c895
<    (bzf == NULL)
---
>      NULL)
895c895
<    (bzf == NULL)
---
>    bzf == )
895c895
<    (bzf == NULL)
---
>     == )
895c895
<    (bzf == NULL)
---
>    bzf  )
895c895
<    (bzf == NULL)
---
>      )
895c895
<    (bzf == NULL)
---
>    ( == NULL)
895c895
<    (bzf == NULL)
---
>    (  NULL)
895c895
<    (bzf == NULL)
---
>    ( == )
895c895
<    (bzf == NULL)
---
>    (  )
895c895
<    (bzf == NULL)
---
>    ( == NULL
895c895
<    (bzf == NULL)
---
>    (  NULL
895c895
<    (bzf == NULL)
---
>    ( == 
895c895
<    (bzf == NULL)
---
>    (  
895c895
<    (bzf == NULL)
---
>    (bzf  NULL)
895c895
<    (bzf == NULL)
---
>    (bzf  )
(91.9 %, 16695 bytes)
895c895
<    (  NULL)
---
>    (  
895,896c895,896
<    (  NULL)
<     ;
---
>    (  )
>     
895,896c895,896
<    (  NULL)
<     ;
---
>    (  
>     
895c895
<    (  NULL)
---
>    (  )
897c897
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
895c895
<    (  NULL)
---
>    (  
897c897
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
895,897c895,897
<    (  NULL)
<     ;
<   if (!(bzf->writing))
---
>    (  )
>     
>    (!(bzf->writing))
895,897c895,897
<    (  NULL)
<     ;
<   if (!(bzf->writing))
---
>    (  
>     
>    (!(bzf->writing))
895c895
<    (  NULL)
---
>    (  NULL
895,896c895,896
<    (  NULL)
<     ;
---
>    (  NULL
>     
895c895
<    (  NULL)
---
>    (  NULL
897c897
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
895,897c895,897
<    (  NULL)
<     ;
<   if (!(bzf->writing))
---
>    (  NULL
>     
>    (!(bzf->writing))
895c895
<    (  NULL)
---
>    (  NULL
897c897
<   if (!(bzf->writing))
---
>   if !(bzf->writing))
895,897c895,897
<    (  NULL)
<     ;
<   if (!(bzf->writing))
---
>    (  NULL
>     
>   if !(bzf->writing))
895c895
<    (  NULL)
---
>    (  NULL
897c897
<   if (!(bzf->writing))
---
>    !(bzf->writing))
895,897c895,897
<    (  NULL)
<     ;
<   if (!(bzf->writing))
---
>    (  NULL
>     
>    !(bzf->writing))
896c896
<     ;
---
>     
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>    (!(bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>   if !(bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>    !(bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>   if ((bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>    ((bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>   if (bzf->writing))
896,897c896,897
<     ;
<   if (!(bzf->writing))
---
>     
>    (bzf->writing))
897c897
<   if (!(bzf->writing))
---
>    (!(bzf->writing))
897c897
<   if (!(bzf->writing))
---
>    !(bzf->writing))
897c897
<   if (!(bzf->writing))
---
>    ((bzf->writing))
(91.9 %, 16693 bytes)
897c897
<    (!(bzf->writing))
---
>    !(bzf->writing))
897c897
<    (!(bzf->writing))
---
>    (bzf->writing))
897c897
<    (!(bzf->writing))
---
>    !bzf->writing))
897c897
<    (!(bzf->writing))
---
>    bzf->writing))
897c897
<    (!(bzf->writing))
---
>    !(->writing))
897c897
<    (!(bzf->writing))
---
>    (->writing))
897c897
<    (!(bzf->writing))
---
>    !->writing))
897c897
<    (!(bzf->writing))
---
>    ->writing))
897c897
<    (!(bzf->writing))
---
>    ((bzf->writing))
897c897
<    (!(bzf->writing))
---
>    (bzf->writing))
897c897
<    (!(bzf->writing))
---
>    ((->writing))
897c897
<    (!(bzf->writing))
---
>    (->writing))
897c897
<    (!(bzf->writing))
---
>    ((bzfwriting))
897c897
<    (!(bzf->writing))
---
>    (bzfwriting))
897c897
<    (!(bzf->writing))
---
>    ((writing))
897c897
<    (!(bzf->writing))
---
>    (writing))
897c897
<    (!(bzf->writing))
---
>    (!bzf->writing))
897c897
<    (!(bzf->writing))
---
>    (!->writing))
897c897
<    (!(bzf->writing))
---
>    (!bzfwriting))
(91.9 %, 16692 bytes)
897c897
<    ((bzf->writing))
---
>    (bzf->writing))
897c897
<    ((bzf->writing))
---
>    (->writing))
897c897
<    ((bzf->writing))
---
>    (bzfwriting))
897c897
<    ((bzf->writing))
---
>    (writing))
897c897
<    ((bzf->writing))
---
>    (bzf->))
897c897
<    ((bzf->writing))
---
>    (->))
897c897
<    ((bzf->writing))
---
>    (bzf))
897c897
<    ((bzf->writing))
---
>    ())
897c897
<    ((bzf->writing))
---
>    ((->writing))
897c897
<    ((bzf->writing))
---
>    ((writing))
897c897
<    ((bzf->writing))
---
>    ((->))
897c897
<    ((bzf->writing))
---
>    (())
897c897
<    ((bzf->writing))
---
>    ((->writing)
897c897
<    ((bzf->writing))
---
>    ((writing)
897c897
<    ((bzf->writing))
---
>    ((->)
897c897
<    ((bzf->writing))
---
>    (()
897c897
<    ((bzf->writing))
---
>    ((bzfwriting))
897c897
<    ((bzf->writing))
---
>    ((bzf))
897c897
<    ((bzf->writing))
---
>    ((bzfwriting)
897c897
<    ((bzf->writing))
---
>    ((bzf)
897c897
<    ((bzf->writing))
---
>    ((bzfwriting)
897c897
<    ((bzf->writing))
---
>    ((bzf)
897c897
<    ((bzf->writing))
---
>    ((bzfwriting
897c897
<    ((bzf->writing))
---
>    ((bzf
897c897
<    ((bzf->writing))
---
>    ((bzf->))
897c897
<    ((bzf->writing))
---
>    ((bzf->)
897c897
<    ((bzf->writing))
---
>    ((bzf->)
(91.9 %, 16683 bytes)
897c897
<    ((bzf))
---
>    ((bzf
897,898c897,898
<    ((bzf))
<     ;
---
>    ((bzf)
>     
897,898c897,898
<    ((bzf))
<     ;
---
>    ((bzf
>     
897c897
<    ((bzf))
---
>    ((bzf)
899c899
<   if (ferror)
---
>    (ferror)
897c897
<    ((bzf))
---
>    ((bzf
899c899
<   if (ferror)
---
>    (ferror)
897,899c897,899
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    (ferror)
897,899c897,899
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf
>     
>    (ferror)
897c897
<    ((bzf))
---
>    ((bzf)
897,898c897,898
<    ((bzf))
<     ;
---
>    ((bzf)
>     
897c897
<    ((bzf))
---
>    ((bzf)
899c899
<   if (ferror)
---
>    (ferror)
897,899c897,899
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    (ferror)
897c897
<    ((bzf))
---
>    ((bzf)
899c899
<   if (ferror)
---
>   if ferror)
897,899c897,899
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>   if ferror)
897c897
<    ((bzf))
---
>    ((bzf)
899c899
<   if (ferror)
---
>    ferror)
897,899c897,899
<    ((bzf))
<     ;
<   if (ferror)
---
>    ((bzf)
>     
>    ferror)
898c898
<     ;
---
>     
898,899c898,899
<     ;
<   if (ferror)
---
>     
>    (ferror)
898,899c898,899
<     ;
<   if (ferror)
---
>     
>   if ferror)
898,899c898,899
<     ;
<   if (ferror)
---
>     
>    ferror)
898,899c898,899
<     ;
<   if (ferror)
---
>     
>   if ()
898,899c898,899
<     ;
<   if (ferror)
---
>     
>    ()
898,899c898,899
<     ;
<   if (ferror)
---
>     
>   if )
898,899c898,899
<     ;
<   if (ferror)
---
>     
>    )
899c899
<   if (ferror)
---
>    (ferror)
899c899
<   if (ferror)
---
>    ferror)
899c899
<   if (ferror)
---
>    ()
899c899
<   if (ferror)
---
>    )
899c899
<   if (ferror)
---
>    (ferror
899c899
<   if (ferror)
---
>    ferror
(91.9 %, 16681 bytes)
899c899
<    (ferror)
---
>    ferror)
899c899
<    (ferror)
---
>    )
899c899
<    (ferror)
---
>    ferror
899c899
<    (ferror)
---
>    
899,900c899,900
<    (ferror)
<     ;
---
>    ferror)
>     
(91.9 %, 16679 bytes)
899c899
<    ferror
---
>    
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32 != NULL)
899,900c899,900
<    ferror
<     ;
---
>    
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32 != NULL)
899c899
<    ferror
---
>    
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL)
899,900c899,900
<    ferror
<     ;
---
>    
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL)
899c899
<    ferror
---
>    
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
899,900c899,900
<    ferror
<     ;
---
>    
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
900c900
<     ;
---
>     
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32 != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    ( != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if  != NULL)
900c900
<     ;
---
>     
902c902
<   if (nbytes_in_lo32 != NULL)
---
>     != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32 != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    ( != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>     != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>    (  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>      NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if  != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if   NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if  != )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32  )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if   )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (  )
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != NULL
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (  NULL
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != 
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (  
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (nbytes_in_lo32  NULL)
902c902
<   if (nbytes_in_lo32 != NULL)
---
>   if (nbytes_in_lo32  )
(91.9 %, 16663 bytes)
902c902
<   if (  NULL)
---
>   if (  
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>     nbytes_in_lo32 = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>     nbytes_in_lo32 = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>     * = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>     * = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>      = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>      = 0;
902c902
<   if (  NULL)
---
>   if (  NULL
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     nbytes_in_lo32 = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     * = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>      = 0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     *nbytes_in_lo32  0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     nbytes_in_lo32  0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     *  0;
902,903c902,903
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>       0;
903c903
<     *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 = 0;
903c903
<     *nbytes_in_lo32 = 0;
---
>      = 0;
903c903
<     *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32  0;
903c903
<     *nbytes_in_lo32 = 0;
---
>       0;
(91.9 %, 16662 bytes)
903c903
<     nbytes_in_lo32 = 0;
---
>      = 0;
903c903
<     nbytes_in_lo32 = 0;
---
>       0;
903c903
<     nbytes_in_lo32 = 0;
---
>      = ;
903c903
<     nbytes_in_lo32 = 0;
---
>       ;
(91.9 %, 16647 bytes)
903c903
<       0;
---
>       
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>    (nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>    (nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>   if nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>   if nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>    nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>    nbytes_in_hi32 != NULL)
903c903
<       0;
---
>       0
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>    (nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>   if nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>    nbytes_in_hi32 != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>   if ( != NULL)
903,904c903,904
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>    ( != NULL)
(91.9 %, 16645 bytes)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32 != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>    ( != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>     != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>    (  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>      NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if  != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if   NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if  != )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if   )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (  )
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != 
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (  
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  NULL)
904c904
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  )
(91.9 %, 16629 bytes)
904c904
<   if (  NULL)
---
>   if (  
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>     nbytes_in_hi32 = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>     nbytes_in_hi32 = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>     * = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>     * = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>      = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>      = 0;
904c904
<   if (  NULL)
---
>   if (  NULL
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     nbytes_in_hi32 = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     * = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>      = 0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     *nbytes_in_hi32  0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     nbytes_in_hi32  0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     *  0;
904,905c904,905
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>       0;
905c905
<     *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32 = 0;
905c905
<     *nbytes_in_hi32 = 0;
---
>      = 0;
905c905
<     *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32  0;
905c905
<     *nbytes_in_hi32 = 0;
---
>       0;
(91.9 %, 16628 bytes)
905c905
<     nbytes_in_hi32 = 0;
---
>      = 0;
905c905
<     nbytes_in_hi32 = 0;
---
>       0;
905c905
<     nbytes_in_hi32 = 0;
---
>      = ;
905c905
<     nbytes_in_hi32 = 0;
---
>       ;
(91.9 %, 16613 bytes)
905c905
<       0;
---
>       
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>    (nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>    (nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>   if nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>   if nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>    nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>    nbytes_out_lo32 != NULL)
905c905
<       0;
---
>       0
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>    (nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>   if nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>    nbytes_out_lo32 != NULL)
905,906c905,906
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>   if ( != NULL)
(91.9 %, 16611 bytes)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32 != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>    ( != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>     != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>    (  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>      NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if  != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if   NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if  != )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if   )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (  )
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != 
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (  
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  NULL)
906c906
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  )
(91.9 %, 16594 bytes)
906c906
<   if (  NULL)
---
>   if (  
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>     nbytes_out_lo32 = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>     nbytes_out_lo32 = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>     * = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>     * = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>      = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>      = 0;
906c906
<   if (  NULL)
---
>   if (  NULL
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     nbytes_out_lo32 = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     * = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>      = 0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     *nbytes_out_lo32  0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     nbytes_out_lo32  0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     *  0;
906,907c906,907
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>       0;
907c907
<     *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32 = 0;
907c907
<     *nbytes_out_lo32 = 0;
---
>      = 0;
907c907
<     *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32  0;
907c907
<     *nbytes_out_lo32 = 0;
---
>       0;
(91.9 %, 16593 bytes)
907c907
<     nbytes_out_lo32 = 0;
---
>      = 0;
907c907
<     nbytes_out_lo32 = 0;
---
>       0;
907c907
<     nbytes_out_lo32 = 0;
---
>      = ;
907c907
<     nbytes_out_lo32 = 0;
---
>       ;
(91.9 %, 16577 bytes)
907c907
<       0;
---
>       
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>    (nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>    (nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>   if nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>   if nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>    nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>    nbytes_out_hi32 != NULL)
907c907
<       0;
---
>       0
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>    (nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>   if nbytes_out_hi32 != NULL)
907,908c907,908
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>    nbytes_out_hi32 != NULL)
(91.9 %, 16575 bytes)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32 != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>    ( != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>     != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>    (  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>      NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if  != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if   NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if  != )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if   )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (  )
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != 
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (  
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  NULL)
908c908
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  )
(91.9 %, 16558 bytes)
908c908
<   if (  NULL)
---
>   if (  
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>     nbytes_out_hi32 = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>     nbytes_out_hi32 = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>     * = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>     * = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>      = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>      = 0;
908c908
<   if (  NULL)
---
>   if (  NULL
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     nbytes_out_hi32 = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     * = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>      = 0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     *nbytes_out_hi32  0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     nbytes_out_hi32  0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     *  0;
908,909c908,909
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>       0;
909c909
<     *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32 = 0;
909c909
<     *nbytes_out_hi32 = 0;
---
>      = 0;
909c909
<     *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32  0;
909c909
<     *nbytes_out_hi32 = 0;
---
>       0;
(91.9 %, 16557 bytes)
909c909
<     nbytes_out_hi32 = 0;
---
>      = 0;
909c909
<     nbytes_out_hi32 = 0;
---
>       0;
909c909
<     nbytes_out_hi32 = 0;
---
>      = ;
909c909
<     nbytes_out_hi32 = 0;
---
>       ;
(91.9 %, 16541 bytes)
909c909
<       0;
---
>       
909c909
<       0;
---
>       ;
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    ((!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    ((!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       ;
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       ;
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       0
909c909
<       0;
---
>       0
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    ((!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       0
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       0
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       0
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
909c909
<       0;
---
>       0
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
(91.9 %, 16539 bytes)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (!abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    !abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    ((abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    (abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>    abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if !abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if !) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if () && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if ) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (abandon) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!) && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if () && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (!abandon && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (abandon && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if (! && bzf->lastErr == BZ_OK)
911c911
<   if ((!abandon) && bzf->lastErr == BZ_OK)
---
>   if ( && bzf->lastErr == BZ_OK)
(91.9 %, 16537 bytes)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (abandon && ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if ( && ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (abandon  ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (  ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (! && bzf->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!  bzf->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (! && ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!  ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (! && bzflastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!  bzflastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (! && lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!  lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!abandon  bzf->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!abandon  ->lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!abandon  bzflastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!abandon  lastErr == BZ_OK)
911c911
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (!abandon  bzf-> == BZ_OK)
(91.9 %, 16528 bytes)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  lastErr == BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  -> == BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!   == BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  ->lastErr  BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  lastErr  BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  ->  BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!    BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  bzflastErr == BZ_OK)
911c911
<   if (!  bzf->lastErr == BZ_OK)
---
>   if (!  bzf == BZ_OK)
(91.9 %, 16514 bytes)
911c911
<   if (!    BZ_OK)
---
>   if (!    
913c913
<     if (!abandon && !ferror)
---
>      !abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>      (!abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>     if !abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>      !abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>     if (abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>      (abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>     if abandon && !ferror)
911c911
<   if (!    BZ_OK)
---
>   if (!    BZ_OK
913c913
<     if (!abandon && !ferror)
---
>      abandon && !ferror)
913c913
<     if (!abandon && !ferror)
---
>      (!abandon && !ferror)
(91.9 %, 16505 bytes)
913c913
<      !abandon && !ferror)
---
>        ferror)
913c913
<      !abandon && !ferror)
---
>      ! && !ferror)
913c913
<      !abandon && !ferror)
---
>      !  !ferror)
(92.0 %, 16494 bytes)
913c913
<        ferror)
---
>        
915c915
<       if (nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32 != NULL)
913c913
<        ferror)
---
>        ferror
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>        (nbytes_in_lo32 != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>       if nbytes_in_lo32 != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32 != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>       if ( != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>        ( != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>       if  != NULL)
913c913
<        ferror)
---
>        ferror
915c915
<       if (nbytes_in_lo32 != NULL)
---
>         != NULL)
(92.0 %, 16484 bytes)
915c915
<        nbytes_in_lo32 != NULL)
---
>          
915c915
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  NULL)
915c915
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  )
915c915
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  NULL
915c915
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  
915,916c915,916
<        nbytes_in_lo32 != NULL)
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  NULL)
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32 != NULL)
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  )
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
(92.0 %, 16478 bytes)
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         * = bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>          = bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         *nbytes_in_lo32  bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         *  bzf->strm.total_in_lo32;
915,916c915,916
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>           bzf->strm.total_in_lo32;
916c916
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
916c916
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzf->strm.total_in_lo32;
916c916
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
916c916
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzf->strm.total_in_lo32;
(92.0 %, 16477 bytes)
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzf->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzf->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = ->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           ->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzfstrm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzfstrm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  ->strm.total_in_lo32;
916c916
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzfstrm.total_in_lo32;
(92.0 %, 16462 bytes)
916c916
<           bzf->strm.total_in_lo32;
---
>           strm.total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           ->.total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           .total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           ->strmtotal_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           strmtotal_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           ->total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzfstrm.total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf.total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzfstrmtotal_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzftotal_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzfstrm.;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf.;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzfstrm;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->.total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->total_in_lo32;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->.;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->;
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->.total_in_lo32
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->total_in_lo32
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->.
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->
916c916
<           bzf->strm.total_in_lo32;
---
>           bzf->strmtotal_in_lo32;
(92.0 %, 16442 bytes)
916,917c916,917
<           bzf;
<   if (nbytes_in_hi32 != NULL)
---
>           bzf
>     != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32 != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32 != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    ( != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>     != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>    (  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>      NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if  != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if   NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if  != )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if   )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (  )
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != 
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (  
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  NULL)
917c917
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  )
(92.0 %, 16426 bytes)
917c917
<   if (  NULL)
---
>   if (  
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>     * = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>     * = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>      = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>      = bzf->strm.total_in_hi32;
917c917
<   if (  NULL)
---
>   if (  NULL
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     * = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>      = bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     *nbytes_in_hi32  bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     *  bzf->strm.total_in_hi32;
917,918c917,918
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>       bzf->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzf->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzf->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32 = ->strm.total_in_hi32;
918c918
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = ->strm.total_in_hi32;
(92.0 %, 16425 bytes)
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzf->strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzf->strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = ->strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       ->strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzfstrm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzfstrm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
918c918
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  ->strm.total_in_hi32;
(92.0 %, 16410 bytes)
918c918
<       bzf->strm.total_in_hi32;
---
>       strm.total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       ->.total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       .total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       ->strmtotal_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       strmtotal_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       ->total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzfstrm.total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf.total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzfstrmtotal_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzftotal_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzfstrm.;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf.;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzfstrm;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->.total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->total_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->.;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->.total_in_hi32
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->total_in_hi32
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->.
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->strmtotal_in_hi32;
918c918
<       bzf->strm.total_in_hi32;
---
>       bzf->strm;
(92.0 %, 16390 bytes)
918,919c918,919
<       bzf;
<   if (nbytes_out_lo32 != NULL)
---
>       bzf
>     != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32 != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32 != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    ( != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>     != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>    (  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>      NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if  != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if   NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if  != )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if   )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (  )
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != 
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (  
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  NULL)
919c919
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  )
(92.0 %, 16373 bytes)
919c919
<   if (  NULL)
---
>   if (  
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>     * = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>     * = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>      = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>      = bzf->strm.total_out_lo32;
919c919
<   if (  NULL)
---
>   if (  NULL
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     * = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>      = bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     *nbytes_out_lo32  bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     *  bzf->strm.total_out_lo32;
919,920c919,920
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>       bzf->strm.total_out_lo32;
920c920
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
920c920
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzf->strm.total_out_lo32;
920c920
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
920c920
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzf->strm.total_out_lo32;
(92.0 %, 16372 bytes)
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzf->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzf->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = ->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       ->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzfstrm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzfstrm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  ->strm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzfstrm.total_out_lo32;
920c920
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  strm.total_out_lo32;
(92.0 %, 16356 bytes)
920c920
<       bzf->strm.total_out_lo32;
---
>       strm.total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       ->.total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       .total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       ->strmtotal_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       strmtotal_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       ->total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzfstrm.total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf.total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzfstrmtotal_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzftotal_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzfstrm.;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf.;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzfstrm;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->.total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->total_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->.;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->.total_out_lo32
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->total_out_lo32
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->.
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->strmtotal_out_lo32;
920c920
<       bzf->strm.total_out_lo32;
---
>       bzf->strm;
(92.0 %, 16335 bytes)
920,921c920,921
<       bzf;
<   if (nbytes_out_hi32 != NULL)
---
>       bzf
>     != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32 != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32 != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    ( != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>     != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>    (  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>      NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if  != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if   NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if  != )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if   )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (  )
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != 
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (  
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  NULL)
921c921
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  )
(92.0 %, 16318 bytes)
921c921
<   if (  NULL)
---
>   if (  
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>     * = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>     * = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>      = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>      = bzf->strm.total_out_hi32;
921c921
<   if (  NULL)
---
>   if (  NULL
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     * = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>      = bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     *nbytes_out_hi32  bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     *  bzf->strm.total_out_hi32;
921,922c921,922
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>       bzf->strm.total_out_hi32;
922c922
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
922c922
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzf->strm.total_out_hi32;
922c922
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
922c922
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzf->strm.total_out_hi32;
(92.0 %, 16317 bytes)
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzf->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzf->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = ->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       ->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzfstrm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzfstrm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  ->strm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzfstrm.total_out_hi32;
922c922
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  strm.total_out_hi32;
(92.0 %, 16301 bytes)
922c922
<       bzf->strm.total_out_hi32;
---
>       strm.total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       ->.total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       .total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       ->strmtotal_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       strmtotal_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       ->total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzfstrm.total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf.total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzfstrmtotal_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzftotal_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzfstrm.;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf.;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzfstrm;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->.total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->total_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->.;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->.total_out_hi32
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->total_out_hi32
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->.
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->strmtotal_out_hi32;
922c922
<       bzf->strm.total_out_hi32;
---
>       bzf->strm;
(92.1 %, 16280 bytes)
922c922
<       bzf;
---
>       bzf
924,925c924,925
<   BZ_SETERR;
<   0;
---
>   
>   ;
924c924
<   BZ_SETERR;
---
>   ;
(92.1 %, 16268 bytes)
925,927c925,927
<   ;
<   0;
< }
---
>   
>   
> 
926c926
<   0;
---
>   ;
926c926
<   0;
---
>   
926,927c926,927
<   0;
< }
---
>   ;
> 
(92.1 %, 16267 bytes)
926c926
<   ;
---
>   
926,927c926,927
<   ;
< }
---
>   
> 
926c926
<   ;
---
>   
929c929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
(92.1 %, 16266 bytes)
927c927
< }
---
> 
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE (BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
927d926
< }
929c928,929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  (BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
< BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
(92.1 %, 16260 bytes)
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  (BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_API()(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  ()(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_API)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  )(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *()(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
(92.1 %, 16254 bytes)
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *)(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen)int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *)int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *()(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *((int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *()int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *()( *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(( *bzerror, FILE *f, int verbosity, int small,
929c929
<  *(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
---
>  *() *bzerror, FILE *f, int verbosity, int small,
(92.1 %, 16252 bytes)
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *( *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  * *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *int bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *( bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  * bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpenint bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpenint *, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen *, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpenint , FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen , FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( *bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( *, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( , FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( *bzerror FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( bzerror FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen( * FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(  FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int bzerror, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int , FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int bzerror FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int  FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int bzerror,  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int ,  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int bzerror  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int   *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *, FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int * FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *,  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *, FILE f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int * FILE f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *,  f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *  f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror FILE *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror FILE f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror  f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror FILE *, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror  *, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror FILE , int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror  , int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  *f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  *, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  , int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  *f int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  f int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,  * int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror,   int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE f, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE , int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE f int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE  int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE f,  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE ,  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE f  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE   verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *, int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE * int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *,  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *, int , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE * int , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *,  , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *  , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f int verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f int , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f  , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f int verbosity int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f  verbosity int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f int  int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f   int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity, int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,   int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity,  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  ,  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f,    small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int , int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int  int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int ,  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int   small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int , int ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int  int ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int ,  ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int   ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int small
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  small
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int 
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small,
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  ,
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  
>                                 *unused, int nUnused) {
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                                void unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                                void unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                                 unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                                 unused, int nUnused) {
929c929
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                 *unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                void unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                 unused, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                void *, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                 *, int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                void , int nUnused) {
929,930c929,930
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
---
>  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                                 , int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 *unused, int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 unused, int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 *, int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 , int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 *unused int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 unused int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                 * int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                  int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void unused, int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void , int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void unused int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void  int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void unused,  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void ,  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void unused  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void   nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *, int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void * int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *,  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *, int ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void * int ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *,  ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *  ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused int nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused int ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused  ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused int nUnused {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused  nUnused {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused int  {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused   {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  nUnused) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  nUnused {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,   {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  nUnused) 
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  ) 
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,  nUnused 
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused,   
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int ) {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int  {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int ) 
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int  
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int ) {
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int  {
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int ) 
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int  
>    *bzf = NULL;
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int nUnused {
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int nUnused 
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused {
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused 
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused {
>   bzFile bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused 
>   bzFile bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused {
>    bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused 
>    bzf = NULL;
930c930
<                                void *unused, int nUnused) {
---
>                                void *unused, int nUnused) 
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>    *bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>   bzFile bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>    bzf = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>   bzFile * = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>    * = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>   bzFile  = NULL;
930,931c930,931
<                                void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                                void *unused, int nUnused) 
>     = NULL;
931c931
<   bzFile *bzf = NULL;
---
>    *bzf = NULL;
931c931
<   bzFile *bzf = NULL;
---
>    bzf = NULL;
931c931
<   bzFile *bzf = NULL;
---
>    * = NULL;
931c931
<   bzFile *bzf = NULL;
---
>     = NULL;
931c931
<   bzFile *bzf = NULL;
---
>    *bzf  NULL;
931c931
<   bzFile *bzf = NULL;
---
>    bzf  NULL;
931c931
<   bzFile *bzf = NULL;
---
>    *  NULL;
931c931
<   bzFile *bzf = NULL;
---
>      NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile bzf = NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile  = NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile bzf  NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile   NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile bzf = ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile  = ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile bzf  ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile   ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile * = ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *  ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL
931c931
<   bzFile *bzf = NULL;
---
>   bzFile * = 
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *  
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf  NULL;
>    ret;
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf  ;
>    ret;
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf  NULL
>    ret;
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf  
>    ret;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = ;
931c931
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = 
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf = ;
>    ret;
931,932c931,932
<   bzFile *bzf = NULL;
<   int ret;
---
>   bzFile *bzf = 
>    ret;
(92.1 %, 16247 bytes)
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>    ret;
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>   int ;
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>    ;
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>   int ret
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>    ret
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>   int 
931,932c931,932
<   bzFile *bzf  ;
<   int ret;
---
>   bzFile *bzf  
>    
932c932
<   int ret;
---
>    ret;
932c932
<   int ret;
---
>    ;
932c932
<   int ret;
---
>    ret
932c932
<   int ret;
---
>    
932c932
<   int ret;
---
>    ret;
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>    ;
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>    ret
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>    
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>   int ;
932c932
<   int ret;
---
>   int 
932c932
<   int ret;
---
>   int ;
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>   int 
934c934
<   BZ_SETERR;
---
>   ;
932c932
<   int ret;
---
>   int ;
934c934
<   BZ_SETERR;
---
>   BZ_SETERR
932c932
<   int ret;
---
>   int 
934c934
<   BZ_SETERR;
---
>   BZ_SETERR
932c932
<   int ret;
---
>   int ;
934c934
<   BZ_SETERR;
---
>   
932c932
<   int ret;
---
>   int 
934c934
<   BZ_SETERR;
---
>   
932c932
<   int ret;
---
>   int ret
932c932
<   int ret;
---
>   int ret
934c934
<   BZ_SETERR;
---
>   ;
(92.1 %, 16246 bytes)
934c934
<   BZ_SETERR;
---
>   ;
934c934
<   BZ_SETERR;
---
>   
934c934
<   BZ_SETERR;
---
>   ;
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    (f == NULL || (small != 0 && small != 1) ||
(92.1 %, 16237 bytes)
934c934
<   ;
---
>   
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    (f == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>   if f == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    f == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>   if ( == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    ( == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>   if  == NULL || (small != 0 && small != 1) ||
934c934
<   ;
---
>   
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>     == NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    (f == NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    f == NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    ( == NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>     == NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    (f  NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    f  NULL || (small != 0 && small != 1) ||
936c936
<   if (f == NULL || (small != 0 && small != 1) ||
---
>    (  NULL || (small != 0 && small != 1) ||
(92.1 %, 16235 bytes)
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    f == NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>     == NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    f  NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>      NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    f ==  || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>     ==  || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    f   || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>       || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    ( == NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    (  NULL || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    ( ==  || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    (   || (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    ( == NULL  (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    (  NULL  (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    ( ==   (small != 0 && small != 1) ||
936c936
<    (f == NULL || (small != 0 && small != 1) ||
---
>    (    (small != 0 && small != 1) ||
(92.1 %, 16232 bytes)
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (    (small != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (   || small != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (    small != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (   || ( != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (    ( != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (   ||  != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (     != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (  NULL  (small != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (  NULL  small != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (  NULL  ( != 0 && small != 1) ||
936c936
<    (  NULL || (small != 0 && small != 1) ||
---
>    (  NULL   != 0 && small != 1) ||
(92.1 %, 16226 bytes)
936c936
<    (    (small != 0 && small != 1) ||
---
>    (     != 0 && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    small  0 && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (      0 && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    small !=  && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (     !=  && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    small   && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (       && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    ( != 0 && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    (  0 && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    ( !=  && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    (   && small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    ( != 0  small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    (  0  small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    ( !=   small != 1) ||
936c936
<    (    (small != 0 && small != 1) ||
---
>    (    (    small != 1) ||
(92.1 %, 16219 bytes)
936c936
<    (    (  0 && small != 1) ||
---
>    (    (    small != 1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (   &&  != 1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (     != 1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (   && small  1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (    small  1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (   &&   1) ||
936c936
<    (    (  0 && small != 1) ||
---
>    (    (      1) ||
(92.1 %, 16216 bytes)
936c936
<    (    (    small != 1) ||
---
>    (    (      1) ||
936c936
<    (    (    small != 1) ||
---
>    (    (     != ) ||
936c936
<    (    (    small != 1) ||
---
>    (    (      ) ||
936c936
<    (    (    small != 1) ||
---
>    (    (     != 1 ||
936c936
<    (    (    small != 1) ||
---
>    (    (      1 ||
936c936
<    (    (    small != 1) ||
---
>    (    (     !=  ||
936c936
<    (    (    small != 1) ||
---
>    (    (       ||
936c936
<    (    (    small != 1) ||
---
>    (    (    small  1) ||
936c936
<    (    (    small != 1) ||
---
>    (    (    small  ) ||
(92.1 %, 16209 bytes)
936c936
<    (    (      1) ||
---
>    (    (       ||
936c936
<    (    (      1) ||
---
>    (    (      ) 
936c936
<    (    (      1) ||
---
>    (    (       
936,937c936,937
<    (    (      1) ||
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>    (    (      ) ||
>       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
936,937c936,937
<    (    (      1) ||
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>    (    (       ||
>       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
936,937c936,937
<    (    (      1) ||
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>    (    (      ) 
>       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
936,937c936,937
<    (    (      1) ||
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>    (    (       
>       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
936c936
<    (    (      1) ||
---
>    (    (      1 ||
936c936
<    (    (      1) ||
---
>    (    (      1 
936,937c936,937
<    (    (      1) ||
<       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>    (    (      1 ||
>       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
(92.1 %, 16204 bytes)
937c937
<       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity > 4) || (unused == NULL && nUnused != 0) ||
937c937
<       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>       verbosity  0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
937c937
<       verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>       verbosity   || verbosity > 4) || (unused == NULL && nUnused != 0) ||
(92.1 %, 16191 bytes)
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>              || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  4) || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  ) || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  4 || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity   || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  4)  (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  )  (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity  4  (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity    (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity > ) || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity >  || (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity > )  (unused == NULL && nUnused != 0) ||
937c937
<           verbosity > 4) || (unused == NULL && nUnused != 0) ||
---
>           verbosity >   (unused == NULL && nUnused != 0) ||
(92.1 %, 16189 bytes)
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity    (unused == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity   || unused == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity    unused == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity   || ( == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity    ( == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity   ||  == NULL && nUnused != 0) ||
937c937
<           verbosity  ) || (unused == NULL && nUnused != 0) ||
---
>           verbosity     == NULL && nUnused != 0) ||
(92.1 %, 16187 bytes)
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity    unused  NULL && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity      NULL && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity    unused ==  && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity     ==  && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity    unused   && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity       && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity   ||  == NULL && nUnused != 0) ||
937c937
<           verbosity   || unused == NULL && nUnused != 0) ||
---
>           verbosity   ||   NULL && nUnused != 0) ||
(92.1 %, 16173 bytes)
937c937
<           verbosity       && nUnused != 0) ||
---
>           verbosity          ) ||
937c937
<           verbosity       && nUnused != 0) ||
---
>           verbosity       &&  != 0) ||
937c937
<           verbosity       && nUnused != 0) ||
---
>           verbosity       &&   0) ||
(92.1 %, 16161 bytes)
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity           
>        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937c937
<           verbosity          ) ||
---
>           verbosity          ) 
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>       unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>       ( != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>       (unused  NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>       unused  NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>       (  NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
937,938c937,938
<           verbosity          ) ||
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           verbosity          ) 
>         NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>       unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
(92.1 %, 16151 bytes)
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>           nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=  && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=  && nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=  && ( < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   ( < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=  &&  < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=    < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        != NULL  (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        != NULL  nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        != NULL  ( < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        != NULL   < 0 || nUnused > BZ_MAX_UNUSED)))
(92.1 %, 16145 bytes)
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=    < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   nUnused  0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=     0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   nUnused <  || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=    <  || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   nUnused   || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=      || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   ( < 0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   ( <  || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (   || nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   ( < 0  nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (  0  nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   ( <   nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (    nUnused > BZ_MAX_UNUSED)))
(92.1 %, 16137 bytes)
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (    nUnused > BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (   ||  > BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (     > BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (   || nUnused  BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (    nUnused  BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (   ||   BZ_MAX_UNUSED)))
938c938
<        !=   (  0 || nUnused > BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)))
(92.1 %, 16134 bytes)
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (     > )))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (      )))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (     > BZ_MAX_UNUSED))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (     > ))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (      ))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (    nUnused  BZ_MAX_UNUSED)))
938c938
<        !=   (    nUnused > BZ_MAX_UNUSED)))
---
>        !=   (    nUnused  )))
(92.1 %, 16126 bytes)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      ))
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      ))
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      )
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      ))
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      )
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      )
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED)
>     
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED)
>     
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED
>     
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED)
>     
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
941c941
<   if (ferror)
---
>    (ferror)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED)
941c941
<   if (ferror)
---
>    (ferror)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
941c941
<   if (ferror)
---
>    (ferror)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED)
>     
941c941
<   if (ferror)
---
>    (ferror)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
941c941
<   if (ferror)
---
>    (ferror)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
941c941
<   if (ferror)
---
>    (ferror)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
941c941
<   if (ferror)
---
>   if ferror)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
941c941
<   if (ferror)
---
>   if ferror)
938c938
<        !=   (      BZ_MAX_UNUSED)))
---
>        !=   (      BZ_MAX_UNUSED))
941c941
<   if (ferror)
---
>    ferror)
938,939c938,939
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>        !=   (      BZ_MAX_UNUSED))
>     
941c941
<   if (ferror)
---
>    ferror)
939c939
<     ;
---
>     
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>    (ferror)
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>   if ferror)
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>    ferror)
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>   if ()
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>    ()
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>   if )
939c939
<     ;
---
>     
941c941
<   if (ferror)
---
>    )
941c941
<   if (ferror)
---
>    (ferror)
941c941
<   if (ferror)
---
>    ferror)
941c941
<   if (ferror)
---
>    ()
941c941
<   if (ferror)
---
>    )
941c941
<   if (ferror)
---
>    (ferror
941c941
<   if (ferror)
---
>    ferror
(92.1 %, 16124 bytes)
941c941
<    (ferror)
---
>    ferror)
941c941
<    (ferror)
---
>    )
941c941
<    (ferror)
---
>    ferror
941c941
<    (ferror)
---
>    
(92.1 %, 16122 bytes)
941c941
<    ferror
---
>    
944c944
<   bzf = malloc;
---
>    = malloc;
941,942c941,942
<    ferror
<     ;
---
>    
>     
944c944
<   bzf = malloc;
---
>    = malloc;
941c941
<    ferror
---
>    
944c944
<   bzf = malloc;
---
>   bzf  malloc;
941,942c941,942
<    ferror
<     ;
---
>    
>     
944c944
<   bzf = malloc;
---
>   bzf  malloc;
941c941
<    ferror
---
>    
944c944
<   bzf = malloc;
---
>     malloc;
941,942c941,942
<    ferror
<     ;
---
>    
>     
944c944
<   bzf = malloc;
---
>     malloc;
(92.1 %, 16112 bytes)
942c942
<     ;
---
>     
944,945c944,945
<     malloc;
<   if (bzf == NULL)
---
>     malloc
>    (bzf == NULL)
942c942
<     ;
---
>     
944,945c944,945
<     malloc;
<   if (bzf == NULL)
---
>     
>    (bzf == NULL)
(92.1 %, 16108 bytes)
944,945c944,945
<     malloc
<    (bzf == NULL)
---
>     
>    (  NULL)
944,945c944,945
<     malloc
<    (bzf == NULL)
---
>     
>      NULL)
945c945
<    (bzf == NULL)
---
>    bzf == NULL)
945c945
<    (bzf == NULL)
---
>     == NULL)
945c945
<    (bzf == NULL)
---
>    bzf  NULL)
945c945
<    (bzf == NULL)
---
>      NULL)
945c945
<    (bzf == NULL)
---
>    bzf == )
945c945
<    (bzf == NULL)
---
>     == )
945c945
<    (bzf == NULL)
---
>    bzf  )
945c945
<    (bzf == NULL)
---
>      )
945c945
<    (bzf == NULL)
---
>    ( == NULL)
(92.1 %, 16097 bytes)
945,946c945,946
<    (  NULL)
<     ;
---
>      NULL
>     
945,946c945,946
<    (  NULL)
<     ;
---
>      
>     
(92.1 %, 16094 bytes)
945c945
<      NULL
---
>      
948c948
<   BZ_SETERR;
---
>   BZ_SETERR
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
945c945
<      NULL
---
>      
948c948
<   BZ_SETERR;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   ;
948c948
<   BZ_SETERR;
---
>   
948c948
<   BZ_SETERR;
---
>   ;
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   ;
950c950
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
948c948
<   BZ_SETERR;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
948c948
<   BZ_SETERR;
---
>   ;
950c950
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   BZ_SETERR
948c948
<   BZ_SETERR;
---
>   BZ_SETERR
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
948c948
<   BZ_SETERR;
---
>   BZ_SETERR
950c950
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
(92.2 %, 16085 bytes)
948c948
<   ;
---
>   
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   bzf-> = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   -> = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>   bzf = False;
948c948
<   ;
---
>   
950c950
<   bzf->initialisedOk = False;
---
>    = False;
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
950c950
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
950c950
<   bzf->initialisedOk = False;
---
>   -> = False;
950c950
<   bzf->initialisedOk = False;
---
>    = False;
950c950
<   bzf->initialisedOk = False;
---
>   ->initialisedOk  False;
950c950
<   bzf->initialisedOk = False;
---
>   initialisedOk  False;
950c950
<   bzf->initialisedOk = False;
---
>   ->  False;
950c950
<   bzf->initialisedOk = False;
---
>     False;
950c950
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
950c950
<   bzf->initialisedOk = False;
---
>   bzf = False;
(92.2 %, 16066 bytes)
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     
>   handle = f;
950c950
<     False;
---
>     False
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   ->handle = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   bzfhandle = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   handle = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   bzf-> = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   -> = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>   bzf = f;
950,951c950,951
<     False;
<   bzf->handle = f;
---
>     False
>    = f;
951c951
<   bzf->handle = f;
---
>   ->handle = f;
951c951
<   bzf->handle = f;
---
>   handle = f;
951c951
<   bzf->handle = f;
---
>   -> = f;
951c951
<   bzf->handle = f;
---
>    = f;
951c951
<   bzf->handle = f;
---
>   ->handle  f;
951c951
<   bzf->handle = f;
---
>   handle  f;
951c951
<   bzf->handle = f;
---
>   ->  f;
951c951
<   bzf->handle = f;
---
>     f;
951c951
<   bzf->handle = f;
---
>   bzfhandle = f;
951c951
<   bzf->handle = f;
---
>   bzf = f;
(92.2 %, 16054 bytes)
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     
>   bufN = 0;
951c951
<     f;
---
>     f
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   ->bufN = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   bzfbufN = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   bufN = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   bzf-> = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   -> = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>   bzf = 0;
951,952c951,952
<     f;
<   bzf->bufN = 0;
---
>     f
>    = 0;
952c952
<   bzf->bufN = 0;
---
>   ->bufN = 0;
952c952
<   bzf->bufN = 0;
---
>   bufN = 0;
952c952
<   bzf->bufN = 0;
---
>   -> = 0;
952c952
<   bzf->bufN = 0;
---
>    = 0;
952c952
<   bzf->bufN = 0;
---
>   ->bufN  0;
952c952
<   bzf->bufN = 0;
---
>   bufN  0;
952c952
<   bzf->bufN = 0;
---
>   ->  0;
952c952
<   bzf->bufN = 0;
---
>     0;
(92.2 %, 16044 bytes)
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>     
>   ->writing = False;
952c952
<    = 0;
---
>    = ;
952c952
<    = 0;
---
>    = 
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = ;
>   ->writing = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 
>   ->writing = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = ;
>   bzfwriting = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 
>   bzfwriting = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = ;
>   writing = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 
>   writing = False;
952c952
<    = 0;
---
>    = 0
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 0
>   ->writing = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 0
>   bzfwriting = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 0
>   writing = False;
952,953c952,953
<    = 0;
<   bzf->writing = False;
---
>    = 0
>   bzf-> = False;
(92.2 %, 16042 bytes)
953c953
<   bzf->writing = False;
---
>   writing = False;
953c953
<   bzf->writing = False;
---
>   -> = False;
953c953
<   bzf->writing = False;
---
>    = False;
953c953
<   bzf->writing = False;
---
>   ->writing  False;
953c953
<   bzf->writing = False;
---
>   writing  False;
953c953
<   bzf->writing = False;
---
>   ->  False;
953c953
<   bzf->writing = False;
---
>     False;
953c953
<   bzf->writing = False;
---
>   bzfwriting = False;
953c953
<   bzf->writing = False;
---
>   bzf = False;
(92.2 %, 16029 bytes)
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     
>   strm.bzalloc = NULL;
953c953
<     False;
---
>     False
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   ->strm.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzfstrm.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   strm.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzf->.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   ->.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzf.bzalloc = NULL;
953,954c953,954
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   .bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   ->strm.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   strm.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   ->.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   ->strmbzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   ->bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrmbzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzfbzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm. = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf. = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->. = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf-> = NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc  NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc  NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.  NULL;
954c954
<   bzf->strm.bzalloc = NULL;
---
>   bzf->  NULL;
(92.2 %, 16015 bytes)
954,955c954,955
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf  
>   ->strm.bzfree = NULL;
954c954
<   bzf = NULL;
---
>   bzf = ;
954c954
<   bzf = NULL;
---
>   bzf = 
954,955c954,955
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf = ;
>   ->strm.bzfree = NULL;
954,955c954,955
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf = 
>   ->strm.bzfree = NULL;
954,955c954,955
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf = ;
>   bzfstrm.bzfree = NULL;
(92.2 %, 16006 bytes)
955c955
<   ->strm.bzfree = NULL;
---
>    = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->.bzfree = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->bzfree = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->. = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   -> = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->.bzfree  NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->bzfree  NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->.  NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->  NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree = NULL;
955c955
<   ->strm.bzfree = NULL;
---
>   ->strm = NULL;
(92.2 %, 15993 bytes)
955,956c955,956
<    = NULL;
<   bzf->strm.opaque = NULL;
---
>     
>   ->strm.opaque = NULL;
955c955
<    = NULL;
---
>    = ;
955c955
<    = NULL;
---
>    = 
(92.2 %, 15984 bytes)
956c956
<   ->strm.opaque = NULL;
---
>    = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->.opaque = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->opaque = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->. = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   -> = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->.opaque  NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->opaque  NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->.  NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->  NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->strmopaque = NULL;
956c956
<   ->strm.opaque = NULL;
---
>   ->strm = NULL;
(92.2 %, 15971 bytes)
956c956
<    = NULL;
---
>     
958c958
<   while (nUnused > 0)
---
>    (nUnused > 0)
956c956
<    = NULL;
---
>    = ;
956c956
<    = NULL;
---
>    = 
956c956
<    = NULL;
---
>    = ;
958c958
<   while (nUnused > 0)
---
>    (nUnused > 0)
956c956
<    = NULL;
---
>    = 
958c958
<   while (nUnused > 0)
---
>    (nUnused > 0)
956c956
<    = NULL;
---
>    = ;
958c958
<   while (nUnused > 0)
---
>   while nUnused > 0)
956c956
<    = NULL;
---
>    = 
958c958
<   while (nUnused > 0)
---
>   while nUnused > 0)
956c956
<    = NULL;
---
>    = ;
958c958
<   while (nUnused > 0)
---
>    nUnused > 0)
956c956
<    = NULL;
---
>    = 
958c958
<   while (nUnused > 0)
---
>    nUnused > 0)
956c956
<    = NULL;
---
>    = NULL
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>    (nUnused > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>   while nUnused > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>    nUnused > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>   while ( > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>    ( > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>   while  > 0)
956c956
<    = NULL;
---
>    = NULL
958c958
<   while (nUnused > 0)
---
>     > 0)
958c958
<   while (nUnused > 0)
---
>    (nUnused > 0)
958c958
<   while (nUnused > 0)
---
>    nUnused > 0)
958c958
<   while (nUnused > 0)
---
>    ( > 0)
958c958
<   while (nUnused > 0)
---
>     > 0)
958c958
<   while (nUnused > 0)
---
>    (nUnused  0)
958c958
<   while (nUnused > 0)
---
>    nUnused  0)
958c958
<   while (nUnused > 0)
---
>    (  0)
958c958
<   while (nUnused > 0)
---
>      0)
958c958
<   while (nUnused > 0)
---
>   while nUnused > 0)
958c958
<   while (nUnused > 0)
---
>   while  > 0)
958c958
<   while (nUnused > 0)
---
>   while nUnused  0)
958c958
<   while (nUnused > 0)
---
>   while   0)
958c958
<   while (nUnused > 0)
---
>   while nUnused > )
958c958
<   while (nUnused > 0)
---
>   while  > )
958c958
<   while (nUnused > 0)
---
>   while nUnused  )
958c958
<   while (nUnused > 0)
---
>   while   )
958c958
<   while (nUnused > 0)
---
>   while ( > 0)
958c958
<   while (nUnused > 0)
---
>   while (  0)
958c958
<   while (nUnused > 0)
---
>   while ( > )
958c958
<   while (nUnused > 0)
---
>   while (  )
958c958
<   while (nUnused > 0)
---
>   while ( > 0
958c958
<   while (nUnused > 0)
---
>   while (  0
958c958
<   while (nUnused > 0)
---
>   while ( > 
958c958
<   while (nUnused > 0)
---
>   while (  
958c958
<   while (nUnused > 0)
---
>   while (nUnused  0)
958c958
<   while (nUnused > 0)
---
>   while (nUnused  )
(92.2 %, 15963 bytes)
958c958
<   while (  0)
---
>   while (  
958c958
<   while (  0)
---
>   while (  )
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  )
960c960
<     ret = BZ2_bzDecompressInit;
---
>     ret  BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  
960c960
<     ret = BZ2_bzDecompressInit;
---
>     ret  BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  )
960c960
<     ret = BZ2_bzDecompressInit;
---
>       BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  
960c960
<     ret = BZ2_bzDecompressInit;
---
>       BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  0
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>     ret  BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>       BZ2_bzDecompressInit;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>     ret = ;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = ;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>     ret  ;
958c958
<   while (  0)
---
>   while (  0
960c960
<     ret = BZ2_bzDecompressInit;
---
>       ;
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = BZ2_bzDecompressInit;
960c960
<     ret = BZ2_bzDecompressInit;
---
>       BZ2_bzDecompressInit;
960c960
<     ret = BZ2_bzDecompressInit;
---
>      = ;
960c960
<     ret = BZ2_bzDecompressInit;
---
>       ;
(92.2 %, 15959 bytes)
960c960
<       BZ2_bzDecompressInit;
---
>       
960,961c960,961
<       BZ2_bzDecompressInit;
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>       ;
>    (BZ2_bzDecompressInit != BZ_OK)
(92.2 %, 15938 bytes)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>    BZ2_bzDecompressInit != BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>    ( != BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>     != BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>    (BZ2_bzDecompressInit  BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>    BZ2_bzDecompressInit  BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>    (  BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>      BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if BZ2_bzDecompressInit != BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if  != BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if BZ2_bzDecompressInit  BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if   BZ_OK)
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if BZ2_bzDecompressInit != )
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if  != )
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if BZ2_bzDecompressInit  )
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if   )
961c961
<   if (BZ2_bzDecompressInit != BZ_OK)
---
>   if ( != BZ_OK)
(92.2 %, 15914 bytes)
961,962c961,962
<    (  BZ_OK)
<     ;
---
>      BZ_OK
>     
961,962c961,962
<    (  BZ_OK)
<     ;
---
>      
>     
961c961
<    (  BZ_OK)
---
>    (  )
961c961
<    (  BZ_OK)
---
>    (  
961,962c961,962
<    (  BZ_OK)
<     ;
---
>    (  )
>     
961,962c961,962
<    (  BZ_OK)
<     ;
---
>    (  
>     
961c961
<    (  BZ_OK)
---
>    (  )
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   ->strm.avail_in = bzf->bufN;
961c961
<    (  BZ_OK)
---
>    (  
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   ->strm.avail_in = bzf->bufN;
961,962c961,962
<    (  BZ_OK)
<     ;
---
>    (  )
>     
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   ->strm.avail_in = bzf->bufN;
961,962c961,962
<    (  BZ_OK)
<     ;
---
>    (  
>     
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   ->strm.avail_in = bzf->bufN;
961c961
<    (  BZ_OK)
---
>    (  BZ_OK
(92.2 %, 15906 bytes)
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   avail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzfstrm.avail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf.avail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzfstrmavail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzfavail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzfstrm. = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf. = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzfstrm = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->.avail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->avail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->. = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf-> = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->.avail_in  bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->avail_in  bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->.  bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->  bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->strmavail_in = bzf->bufN;
964c964
<   bzf->strm.avail_in = bzf->bufN;
---
>   bzf->strm = bzf->bufN;
(92.2 %, 15891 bytes)
964c964
<   bzf = bzf->bufN;
---
>   bzf  ;
964c964
<   bzf = bzf->bufN;
---
>   bzf = ->bufN;
964c964
<   bzf = bzf->bufN;
---
>   bzf = bufN;
964c964
<   bzf = bzf->bufN;
---
>   bzf = ->;
964c964
<   bzf = bzf->bufN;
---
>   bzf = ;
964c964
<   bzf = bzf->bufN;
---
>   bzf = ->bufN
964c964
<   bzf = bzf->bufN;
---
>   bzf = bufN
964c964
<   bzf = bzf->bufN;
---
>   bzf = ->
964c964
<   bzf = bzf->bufN;
---
>   bzf = 
(92.3 %, 15881 bytes)
964,965c964,965
<   bzf  ;
<   bzf->strm.next_in = bzf->buf;
---
>   bzf  
>   .next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   ->strm.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   strm.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   ->.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   .next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   ->strmnext_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   strmnext_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   ->next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzfstrm.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzfstrmnext_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzfnext_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzfstrm. = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf. = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzfstrm = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->.next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->next_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->. = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf-> = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->.next_in  bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->next_in  bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->.  bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->  bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->strmnext_in = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->strm = bzf->buf;
965c965
<   bzf->strm.next_in = bzf->buf;
---
>   bzf->strmnext_in  bzf->buf;
(92.3 %, 15867 bytes)
965c965
<   bzf = bzf->buf;
---
>   bzf  ;
965c965
<   bzf = bzf->buf;
---
>   bzf = ->buf;
965c965
<   bzf = bzf->buf;
---
>   bzf = buf;
965c965
<   bzf = bzf->buf;
---
>   bzf = ->;
965c965
<   bzf = bzf->buf;
---
>   bzf = ;
965c965
<   bzf = bzf->buf;
---
>   bzf = ->buf
965c965
<   bzf = bzf->buf;
---
>   bzf = buf
965c965
<   bzf = bzf->buf;
---
>   bzf = ->
965c965
<   bzf = bzf->buf;
---
>   bzf = 
(92.3 %, 15858 bytes)
965c965
<   bzf  ;
---
>   bzf  
967c967
<   bzf->initialisedOk = True;
---
>    = True;
967c967
<   bzf->initialisedOk = True;
---
>   ->initialisedOk = True;
967c967
<   bzf->initialisedOk = True;
---
>   initialisedOk = True;
967c967
<   bzf->initialisedOk = True;
---
>   -> = True;
967c967
<   bzf->initialisedOk = True;
---
>    = True;
967c967
<   bzf->initialisedOk = True;
---
>   ->initialisedOk  True;
967c967
<   bzf->initialisedOk = True;
---
>   initialisedOk  True;
967c967
<   bzf->initialisedOk = True;
---
>   ->  True;
(92.3 %, 15839 bytes)
967,968c967,968
<    = True;
<   return malloc;
---
>     
>    malloc;
967c967
<    = True;
---
>    = ;
967c967
<    = True;
---
>    = 
967,968c967,968
<    = True;
<   return malloc;
---
>    = ;
>    malloc;
967,968c967,968
<    = True;
<   return malloc;
---
>    = 
>    malloc;
967,968c967,968
<    = True;
<   return malloc;
---
>    = ;
>   return ;
967,968c967,968
<    = True;
<   return malloc;
---
>    = 
>   return ;
967,968c967,968
<    = True;
<   return malloc;
---
>    = ;
>    ;
967,968c967,968
<    = True;
<   return malloc;
---
>    = 
>    ;
967c967
<    = True;
---
>    = True
967,968c967,968
<    = True;
<   return malloc;
---
>    = True
>    malloc;
967,968c967,968
<    = True;
<   return malloc;
---
>    = True
>   return ;
967,968c967,968
<    = True;
<   return malloc;
---
>    = True
>    ;
(92.3 %, 15828 bytes)
968,969c968,969
<    malloc;
< }
---
>    
> 
968c968
<    malloc;
---
>    ;
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968c968
<    malloc;
---
>    
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968,969c968
<    malloc;
< }
---
>    ;
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968,969c968
<    malloc;
< }
---
>    
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968c968
<    malloc;
---
>    malloc
968,969c968,969
<    malloc;
< }
---
>    malloc
> 
968c968
<    malloc;
---
>    malloc
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968,969c968
<    malloc;
< }
---
>    malloc
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968c968
<    malloc;
---
>    malloc
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968,969c968
<    malloc;
< }
---
>    malloc
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
> void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968c968
<    malloc;
---
>    malloc
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
968,969c968
<    malloc;
< }
---
>    malloc
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969c969
< }
---
> 
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
> void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
> void BZ_APIBZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ_APIBZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
> void BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
969d968
< }
971c970,971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> 
>  BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_APIBZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API()(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  ()(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  BZ_API)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
>  )(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void ()(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void )(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void (BZ2_bzReadClose(int *bzerror, BZFILE *b) {
971c971
< void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
(92.3 %, 15822 bytes)
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void )(int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void (int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose)int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void )int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void ()(int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void ((int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void ()int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void (int *bzerror, BZFILE *b) {
971c971
< void (BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
---
> void ()( *bzerror, BZFILE *b) {
(92.3 %, 15820 bytes)
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void ( *bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void  *bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void (int bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void int bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void ( bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void  bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint *bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose *bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint *, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose *, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint , BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose , BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( *bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( *, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( , BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( *bzerror BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( bzerror BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( * BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(  BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int bzerror, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int , BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int bzerror BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int  BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int bzerror,  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int ,  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int bzerror  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int   *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *, BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int * BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *,  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *, BZFILE b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int * BZFILE b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *,  b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *  b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror BZFILE *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror BZFILE b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror  b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror BZFILE *) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror  *) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror BZFILE ) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror  ) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  *b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  *) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  ) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  *b {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  b {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,  * {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror,   {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE b) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE ) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE b {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE  {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE b) 
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE ) 
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE b 
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE  
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *) {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE * {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *) 
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE * 
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *) {
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE * {
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *) 
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE * 
>    *bzf = b;
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b {
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b 
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b {
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b 
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b {
>   bzFile bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b 
>   bzFile bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b {
>    bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b 
>    bzf = b;
971c971
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>    *bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>   bzFile bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>    bzf = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>   bzFile * = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>    * = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>   bzFile  = b;
971,972c971,972
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile *bzf = b;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
>     = b;
972c972
<   bzFile *bzf = b;
---
>    *bzf = b;
972c972
<   bzFile *bzf = b;
---
>    bzf = b;
972c972
<   bzFile *bzf = b;
---
>    * = b;
972c972
<   bzFile *bzf = b;
---
>     = b;
972c972
<   bzFile *bzf = b;
---
>    *bzf  b;
972c972
<   bzFile *bzf = b;
---
>    bzf  b;
972c972
<   bzFile *bzf = b;
---
>    *  b;
972c972
<   bzFile *bzf = b;
---
>      b;
972c972
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
972c972
<   bzFile *bzf = b;
---
>   bzFile  = b;
972c972
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
972c972
<   bzFile *bzf = b;
---
>   bzFile   b;
972c972
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
972c972
<   bzFile *bzf = b;
---
>   bzFile  = ;
972c972
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
972c972
<   bzFile *bzf = b;
---
>   bzFile   ;
972c972
<   bzFile *bzf = b;
---
>   bzFile * = b;
972c972
<   bzFile *bzf = b;
---
>   bzFile *  b;
972c972
<   bzFile *bzf = b;
---
>   bzFile * = ;
972c972
<   bzFile *bzf = b;
---
>   bzFile *  ;
972c972
<   bzFile *bzf = b;
---
>   bzFile * = b
972c972
<   bzFile *bzf = b;
---
>   bzFile *  b
972c972
<   bzFile *bzf = b;
---
>   bzFile * = 
972c972
<   bzFile *bzf = b;
---
>   bzFile *  
972c972
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
972c972
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
972c972
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
972c972
<   bzFile *bzf = b;
---
>   bzFile *bzf  
(92.3 %, 15818 bytes)
972c972
<   bzFile *bzf  ;
---
>   bzFile *bzf  
974c974
<   BZ_SETERR;
---
>   ;
972c972
<   bzFile *bzf  ;
---
>   bzFile *bzf  
974c974
<   BZ_SETERR;
---
>   BZ_SETERR
972c972
<   bzFile *bzf  ;
---
>   bzFile *bzf  
974c974
<   BZ_SETERR;
---
>   
972c972
<   bzFile *bzf  ;
---
>   bzFile *bzf  
975c975
<   if (bzf == NULL)
---
>    (bzf == NULL)
(92.3 %, 15808 bytes)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>    (bzf == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>   if bzf == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>    bzf == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>   if ( == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>    ( == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>   if  == NULL)
974,975c974,975
<   ;
<   if (bzf == NULL)
---
>   
>     == NULL)
975c975
<   if (bzf == NULL)
---
>    (bzf == NULL)
975c975
<   if (bzf == NULL)
---
>    bzf == NULL)
975c975
<   if (bzf == NULL)
---
>    ( == NULL)
975c975
<   if (bzf == NULL)
---
>     == NULL)
975c975
<   if (bzf == NULL)
---
>    (bzf  NULL)
975c975
<   if (bzf == NULL)
---
>    bzf  NULL)
975c975
<   if (bzf == NULL)
---
>    (  NULL)
(92.3 %, 15806 bytes)
975c975
<    (bzf == NULL)
---
>    bzf == NULL)
975c975
<    (bzf == NULL)
---
>     == NULL)
975c975
<    (bzf == NULL)
---
>    bzf  NULL)
975c975
<    (bzf == NULL)
---
>      NULL)
975c975
<    (bzf == NULL)
---
>    bzf == )
975c975
<    (bzf == NULL)
---
>     == )
975c975
<    (bzf == NULL)
---
>    bzf  )
975c975
<    (bzf == NULL)
---
>      )
975c975
<    (bzf == NULL)
---
>    ( == NULL)
975c975
<    (bzf == NULL)
---
>    (  NULL)
975c975
<    (bzf == NULL)
---
>    ( == )
975c975
<    (bzf == NULL)
---
>    (  )
975c975
<    (bzf == NULL)
---
>    ( == NULL
975c975
<    (bzf == NULL)
---
>    (  NULL
975c975
<    (bzf == NULL)
---
>    ( == 
975c975
<    (bzf == NULL)
---
>    (  
975c975
<    (bzf == NULL)
---
>    (bzf  NULL)
975c975
<    (bzf == NULL)
---
>    (bzf  )
(92.3 %, 15801 bytes)
975c975
<    (  NULL)
---
>    (  
975,976c975,976
<    (  NULL)
<     ;
---
>    (  )
>     
975,976c975,976
<    (  NULL)
<     ;
---
>    (  
>     
975c975
<    (  NULL)
---
>    (  )
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975c975
<    (  NULL)
---
>    (  
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975,976c975,976
<    (  NULL)
<     ;
---
>    (  )
>     
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975,976c975,976
<    (  NULL)
<     ;
---
>    (  
>     
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975c975
<    (  NULL)
---
>    (  NULL
975,976c975,976
<    (  NULL)
<     ;
---
>    (  NULL
>     
975c975
<    (  NULL)
---
>    (  NULL
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975,976c975,976
<    (  NULL)
<     ;
---
>    (  NULL
>     
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
975c975
<    (  NULL)
---
>    (  NULL
978c978
<   if (bzf->writing)
---
>   if bzf->writing)
975,976c975,976
<    (  NULL)
<     ;
---
>    (  NULL
>     
978c978
<   if (bzf->writing)
---
>   if bzf->writing)
975c975
<    (  NULL)
---
>    (  NULL
978c978
<   if (bzf->writing)
---
>    bzf->writing)
975,976c975,976
<    (  NULL)
<     ;
---
>    (  NULL
>     
978c978
<   if (bzf->writing)
---
>    bzf->writing)
976c976
<     ;
---
>     
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>   if bzf->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>    bzf->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>   if (->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>    (->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>   if ->writing)
976c976
<     ;
---
>     
978c978
<   if (bzf->writing)
---
>    ->writing)
978c978
<   if (bzf->writing)
---
>    (bzf->writing)
978c978
<   if (bzf->writing)
---
>    bzf->writing)
978c978
<   if (bzf->writing)
---
>    (->writing)
978c978
<   if (bzf->writing)
---
>    ->writing)
978c978
<   if (bzf->writing)
---
>    (bzfwriting)
978c978
<   if (bzf->writing)
---
>    bzfwriting)
978c978
<   if (bzf->writing)
---
>    (writing)
978c978
<   if (bzf->writing)
---
>    writing)
978c978
<   if (bzf->writing)
---
>   if bzf->writing)
978c978
<   if (bzf->writing)
---
>   if ->writing)
978c978
<   if (bzf->writing)
---
>   if bzfwriting)
(92.3 %, 15799 bytes)
978c978
<    (bzf->writing)
---
>    bzf->writing)
978c978
<    (bzf->writing)
---
>    ->writing)
978c978
<    (bzf->writing)
---
>    bzfwriting)
978c978
<    (bzf->writing)
---
>    writing)
978c978
<    (bzf->writing)
---
>    bzf->)
978c978
<    (bzf->writing)
---
>    ->)
978c978
<    (bzf->writing)
---
>    bzf)
978c978
<    (bzf->writing)
---
>    )
978c978
<    (bzf->writing)
---
>    (->writing)
978c978
<    (bzf->writing)
---
>    (writing)
978c978
<    (bzf->writing)
---
>    (->)
978c978
<    (bzf->writing)
---
>    ()
978c978
<    (bzf->writing)
---
>    (->writing
978c978
<    (bzf->writing)
---
>    (writing
978c978
<    (bzf->writing)
---
>    (->
978c978
<    (bzf->writing)
---
>    (
978c978
<    (bzf->writing)
---
>    (bzfwriting)
978c978
<    (bzf->writing)
---
>    (bzf)
978c978
<    (bzf->writing)
---
>    (bzfwriting
978c978
<    (bzf->writing)
---
>    (bzf
978,979c978,979
<    (bzf->writing)
<     ;
---
>    (bzfwriting)
>     
978,979c978,979
<    (bzf->writing)
<     ;
---
>    (bzf)
>     
978,979c978,979
<    (bzf->writing)
<     ;
---
>    (bzfwriting
>     
978,979c978,979
<    (bzf->writing)
<     ;
---
>    (bzf
>     
978c978
<    (bzf->writing)
---
>    (bzf->)
978c978
<    (bzf->writing)
---
>    (bzf->
978,979c978,979
<    (bzf->writing)
<     ;
---
>    (bzf->)
>     
(92.3 %, 15790 bytes)
978,979c978,979
<    (bzf)
<     ;
---
>    (bzf
>     
978c978
<    (bzf)
---
>    (bzf
981c981
<   if (bzf->initialisedOk)
---
>    (bzf->initialisedOk)
978,979c978,979
<    (bzf)
<     ;
---
>    (bzf
>     
981c981
<   if (bzf->initialisedOk)
---
>    (bzf->initialisedOk)
978c978
<    (bzf)
---
>    (bzf
981c981
<   if (bzf->initialisedOk)
---
>   if bzf->initialisedOk)
978,979c978,979
<    (bzf)
<     ;
---
>    (bzf
>     
981c981
<   if (bzf->initialisedOk)
---
>   if bzf->initialisedOk)
978c978
<    (bzf)
---
>    (bzf
981c981
<   if (bzf->initialisedOk)
---
>    bzf->initialisedOk)
978,979c978,979
<    (bzf)
<     ;
---
>    (bzf
>     
981c981
<   if (bzf->initialisedOk)
---
>    bzf->initialisedOk)
979c979
<     ;
---
>     
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>    (bzf->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>   if bzf->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>    bzf->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>   if (->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>    (->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>   if ->initialisedOk)
979c979
<     ;
---
>     
981c981
<   if (bzf->initialisedOk)
---
>    ->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    (bzf->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    bzf->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    (->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    ->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    (bzfinitialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    bzfinitialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    (initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>    initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if bzf->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if ->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if bzfinitialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if bzf->)
981c981
<   if (bzf->initialisedOk)
---
>   if ->)
981c981
<   if (bzf->initialisedOk)
---
>   if bzf)
981c981
<   if (bzf->initialisedOk)
---
>   if )
981c981
<   if (bzf->initialisedOk)
---
>   if (->initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if (initialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if (->)
981c981
<   if (bzf->initialisedOk)
---
>   if ()
981c981
<   if (bzf->initialisedOk)
---
>   if (->initialisedOk
981c981
<   if (bzf->initialisedOk)
---
>   if (initialisedOk
981c981
<   if (bzf->initialisedOk)
---
>   if (->
981c981
<   if (bzf->initialisedOk)
---
>   if (
981c981
<   if (bzf->initialisedOk)
---
>   if (bzfinitialisedOk)
981c981
<   if (bzf->initialisedOk)
---
>   if (bzf)
981c981
<   if (bzf->initialisedOk)
---
>   if (bzfinitialisedOk
981c981
<   if (bzf->initialisedOk)
---
>   if (bzf
981,982c981,982
<   if (bzf->initialisedOk)
<     0;
---
>   if (bzfinitialisedOk)
>     ;
981,982c981,982
<   if (bzf->initialisedOk)
<     0;
---
>   if (bzf)
>     ;
(92.3 %, 15775 bytes)
981,982c981,982
<   if (bzf)
<     0;
---
>   if (bzf
>     ;
981,982c981,982
<   if (bzf)
<     0;
---
>   if (bzf
>     0
981,982c981,982
<   if (bzf)
<     0;
---
>   if (bzf
>     
981c981
<   if (bzf)
---
>   if (bzf
983c983
<   0;
---
>   ;
981,983c981,983
<   if (bzf)
<     0;
<   0;
---
>   if (bzf
>     ;
>   ;
981,983c981,983
<   if (bzf)
<     0;
<   0;
---
>   if (bzf
>     0
>   ;
981,983c981,983
<   if (bzf)
<     0;
<   0;
---
>   if (bzf
>     
>   ;
982c982
<     0;
---
>     ;
982c982
<     0;
---
>     
982,983c982,983
<     0;
<   0;
---
>     ;
>   ;
(92.3 %, 15774 bytes)
982c982
<     ;
---
>     
982,983c982,983
<     ;
<   0;
---
>     
>   ;
982,983c982,983
<     ;
<   0;
---
>     
>   0
(92.3 %, 15773 bytes)
983c983
<   0;
---
>   ;
983c983
<   0;
---
>   
983,984c983,984
<   0;
< }
---
>   ;
> 
983,984c983,984
<   0;
< }
---
>   
> 
983c983
<   0;
---
>   ;
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
(92.3 %, 15772 bytes)
983c983
<   ;
---
>   
983,984c983,984
<   ;
< }
---
>   
> 
983c983
<   ;
---
>   
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
983,984c983
<   ;
< }
---
>   
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
983c983
<   ;
---
>   
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
983,984c983
<   ;
< }
---
>   
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
983c983
<   ;
---
>   
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
983,984c983
<   ;
< }
---
>   
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984c984
< }
---
> 
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> int (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> int BZ_APIBZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ_APIBZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
> int BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
984d983
< }
986c985,986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> 
>  BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
< int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
(92.3 %, 15769 bytes)
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ()(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  )(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
(92.3 %, 15763 bytes)
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  )(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead)int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  )int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ()(int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ((int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ()int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  (BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ()( *bzerror, BZFILE *b, void *buf, int len) {
(92.3 %, 15761 bytes)
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ( *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>   *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ( bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>   bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzReadint bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzReadint *, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead *, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzReadint , BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead , BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( *bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( *, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( , BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( *bzerror BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( bzerror BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( * BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(  BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int bzerror, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int , BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int bzerror BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int  BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int bzerror,  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int ,  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int bzerror  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int   *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *, BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int * BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *,  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *, BZFILE b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int * BZFILE b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *,  b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *  b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror BZFILE *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror BZFILE b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror  b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror BZFILE *, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror  *, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror BZFILE , void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror  , void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  *b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  *, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  , void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  *b void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  b void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  * void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,   void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE , void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE b void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE  void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE b,  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE ,  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE b  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE   *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *, void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE * void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *,  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *, void buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE * void buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *,  buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *  buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b void *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b void buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b  buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b void *, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b  *, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b void , int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b  , int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  *buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  *, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  , int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  *buf int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  buf int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  * int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,   int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void buf, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void , int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void buf int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void  int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void buf,  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void ,  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void buf  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void   len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *, int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void * int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *,  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *, int ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void * int ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *,  ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *  ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf int len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf int ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf  ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf int len {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf  len {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf int  {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf   {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  len) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  len {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,   {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  len) 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  ) 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,  len 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf,   
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int ) {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int  {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int ) 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int  
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int ) {
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int  {
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int ) 
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int  
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len {
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len {
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len 
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len {
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len 
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len {
988c988
<   bzFile *bzf = b;
---
>    bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len 
988c988
<   bzFile *bzf = b;
---
>    bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>    bzf = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>   bzFile * = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>    * = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>   bzFile  = b;
986c986
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) 
988c988
<   bzFile *bzf = b;
---
>     = b;
988c988
<   bzFile *bzf = b;
---
>    *bzf = b;
988c988
<   bzFile *bzf = b;
---
>    bzf = b;
988c988
<   bzFile *bzf = b;
---
>    * = b;
988c988
<   bzFile *bzf = b;
---
>     = b;
988c988
<   bzFile *bzf = b;
---
>    *bzf  b;
988c988
<   bzFile *bzf = b;
---
>    bzf  b;
988c988
<   bzFile *bzf = b;
---
>    *  b;
988c988
<   bzFile *bzf = b;
---
>      b;
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
988c988
<   bzFile *bzf = b;
---
>   bzFile  = b;
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
988c988
<   bzFile *bzf = b;
---
>   bzFile   b;
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
988c988
<   bzFile *bzf = b;
---
>   bzFile  = ;
988c988
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
988c988
<   bzFile *bzf = b;
---
>   bzFile   ;
988c988
<   bzFile *bzf = b;
---
>   bzFile * = b;
988c988
<   bzFile *bzf = b;
---
>   bzFile *  b;
988c988
<   bzFile *bzf = b;
---
>   bzFile * = ;
988c988
<   bzFile *bzf = b;
---
>   bzFile *  ;
988c988
<   bzFile *bzf = b;
---
>   bzFile * = b
988c988
<   bzFile *bzf = b;
---
>   bzFile *  b
988c988
<   bzFile *bzf = b;
---
>   bzFile * = 
988c988
<   bzFile *bzf = b;
---
>   bzFile *  
988c988
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
988c988
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
988c988
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
988c988
<   bzFile *bzf = b;
---
>   bzFile *bzf  
(92.3 %, 15759 bytes)
988c988
<   bzFile *bzf  ;
---
>   bzFile *bzf  
990c990
<   BZ_SETERR;
---
>   ;
988c988
<   bzFile *bzf  ;
---
>   bzFile *bzf  
990c990
<   BZ_SETERR;
---
>   BZ_SETERR
988c988
<   bzFile *bzf  ;
---
>   bzFile *bzf  
990c990
<   BZ_SETERR;
---
>   
988c988
<   bzFile *bzf  ;
---
>   bzFile *bzf  
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
(92.3 %, 15749 bytes)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if bzf == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if ( == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if  == NULL || buf == NULL || len < 0)
990c990
<   ;
---
>   
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf  NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
992c992
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
(92.3 %, 15747 bytes)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>      NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf ==  || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>     ==  || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf   || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>       || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==  || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (   || buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL  buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL  buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==   buf == NULL || len < 0)
992c992
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
(92.3 %, 15742 bytes)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||  == NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (     == NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (   || buf  NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf  NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||   NULL || len < 0)
992c992
<    (  NULL || buf == NULL || len < 0)
---
>    (      NULL || len < 0)
(92.3 %, 15736 bytes)
992c992
<    (    buf == NULL || len < 0)
---
>    (      NULL || len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (     ==  || len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (       || len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (     == NULL  len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (      NULL  len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (     ==   len < 0)
992c992
<    (    buf == NULL || len < 0)
---
>    (        len < 0)
(92.3 %, 15731 bytes)
992c992
<    (      NULL || len < 0)
---
>    (        len < 0)
992c992
<    (      NULL || len < 0)
---
>    (       ||  < 0)
992c992
<    (      NULL || len < 0)
---
>    (         < 0)
992c992
<    (      NULL || len < 0)
---
>    (       || len  0)
992c992
<    (      NULL || len < 0)
---
>    (        len  0)
992c992
<    (      NULL || len < 0)
---
>    (       ||   0)
992c992
<    (      NULL || len < 0)
---
>    (          0)
(92.3 %, 15725 bytes)
992c992
<    (        len < 0)
---
>    (          0)
992c992
<    (        len < 0)
---
>    (         < )
992c992
<    (        len < 0)
---
>    (          )
992c992
<    (        len < 0)
---
>    (         < 0
992c992
<    (        len < 0)
---
>    (          0
992c992
<    (        len < 0)
---
>    (         < 
992c992
<    (        len < 0)
---
>    (          
992c992
<    (        len < 0)
---
>    (        len  0)
992c992
<    (        len < 0)
---
>    (        len  )
(92.3 %, 15721 bytes)
992c992
<    (          0)
---
>    (          
992,993c992,993
<    (          0)
<     ;
---
>    (          )
>     
992,993c992,993
<    (          0)
<     ;
---
>    (          
>     
992c992
<    (          0)
---
>    (          )
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992c992
<    (          0)
---
>    (          
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992,993c992,993
<    (          0)
<     ;
---
>    (          )
>     
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992,993c992,993
<    (          0)
<     ;
---
>    (          
>     
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992c992
<    (          0)
---
>    (          0
992,993c992,993
<    (          0)
<     ;
---
>    (          0
>     
992c992
<    (          0)
---
>    (          0
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992,993c992,993
<    (          0)
<     ;
---
>    (          0
>     
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
992c992
<    (          0)
---
>    (          0
995c995
<   if (bzf->writing)
---
>   if bzf->writing)
992,993c992,993
<    (          0)
<     ;
---
>    (          0
>     
995c995
<   if (bzf->writing)
---
>   if bzf->writing)
992c992
<    (          0)
---
>    (          0
995c995
<   if (bzf->writing)
---
>    bzf->writing)
992,993c992,993
<    (          0)
<     ;
---
>    (          0
>     
995c995
<   if (bzf->writing)
---
>    bzf->writing)
993c993
<     ;
---
>     
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>   if bzf->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>    bzf->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>   if (->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>    (->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>   if ->writing)
993c993
<     ;
---
>     
995c995
<   if (bzf->writing)
---
>    ->writing)
995c995
<   if (bzf->writing)
---
>    (bzf->writing)
995c995
<   if (bzf->writing)
---
>    bzf->writing)
995c995
<   if (bzf->writing)
---
>    (->writing)
995c995
<   if (bzf->writing)
---
>    ->writing)
995c995
<   if (bzf->writing)
---
>    (bzfwriting)
995c995
<   if (bzf->writing)
---
>    bzfwriting)
995c995
<   if (bzf->writing)
---
>    (writing)
995c995
<   if (bzf->writing)
---
>    writing)
995c995
<   if (bzf->writing)
---
>   if bzf->writing)
995c995
<   if (bzf->writing)
---
>   if ->writing)
(92.3 %, 15719 bytes)
995c995
<    (bzf->writing)
---
>    bzf->writing)
995c995
<    (bzf->writing)
---
>    ->writing)
995c995
<    (bzf->writing)
---
>    bzfwriting)
995c995
<    (bzf->writing)
---
>    writing)
995c995
<    (bzf->writing)
---
>    bzf->)
995c995
<    (bzf->writing)
---
>    ->)
995c995
<    (bzf->writing)
---
>    bzf)
995c995
<    (bzf->writing)
---
>    )
995c995
<    (bzf->writing)
---
>    (->writing)
995c995
<    (bzf->writing)
---
>    (writing)
995c995
<    (bzf->writing)
---
>    (->)
995c995
<    (bzf->writing)
---
>    ()
995c995
<    (bzf->writing)
---
>    (->writing
995c995
<    (bzf->writing)
---
>    (writing
995c995
<    (bzf->writing)
---
>    (->
995c995
<    (bzf->writing)
---
>    (
995c995
<    (bzf->writing)
---
>    (bzfwriting)
995c995
<    (bzf->writing)
---
>    (bzf)
995c995
<    (bzf->writing)
---
>    (bzfwriting
995c995
<    (bzf->writing)
---
>    (bzf
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzfwriting)
>     
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzf)
>     
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzfwriting
>     
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzf
>     
995c995
<    (bzf->writing)
---
>    (bzf->)
995c995
<    (bzf->writing)
---
>    (bzf->
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzf->)
>     
995,996c995,996
<    (bzf->writing)
<     ;
---
>    (bzf->
>     
(92.3 %, 15710 bytes)
995,996c995,996
<    (bzf)
<     ;
---
>    (bzf
>     
995c995
<    (bzf)
---
>    (bzf
998c998
<   if (len == 0)
---
>    (len == 0)
995,996c995,996
<    (bzf)
<     ;
---
>    (bzf
>     
998c998
<   if (len == 0)
---
>    (len == 0)
995c995
<    (bzf)
---
>    (bzf
998c998
<   if (len == 0)
---
>   if len == 0)
995,996c995,996
<    (bzf)
<     ;
---
>    (bzf
>     
998c998
<   if (len == 0)
---
>   if len == 0)
995c995
<    (bzf)
---
>    (bzf
998c998
<   if (len == 0)
---
>    len == 0)
995,996c995,996
<    (bzf)
<     ;
---
>    (bzf
>     
998c998
<   if (len == 0)
---
>    len == 0)
996c996
<     ;
---
>     
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>    (len == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>   if len == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>    len == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>   if ( == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>    ( == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>   if  == 0)
996c996
<     ;
---
>     
998c998
<   if (len == 0)
---
>     == 0)
998c998
<   if (len == 0)
---
>    (len == 0)
998c998
<   if (len == 0)
---
>    len == 0)
998c998
<   if (len == 0)
---
>    ( == 0)
998c998
<   if (len == 0)
---
>     == 0)
998c998
<   if (len == 0)
---
>    (len  0)
998c998
<   if (len == 0)
---
>    len  0)
998c998
<   if (len == 0)
---
>    (  0)
(92.3 %, 15708 bytes)
998c998
<    (len == 0)
---
>    len == 0)
998c998
<    (len == 0)
---
>     == 0)
998c998
<    (len == 0)
---
>    len  0)
998c998
<    (len == 0)
---
>      0)
998c998
<    (len == 0)
---
>    len == )
998c998
<    (len == 0)
---
>     == )
998c998
<    (len == 0)
---
>    len  )
998c998
<    (len == 0)
---
>      )
998c998
<    (len == 0)
---
>    ( == 0)
998c998
<    (len == 0)
---
>    (  0)
998c998
<    (len == 0)
---
>    ( == )
998c998
<    (len == 0)
---
>    (  )
998c998
<    (len == 0)
---
>    ( == 0
998c998
<    (len == 0)
---
>    (  0
998c998
<    (len == 0)
---
>    ( == 
998c998
<    (len == 0)
---
>    (  
998c998
<    (len == 0)
---
>    (len  0)
998c998
<    (len == 0)
---
>    (len  )
(92.3 %, 15703 bytes)
998c998
<    (  0)
---
>    (  
998,999c998,999
<    (  0)
<     ;
---
>    (  )
>     
998,999c998,999
<    (  0)
<     ;
---
>    (  
>     
998c998
<    (  0)
---
>    (  )
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998c998
<    (  0)
---
>    (  
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998,999c998,999
<    (  0)
<     ;
---
>    (  )
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998,999c998,999
<    (  0)
<     ;
---
>    (  
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998c998
<    (  0)
---
>    (  0
998,999c998,999
<    (  0)
<     ;
---
>    (  0
>     
998c998
<    (  0)
---
>    (  0
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998,999c998,999
<    (  0)
<     ;
---
>    (  0
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
998c998
<    (  0)
---
>    (  0
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm.avail_out = len;
998,999c998,999
<    (  0)
<     ;
---
>    (  0
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm.avail_out = len;
998c998
<    (  0)
---
>    (  0
1001c1001
<   bzf->strm.avail_out = len;
---
>   strm.avail_out = len;
998,999c998,999
<    (  0)
<     ;
---
>    (  0
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   strm.avail_out = len;
999c999
<     ;
---
>     
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   strm.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf.avail_out = len;
999c999
<     ;
---
>     
1001c1001
<   bzf->strm.avail_out = len;
---
>   .avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strm.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   strm.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   .avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->strmavail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   strmavail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   ->avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrmavail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfavail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm. = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf. = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzfstrm = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->.avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->avail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->. = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf-> = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->.avail_out  len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->avail_out  len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->.  len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->  len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->strmavail_out = len;
1001c1001
<   bzf->strm.avail_out = len;
---
>   bzf->strm = len;
(92.3 %, 15687 bytes)
1001,1002c1001,1002
<   bzf = len;
<   bzf->strm.next_out = buf;
---
>   bzf  
>   ->strm.next_out = buf;
1001c1001
<   bzf = len;
---
>   bzf = ;
1001c1001
<   bzf = len;
---
>   bzf = 
(92.3 %, 15679 bytes)
1002c1002
<   ->strm.next_out = buf;
---
>    = buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->.next_out = buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->next_out = buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->. = buf;
1002c1002
<   ->strm.next_out = buf;
---
>   -> = buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->.next_out  buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->next_out  buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->.  buf;
1002c1002
<   ->strm.next_out = buf;
---
>   ->  buf;
(92.4 %, 15664 bytes)
1002c1002
<    = buf;
---
>     
1004c1004
<   while (True)
---
>    (True)
1002c1002
<    = buf;
---
>    = ;
1002c1002
<    = buf;
---
>    = 
1002c1002
<    = buf;
---
>    = ;
1004c1004
<   while (True)
---
>    (True)
1002c1002
<    = buf;
---
>    = 
1004c1004
<   while (True)
---
>    (True)
1002c1002
<    = buf;
---
>    = ;
1004c1004
<   while (True)
---
>   while True)
1002c1002
<    = buf;
---
>    = 
1004c1004
<   while (True)
---
>   while True)
1002c1002
<    = buf;
---
>    = ;
1004c1004
<   while (True)
---
>    True)
1002c1002
<    = buf;
---
>    = 
1004c1004
<   while (True)
---
>    True)
1002c1002
<    = buf;
---
>    = buf
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>    (True)
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>   while True)
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>    True)
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>   while ()
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>    ()
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>   while )
1002c1002
<    = buf;
---
>    = buf
1004c1004
<   while (True)
---
>    )
1004c1004
<   while (True)
---
>    (True)
1004c1004
<   while (True)
---
>    True)
1004c1004
<   while (True)
---
>    ()
1004c1004
<   while (True)
---
>    )
1004c1004
<   while (True)
---
>    (True
1004c1004
<   while (True)
---
>    True
1004c1004
<   while (True)
---
>    (
1004c1004
<   while (True)
---
>    
1004c1004
<   while (True)
---
>   while True)
1004c1004
<   while (True)
---
>   while )
1004c1004
<   while (True)
---
>   while True
1004c1004
<   while (True)
---
>   while 
1004c1004
<   while (True)
---
>   while True)
1006c1006
<     return 0;
---
>      0;
1004c1004
<   while (True)
---
>   while )
1006c1006
<     return 0;
---
>      0;
1004c1004
<   while (True)
---
>   while True
1006c1006
<     return 0;
---
>      0;
1004c1004
<   while (True)
---
>   while 
1006c1006
<     return 0;
---
>      0;
1004c1004
<   while (True)
---
>   while ()
(92.4 %, 15653 bytes)
1006,1007c1006,1007
<     return 0;
< }
---
>      
> 
1006c1006
<     return 0;
---
>     return ;
1006c1006
<     return 0;
---
>     return 
1006,1007c1006,1007
<     return 0;
< }
---
>     return ;
> 
1006,1007c1006,1007
<     return 0;
< }
---
>     return 
> 
1006c1006
<     return 0;
---
>     return ;
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006c1006
<     return 0;
---
>     return 
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006,1007c1006
<     return 0;
< }
---
>     return ;
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006,1007c1006
<     return 0;
< }
---
>     return 
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006c1006
<     return 0;
---
>     return 0
1006,1007c1006,1007
<     return 0;
< }
---
>     return 0
> 
1006c1006
<     return 0;
---
>     return 0
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006,1007c1006
<     return 0;
< }
---
>     return 0
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006c1006
<     return 0;
---
>     return 0
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006,1007c1006
<     return 0;
< }
---
>     return 0
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006c1006
<     return 0;
---
>     return 0
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1006,1007c1006
<     return 0;
< }
---
>     return 0
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007c1007
< }
---
> 
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
> void BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
> void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1007d1006
< }
1009c1008,1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> 
>  BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API()(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  ()(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  BZ_API)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>  )(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void ()(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void )(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
(92.4 %, 15647 bytes)
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void )(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused)int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void )int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void ()(int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void ((int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void ()int *bzerror, BZFILE *b, void **unused,
1009c1009
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (int *bzerror, BZFILE *b, void **unused,
(92.4 %, 15645 bytes)
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void ( *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void  *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void (int bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void int bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void ( bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void  bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnusedint bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnusedint *, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused *, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnusedint , BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused , BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( *bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( *, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( , BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( *bzerror BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( bzerror BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( * BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(  BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int bzerror, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int , BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int bzerror BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int  BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int bzerror,  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int ,  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int bzerror  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int   *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int * BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *,  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *, BZFILE b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int * BZFILE b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *,  b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *  b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror BZFILE *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror BZFILE b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror  b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror BZFILE *, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror  *, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror BZFILE , void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror  , void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  *b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  *, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  , void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  *b void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  b void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  * void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,   void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE  void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b,  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE ,  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE   **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *, void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE * void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *,  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *, void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE * void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *,  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b void **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b void unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b  unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  **unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  **,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  *,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  *,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  ,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void ,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void unused
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void 
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused,
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *,
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *unused
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *
>                                   *nUnused) {
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **,
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **,
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **,
>                                  int nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **
>                                  int nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **,
>                                   nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **
>                                   nUnused) {
1009c1009
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                   *nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                  int nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                   nUnused) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                  int *) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                   *) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                  int ) {
1009,1010c1009,1010
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused
>                                   ) {
1010c1010
<                                  int *nUnused) {
---
>                                   *nUnused) {
1010c1010
<                                  int *nUnused) {
---
>                                   nUnused) {
1010c1010
<                                  int *nUnused) {
---
>                                   *) {
1010c1010
<                                  int *nUnused) {
---
>                                   ) {
1010c1010
<                                  int *nUnused) {
---
>                                   *nUnused {
1010c1010
<                                  int *nUnused) {
---
>                                   nUnused {
1010c1010
<                                  int *nUnused) {
---
>                                   * {
1010c1010
<                                  int *nUnused) {
---
>                                    {
1010c1010
<                                  int *nUnused) {
---
>                                  int nUnused) {
1010c1010
<                                  int *nUnused) {
---
>                                  int ) {
1010c1010
<                                  int *nUnused) {
---
>                                  int nUnused {
1010c1010
<                                  int *nUnused) {
---
>                                  int  {
1010c1010
<                                  int *nUnused) {
---
>                                  int nUnused) 
1010c1010
<                                  int *nUnused) {
---
>                                  int ) 
1010c1010
<                                  int *nUnused) {
---
>                                  int nUnused 
1010c1010
<                                  int *nUnused) {
---
>                                  int  
1010c1010
<                                  int *nUnused) {
---
>                                  int *) {
1010c1010
<                                  int *nUnused) {
---
>                                  int * {
1010c1010
<                                  int *nUnused) {
---
>                                  int *) 
1010c1010
<                                  int *nUnused) {
---
>                                  int * 
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *) {
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int * {
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *) 
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int * 
>    *bzf = b;
1010c1010
<                                  int *nUnused) {
---
>                                  int *nUnused {
1010c1010
<                                  int *nUnused) {
---
>                                  int *nUnused 
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused {
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused 
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused {
>   bzFile bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused 
>   bzFile bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused {
>    bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused 
>    bzf = b;
1010c1010
<                                  int *nUnused) {
---
>                                  int *nUnused) 
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>    *bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>   bzFile bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>    bzf = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>   bzFile * = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>    * = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>   bzFile  = b;
1010,1011c1010,1011
<                                  int *nUnused) {
<   bzFile *bzf = b;
---
>                                  int *nUnused) 
>     = b;
1011c1011
<   bzFile *bzf = b;
---
>    *bzf = b;
1011c1011
<   bzFile *bzf = b;
---
>    bzf = b;
1011c1011
<   bzFile *bzf = b;
---
>    * = b;
1011c1011
<   bzFile *bzf = b;
---
>     = b;
1011c1011
<   bzFile *bzf = b;
---
>    *bzf  b;
1011c1011
<   bzFile *bzf = b;
---
>    bzf  b;
1011c1011
<   bzFile *bzf = b;
---
>    *  b;
1011c1011
<   bzFile *bzf = b;
---
>      b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile  = b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile   b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile  = ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile   ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile * = b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *  b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile * = ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *  ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile * = b
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *  b
1011c1011
<   bzFile *bzf = b;
---
>   bzFile * = 
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *  
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
1011c1011
<   bzFile *bzf = b;
---
>   bzFile *bzf  
1011,1012c1011,1012
<   bzFile *bzf = b;
<   if (bzf == NULL)
---
>   bzFile *bzf  b;
>    (bzf == NULL)
1011,1012c1011,1012
<   bzFile *bzf = b;
<   if (bzf == NULL)
---
>   bzFile *bzf  ;
>    (bzf == NULL)
(92.4 %, 15643 bytes)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>    (bzf == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>   if bzf == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>    bzf == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>   if ( == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>    ( == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>   if  == NULL)
1011,1012c1011,1012
<   bzFile *bzf  ;
<   if (bzf == NULL)
---
>   bzFile *bzf  
>     == NULL)
1012c1012
<   if (bzf == NULL)
---
>    (bzf == NULL)
1012c1012
<   if (bzf == NULL)
---
>    bzf == NULL)
1012c1012
<   if (bzf == NULL)
---
>    ( == NULL)
1012c1012
<   if (bzf == NULL)
---
>     == NULL)
1012c1012
<   if (bzf == NULL)
---
>    (bzf  NULL)
1012c1012
<   if (bzf == NULL)
---
>    bzf  NULL)
1012c1012
<   if (bzf == NULL)
---
>    (  NULL)
(92.4 %, 15641 bytes)
1012c1012
<    (bzf == NULL)
---
>    bzf == NULL)
1012c1012
<    (bzf == NULL)
---
>     == NULL)
1012c1012
<    (bzf == NULL)
---
>    bzf  NULL)
1012c1012
<    (bzf == NULL)
---
>      NULL)
1012c1012
<    (bzf == NULL)
---
>    bzf == )
1012c1012
<    (bzf == NULL)
---
>     == )
1012c1012
<    (bzf == NULL)
---
>    bzf  )
1012c1012
<    (bzf == NULL)
---
>      )
1012c1012
<    (bzf == NULL)
---
>    ( == NULL)
1012c1012
<    (bzf == NULL)
---
>    (  NULL)
1012c1012
<    (bzf == NULL)
---
>    ( == )
1012c1012
<    (bzf == NULL)
---
>    (  )
1012c1012
<    (bzf == NULL)
---
>    ( == NULL
1012c1012
<    (bzf == NULL)
---
>    (  NULL
1012c1012
<    (bzf == NULL)
---
>    ( == 
1012c1012
<    (bzf == NULL)
---
>    (  
1012c1012
<    (bzf == NULL)
---
>    (bzf  NULL)
1012c1012
<    (bzf == NULL)
---
>    (bzf  )
(92.4 %, 15636 bytes)
1012c1012
<    (  NULL)
---
>    (  
1012,1013c1012,1013
<    (  NULL)
<     ;
---
>    (  )
>     
1012,1013c1012,1013
<    (  NULL)
<     ;
---
>    (  
>     
1012c1012
<    (  NULL)
---
>    (  )
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (bzf->lastErr != BZ_STREAM_END)
1012c1012
<    (  NULL)
---
>    (  
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (bzf->lastErr != BZ_STREAM_END)
1012,1014c1012,1014
<    (  NULL)
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (  )
>     
>    (bzf->lastErr != BZ_STREAM_END)
1012,1014c1012,1014
<    (  NULL)
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (  
>     
>    (bzf->lastErr != BZ_STREAM_END)
1012c1012
<    (  NULL)
---
>    (  NULL
1012,1013c1012,1013
<    (  NULL)
<     ;
---
>    (  NULL
>     
1012c1012
<    (  NULL)
---
>    (  NULL
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (bzf->lastErr != BZ_STREAM_END)
1012,1014c1012,1014
<    (  NULL)
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (  NULL
>     
>    (bzf->lastErr != BZ_STREAM_END)
1012c1012
<    (  NULL)
---
>    (  NULL
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if bzf->lastErr != BZ_STREAM_END)
1012,1014c1012,1014
<    (  NULL)
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (  NULL
>     
>   if bzf->lastErr != BZ_STREAM_END)
1012c1012
<    (  NULL)
---
>    (  NULL
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    bzf->lastErr != BZ_STREAM_END)
1012,1014c1012,1014
<    (  NULL)
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (  NULL
>     
>    bzf->lastErr != BZ_STREAM_END)
1013c1013
<     ;
---
>     
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>    (bzf->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>   if bzf->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>    bzf->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>   if (->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>    (->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>   if ->lastErr != BZ_STREAM_END)
1013,1014c1013,1014
<     ;
<   if (bzf->lastErr != BZ_STREAM_END)
---
>     
>    ->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (bzf->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    bzf->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    ->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (bzflastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    bzflastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    (lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>    lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if bzf->lastErr != BZ_STREAM_END)
1014c1014
<   if (bzf->lastErr != BZ_STREAM_END)
---
>   if ->lastErr != BZ_STREAM_END)
(92.4 %, 15634 bytes)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    bzf->lastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    ->lastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    bzflastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    lastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    bzf-> != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    -> != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    bzf != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>     != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (->lastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (lastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (-> != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    ( != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (->lastErr  BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (lastErr  BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (->  BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (  BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (bzflastErr != BZ_STREAM_END)
1014c1014
<    (bzf->lastErr != BZ_STREAM_END)
---
>    (bzf != BZ_STREAM_END)
(92.4 %, 15620 bytes)
1014,1016c1014,1016
<    (  BZ_STREAM_END)
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>    (  
>     
>    (unused == NULL || nUnused == NULL)
1014c1014
<    (  BZ_STREAM_END)
---
>    (  BZ_STREAM_END
1014,1015c1014,1015
<    (  BZ_STREAM_END)
<     ;
---
>    (  BZ_STREAM_END
>     
1014c1014
<    (  BZ_STREAM_END)
---
>    (  BZ_STREAM_END
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
1014,1016c1014,1016
<    (  BZ_STREAM_END)
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>    (  BZ_STREAM_END
>     
>    (unused == NULL || nUnused == NULL)
1014c1014
<    (  BZ_STREAM_END)
---
>    (  BZ_STREAM_END
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>   if unused == NULL || nUnused == NULL)
1014,1016c1014,1016
<    (  BZ_STREAM_END)
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>    (  BZ_STREAM_END
>     
>   if unused == NULL || nUnused == NULL)
1014c1014
<    (  BZ_STREAM_END)
---
>    (  BZ_STREAM_END
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    unused == NULL || nUnused == NULL)
1014,1016c1014,1016
<    (  BZ_STREAM_END)
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>    (  BZ_STREAM_END
>     
>    unused == NULL || nUnused == NULL)
1015c1015
<     ;
---
>     
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>    (unused == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>   if unused == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>    unused == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>   if ( == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>    ( == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>   if  == NULL || nUnused == NULL)
1015,1016c1015,1016
<     ;
<   if (unused == NULL || nUnused == NULL)
---
>     
>     == NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    unused == NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    ( == NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>     == NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    (unused  NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    unused  NULL || nUnused == NULL)
1016c1016
<   if (unused == NULL || nUnused == NULL)
---
>    (  NULL || nUnused == NULL)
(92.4 %, 15618 bytes)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    unused == NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>     == NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    unused  NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>      NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    unused ==  || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>     ==  || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    unused   || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>       || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    ( == NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    (  NULL || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    ( ==  || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    (   || nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    ( == NULL  nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    (  NULL  nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    ( ==   nUnused == NULL)
1016c1016
<    (unused == NULL || nUnused == NULL)
---
>    (    nUnused == NULL)
(92.4 %, 15610 bytes)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (    nUnused == NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (   ||  == NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (     == NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (   || nUnused  NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (    nUnused  NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (   ||   NULL)
1016c1016
<    (  NULL || nUnused == NULL)
---
>    (      NULL)
(92.4 %, 15604 bytes)
1016c1016
<    (    nUnused == NULL)
---
>    (      NULL)
1016c1016
<    (    nUnused == NULL)
---
>    (     == )
1016c1016
<    (    nUnused == NULL)
---
>    (      )
1016c1016
<    (    nUnused == NULL)
---
>    (     == NULL
1016c1016
<    (    nUnused == NULL)
---
>    (      NULL
1016c1016
<    (    nUnused == NULL)
---
>    (     == 
1016c1016
<    (    nUnused == NULL)
---
>    (      
1016c1016
<    (    nUnused == NULL)
---
>    (    nUnused  NULL)
1016c1016
<    (    nUnused == NULL)
---
>    (    nUnused  )
(92.4 %, 15595 bytes)
1016c1016
<    (      NULL)
---
>    (      
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      )
>     
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      
>     
1016c1016
<    (      NULL)
---
>    (      )
1019c1019
<   BZ_SETERR;
---
>   ;
1016c1016
<    (      NULL)
---
>    (      
1019c1019
<   BZ_SETERR;
---
>   ;
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      )
>     
1019c1019
<   BZ_SETERR;
---
>   ;
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      
>     
1019c1019
<   BZ_SETERR;
---
>   ;
1016c1016
<    (      NULL)
---
>    (      NULL
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      NULL
>     
1016c1016
<    (      NULL)
---
>    (      NULL
1019c1019
<   BZ_SETERR;
---
>   ;
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      NULL
>     
1019c1019
<   BZ_SETERR;
---
>   ;
1016c1016
<    (      NULL)
---
>    (      NULL
1019c1019
<   BZ_SETERR;
---
>   BZ_SETERR
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      NULL
>     
1019c1019
<   BZ_SETERR;
---
>   BZ_SETERR
1016c1016
<    (      NULL)
---
>    (      NULL
1019c1019
<   BZ_SETERR;
---
>   
1016,1017c1016,1017
<    (      NULL)
<     ;
---
>    (      NULL
>     
1019c1019
<   BZ_SETERR;
---
>   
1017c1017
<     ;
---
>     
1017c1017
<     ;
---
>     
1019c1019
<   BZ_SETERR;
---
>   ;
1017c1017
<     ;
---
>     
1019c1019
<   BZ_SETERR;
---
>   BZ_SETERR
(92.4 %, 15594 bytes)
1019c1019
<   BZ_SETERR;
---
>   ;
1019c1019
<   BZ_SETERR;
---
>   
1019,1020c1019,1020
<   BZ_SETERR;
<   *nUnused = bzf->strm.avail_in;
---
>   ;
>   nUnused = bzf->strm.avail_in;
(92.4 %, 15585 bytes)
1019c1019
<   ;
---
>   
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>   nUnused = bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>   * = bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>    = bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>   *nUnused  bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>   nUnused  bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>   *  bzf->strm.avail_in;
1019,1020c1019,1020
<   ;
<   *nUnused = bzf->strm.avail_in;
---
>   
>     bzf->strm.avail_in;
1020c1020
<   *nUnused = bzf->strm.avail_in;
---
>   nUnused = bzf->strm.avail_in;
1020c1020
<   *nUnused = bzf->strm.avail_in;
---
>    = bzf->strm.avail_in;
1020c1020
<   *nUnused = bzf->strm.avail_in;
---
>   nUnused  bzf->strm.avail_in;
1020c1020
<   *nUnused = bzf->strm.avail_in;
---
>     bzf->strm.avail_in;
(92.4 %, 15584 bytes)
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>    = bzf->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>     bzf->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>    = ->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>     ->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>    = bzfstrm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>     bzfstrm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>    = strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>     strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>   nUnused  bzf->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>   nUnused  ->strm.avail_in;
1020c1020
<   nUnused = bzf->strm.avail_in;
---
>   nUnused  bzfstrm.avail_in;
(92.4 %, 15576 bytes)
1020c1020
<     bzf->strm.avail_in;
---
>     strm.avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     ->.avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     .avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     ->strmavail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     strmavail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     ->avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzfstrm.avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf.avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzfstrmavail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzfavail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzfstrm.;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf.;
1020c1020
<     bzf->strm.avail_in;
---
>     bzfstrm;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->.avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->avail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->.;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->.avail_in
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->avail_in
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->.
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->strmavail_in;
1020c1020
<     bzf->strm.avail_in;
---
>     bzf->strm;
(92.4 %, 15561 bytes)
1020,1021c1020,1021
<     bzf;
<   *unused = bzf->strm.next_in;
---
>     bzf
>     bzf->strm.next_in;
1021c1021
<   *unused = bzf->strm.next_in;
---
>   unused = bzf->strm.next_in;
1021c1021
<   *unused = bzf->strm.next_in;
---
>    = bzf->strm.next_in;
1021c1021
<   *unused = bzf->strm.next_in;
---
>   unused  bzf->strm.next_in;
1021c1021
<   *unused = bzf->strm.next_in;
---
>     bzf->strm.next_in;
(92.4 %, 15560 bytes)
1021c1021
<   unused = bzf->strm.next_in;
---
>    = bzf->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>     bzf->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>    = ->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>     ->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>    = bzfstrm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>     bzfstrm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>    = strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>     strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>   unused  bzf->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>   unused  ->strm.next_in;
1021c1021
<   unused = bzf->strm.next_in;
---
>   unused  bzfstrm.next_in;
(92.4 %, 15553 bytes)
1021c1021
<     bzf->strm.next_in;
---
>     strm.next_in;
1021c1021
<     bzf->strm.next_in;
---
>     ->.next_in;
1021c1021
<     bzf->strm.next_in;
---
>     .next_in;
1021c1021
<     bzf->strm.next_in;
---
>     ->strmnext_in;
1021c1021
<     bzf->strm.next_in;
---
>     strmnext_in;
1021c1021
<     bzf->strm.next_in;
---
>     ->next_in;
1021c1021
<     bzf->strm.next_in;
---
>     next_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzfstrm.next_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzf.next_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzfstrmnext_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzfnext_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzfstrm.;
1021c1021
<     bzf->strm.next_in;
---
>     bzf.;
1021c1021
<     bzf->strm.next_in;
---
>     bzfstrm;
1021c1021
<     bzf->strm.next_in;
---
>     bzf;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->.next_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->next_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->.;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->.next_in
1021c1021
<     bzf->strm.next_in;
---
>     bzf->next_in
1021c1021
<     bzf->strm.next_in;
---
>     bzf->.
1021c1021
<     bzf->strm.next_in;
---
>     bzf->
1021c1021
<     bzf->strm.next_in;
---
>     bzf->strmnext_in;
1021c1021
<     bzf->strm.next_in;
---
>     bzf->strm;
(92.4 %, 15539 bytes)
1021,1022c1021
<     bzf;
< }
---
>     bzf
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
>  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022c1022
< }
---
> 
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
> int (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
>  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
> int BZ_APIBZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
> int BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1022d1021
< }
1024c1023,1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1024c1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1024c1024
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
(92.4 %, 15536 bytes)
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  ()(char *dest, unsigned int *destLen,
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  )(char *dest, unsigned int *destLen,
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  (BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
1024c1024
<  BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
(92.4 %, 15530 bytes)
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  )(char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress)char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  )char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  ()(char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  ((char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  ()char *dest, unsigned int *destLen,
1024c1024
<  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
(92.4 %, 15528 bytes)
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>   *dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  char dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  ( dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>   dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress *dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompresschar dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompresschar *, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress *, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompresschar , unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress , unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( *dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( *, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( , unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( *dest unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( dest unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress( * unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(  unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char dest, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char dest unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char  unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char dest,  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char ,  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char dest  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char   int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char * unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *,  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char * unsigned  *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *,   *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *   *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest unsigned int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest unsigned  *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest   *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest unsigned int destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest  int destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest unsigned  destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest   destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,  int *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,   *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,  int destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,   destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,  int *,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,   *,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,  int ,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest,   ,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  ,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned int destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned int ,
(92.4 %, 15525 bytes)
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  ,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen,
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  ,
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  destLen
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  
>                                       *source, unsigned int sourceLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *,
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *,
>                                      char source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *
>                                      char source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *,
>                                       source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *
>                                       source, unsigned int sourceLen,
1024c1024
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                       *source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                      char source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                       source, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                      char *, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                       *, unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                      char , unsigned int sourceLen,
1024,1025c1024,1025
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen
>                                       , unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       *source, unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       source, unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       *, unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       , unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       *source unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       source unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                       * unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                        unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char source, unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char , unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char source unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char  unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char source,  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char ,  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char source  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char   int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *, unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char * unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *,  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *, unsigned  sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char * unsigned  sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *,   sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *   sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source unsigned int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source unsigned  sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source   sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source unsigned int ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source  int ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source unsigned  ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source   ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,  int sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,   sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,  int ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,   ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,  int sourceLen
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,   sourceLen
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,  int 
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source,   
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned  sourceLen,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned  ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned  sourceLen
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned  
1025,1026c1025,1026
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen,
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  ,
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  
>                                       blockSize100k, int verbosity,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned int ,
1025c1025
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned int 
1025,1026c1025,1026
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned int ,
>                                       blockSize100k, int verbosity,
(92.4 %, 15522 bytes)
1025c1025
<                                      char *source, unsigned  sourceLen,
---
>                                      char *source, unsigned  ,
1025c1025
<                                      char *source, unsigned  sourceLen,
---
>                                      char *source, unsigned  
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  ,
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  ,
>                                      int , int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  
>                                      int , int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  ,
>                                       , int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  
>                                       , int verbosity,
1025c1025
<                                      char *source, unsigned  sourceLen,
---
>                                      char *source, unsigned  sourceLen
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                       blockSize100k, int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                      int , int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                       , int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                      int blockSize100k int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                       blockSize100k int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                      int  int verbosity,
1025,1026c1025,1026
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned  sourceLen
>                                        int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       blockSize100k, int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       , int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       blockSize100k int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                        int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       blockSize100k,  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       ,  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                       blockSize100k  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                         verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int , int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int  int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int ,  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int   verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int , int ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int  int ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int ,  ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int   ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k int verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k int ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k  ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k int verbosity
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k  verbosity
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k int 
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k  
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k,  verbosity,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k,  ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k,  verbosity
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k,  
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k,  verbosity,
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k,  ,
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k,  verbosity
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k,  
>                                       workFactor) {
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, int ,
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, int 
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int ,
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int 
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int ,
>                                      int ) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int 
>                                      int ) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int ,
>                                       ) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int 
>                                       ) {
1026c1026
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, int verbosity
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                       workFactor) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                      int ) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                       ) {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                      int workFactor {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                       workFactor {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                      int  {
1026,1027c1026,1027
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity
>                                        {
1027c1027
<                                      int workFactor) {
---
>                                       workFactor) {
1027c1027
<                                      int workFactor) {
---
>                                       ) {
1027c1027
<                                      int workFactor) {
---
>                                       workFactor {
1027c1027
<                                      int workFactor) {
---
>                                        {
1027c1027
<                                      int workFactor) {
---
>                                       workFactor) 
1027c1027
<                                      int workFactor) {
---
>                                       ) 
1027c1027
<                                      int workFactor) {
---
>                                       workFactor 
1027c1027
<                                      int workFactor) {
---
>                                        
1027c1027
<                                      int workFactor) {
---
>                                      int ) {
1027c1027
<                                      int workFactor) {
---
>                                      int  {
1027c1027
<                                      int workFactor) {
---
>                                      int ) 
1027c1027
<                                      int workFactor) {
---
>                                      int  
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int ) {
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int  {
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int ) 
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int  
>    strm;
1027c1027
<                                      int workFactor) {
---
>                                      int workFactor {
1027c1027
<                                      int workFactor) {
---
>                                      int workFactor 
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor {
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor 
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor {
>   bz_stream ;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor 
>   bz_stream ;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor {
>    ;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor 
>    ;
1027c1027
<                                      int workFactor) {
---
>                                      int workFactor) 
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>    strm;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>   bz_stream ;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>    ;
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>   bz_stream strm
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>    strm
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>   bz_stream 
1027,1028c1027,1028
<                                      int workFactor) {
<   bz_stream strm;
---
>                                      int workFactor) 
>    
1028c1028
<   bz_stream strm;
---
>    strm;
1028c1028
<   bz_stream strm;
---
>    ;
1028c1028
<   bz_stream strm;
---
>    strm
1028c1028
<   bz_stream strm;
---
>    
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>    strm;
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>    ;
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>    strm
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>    
>    ret;
1028c1028
<   bz_stream strm;
---
>   bz_stream ;
1028c1028
<   bz_stream strm;
---
>   bz_stream 
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>   int ;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>   int ;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>    ;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>    ;
1028c1028
<   bz_stream strm;
---
>   bz_stream strm
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ret;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int ;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ;
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int ret
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ret
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int 
1028,1029c1028,1029
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    
1029c1029
<   int ret;
---
>    ret;
1029c1029
<   int ret;
---
>    ;
1029c1029
<   int ret;
---
>    ret
1029c1029
<   int ret;
---
>    
1029c1029
<   int ret;
---
>    ret;
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>    ;
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>    ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>    
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ;
1029c1029
<   int ret;
---
>   int 
1029c1029
<   int ret;
---
>   int ;
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int 
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ;
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int 
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ;
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int 
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1029c1029
<   int ret;
---
>   int ret
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>     == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>     == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>      NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if   NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest   || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if    || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   || destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL  destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (  NULL  destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( ==   destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
(92.4 %, 15516 bytes)
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   ||  == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     == NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   || destLen  NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen  NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   ||   NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL || source == NULL || blockSize100k < 1 ||
(92.4 %, 15510 bytes)
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     ==  || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       || source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     == NULL  source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL  source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     ==   source == NULL || blockSize100k < 1 ||
1031c1031
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source == NULL || blockSize100k < 1 ||
(92.4 %, 15501 bytes)
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source == NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       ||  == NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (         == NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       || source  NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source  NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       ||   NULL || blockSize100k < 1 ||
1031c1031
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (          NULL || blockSize100k < 1 ||
(92.4 %, 15495 bytes)
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (          NULL || blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         ==  || blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (           || blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         == NULL  blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (          NULL  blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         ==   blockSize100k < 1 ||
1031c1031
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k < 1 ||
(92.4 %, 15487 bytes)
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k < 1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           ||  < 1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (             < 1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           || blockSize100k  1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k  1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           ||   1 ||
1031c1031
<   if (          NULL || blockSize100k < 1 ||
---
>   if (              1 ||
(92.4 %, 15481 bytes)
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (              1 ||
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (             <  ||
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (               ||
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (             < 1 
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (              1 
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (             <  
1031c1031
<   if (            blockSize100k < 1 ||
---
>   if (               
(92.5 %, 15467 bytes)
1031c1031
<   if (              1 ||
---
>   if (               
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>        > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>        > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>       blockSize100k  9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>       blockSize100k  9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1031,1032c1031,1032
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
(92.5 %, 15464 bytes)
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        >  || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        > 9  verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>         9  verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        >   verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
(92.5 %, 15450 bytes)
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          ||  < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            < 0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          || verbosity  0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity  0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          ||   0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0 || verbosity > 4 || workFactor < 0 ||
(92.5 %, 15447 bytes)
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0 || verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            <  || verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>              || verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            < 0  verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0  verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            <   verbosity > 4 || workFactor < 0 ||
1032c1032
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity > 4 || workFactor < 0 ||
(92.5 %, 15437 bytes)
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity > 4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              ||  > 4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>                > 4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              || verbosity  4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity  4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              ||   4 || workFactor < 0 ||
1032c1032
<             0 || verbosity > 4 || workFactor < 0 ||
---
>                 4 || workFactor < 0 ||
(92.5 %, 15434 bytes)
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                 4 || workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                >  || workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                  || workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                > 4  workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                 4  workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                >   workFactor < 0 ||
1032c1032
<               verbosity > 4 || workFactor < 0 ||
---
>                   workFactor < 0 ||
(92.5 %, 15424 bytes)
1032c1032
<                 4 || workFactor < 0 ||
---
>                   workFactor < 0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                  ||  < 0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                    < 0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                  || workFactor  0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                   workFactor  0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                  ||   0 ||
1032c1032
<                 4 || workFactor < 0 ||
---
>                     0 ||
(92.5 %, 15421 bytes)
1032c1032
<                   workFactor < 0 ||
---
>                     0 ||
1032c1032
<                   workFactor < 0 ||
---
>                    <  ||
1032c1032
<                   workFactor < 0 ||
---
>                      ||
1032c1032
<                   workFactor < 0 ||
---
>                    < 0 
1032c1032
<                   workFactor < 0 ||
---
>                     0 
1032c1032
<                   workFactor < 0 ||
---
>                    <  
1032c1032
<                   workFactor < 0 ||
---
>                      
(92.5 %, 15410 bytes)
1032c1032
<                     0 ||
---
>                      
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      ||
>        > 250)
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      
>        > 250)
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      ||
>       workFactor  250)
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      
>       workFactor  250)
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      ||
>         250)
1032,1033c1032,1033
<                     0 ||
<       workFactor > 250)
---
>                      
>         250)
(92.5 %, 15407 bytes)
1033c1033
<       workFactor > 250)
---
>         250)
1033c1033
<       workFactor > 250)
---
>        > )
1033c1033
<       workFactor > 250)
---
>         )
1033c1033
<       workFactor > 250)
---
>        > 250
1033c1033
<       workFactor > 250)
---
>         250
1033c1033
<       workFactor > 250)
---
>        > 
1033c1033
<       workFactor > 250)
---
>         
1033c1033
<       workFactor > 250)
---
>       workFactor  250)
1033c1033
<       workFactor > 250)
---
>       workFactor  )
(92.5 %, 15396 bytes)
1033c1033
<         250)
---
>         
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         )
>      BZ_PARAM_ERROR;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         
>      BZ_PARAM_ERROR;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         )
>     return ;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         
>     return ;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         )
>      ;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         
>      ;
1033c1033
<         250)
---
>         250
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>      BZ_PARAM_ERROR;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>     return ;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>      ;
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>     return BZ_PARAM_ERROR
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>      BZ_PARAM_ERROR
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>     return 
1033,1034c1033,1034
<         250)
<     return BZ_PARAM_ERROR;
---
>         250
>      
1034c1034
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
1034c1034
<     return BZ_PARAM_ERROR;
---
>      ;
(92.5 %, 15390 bytes)
1034c1034
<      BZ_PARAM_ERROR;
---
>      ;
1034c1034
<      BZ_PARAM_ERROR;
---
>      
1034c1034
<      BZ_PARAM_ERROR;
---
>      ;
1036c1036
<   if (workFactor == 0)
---
>    (workFactor == 0)
(92.5 %, 15376 bytes)
1034c1034
<      ;
---
>      
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>    (workFactor == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>   if workFactor == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>    workFactor == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>   if ( == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>    ( == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>   if  == 0)
1034c1034
<      ;
---
>      
1036c1036
<   if (workFactor == 0)
---
>     == 0)
1036c1036
<   if (workFactor == 0)
---
>    (workFactor == 0)
1036c1036
<   if (workFactor == 0)
---
>    workFactor == 0)
1036c1036
<   if (workFactor == 0)
---
>    ( == 0)
(92.5 %, 15375 bytes)
1036c1036
<   if (workFactor == 0)
---
>    (workFactor == 0)
1036c1036
<   if (workFactor == 0)
---
>    workFactor == 0)
1036c1036
<   if (workFactor == 0)
---
>    ( == 0)
1036c1036
<   if (workFactor == 0)
---
>     == 0)
1036c1036
<   if (workFactor == 0)
---
>    (workFactor  0)
1036c1036
<   if (workFactor == 0)
---
>    workFactor  0)
1036c1036
<   if (workFactor == 0)
---
>    (  0)
1036c1036
<   if (workFactor == 0)
---
>      0)
1036c1036
<   if (workFactor == 0)
---
>   if workFactor == 0)
1036c1036
<   if (workFactor == 0)
---
>   if  == 0)
1036c1036
<   if (workFactor == 0)
---
>   if workFactor  0)
1036c1036
<   if (workFactor == 0)
---
>   if   0)
1036c1036
<   if (workFactor == 0)
---
>   if workFactor == )
1036c1036
<   if (workFactor == 0)
---
>   if  == )
1036c1036
<   if (workFactor == 0)
---
>   if workFactor  )
1036c1036
<   if (workFactor == 0)
---
>   if   )
1036c1036
<   if (workFactor == 0)
---
>   if ( == 0)
1036c1036
<   if (workFactor == 0)
---
>   if (  0)
1036c1036
<   if (workFactor == 0)
---
>   if ( == )
1036c1036
<   if (workFactor == 0)
---
>   if (  )
1036c1036
<   if (workFactor == 0)
---
>   if ( == 0
1036c1036
<   if (workFactor == 0)
---
>   if (  0
1036c1036
<   if (workFactor == 0)
---
>   if ( == 
1036c1036
<   if (workFactor == 0)
---
>   if (  
1036c1036
<   if (workFactor == 0)
---
>   if (workFactor  0)
1036c1036
<   if (workFactor == 0)
---
>   if (workFactor  )
(92.5 %, 15363 bytes)
1036c1036
<   if (  0)
---
>   if (  
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>      = 30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  
>      = 30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>     workFactor  30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  
>     workFactor  30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  )
>       30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  
>       30;
1036c1036
<   if (  0)
---
>   if (  0
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = 30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       30;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor = ;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>      = ;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>     workFactor  ;
1036,1037c1036,1037
<   if (  0)
<     workFactor = 30;
---
>   if (  0
>       ;
1037c1037
<     workFactor = 30;
---
>      = 30;
1037c1037
<     workFactor = 30;
---
>       30;
1037c1037
<     workFactor = 30;
---
>      = ;
1037c1037
<     workFactor = 30;
---
>       ;
(92.5 %, 15352 bytes)
1037c1037
<       30;
---
>       
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       ;
>   .bzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       
>   .bzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       ;
>   strmbzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       
>   strmbzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       ;
>   bzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       
>   bzalloc = NULL;
1037c1037
<       30;
---
>       30
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       30
>   .bzalloc = NULL;
1037,1038c1037,1038
<       30;
<   strm.bzalloc = NULL;
---
>       30
>   strmbzalloc = NULL;
(92.5 %, 15349 bytes)
1038c1038
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>   . = NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>    = NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>   .bzalloc  NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>   bzalloc  NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>   .  NULL;
1038c1038
<   strm.bzalloc = NULL;
---
>     NULL;
(92.5 %, 15343 bytes)
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     ;
>   .bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     NULL
>   .bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     
>   .bzfree = NULL;
1038c1038
<   bzalloc  NULL;
---
>   bzalloc  ;
1038c1038
<   bzalloc  NULL;
---
>   bzalloc  
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   .bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   .bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   strmbzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   strmbzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   bzfree = NULL;
1038c1038
<   bzalloc  NULL;
---
>   bzalloc  NULL
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   .bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strmbzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   bzfree = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm. = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   . = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm = NULL;
1038,1039c1038,1039
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>    = NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   .bzfree = NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   bzfree = NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   . = NULL;
1039c1039
<   strm.bzfree = NULL;
---
>    = NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   .bzfree  NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   bzfree  NULL;
1039c1039
<   strm.bzfree = NULL;
---
>   .  NULL;
1039c1039
<   strm.bzfree = NULL;
---
>     NULL;
(92.5 %, 15337 bytes)
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     ;
>   .opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     NULL
>   .opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     
>   .opaque = NULL;
1039c1039
<   bzfree  NULL;
---
>   bzfree  ;
1039c1039
<   bzfree  NULL;
---
>   bzfree  
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   .opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   .opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   strmopaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   strmopaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   opaque = NULL;
1039c1039
<   bzfree  NULL;
---
>   bzfree  NULL
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   .opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strmopaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   opaque = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm. = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   . = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm = NULL;
1039,1040c1039,1040
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>    = NULL;
1040c1040
<   strm.opaque = NULL;
---
>   .opaque = NULL;
1040c1040
<   strm.opaque = NULL;
---
>   opaque = NULL;
1040c1040
<   strm.opaque = NULL;
---
>   . = NULL;
1040c1040
<   strm.opaque = NULL;
---
>    = NULL;
1040c1040
<   strm.opaque = NULL;
---
>   .opaque  NULL;
1040c1040
<   strm.opaque = NULL;
---
>   opaque  NULL;
1040c1040
<   strm.opaque = NULL;
---
>   .  NULL;
1040c1040
<   strm.opaque = NULL;
---
>     NULL;
(92.5 %, 15331 bytes)
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>     ;
>    = 0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>     NULL
>    = 0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>     
>    = 0;
1040c1040
<   opaque  NULL;
---
>   opaque  ;
1040c1040
<   opaque  NULL;
---
>   opaque  
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>    = 0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>    = 0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>   ret  0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>   ret  0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>     0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>     0;
1040c1040
<   opaque  NULL;
---
>   opaque  NULL
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = 0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     0;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret = ;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = ;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  ;
1040,1041c1040,1041
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     ;
1041c1041
<   ret = 0;
---
>    = 0;
1041c1041
<   ret = 0;
---
>     0;
(92.5 %, 15325 bytes)
1041,1042c1041,1042
<     ;
<   if (0 != BZ_OK)
---
>     
>     != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    (0 != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    0 != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    ( != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>     != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    (0  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    0  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>    (  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>      BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if 0 != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if  != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if 0  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if   BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if 0 != )
1042c1042
<   if (0 != BZ_OK)
---
>   if  != )
1042c1042
<   if (0 != BZ_OK)
---
>   if 0  )
1042c1042
<   if (0 != BZ_OK)
---
>   if   )
1042c1042
<   if (0 != BZ_OK)
---
>   if ( != BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if (  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if ( != )
1042c1042
<   if (0 != BZ_OK)
---
>   if (  )
1042c1042
<   if (0 != BZ_OK)
---
>   if ( != BZ_OK
1042c1042
<   if (0 != BZ_OK)
---
>   if (  BZ_OK
1042c1042
<   if (0 != BZ_OK)
---
>   if ( != 
1042c1042
<   if (0 != BZ_OK)
---
>   if (  
1042c1042
<   if (0 != BZ_OK)
---
>   if (0  BZ_OK)
1042c1042
<   if (0 != BZ_OK)
---
>   if (0  )
(92.5 %, 15322 bytes)
1042c1042
<   if (  BZ_OK)
---
>   if (  
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>      0;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>      0;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>     return ;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>     return ;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>      ;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>      ;
1042c1042
<   if (  BZ_OK)
---
>   if (  BZ_OK
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      0;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return ;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      ;
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return 0
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      0
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return 
1042,1043c1042,1043
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      
1043c1043
<     return 0;
---
>      0;
1043c1043
<     return 0;
---
>      ;
(92.5 %, 15316 bytes)
1043c1043
<      0;
---
>      ;
1043c1043
<      0;
---
>      
(92.5 %, 15315 bytes)
1043c1043
<      ;
---
>      
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   .next_in = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   strmnext_in = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   next_in = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   strm. = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   . = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>   strm = source;
1043c1043
<      ;
---
>      
1045c1045
<   strm.next_in = source;
---
>    = source;
1045c1045
<   strm.next_in = source;
---
>   .next_in = source;
1045c1045
<   strm.next_in = source;
---
>   next_in = source;
(92.5 %, 15314 bytes)
1045c1045
<   strm.next_in = source;
---
>   .next_in = source;
1045c1045
<   strm.next_in = source;
---
>   next_in = source;
1045c1045
<   strm.next_in = source;
---
>   . = source;
1045c1045
<   strm.next_in = source;
---
>    = source;
1045c1045
<   strm.next_in = source;
---
>   .next_in  source;
1045c1045
<   strm.next_in = source;
---
>   next_in  source;
1045c1045
<   strm.next_in = source;
---
>   .  source;
1045c1045
<   strm.next_in = source;
---
>     source;
1045c1045
<   strm.next_in = source;
---
>   strmnext_in = source;
1045c1045
<   strm.next_in = source;
---
>   strm = source;
1045c1045
<   strm.next_in = source;
---
>   strmnext_in  source;
1045c1045
<   strm.next_in = source;
---
>   strm  source;
1045c1045
<   strm.next_in = source;
---
>   strmnext_in = ;
1045c1045
<   strm.next_in = source;
---
>   strm = ;
1045c1045
<   strm.next_in = source;
---
>   strmnext_in  ;
1045c1045
<   strm.next_in = source;
---
>   strm  ;
(92.5 %, 15301 bytes)
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     
>   next_out = dest;
1045c1045
<     source;
---
>     source
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   .next_out = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   strmnext_out = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   next_out = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   strm. = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   . = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>   strm = dest;
1045,1046c1045,1046
<     source;
<   strm.next_out = dest;
---
>     source
>    = dest;
1046c1046
<   strm.next_out = dest;
---
>   .next_out = dest;
1046c1046
<   strm.next_out = dest;
---
>   next_out = dest;
1046c1046
<   strm.next_out = dest;
---
>   . = dest;
1046c1046
<   strm.next_out = dest;
---
>    = dest;
1046c1046
<   strm.next_out = dest;
---
>   .next_out  dest;
1046c1046
<   strm.next_out = dest;
---
>   next_out  dest;
1046c1046
<   strm.next_out = dest;
---
>   .  dest;
1046c1046
<   strm.next_out = dest;
---
>     dest;
(92.5 %, 15287 bytes)
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>     
>   .avail_in = sourceLen;
1046c1046
<    = dest;
---
>    = ;
1046c1046
<    = dest;
---
>    = 
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   .avail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   .avail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   strmavail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   strmavail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   avail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   avail_in = sourceLen;
1046c1046
<    = dest;
---
>    = dest
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = dest
>   .avail_in = sourceLen;
1046,1047c1046,1047
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = dest
>   strmavail_in = sourceLen;
(92.5 %, 15282 bytes)
1047c1047
<   strm.avail_in = sourceLen;
---
>   avail_in = sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   . = sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>    = sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   .avail_in  sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   avail_in  sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   .  sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>     sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strmavail_in = sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strm = sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strmavail_in  sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strm  sourceLen;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strmavail_in = ;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strm = ;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strmavail_in  ;
1047c1047
<   strm.avail_in = sourceLen;
---
>   strm  ;
(92.5 %, 15268 bytes)
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     
>   avail_out = *destLen;
1047c1047
<     sourceLen;
---
>     sourceLen
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   .avail_out = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strmavail_out = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   avail_out = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strm. = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   . = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strm = *destLen;
1047,1048c1047,1048
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>    = *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   .avail_out = *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   avail_out = *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   . = *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>    = *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   .avail_out  *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   avail_out  *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>   .  *destLen;
1048c1048
<   strm.avail_out = *destLen;
---
>     *destLen;
(92.6 %, 15253 bytes)
1048c1048
<    = *destLen;
---
>     
1048c1048
<    = *destLen;
---
>    = destLen;
1048c1048
<    = *destLen;
---
>    = ;
1048c1048
<    = *destLen;
---
>    = destLen
1048c1048
<    = *destLen;
---
>    = 
(92.6 %, 15252 bytes)
1048c1048
<    = destLen;
---
>    = ;
1048c1048
<    = destLen;
---
>    = 
1048c1048
<    = destLen;
---
>    = ;
1050c1050
<   ret = 0;
---
>    = 0;
1048c1048
<    = destLen;
---
>    = 
1050c1050
<   ret = 0;
---
>    = 0;
1048c1048
<    = destLen;
---
>    = ;
1050c1050
<   ret = 0;
---
>   ret  0;
1048c1048
<    = destLen;
---
>    = 
1050c1050
<   ret = 0;
---
>   ret  0;
1048c1048
<    = destLen;
---
>    = ;
1050c1050
<   ret = 0;
---
>     0;
1048c1048
<    = destLen;
---
>    = 
1050c1050
<   ret = 0;
---
>     0;
(92.6 %, 15244 bytes)
1050c1050
<   ret = 0;
---
>     0;
1050c1050
<   ret = 0;
---
>    = ;
1050c1050
<   ret = 0;
---
>     ;
1050c1050
<   ret = 0;
---
>    = 0
1050c1050
<   ret = 0;
---
>     0
1050c1050
<   ret = 0;
---
>    = 
1050c1050
<   ret = 0;
---
>     
1050c1050
<   ret = 0;
---
>   ret  0;
1050c1050
<   ret = 0;
---
>   ret  ;
(92.6 %, 15240 bytes)
1050c1050
<     0;
---
>     
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     ;
>    (0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     
>    (0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     ;
>   if 0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     
>   if 0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     ;
>    0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     
>    0 == BZ_FINISH_OK)
1050c1050
<     0;
---
>     0
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>    (0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>   if 0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>    0 == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>   if ( == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>    ( == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>   if  == BZ_FINISH_OK)
1050,1051c1050,1051
<     0;
<   if (0 == BZ_FINISH_OK)
---
>     0
>     == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    (0 == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    0 == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    ( == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>     == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    (0  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    0  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>    (  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>      BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if 0 == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if  == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if 0  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if   BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if 0 == )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if  == )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if 0  )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if   )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if ( == BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if ( == )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (  )
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if ( == BZ_FINISH_OK
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (  BZ_FINISH_OK
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if ( == 
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (  
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (0  BZ_FINISH_OK)
1051c1051
<   if (0 == BZ_FINISH_OK)
---
>   if (0  )
(92.6 %, 15237 bytes)
1051c1051
<   if (  BZ_FINISH_OK)
---
>   if (  
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  )
>      output_overflow;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  
>      output_overflow;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  )
>     goto ;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  
>     goto ;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  )
>      ;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  
>      ;
1051c1051
<   if (  BZ_FINISH_OK)
---
>   if (  BZ_FINISH_OK
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>      output_overflow;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>     goto ;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>      ;
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>     goto output_overflow
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>      output_overflow
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>     goto 
1051,1052c1051,1052
<   if (  BZ_FINISH_OK)
<     goto output_overflow;
---
>   if (  BZ_FINISH_OK
>      
1052c1052
<     goto output_overflow;
---
>      output_overflow;
1052c1052
<     goto output_overflow;
---
>      ;
1052c1052
<     goto output_overflow;
---
>      output_overflow
1052c1052
<     goto output_overflow;
---
>      
(92.6 %, 15218 bytes)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    (0 != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if 0 != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    0 != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if ( != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    ( != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if  != BZ_STREAM_END)
1052,1053c1052,1053
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>     != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    (0 != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    0 != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    ( != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>     != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    (0  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    0  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>    (  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>      BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if 0 != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if  != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if 0  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if   BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if 0 != )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if  != )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if 0  )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if   )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if ( != BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if ( != )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (  )
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if ( != BZ_STREAM_END
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (  BZ_STREAM_END
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if ( != 
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (  
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (0  BZ_STREAM_END)
1053c1053
<   if (0 != BZ_STREAM_END)
---
>   if (0  )
(92.6 %, 15215 bytes)
1053c1053
<   if (  BZ_STREAM_END)
---
>   if (  
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>      errhandler;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>      errhandler;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>     goto ;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>     goto ;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>      ;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>      ;
1053c1053
<   if (  BZ_STREAM_END)
---
>   if (  BZ_STREAM_END
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      errhandler;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto ;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      ;
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto errhandler
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      errhandler
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto 
1053,1054c1053,1054
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      
1054c1054
<     goto errhandler;
---
>      errhandler;
1054c1054
<     goto errhandler;
---
>      ;
1054c1054
<     goto errhandler;
---
>      errhandler
1054c1054
<     goto errhandler;
---
>      
(92.6 %, 15201 bytes)
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>   destLen -= strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>   * -= strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>    -= strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>   *destLen  strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>   destLen  strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>   *  strm.avail_out;
1054c1054
<      ;
---
>      
1056c1056
<   *destLen -= strm.avail_out;
---
>     strm.avail_out;
(92.6 %, 15199 bytes)
1056c1056
<   destLen -= strm.avail_out;
---
>     strm.avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>    -= .avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>     .avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>    -= strmavail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>     strmavail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>    -= avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>     avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>   destLen  strm.avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>   destLen  .avail_out;
1056c1056
<   destLen -= strm.avail_out;
---
>   destLen  strmavail_out;
(92.6 %, 15190 bytes)
1056c1056
<     strm.avail_out;
---
>     avail_out;
1056c1056
<     strm.avail_out;
---
>     .;
1056c1056
<     strm.avail_out;
---
>     ;
1056c1056
<     strm.avail_out;
---
>     .avail_out
1056c1056
<     strm.avail_out;
---
>     avail_out
1056c1056
<     strm.avail_out;
---
>     .
1056c1056
<     strm.avail_out;
---
>     
(92.6 %, 15176 bytes)
1056,1057c1056,1057
<     ;
<   0;
---
>     
>   
1056c1056
<     ;
---
>     
1058c1058
<   return BZ_OK;
---
>    BZ_OK;
(92.6 %, 15173 bytes)
1058c1058
<   return BZ_OK;
---
>    
1058c1058
<   return BZ_OK;
---
>    BZ_OK;
1060c1060
< output_overflow:
---
> :
1058c1058
<   return BZ_OK;
---
>    ;
1060c1060
< output_overflow:
---
> :
1058c1058
<   return BZ_OK;
---
>    BZ_OK
1060c1060
< output_overflow:
---
> :
1058c1058
<   return BZ_OK;
---
>    
1060c1060
< output_overflow:
---
> :
1058c1058
<   return BZ_OK;
---
>   return ;
(92.6 %, 15161 bytes)
1060,1061c1060,1061
< output_overflow:
<   0;
---
> 
>   ;
1060,1061c1060,1061
< output_overflow:
<   0;
---
> :
>   0
1060,1061c1060,1061
< output_overflow:
<   0;
---
> 
>   0
1060,1061c1060,1061
< output_overflow:
<   0;
---
> :
>   
1060,1061c1060,1061
< output_overflow:
<   0;
---
> 
>   
(92.6 %, 15144 bytes)
1061,1062c1061,1062
<   ;
<   return BZ_OUTBUFF_FULL;
---
>   
>    ;
1061,1062c1061,1062
<   ;
<   return BZ_OUTBUFF_FULL;
---
>   
>   return BZ_OUTBUFF_FULL
1061,1062c1061,1062
<   ;
<   return BZ_OUTBUFF_FULL;
---
>   
>    BZ_OUTBUFF_FULL
1061,1062c1061,1062
<   ;
<   return BZ_OUTBUFF_FULL;
---
>   
>   return 
1061,1062c1061,1062
<   ;
<   return BZ_OUTBUFF_FULL;
---
>   
>    
(92.6 %, 15122 bytes)
1062c1062,1063
<    ;
---
>    
> 
1064d1064
< errhandler:
1062c1062
<    ;
---
>    
1065c1065
<   0;
---
>   ;
(92.6 %, 15110 bytes)
1065,1066c1065,1066
<   0;
<   return 0;
---
>   
>    0;
1065,1066c1065,1066
<   0;
<   return 0;
---
>   ;
>   return ;
1065,1066c1065,1066
<   0;
<   return 0;
---
>   
>   return ;
(92.6 %, 15102 bytes)
1066,1067c1066,1067
<    0;
< }
---
>    
> 
1066c1066
<    0;
---
>    ;
1069c1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066c1066
<    0;
---
>    
1069c1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    0;
< }
---
>    ;
1069c1068,1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    0;
< }
---
>    
1069c1068,1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066c1066
<    0;
---
>    0
1066,1067c1066,1067
<    0;
< }
---
>    0
> 
1066c1066
<    0;
---
>    0
1069c1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    0;
< }
---
>    0
1069c1068,1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066c1066
<    0;
---
>    0
1069c1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    0;
< }
---
>    0
1069c1068,1069
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
> int (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
(92.6 %, 15098 bytes)
1066c1066
<    ;
---
>    
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    ;
< }
---
>    
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066c1066
<    ;
---
>    
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1066,1067c1066
<    ;
< }
---
>    
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1067c1067
< }
---
> 
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API()(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  ()(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  BZ_API)(char *dest, unsigned int *destLen,
1067d1066
< }
1069c1068,1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> 
>  )(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  ()(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  )(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  (BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
1069c1069
<  BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
(92.6 %, 15092 bytes)
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  )(char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress)char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  )char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  ()(char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  ((char *dest, unsigned int *destLen,
1069c1069
<  (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>  ()char *dest, unsigned int *destLen,
(92.6 %, 15090 bytes)
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>   *dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  char dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  ( dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>   dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress *dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompresschar dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompresschar *, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress *, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompresschar , unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress , unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( *dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( *, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( , unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( *dest unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( dest unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress( * unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(  unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char dest, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char , unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char dest unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char  unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char dest,  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char ,  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char dest  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char   int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char * unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *,  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char * unsigned  *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *,   *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *   *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest unsigned int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest unsigned  *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest   *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest unsigned int destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest  int destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest unsigned  destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest   destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,  int *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,   *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,  int destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,   destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,  int *,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,   *,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,  int ,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest,   ,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  ,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned int destLen,
(92.6 %, 15087 bytes)
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  ,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen,
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  ,
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  destLen
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  
>                                         *source, unsigned int sourceLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *,
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *,
>                                        char source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *
>                                        char source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *,
>                                         source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *
>                                         source, unsigned int sourceLen,
1069c1069
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                         *source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                        char source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                         source, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                        char *, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                         *, unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                        char , unsigned int sourceLen,
1069,1070c1069,1070
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned int sourceLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen
>                                         , unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         *source, unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         source, unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         *, unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         , unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         *source unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         source unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                         * unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                          unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char source, unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char , unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char source unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char  unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char source,  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char ,  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char source  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char   int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *, unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char * unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *,  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *, unsigned  sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char * unsigned  sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *,   sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *   sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source unsigned int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source unsigned  sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source   sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source unsigned int ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source  int ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source unsigned  ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source   ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,  int sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,   sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,  int ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,   ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,  int sourceLen
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,   sourceLen
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,  int 
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source,   
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned  sourceLen,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned  ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned  sourceLen
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned  
1070,1071c1070,1071
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen,
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  ,
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  
>                                         small, int verbosity) {
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned int ,
1070c1070
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned int 
(92.6 %, 15084 bytes)
1070c1070
<                                        char *source, unsigned  sourceLen,
---
>                                        char *source, unsigned  ,
1070c1070
<                                        char *source, unsigned  sourceLen,
---
>                                        char *source, unsigned  
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  ,
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  ,
>                                        int , int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  
>                                        int , int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  ,
>                                         , int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  
>                                         , int verbosity) {
1070c1070
<                                        char *source, unsigned  sourceLen,
---
>                                        char *source, unsigned  sourceLen
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                         small, int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                        int , int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                         , int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                        int small int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                         small int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                        int  int verbosity) {
1070,1071c1070,1071
<                                        char *source, unsigned  sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned  sourceLen
>                                          int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         small, int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         , int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         small int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                          int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         small,  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         ,  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                         small  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                           verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int , int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int  int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int ,  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int   verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int , int ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int  int ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int ,  ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int   ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small int verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small int ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small  ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small int verbosity {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small  verbosity {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small int  {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small   {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,   {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity) 
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  ) 
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity 
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small,   
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int ) {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int  {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int ) 
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int  
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int ) {
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int  {
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int ) 
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int  
>    strm;
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity {
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity 
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity {
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity 
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity {
>   bz_stream ;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity 
>   bz_stream ;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity {
>    ;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity 
>    ;
1071c1071
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity) 
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>    strm;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>   bz_stream ;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>    ;
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>   bz_stream strm
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>    strm
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>   bz_stream 
1071,1072c1071,1072
<                                        int small, int verbosity) {
<   bz_stream strm;
---
>                                        int small, int verbosity) 
>    
1072c1072
<   bz_stream strm;
---
>    strm;
1072c1072
<   bz_stream strm;
---
>    ;
1072c1072
<   bz_stream strm;
---
>    strm
1072c1072
<   bz_stream strm;
---
>    
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>    strm;
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>    ;
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>    strm
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>    
>    ret;
1072c1072
<   bz_stream strm;
---
>   bz_stream ;
1072c1072
<   bz_stream strm;
---
>   bz_stream 
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>   int ;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>   int ;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream ;
>    ;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream 
>    ;
1072c1072
<   bz_stream strm;
---
>   bz_stream strm
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ret;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int ;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ;
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int ret
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    ret
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>   int 
1072,1073c1072,1073
<   bz_stream strm;
<   int ret;
---
>   bz_stream strm
>    
1073c1073
<   int ret;
---
>    ret;
1073c1073
<   int ret;
---
>    ;
1073c1073
<   int ret;
---
>    ret
1073c1073
<   int ret;
---
>    
1073c1073
<   int ret;
---
>    ret;
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>    ;
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>    ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>    
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ;
1073c1073
<   int ret;
---
>   int 
1073c1073
<   int ret;
---
>   int ;
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int 
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ;
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int 
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ;
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int 
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    ( == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  == NULL || destLen == NULL || source == NULL ||
1073c1073
<   int ret;
---
>   int ret
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>     == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    ( == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>     == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest  NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest  NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (  NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>      NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest  NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if   NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest ==  || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  ==  || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest   || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if    || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (  NULL || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( ==  || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (   || destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL  destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (  NULL  destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( ==   destLen == NULL || source == NULL ||
1075c1075
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen == NULL || source == NULL ||
(92.6 %, 15078 bytes)
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen == NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   ||  == NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (     == NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   || destLen  NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen  NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   ||   NULL || source == NULL ||
1075c1075
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (      NULL || source == NULL ||
(92.6 %, 15072 bytes)
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (      NULL || source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (     ==  || source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (       || source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (     == NULL  source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (      NULL  source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (     ==   source == NULL ||
1075c1075
<   if (    destLen == NULL || source == NULL ||
---
>   if (        source == NULL ||
(92.6 %, 15063 bytes)
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (        source == NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (       ||  == NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (         == NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (       || source  NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (        source  NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (       ||   NULL ||
1075c1075
<   if (      NULL || source == NULL ||
---
>   if (          NULL ||
(92.7 %, 15057 bytes)
1075c1075
<   if (        source == NULL ||
---
>   if (          NULL ||
1075c1075
<   if (        source == NULL ||
---
>   if (         ==  ||
1075c1075
<   if (        source == NULL ||
---
>   if (           ||
1075c1075
<   if (        source == NULL ||
---
>   if (         == NULL 
1075c1075
<   if (        source == NULL ||
---
>   if (          NULL 
1075c1075
<   if (        source == NULL ||
---
>   if (         ==  
1075c1075
<   if (        source == NULL ||
---
>   if (           
(92.7 %, 15049 bytes)
1075c1075
<   if (          NULL ||
---
>   if (           
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>       small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           
>       small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>       ( != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           
>       ( != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>        != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (           
>        != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1075c1075
<   if (          NULL ||
---
>   if (          NULL 
1075,1076c1075,1076
<   if (          NULL ||
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>   if (          NULL 
>       small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
(92.7 %, 15043 bytes)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>        != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       small  0 && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>         0 && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       small !=  && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>        !=  && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       small   && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>          && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       ( != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       ( !=  && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (   && small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       ( != 0  small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (  0  small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       ( !=   small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (    small != 1) || verbosity < 0 || verbosity > 4)
(92.7 %, 15036 bytes)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (    small != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (   &&  != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (     != 1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (   && small  1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (    small  1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (   &&   1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (  0 && small != 1) || verbosity < 0 || verbosity > 4)
---
>       (      1) || verbosity < 0 || verbosity > 4)
(92.7 %, 15033 bytes)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (      1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (     != ) || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (      ) || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (     != 1 || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (      1 || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (     !=  || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (       || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (    small  1) || verbosity < 0 || verbosity > 4)
1076c1076
<       (    small != 1) || verbosity < 0 || verbosity > 4)
---
>       (    small  ) || verbosity < 0 || verbosity > 4)
(92.7 %, 15026 bytes)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (       || verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      )  verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (        verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      ) ||  < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (       ||  < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      )   < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (         < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1 || verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1  verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1 ||  < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1   < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1 || verbosity  0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1  verbosity  0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1 ||   0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1    0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)  verbosity < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)   < 0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)  verbosity  0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)    0 || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)  verbosity <  || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)   <  || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)  verbosity   || verbosity > 4)
1076c1076
<       (      1) || verbosity < 0 || verbosity > 4)
---
>       (      1)     || verbosity > 4)
(92.7 %, 15015 bytes)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)     || verbosity > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)    0  verbosity > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)      verbosity > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)    0 ||  > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)     ||  > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)    0   > 4)
1076c1076
<       (      1)   < 0 || verbosity > 4)
---
>       (      1)       > 4)
(92.7 %, 15013 bytes)
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)       > 4)
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)      verbosity  4)
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)        4)
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)      verbosity > )
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)       > )
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)      verbosity  )
1076c1076
<       (      1)     || verbosity > 4)
---
>       (      1)        )
(92.7 %, 15002 bytes)
1076c1076
<       (      1)       > 4)
---
>       (      1)        )
1076c1076
<       (      1)       > 4)
---
>       (      1)        4
1076c1076
<       (      1)       > 4)
---
>       (      1)        
1076,1077c1076,1077
<       (      1)       > 4)
<     return BZ_PARAM_ERROR;
---
>       (      1)        4)
>      BZ_PARAM_ERROR;
1076,1077c1076,1077
<       (      1)       > 4)
<     return BZ_PARAM_ERROR;
---
>       (      1)        )
>      BZ_PARAM_ERROR;
(92.7 %, 15000 bytes)
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>      BZ_PARAM_ERROR;
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>     return ;
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>      ;
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>     return BZ_PARAM_ERROR
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>      BZ_PARAM_ERROR
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>     return 
1076,1077c1076,1077
<       (      1)        )
<     return BZ_PARAM_ERROR;
---
>       (      1)        
>      
1077c1077
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
1077c1077
<     return BZ_PARAM_ERROR;
---
>      ;
(92.7 %, 14994 bytes)
1077c1077
<      BZ_PARAM_ERROR;
---
>      ;
1077c1077
<      BZ_PARAM_ERROR;
---
>      
1077c1077
<      BZ_PARAM_ERROR;
---
>      ;
1079c1079
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
(92.7 %, 14980 bytes)
1077c1077
<      ;
---
>      
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   strm. = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   . = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>   strm = NULL;
1077c1077
<      ;
---
>      
1079c1079
<   strm.bzalloc = NULL;
---
>    = NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
(92.7 %, 14979 bytes)
1079c1079
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   . = NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>    = NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   .bzalloc  NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   bzalloc  NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>   .  NULL;
1079c1079
<   strm.bzalloc = NULL;
---
>     NULL;
(92.7 %, 14973 bytes)
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     ;
>   .bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     NULL
>   .bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     
>   .bzfree = NULL;
1079c1079
<   bzalloc  NULL;
---
>   bzalloc  ;
1079c1079
<   bzalloc  NULL;
---
>   bzalloc  
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   .bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   .bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   strmbzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   strmbzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   bzfree = NULL;
1079c1079
<   bzalloc  NULL;
---
>   bzalloc  NULL
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   .bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strmbzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   bzfree = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm. = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   . = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm = NULL;
1079,1080c1079,1080
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>    = NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   .bzfree = NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   bzfree = NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   . = NULL;
1080c1080
<   strm.bzfree = NULL;
---
>    = NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   .bzfree  NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   bzfree  NULL;
1080c1080
<   strm.bzfree = NULL;
---
>   .  NULL;
1080c1080
<   strm.bzfree = NULL;
---
>     NULL;
(92.7 %, 14967 bytes)
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     ;
>   .opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     NULL
>   .opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     
>   .opaque = NULL;
1080c1080
<   bzfree  NULL;
---
>   bzfree  ;
1080c1080
<   bzfree  NULL;
---
>   bzfree  
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   .opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   .opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   strmopaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   strmopaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   opaque = NULL;
1080c1080
<   bzfree  NULL;
---
>   bzfree  NULL
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   .opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strmopaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   opaque = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm. = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   . = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm = NULL;
1080,1081c1080,1081
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>    = NULL;
1081c1081
<   strm.opaque = NULL;
---
>   .opaque = NULL;
1081c1081
<   strm.opaque = NULL;
---
>   opaque = NULL;
1081c1081
<   strm.opaque = NULL;
---
>   . = NULL;
1081c1081
<   strm.opaque = NULL;
---
>    = NULL;
1081c1081
<   strm.opaque = NULL;
---
>   .opaque  NULL;
1081c1081
<   strm.opaque = NULL;
---
>   opaque  NULL;
1081c1081
<   strm.opaque = NULL;
---
>   .  NULL;
1081c1081
<   strm.opaque = NULL;
---
>     NULL;
(92.7 %, 14961 bytes)
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>     ;
>    = 0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>     NULL
>    = 0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>     
>    = 0;
1081c1081
<   opaque  NULL;
---
>   opaque  ;
1081c1081
<   opaque  NULL;
---
>   opaque  
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>    = 0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>    = 0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>   ret  0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>   ret  0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>     0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>     0;
1081c1081
<   opaque  NULL;
---
>   opaque  NULL
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = 0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     0;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret = ;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = ;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  ;
1081,1082c1081,1082
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     ;
1082c1082
<   ret = 0;
---
>    = 0;
1082c1082
<   ret = 0;
---
>     0;
(92.7 %, 14955 bytes)
1082,1083c1082,1083
<     ;
<   if (0 != BZ_OK)
---
>     
>     != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    (0 != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    0 != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    ( != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>     != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    (0  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    0  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>    (  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>      BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if 0 != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if  != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if 0  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if   BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if 0 != )
1083c1083
<   if (0 != BZ_OK)
---
>   if  != )
1083c1083
<   if (0 != BZ_OK)
---
>   if 0  )
1083c1083
<   if (0 != BZ_OK)
---
>   if   )
1083c1083
<   if (0 != BZ_OK)
---
>   if ( != BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if (  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if ( != )
1083c1083
<   if (0 != BZ_OK)
---
>   if (  )
1083c1083
<   if (0 != BZ_OK)
---
>   if ( != BZ_OK
1083c1083
<   if (0 != BZ_OK)
---
>   if (  BZ_OK
1083c1083
<   if (0 != BZ_OK)
---
>   if ( != 
1083c1083
<   if (0 != BZ_OK)
---
>   if (  
1083c1083
<   if (0 != BZ_OK)
---
>   if (0  BZ_OK)
1083c1083
<   if (0 != BZ_OK)
---
>   if (0  )
(92.7 %, 14952 bytes)
1083c1083
<   if (  BZ_OK)
---
>   if (  
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>      0;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>      0;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>     return ;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>     return ;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  )
>      ;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  
>      ;
1083c1083
<   if (  BZ_OK)
---
>   if (  BZ_OK
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      0;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return ;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      ;
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return 0
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      0
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>     return 
1083,1084c1083,1084
<   if (  BZ_OK)
<     return 0;
---
>   if (  BZ_OK
>      
1084c1084
<     return 0;
---
>      0;
1084c1084
<     return 0;
---
>      ;
(92.7 %, 14946 bytes)
1084c1084
<      0;
---
>      ;
1084c1084
<      0;
---
>      
1084c1084
<      0;
---
>      ;
1086c1086
<   strm.next_in = source;
---
>   .next_in = source;
(92.7 %, 14945 bytes)
1084c1084
<      ;
---
>      
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   .next_in = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   strmnext_in = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   next_in = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   strm. = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   . = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>   strm = source;
1084c1084
<      ;
---
>      
1086c1086
<   strm.next_in = source;
---
>    = source;
1086c1086
<   strm.next_in = source;
---
>   .next_in = source;
1086c1086
<   strm.next_in = source;
---
>   next_in = source;
(92.7 %, 14944 bytes)
1086c1086
<   strm.next_in = source;
---
>   .next_in = source;
1086c1086
<   strm.next_in = source;
---
>   next_in = source;
1086c1086
<   strm.next_in = source;
---
>   . = source;
1086c1086
<   strm.next_in = source;
---
>    = source;
1086c1086
<   strm.next_in = source;
---
>   .next_in  source;
1086c1086
<   strm.next_in = source;
---
>   next_in  source;
1086c1086
<   strm.next_in = source;
---
>   .  source;
1086c1086
<   strm.next_in = source;
---
>     source;
1086c1086
<   strm.next_in = source;
---
>   strmnext_in = source;
1086c1086
<   strm.next_in = source;
---
>   strm = source;
1086c1086
<   strm.next_in = source;
---
>   strmnext_in  source;
1086c1086
<   strm.next_in = source;
---
>   strm  source;
1086c1086
<   strm.next_in = source;
---
>   strmnext_in = ;
1086c1086
<   strm.next_in = source;
---
>   strm = ;
1086c1086
<   strm.next_in = source;
---
>   strmnext_in  ;
1086c1086
<   strm.next_in = source;
---
>   strm  ;
(92.7 %, 14931 bytes)
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     
>   next_out = dest;
1086c1086
<     source;
---
>     source
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   .next_out = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   strmnext_out = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   next_out = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   strm. = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   . = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>   strm = dest;
1086,1087c1086,1087
<     source;
<   strm.next_out = dest;
---
>     source
>    = dest;
1087c1087
<   strm.next_out = dest;
---
>   .next_out = dest;
1087c1087
<   strm.next_out = dest;
---
>   next_out = dest;
1087c1087
<   strm.next_out = dest;
---
>   . = dest;
1087c1087
<   strm.next_out = dest;
---
>    = dest;
1087c1087
<   strm.next_out = dest;
---
>   .next_out  dest;
1087c1087
<   strm.next_out = dest;
---
>   next_out  dest;
1087c1087
<   strm.next_out = dest;
---
>   .  dest;
1087c1087
<   strm.next_out = dest;
---
>     dest;
(92.7 %, 14917 bytes)
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>     
>   .avail_in = sourceLen;
1087c1087
<    = dest;
---
>    = ;
1087c1087
<    = dest;
---
>    = 
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   .avail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   .avail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   strmavail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   strmavail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = ;
>   avail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = 
>   avail_in = sourceLen;
1087c1087
<    = dest;
---
>    = dest
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = dest
>   .avail_in = sourceLen;
1087,1088c1087,1088
<    = dest;
<   strm.avail_in = sourceLen;
---
>    = dest
>   strmavail_in = sourceLen;
(92.7 %, 14912 bytes)
1088c1088
<   strm.avail_in = sourceLen;
---
>   avail_in = sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   . = sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>    = sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   .avail_in  sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   avail_in  sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   .  sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>     sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strmavail_in = sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strm = sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strmavail_in  sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strm  sourceLen;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strmavail_in = ;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strm = ;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strmavail_in  ;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strm  ;
1088c1088
<   strm.avail_in = sourceLen;
---
>   strm. = sourceLen;
(92.7 %, 14898 bytes)
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     
>   avail_out = *destLen;
1088c1088
<     sourceLen;
---
>     sourceLen
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   .avail_out = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strmavail_out = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   avail_out = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strm. = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   . = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>   strm = *destLen;
1088,1089c1088,1089
<     sourceLen;
<   strm.avail_out = *destLen;
---
>     sourceLen
>    = *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   .avail_out = *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   avail_out = *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   . = *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>    = *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   .avail_out  *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   avail_out  *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>   .  *destLen;
1089c1089
<   strm.avail_out = *destLen;
---
>     *destLen;
(92.7 %, 14883 bytes)
1089c1089
<    = *destLen;
---
>     
1089c1089
<    = *destLen;
---
>    = destLen;
1089c1089
<    = *destLen;
---
>    = ;
1089c1089
<    = *destLen;
---
>    = destLen
1089c1089
<    = *destLen;
---
>    = 
(92.7 %, 14882 bytes)
1089c1089
<    = destLen;
---
>    = ;
1089c1089
<    = destLen;
---
>    = 
1089c1089
<    = destLen;
---
>    = ;
1091c1091
<   ret = 0;
---
>    = 0;
1089c1089
<    = destLen;
---
>    = 
1091c1091
<   ret = 0;
---
>    = 0;
1089c1089
<    = destLen;
---
>    = ;
1091c1091
<   ret = 0;
---
>   ret  0;
1089c1089
<    = destLen;
---
>    = 
1091c1091
<   ret = 0;
---
>   ret  0;
1089c1089
<    = destLen;
---
>    = ;
1091c1091
<   ret = 0;
---
>     0;
1089c1089
<    = destLen;
---
>    = 
1091c1091
<   ret = 0;
---
>     0;
(92.7 %, 14874 bytes)
1091c1091
<   ret = 0;
---
>     0;
1091c1091
<   ret = 0;
---
>    = ;
1091c1091
<   ret = 0;
---
>     ;
1091c1091
<   ret = 0;
---
>    = 0
1091c1091
<   ret = 0;
---
>     0
1091c1091
<   ret = 0;
---
>    = 
1091c1091
<   ret = 0;
---
>     
1091c1091
<   ret = 0;
---
>   ret  0;
1091c1091
<   ret = 0;
---
>   ret  ;
(92.7 %, 14870 bytes)
1091c1091
<     0;
---
>     
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     ;
>    (0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     
>    (0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     ;
>   if 0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     
>   if 0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     ;
>    0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     
>    0 == BZ_OK)
1091c1091
<     0;
---
>     0
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>    (0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>   if 0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>    0 == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>   if ( == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>    ( == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>   if  == BZ_OK)
1091,1092c1091,1092
<     0;
<   if (0 == BZ_OK)
---
>     0
>     == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    (0 == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    0 == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    ( == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>     == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    (0  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    0  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>    (  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>      BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if 0 == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if  == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if 0  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if   BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if 0 == )
1092c1092
<   if (0 == BZ_OK)
---
>   if  == )
1092c1092
<   if (0 == BZ_OK)
---
>   if 0  )
1092c1092
<   if (0 == BZ_OK)
---
>   if   )
1092c1092
<   if (0 == BZ_OK)
---
>   if ( == BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if (  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if ( == )
1092c1092
<   if (0 == BZ_OK)
---
>   if (  )
1092c1092
<   if (0 == BZ_OK)
---
>   if ( == BZ_OK
1092c1092
<   if (0 == BZ_OK)
---
>   if (  BZ_OK
1092c1092
<   if (0 == BZ_OK)
---
>   if ( == 
1092c1092
<   if (0 == BZ_OK)
---
>   if (  
1092c1092
<   if (0 == BZ_OK)
---
>   if (0  BZ_OK)
1092c1092
<   if (0 == BZ_OK)
---
>   if (0  )
(92.7 %, 14867 bytes)
1092c1092
<   if (  BZ_OK)
---
>   if (  
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  )
>      output_overflow_or_eof;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  
>      output_overflow_or_eof;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  )
>     goto ;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  
>     goto ;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  )
>      ;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  
>      ;
1092c1092
<   if (  BZ_OK)
---
>   if (  BZ_OK
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>      output_overflow_or_eof;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>     goto ;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>      ;
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>     goto output_overflow_or_eof
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>      output_overflow_or_eof
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>     goto 
1092,1093c1092,1093
<   if (  BZ_OK)
<     goto output_overflow_or_eof;
---
>   if (  BZ_OK
>      
1093c1093
<     goto output_overflow_or_eof;
---
>      output_overflow_or_eof;
1093c1093
<     goto output_overflow_or_eof;
---
>      ;
1093c1093
<     goto output_overflow_or_eof;
---
>      output_overflow_or_eof
1093c1093
<     goto output_overflow_or_eof;
---
>      
(92.8 %, 14841 bytes)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    (0 != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if 0 != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    0 != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if ( != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>    ( != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>   if  != BZ_STREAM_END)
1093,1094c1093,1094
<      ;
<   if (0 != BZ_STREAM_END)
---
>      
>     != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    (0 != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    0 != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    ( != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>     != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    (0  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    0  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>    (  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>      BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if 0 != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if  != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if 0  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if   BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if 0 != )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if  != )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if 0  )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if   )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if ( != BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if ( != )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (  )
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if ( != BZ_STREAM_END
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (  BZ_STREAM_END
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if ( != 
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (  
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (0  BZ_STREAM_END)
1094c1094
<   if (0 != BZ_STREAM_END)
---
>   if (0  )
(92.8 %, 14838 bytes)
1094c1094
<   if (  BZ_STREAM_END)
---
>   if (  
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>      errhandler;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>      errhandler;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>     goto ;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>     goto ;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  )
>      ;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  
>      ;
1094c1094
<   if (  BZ_STREAM_END)
---
>   if (  BZ_STREAM_END
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      errhandler;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto ;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      ;
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto errhandler
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      errhandler
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>     goto 
1094,1095c1094,1095
<   if (  BZ_STREAM_END)
<     goto errhandler;
---
>   if (  BZ_STREAM_END
>      
1095c1095
<     goto errhandler;
---
>      errhandler;
1095c1095
<     goto errhandler;
---
>      ;
1095c1095
<     goto errhandler;
---
>      errhandler
1095c1095
<     goto errhandler;
---
>      
(92.8 %, 14824 bytes)
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>   destLen -= strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>   * -= strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>    -= strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>   *destLen  strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>   destLen  strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>   *  strm.avail_out;
1095c1095
<      ;
---
>      
1097c1097
<   *destLen -= strm.avail_out;
---
>     strm.avail_out;
(92.8 %, 14822 bytes)
1097c1097
<   destLen -= strm.avail_out;
---
>     strm.avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>    -= .avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>     .avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>    -= strmavail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>     strmavail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>    -= avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>     avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>   destLen  strm.avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>   destLen  .avail_out;
1097c1097
<   destLen -= strm.avail_out;
---
>   destLen  strmavail_out;
(92.8 %, 14813 bytes)
1097c1097
<     strm.avail_out;
---
>     avail_out;
1097c1097
<     strm.avail_out;
---
>     .;
1097c1097
<     strm.avail_out;
---
>     ;
1097c1097
<     strm.avail_out;
---
>     .avail_out
1097c1097
<     strm.avail_out;
---
>     avail_out
1097c1097
<     strm.avail_out;
---
>     .
1097c1097
<     strm.avail_out;
---
>     
(92.8 %, 14799 bytes)
1097,1098c1097,1098
<     ;
<   0;
---
>     
>   
1097c1097
<     ;
---
>     
1099c1099
<   return BZ_OK;
---
>    BZ_OK;
(92.8 %, 14796 bytes)
1099c1099
<   return BZ_OK;
---
>    
1099c1099
<   return BZ_OK;
---
>    BZ_OK;
1101c1101
< output_overflow_or_eof:
---
> :
1099c1099
<   return BZ_OK;
---
>    ;
1101c1101
< output_overflow_or_eof:
---
> :
1099c1099
<   return BZ_OK;
---
>    BZ_OK
1101c1101
< output_overflow_or_eof:
---
> :
1099c1099
<   return BZ_OK;
---
>    
1101c1101
< output_overflow_or_eof:
---
> :
1099c1099
<   return BZ_OK;
---
>   return ;
(92.8 %, 14784 bytes)
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> 
>    (strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> :
>   if strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> 
>   if strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> :
>    strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> 
>    strm.avail_out > 0) {
1101c1101
< output_overflow_or_eof:
---
> output_overflow_or_eof
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>    (strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>   if strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>    strm.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>   if (.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>    (.avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>   if .avail_out > 0) {
1101,1102c1101,1102
< output_overflow_or_eof:
<   if (strm.avail_out > 0) {
---
> output_overflow_or_eof
>    .avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    (strm.avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    strm.avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    (.avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    .avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    (strmavail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    strmavail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    (avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>    avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if strm.avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if .avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if strmavail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if strm. > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if . > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if strm > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if  > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (.avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (avail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (. > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if ( > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (.avail_out  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (avail_out  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (.  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strmavail_out > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strm > 0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strmavail_out  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strm  0) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strmavail_out > ) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strm > ) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strmavail_out  ) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strm  ) {
1102c1102
<   if (strm.avail_out > 0) {
---
>   if (strm. > 0) {
(92.8 %, 14769 bytes)
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (   
>     ;
1102c1102
<   if (  0) {
---
>   if (  0 {
1102c1102
<   if (  0) {
---
>   if (  0 
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 {
>     ;
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 
>     ;
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 {
>     0
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 
>     0
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 {
>     
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0 
>     
1102c1102
<   if (  0) {
---
>   if (  0) 
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0) 
>     ;
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0) 
>     0
1102,1103c1102,1103
<   if (  0) {
<     0;
---
>   if (  0) 
>     
1102c1102
<   if (  0) {
---
>   if (  0) 
1104c1104
<     return BZ_UNEXPECTED_EOF;
---
>      BZ_UNEXPECTED_EOF;
1102,1104c1102,1104
<   if (  0) {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   if (  0) 
>     ;
>      BZ_UNEXPECTED_EOF;
1102,1104c1102,1104
<   if (  0) {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   if (  0) 
>     0
>      BZ_UNEXPECTED_EOF;
1102,1104c1102,1104
<   if (  0) {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   if (  0) 
>     
>      BZ_UNEXPECTED_EOF;
1103c1103
<     0;
---
>     ;
1103c1103
<     0;
---
>     
(92.8 %, 14768 bytes)
1103c1103
<     ;
---
>     
1103,1104c1103,1104
<     ;
<     return BZ_UNEXPECTED_EOF;
---
>     
>      BZ_UNEXPECTED_EOF;
1103,1104c1103,1104
<     ;
<     return BZ_UNEXPECTED_EOF;
---
>     
>     return ;
(92.8 %, 14767 bytes)
1104c1104
<     return BZ_UNEXPECTED_EOF;
---
>      BZ_UNEXPECTED_EOF;
1104c1104
<     return BZ_UNEXPECTED_EOF;
---
>      ;
1104c1104
<     return BZ_UNEXPECTED_EOF;
---
>      BZ_UNEXPECTED_EOF
(92.8 %, 14761 bytes)
1104c1104
<      BZ_UNEXPECTED_EOF;
---
>      ;
1104c1104
<      BZ_UNEXPECTED_EOF;
---
>      
(92.8 %, 14744 bytes)
1104c1104
<      ;
---
>      
1104,1105c1104,1105
<      ;
<   } else
---
>      
>    else
1104,1105c1104,1105
<      ;
<   } else
---
>      
>   } 
(92.8 %, 14743 bytes)
1105c1105
<   } else
---
>    else
1105c1105
<   } else
---
>    
1105,1106c1105,1106
<   } else
<     ;
---
>    else
>     
1105,1106c1105,1106
<   } else
<     ;
---
>    
>     
1105c1105
<   } else
---
>    else
1108c1108
< errhandler:
---
> :
1105c1105
<   } else
---
>    
1108c1108
< errhandler:
---
> :
1105,1106c1105,1106
<   } else
<     ;
---
>    else
>     
1108c1108
< errhandler:
---
> :
1105,1106c1105,1106
<   } else
<     ;
---
>    
>     
1108c1108
< errhandler:
---
> :
1105c1105
<   } else
---
>   } 
1105,1106c1105,1106
<   } else
<     ;
---
>   } 
>     
(92.8 %, 14739 bytes)
1106c1106
<     ;
---
>     
1106c1106
<     ;
---
>     
1108c1108
< errhandler:
---
> :
1106c1106
<     ;
---
>     
1108c1108
< errhandler:
---
> errhandler
1106c1106,1107
<     ;
---
>     
> 
1108d1108
< errhandler:
(92.8 %, 14738 bytes)
1108c1108
< errhandler:
---
> :
1108c1108
< errhandler:
---
> 
1108,1109c1108,1109
< errhandler:
<   0;
---
> :
>   ;
1108,1109c1108,1109
< errhandler:
<   0;
---
> 
>   ;
(92.8 %, 14727 bytes)
1109c1109
<   0;
---
>   
1109,1110c1109,1110
<   0;
<   return 0;
---
>   ;
>    0;
(92.8 %, 14725 bytes)
1110c1110
<   return 0;
---
>    ;
1110c1110
<   return 0;
---
>    0
1110c1110
<   return 0;
---
>    
(92.8 %, 14718 bytes)
1110,1111c1110,1111
<    ;
< }
---
>    
> 
1110c1110
<    ;
---
>    
1113c1113
< const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1110,1111c1110
<    ;
< }
---
>    
1113c1112,1113
< const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1110c1110
<    ;
---
>    
1113c1113
< const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> const  *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
(92.8 %, 14712 bytes)
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>  char BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>  char *(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>   *(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>  char (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1111d1110
< }
1113c1112,1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
> 
>   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<  char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
(92.8 %, 14708 bytes)
1113c1113
<   *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<   *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<   *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion)(void) { return BZ_VERSION; }
(92.8 %, 14707 bytes)
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   ()(void) { return BZ_VERSION; }
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   )(void) { return BZ_VERSION; }
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   (BZ2_bzlibVersion(void) { return BZ_VERSION; }
1113c1113
<   BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(void) { return BZ_VERSION; }
(92.8 %, 14701 bytes)
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   )(void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   (void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion)void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   )void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersionvoid) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   ()(void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   ((void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   ()void) { return BZ_VERSION; }
1113c1113
<   (BZ2_bzlibVersion)(void) { return BZ_VERSION; }
---
>   (void) { return BZ_VERSION; }
(92.8 %, 14699 bytes)
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   () { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   ) { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   (void { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   void { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   ( { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>    { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersionvoid) { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion) { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersionvoid { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersionvoid)  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion)  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersionvoid  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion() { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion( { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ2_bzlibVersion() {  BZ_VERSION; }
(92.8 %, 14695 bytes)
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion( { return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion( {  BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(   BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion( { return ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(  return ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion( {  ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion(   ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()  return BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()   BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()  return ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()   ; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()  return BZ_VERSION }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()   BZ_VERSION }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()  return  }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion()    }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion() {  BZ_VERSION; }
1113c1113
<   BZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ2_bzlibVersion() {  ; }
(92.8 %, 14689 bytes)
1113c1113
<   BZ2_bzlibVersion() {  BZ_VERSION; }
---
>   BZ2_bzlibVersion() {  ; }
1113c1113
<   BZ2_bzlibVersion() {  BZ_VERSION; }
---
>   BZ2_bzlibVersion() {   }
(92.8 %, 14679 bytes)
1113c1113
<   BZ2_bzlibVersion() {  ; }
---
>   BZ2_bzlibVersion() {   }
1113c1113
<   BZ2_bzlibVersion() {  ; }
---
>   BZ2_bzlibVersion() {   
1113c1113
<   BZ2_bzlibVersion() {  ; }
---
>   BZ2_bzlibVersion() {   }
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>  BZFILE *bzopen_or_bzdopen(  
(92.8 %, 14678 bytes)
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>  BZFILE *bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
> static  *bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>   *bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
> static BZFILE bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>  BZFILE bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
> static  bzopen_or_bzdopen(  
1113c1113
<   BZ2_bzlibVersion() {   }
---
>   BZ2_bzlibVersion() {   
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>   bzopen_or_bzdopen(  
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>  BZFILE *bzopen_or_bzdopen(  
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>   *bzopen_or_bzdopen(  
1115c1115
< static BZFILE *bzopen_or_bzdopen(  
---
>  BZFILE bzopen_or_bzdopen(  
(92.8 %, 14672 bytes)
1115c1115
<  BZFILE *bzopen_or_bzdopen(  
---
>   *bzopen_or_bzdopen(  
1115c1115
<  BZFILE *bzopen_or_bzdopen(  
---
>   bzopen_or_bzdopen(  
1115c1115
<  BZFILE *bzopen_or_bzdopen(  
---
>   *(  
(92.8 %, 14666 bytes)
1115c1115
<   *bzopen_or_bzdopen(  
---
>   bzopen_or_bzdopen(  
1115c1115
<   *bzopen_or_bzdopen(  
---
>   (  
1115c1115
<   *bzopen_or_bzdopen(  
---
>   bzopen_or_bzdopen  
1115c1115
<   *bzopen_or_bzdopen(  
---
>     
1115,1116c1115,1116
<   *bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen(  
>                                  );
(92.8 %, 14665 bytes)
1115c1115
<   bzopen_or_bzdopen(  
---
>   (  
1115c1115
<   bzopen_or_bzdopen(  
---
>     
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   (  
>                                  );
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>     
>                                  );
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   (  
>                                  void;
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>     
>                                  void;
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   (  
>                                  ;
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>     
>                                  ;
1115c1115
<   bzopen_or_bzdopen(  
---
>   bzopen_or_bzdopen  
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  );
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  void;
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  ;
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  void)
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  )
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  void
1115,1116c1115,1116
<   bzopen_or_bzdopen(  
<                                  void);
---
>   bzopen_or_bzdopen  
>                                  
1116c1116
<                                  void);
---
>                                  );
(92.8 %, 14659 bytes)
1116c1116
<                                  ;
---
>                                  
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1116c1116
<                                  ;
---
>                                  
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
> BZFILE *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1116c1116
<                                  ;
---
>                                  
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1116c1116
<                                  ;
---
>                                  
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
> BZFILE (BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1116c1116
<                                  ;
---
>                                  
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  (BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
< BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
(92.8 %, 14653 bytes)
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  (BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_APIBZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_API()(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  ()(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  BZ_API)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  )(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *()(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *)(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(BZ2_bzopen(const char *path, const char *mode) { return 0; }
1118c1118
<  *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
(92.9 %, 14647 bytes)
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *)(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen)const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *)const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopenconst char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *()(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *((const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *()const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *(const char *path, const char *mode) { return 0; }
1118c1118
<  *(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
---
>  *()( char *path, const char *mode) { return 0; }
(92.9 %, 14645 bytes)
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *( char *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  * char *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *(const  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *const  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *(  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopenconst char *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen char *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopenconst  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopenconst char path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen char path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopenconst  path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen  path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen( char *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen( char path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(  path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen( char *, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(  *, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen( char , const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(  , const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  *path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  *, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  , const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  *path const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  path const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const  * const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const   const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char path, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char , const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char path const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char  const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char path,  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char ,  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char path  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char   char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *, const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char * const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *,  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *, const  *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char * const  *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *,   *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *   *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path const char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path const  *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path   *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path const char mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path  char mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path const  mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path   mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,  char *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,   *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,  char mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,   mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,  char *) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,   *) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,  char ) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path,   ) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  *mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  *) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  ) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  *mode { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  mode { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const  * { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const   { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char mode) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char ) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char mode { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char  { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char mode)  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char )  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char mode  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char   return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *) { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char * { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *)  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *) {  0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char * {  0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *)   0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *   0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode { return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode {  0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode   0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode { return ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode  return ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode {  ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode   ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)  return 0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)   0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)  return ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)   ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)  return 0 }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)   0 }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)  return  }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode)    }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {  0; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) { return 0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {  ; }
(92.9 %, 14639 bytes)
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {  0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {  ; }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {  0; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   }
(92.9 %, 14638 bytes)
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {  ; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   }
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {  ; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {  ; }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   }
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
(92.9 %, 14637 bytes)
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
> BZFILE BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
> BZFILE *(BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
> BZFILE (BZ2_bzdopen)(int fd, const char *mode) {
1118c1118
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path, const char *mode) {   
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  (BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
< BZFILE *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(BZ2_bzdopen)(int fd, const char *mode) {
(92.9 %, 14631 bytes)
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  (BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_APIBZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_API()(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  ()(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  BZ_API)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  )(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *()(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *)(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(BZ2_bzdopen(int fd, const char *mode) {
1120c1120
<  *BZ_API(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *mode) {
(92.9 %, 14625 bytes)
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopen)(int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *)(int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopen)int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *)int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *BZ2_bzdopenint fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *()(int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *((int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *()int fd, const char *mode) {
1120c1120
<  *(BZ2_bzdopen)(int fd, const char *mode) {
---
>  *(int fd, const char *mode) {
(92.9 %, 14623 bytes)
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *( fd, const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  * fd, const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *(int , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *int , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *( , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  * , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopenint fd, const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen fd, const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopenint , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopenint fd const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen fd const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopenint  const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen  const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( fd, const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( fd const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(  const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( fd,  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( ,  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( fd  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(   char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int , const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int  const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int ,  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int   char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int , const  *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int  const  *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int ,   *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int    *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd const char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd const  *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd   *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd const char mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd  char mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd const  mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd   mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,  char *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,   *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,  char mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,   mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,  char *) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,   *) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,  char ) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd,   ) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  *mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  *) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  ) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  *mode {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  mode {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const  * {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const   {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char mode) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char ) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char mode {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char  {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char mode) 
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char ) 
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char mode 
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char  
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *) {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char * {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *) 
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char * 
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *) {
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char * {
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *) 
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char * 
>    bzopen_or_bzdopen;
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *mode {
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *mode 
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode {
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode 
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode {
>   return ;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode 
>   return ;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode {
>    ;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode 
>    ;
1120c1120
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd, const char *mode) 
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>    bzopen_or_bzdopen;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>   return ;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>    ;
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>   return bzopen_or_bzdopen
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>    bzopen_or_bzdopen
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>   return 
1120,1121c1120,1121
<  *BZ2_bzdopen(int fd, const char *mode) {
<   return bzopen_or_bzdopen;
---
>  *BZ2_bzdopen(int fd, const char *mode) 
>    
1121c1121
<   return bzopen_or_bzdopen;
---
>    bzopen_or_bzdopen;
1121c1121
<   return bzopen_or_bzdopen;
---
>    ;
(92.9 %, 14617 bytes)
1121c1121
<    bzopen_or_bzdopen;
---
>    ;
1121c1121
<    bzopen_or_bzdopen;
---
>    
1121,1122c1121,1122
<    bzopen_or_bzdopen;
< }
---
>    ;
> 
(92.9 %, 14600 bytes)
1121c1121
<    ;
---
>    
1121,1122c1121,1122
<    ;
< }
---
>    
> 
1121c1121
<    ;
---
>    
1124c1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1121,1122c1121
<    ;
< }
---
>    
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1121c1121
<    ;
---
>    
1124c1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int (BZ2_bzread)(BZFILE *b, void *buf, int len) {
(92.9 %, 14599 bytes)
1122c1122
< }
---
> 
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
> int (BZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
>  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
> int BZ_APIBZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_APIBZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
> int BZ2_bzread)(BZFILE *b, void *buf, int len) {
1122d1121
< }
1124c1123,1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ2_bzread)(BZFILE *b, void *buf, int len) {
1124c1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1124c1124
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
(92.9 %, 14596 bytes)
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread)(BZFILE *b, void *buf, int len) {
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  ()(BZFILE *b, void *buf, int len) {
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  )(BZFILE *b, void *buf, int len) {
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzread(BZFILE *b, void *buf, int len) {
1124c1124
<  BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) {
(92.9 %, 14590 bytes)
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread)(BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  )(BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  (BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread)BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  )BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzreadBZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  ()(BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  ((BZFILE *b, void *buf, int len) {
1124c1124
<  (BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>  ()BZFILE *b, void *buf, int len) {
(92.9 %, 14588 bytes)
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  ( *b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>   *b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  (BZFILE b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZFILE b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  ( b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>   b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzreadBZFILE *b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread *b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzreadBZFILE b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzreadBZFILE *, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread *, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzreadBZFILE , void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread , void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( *b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( *, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( , void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( *b void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( b void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( * void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(  void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE b, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE , void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE b void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE  void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE b,  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE ,  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE b  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE   *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *, void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE * void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *,  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *, void buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE * void buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *,  buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *  buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b void *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b void buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b  buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b void *, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b  *, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b void , int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b  , int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  *buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  *, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  , int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  *buf int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  buf int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  * int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,   int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void buf, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void , int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void buf int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void  int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void buf,  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void ,  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void buf  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void   len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *, int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void * int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *,  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *, int ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void * int ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *,  ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *  ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf int len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf int ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf  ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf int len {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf  len {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf int  {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf   {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  len) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  len {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,   {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  len) 
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  ) 
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,  len 
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf,   
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int ) {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int  {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int ) 
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int  
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int ) {
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int  {
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int ) 
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int  
>    bzerr, nread;
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int len {
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int len 
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len {
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len 
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len {
>   int , nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len 
>   int , nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len {
>    , nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len 
>    , nread;
1124c1124
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>    bzerr, nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>   int , nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>    , nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>   int bzerr nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>    bzerr nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>   int  nread;
1124,1125c1124,1125
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
>  BZ2_bzread(BZFILE *b, void *buf, int len) 
>     nread;
1125c1125
<   int bzerr, nread;
---
>    bzerr, nread;
1125c1125
<   int bzerr, nread;
---
>    , nread;
1125c1125
<   int bzerr, nread;
---
>    bzerr nread;
1125c1125
<   int bzerr, nread;
---
>     nread;
1125c1125
<   int bzerr, nread;
---
>    bzerr, ;
1125c1125
<   int bzerr, nread;
---
>    , ;
1125c1125
<   int bzerr, nread;
---
>    bzerr ;
1125c1125
<   int bzerr, nread;
---
>     ;
1125c1125
<   int bzerr, nread;
---
>   int , nread;
1125c1125
<   int bzerr, nread;
---
>   int  nread;
1125c1125
<   int bzerr, nread;
---
>   int , ;
1125c1125
<   int bzerr, nread;
---
>   int  ;
1125c1125
<   int bzerr, nread;
---
>   int , nread
1125c1125
<   int bzerr, nread;
---
>   int  nread
1125c1125
<   int bzerr, nread;
---
>   int , 
1125c1125
<   int bzerr, nread;
---
>   int  
1125c1125
<   int bzerr, nread;
---
>   int bzerr nread;
1125c1125
<   int bzerr, nread;
---
>   int bzerr ;
1125c1125
<   int bzerr, nread;
---
>   int bzerr nread
1125c1125
<   int bzerr, nread;
---
>   int bzerr 
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr nread;
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr ;
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr nread
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr 
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125c1125
<   int bzerr, nread;
---
>   int bzerr, ;
1125c1125
<   int bzerr, nread;
---
>   int bzerr, 
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, ;
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, 
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, ;
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, 
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, ;
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, 
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125c1125
<   int bzerr, nread;
---
>   int bzerr, nread
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
1125,1126c1125,1126
<   int bzerr, nread;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr, nread
>    (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    (((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>    bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if  *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ( )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile *b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( *b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((bzFile b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (( b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( *)b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( *b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( *))->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( ))->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( *)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((( )->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile )b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile ))->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile )->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile )b->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile b->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile )->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile ->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *b)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *b->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *b)lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *blastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *))->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *))lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *))-> == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)-> == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)) == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *) == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b->lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)blastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b-> == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b->lastErr  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)blastErr  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b->  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)lastErr == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b) == BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)lastErr  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)  BZ_STREAM_END)
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)lastErr == )
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b) == )
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)lastErr  )
1126c1126
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)  )
(92.9 %, 14579 bytes)
1126c1126
<   if (((bzFile *)b) == BZ_STREAM_END)
---
>   if (((bzFile *)b)  )
1126c1126
<   if (((bzFile *)b) == BZ_STREAM_END)
---
>   if (((bzFile *)b)  BZ_STREAM_END
1126c1126
<   if (((bzFile *)b) == BZ_STREAM_END)
---
>   if (((bzFile *)b)  
1126,1127c1126,1127
<   if (((bzFile *)b) == BZ_STREAM_END)
<     return 0;
---
>   if (((bzFile *)b)  BZ_STREAM_END)
>      0;
1126,1127c1126,1127
<   if (((bzFile *)b) == BZ_STREAM_END)
<     return 0;
---
>   if (((bzFile *)b)  )
>      0;
(92.9 %, 14564 bytes)
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>      0;
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>     return ;
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>      ;
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>     return 0
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>      0
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>     return 
1126,1127c1126,1127
<   if (((bzFile *)b)  )
<     return 0;
---
>   if (((bzFile *)b)  
>      
1127c1127
<     return 0;
---
>      0;
1127c1127
<     return 0;
---
>      ;
(92.9 %, 14558 bytes)
1127c1127
<      0;
---
>      ;
1127c1127
<      0;
---
>      
1127,1128c1127,1128
<      0;
<   nread = 0;
---
>      ;
>    = 0;
(92.9 %, 14557 bytes)
1127c1127
<      ;
---
>      
1127,1128c1127,1128
<      ;
<   nread = 0;
---
>      
>    = 0;
1127,1128c1127,1128
<      ;
<   nread = 0;
---
>      
>   nread  0;
1127,1128c1127,1128
<      ;
<   nread = 0;
---
>      
>     0;
(92.9 %, 14556 bytes)
1128c1128
<   nread = 0;
---
>    = 0;
1128c1128
<   nread = 0;
---
>     0;
1128c1128
<   nread = 0;
---
>    = ;
1128c1128
<   nread = 0;
---
>     ;
(92.9 %, 14550 bytes)
1128c1128
<     0;
---
>     
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     ;
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     ;
>   if bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     
>   if bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     ;
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1128c1128
<     0;
---
>     0
1128,1129c1128,1129
<     0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     0
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
(92.9 %, 14548 bytes)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (bzerr  BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr  BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (  BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>      BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if bzerr == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if  == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if bzerr  BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if   BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if bzerr ==  || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if  ==  || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if bzerr   || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if    || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if ( == BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (  BZ_OK || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if ( ==  || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (   || bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if ( == BZ_OK  bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (  BZ_OK  bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if ( ==   bzerr == BZ_STREAM_END)
1129c1129
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (    bzerr == BZ_STREAM_END)
(92.9 %, 14541 bytes)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (    bzerr == BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (   ||  == BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (     == BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (   || bzerr  BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (    bzerr  BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (   ||   BZ_STREAM_END)
1129c1129
<   if (  BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (      BZ_STREAM_END)
(92.9 %, 14534 bytes)
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (      BZ_STREAM_END)
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (     == )
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (      )
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (     == BZ_STREAM_END
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (      BZ_STREAM_END
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (     == 
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (      
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (    bzerr  BZ_STREAM_END)
1129c1129
<   if (    bzerr == BZ_STREAM_END)
---
>   if (    bzerr  )
(92.9 %, 14527 bytes)
1129c1129
<   if (      BZ_STREAM_END)
---
>   if (      
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      )
>      0;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      
>      0;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      )
>     return ;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      
>     return ;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      )
>      ;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      
>      ;
1129c1129
<   if (      BZ_STREAM_END)
---
>   if (      BZ_STREAM_END
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>      0;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>     return ;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>      ;
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>     return 0
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>      0
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>     return 
1129,1130c1129,1130
<   if (      BZ_STREAM_END)
<     return 0;
---
>   if (      BZ_STREAM_END
>      
1130c1130
<     return 0;
---
>      0;
1130c1130
<     return 0;
---
>      ;
1130c1130
<     return 0;
---
>      0
1130c1130
<     return 0;
---
>      
(92.9 %, 14521 bytes)
1130c1130
<      0;
---
>      ;
1130c1130
<      0;
---
>      
1130,1131c1130,1131
<      0;
<   else
---
>      ;
>   
(92.9 %, 14520 bytes)
1130c1130
<      ;
---
>      
1130,1131c1130,1131
<      ;
<   else
---
>      
>   
1130c1130
<      ;
---
>      
1132c1132
<     return -1;
---
>      -1;
1130,1132c1130,1132
<      ;
<   else
<     return -1;
---
>      
>   
>      -1;
(92.9 %, 14515 bytes)
1132c1132
<     return -1;
---
>      1;
1132c1132
<     return -1;
---
>      -;
1132c1132
<     return -1;
---
>      ;
1132c1132
<     return -1;
---
>      -1
1132c1132
<     return -1;
---
>      1
1132c1132
<     return -1;
---
>      -
(92.9 %, 14508 bytes)
1132c1132
<      1;
---
>      
1132,1133c1132,1133
<      1;
< }
---
>      ;
> 
1132,1133c1132,1133
<      1;
< }
---
>      
> 
1132c1132
<      1;
---
>      ;
1135c1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132c1132
<      1;
---
>      
1135c1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132,1133c1132
<      1;
< }
---
>      ;
1135c1134,1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132,1133c1132
<      1;
< }
---
>      
1135c1134,1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132c1132
<      1;
---
>      1
1132,1133c1132,1133
<      1;
< }
---
>      1
> 
1132c1132
<      1;
---
>      1
1135c1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132,1133c1132
<      1;
< }
---
>      1
1135c1134,1135
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
(92.9 %, 14504 bytes)
1132c1132
<      ;
---
>      
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132,1133c1132
<      ;
< }
---
>      
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_APIBZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132c1132
<      ;
---
>      
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1132,1133c1132
<      ;
< }
---
>      
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1133c1133
< }
---
> 
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_APIBZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API()(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  ()(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  BZ_API)(BZFILE *b, void *buf, int len) {
1133d1132
< }
1135c1134,1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
> 
>  )(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  ()(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  )(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  (BZ2_bzwrite(BZFILE *b, void *buf, int len) {
1135c1135
<  BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
(92.9 %, 14498 bytes)
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  )(BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  (BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite)BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  )BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwriteBZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  ()(BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  ((BZFILE *b, void *buf, int len) {
1135c1135
<  (BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
---
>  ()BZFILE *b, void *buf, int len) {
(92.9 %, 14496 bytes)
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  ( *b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>   *b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  (BZFILE b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZFILE b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  ( b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>   b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwriteBZFILE *b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite *b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwriteBZFILE b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwriteBZFILE *, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite *, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwriteBZFILE , void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite , void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( *b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( *, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( , void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( *b void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( b void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( * void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(  void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE b, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE , void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE b void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE  void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE b,  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE ,  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE b  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE   *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *, void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE * void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *,  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *, void buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE * void buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *,  buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *  buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b void *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b void buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b  buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b void *, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b  *, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b void , int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b  , int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  *buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  *, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  , int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  *buf int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  buf int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  * int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,   int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void buf, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void , int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void buf int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void  int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void buf,  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void ,  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void buf  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void   len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *, int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void * int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *,  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *, int ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void * int ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *,  ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *  ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf int len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf int ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf  ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf int len {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf  len {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf int  {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf   {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  len) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  len {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,   {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  len) 
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  ) 
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,  len 
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf,   
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int ) {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int  {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int ) 
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int  
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int ) {
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int  {
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int ) 
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int  
>    bzerr;
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len {
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len 
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len {
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len 
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len {
>   int ;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len 
>   int ;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len {
>    ;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len 
>    ;
1135c1135
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>    bzerr;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>   int ;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>    ;
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>   int bzerr
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>    bzerr
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>   int 
1135,1136c1135,1136
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
>  BZ2_bzwrite(BZFILE *b, void *buf, int len) 
>    
1136c1136
<   int bzerr;
---
>    bzerr;
1136c1136
<   int bzerr;
---
>    ;
1136c1136
<   int bzerr;
---
>    bzerr
1136c1136
<   int bzerr;
---
>    
1136c1136
<   int bzerr;
---
>    bzerr;
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>    ;
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>    bzerr
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>    
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>   int ;
1136c1136
<   int bzerr;
---
>   int 
1136c1136
<   int bzerr;
---
>   int ;
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>   int 
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>   int ;
1139c1139
<   if (bzerr == BZ_OK)
---
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int 
1139c1139
<   if (bzerr == BZ_OK)
---
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int ;
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int 
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1136c1136
<   int bzerr;
---
>   int bzerr
1138c1138
<   ;
---
>   
1136c1136
<   int bzerr;
---
>   int bzerr
1139c1139
<   if (bzerr == BZ_OK)
---
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    (bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1139c1139
<   if (bzerr == BZ_OK)
---
>   if bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>   if bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1139c1139
<   if (bzerr == BZ_OK)
---
>    bzerr == BZ_OK)
1136c1136
<   int bzerr;
---
>   int bzerr
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    bzerr == BZ_OK)
1138c1138
<   ;
---
>   
(92.9 %, 14495 bytes)
1138c1138
<   ;
---
>   
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    (bzerr == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>   if bzerr == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    bzerr == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>   if ( == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>    ( == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>   if  == BZ_OK)
1138,1139c1138,1139
<   ;
<   if (bzerr == BZ_OK)
---
>   
>     == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    (bzerr == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    bzerr == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    ( == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>     == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    (bzerr  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    bzerr  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>    (  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>      BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if bzerr == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if  == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if bzerr  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if   BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if bzerr == )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if  == )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if bzerr  )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if   )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if ( == BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if ( == )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (  )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if ( == BZ_OK
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (  BZ_OK
1139c1139
<   if (bzerr == BZ_OK)
---
>   if ( == 
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (  
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr  BZ_OK)
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr  )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr  BZ_OK
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr  
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr  BZ_OK)
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr  )
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr  BZ_OK
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr  
>      len;
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr == )
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr == 
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == )
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == 
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == )
>     return ;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == 
>     return ;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == )
>      ;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == 
>      ;
1139c1139
<   if (bzerr == BZ_OK)
---
>   if (bzerr == BZ_OK
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>      len;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>     return ;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>      ;
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>     return len
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>      len
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>     return 
1139,1140c1139,1140
<   if (bzerr == BZ_OK)
<     return len;
---
>   if (bzerr == BZ_OK
>      
1140c1140
<     return len;
---
>      len;
1140c1140
<     return len;
---
>      ;
(92.9 %, 14489 bytes)
1140c1140
<      len;
---
>      ;
1140c1140
<      len;
---
>      
1140,1141c1140,1141
<      len;
<   else
---
>      ;
>   
(92.9 %, 14486 bytes)
1140c1140
<      ;
---
>      
1140,1141c1140,1141
<      ;
<   else
---
>      
>   
1140c1140
<      ;
---
>      
1142c1142
<     return -1;
---
>      -1;
1140,1142c1140,1142
<      ;
<   else
<     return -1;
---
>      
>   
>      -1;
(92.9 %, 14481 bytes)
1142c1142
<     return -1;
---
>      1;
1142c1142
<     return -1;
---
>      -;
1142c1142
<     return -1;
---
>      ;
(92.9 %, 14474 bytes)
1142c1142
<      1;
---
>      
1142,1143c1142,1143
<      1;
< }
---
>      ;
> 
1142,1143c1142,1143
<      1;
< }
---
>      
> 
1142c1142
<      1;
---
>      ;
1145c1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1142c1142
<      1;
---
>      
1145c1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1142,1143c1142
<      1;
< }
---
>      ;
1145c1144,1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1142,1143c1142
<      1;
< }
---
>      
1145c1144,1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1142c1142
<      1;
---
>      1
1142,1143c1142,1143
<      1;
< }
---
>      1
> 
1142c1142
<      1;
---
>      1
1145c1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1142,1143c1142
<      1;
< }
---
>      1
1145c1144,1145
< int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
(92.9 %, 14470 bytes)
1142c1142
<      ;
---
>      
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ_APIBZ2_bzflush)(BZFILE *b) { return 0; }
1142,1143c1142
<      ;
< }
---
>      
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush)(BZFILE *b) { return 0; }
1142c1142
<      ;
---
>      
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush)(BZFILE *b) { return 0; }
1142,1143c1142
<      ;
< }
---
>      
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ2_bzflush)(BZFILE *b) { return 0; }
1143c1143
< }
---
> 
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  (BZ2_bzflush)(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush)(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ2_bzflush)(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_API()(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  ()(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  BZ_API)(BZFILE *b) { return 0; }
1143d1142
< }
1145c1144,1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
> 
>  )(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  (BZ2_bzflush)(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush)(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  ()(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  )(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  (BZ2_bzflush(BZFILE *b) { return 0; }
1145c1145
<  BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush(BZFILE *b) { return 0; }
(92.9 %, 14464 bytes)
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush)(BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  )(BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush(BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  (BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflush)BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  )BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZ2_bzflushBZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  ()(BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  ((BZFILE *b) { return 0; }
1145c1145
<  (BZ2_bzflush)(BZFILE *b) { return 0; }
---
>  ()BZFILE *b) { return 0; }
(92.9 %, 14462 bytes)
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  ( *b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>   *b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  (BZFILE b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZFILE b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  ( b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>   b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflushBZFILE *b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush *b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflushBZFILE b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflushBZFILE *) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush *) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflushBZFILE ) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush ) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush( *b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush( b) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush( *) { return 0; }
1145c1145
<  BZ2_bzflush(BZFILE *b) { return 0; }
---
>  BZ2_bzflush( ) { return 0; }
(92.9 %, 14455 bytes)
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush(  { return 0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( )  return 0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush(   return 0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( ) {  0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush(  {  0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( )   0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush(    0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( b { return 0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( b  return 0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( b {  0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( b   0; }
1145c1145
<  BZ2_bzflush( b) { return 0; }
---
>  BZ2_bzflush( b { return ; }
(92.9 %, 14448 bytes)
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush(  {  0 }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush(    0 }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush(  {   }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush(     }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   0; }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   ; }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   0 }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )    }
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   0; 
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   ; 
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )   0 
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( )    
1145c1145
<  BZ2_bzflush( ) {  0; }
---
>  BZ2_bzflush( ) {  ; }
(93.0 %, 14445 bytes)
1145c1145
<  BZ2_bzflush( )   ; 
---
>  BZ2_bzflush( )    
1147c1147
< void BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  BZ_APIBZ2_bzclose)(BZFILE *b) {
1145c1145
<  BZ2_bzflush( )   ; 
---
>  BZ2_bzflush( )    
1147c1147
< void BZ_API(BZ2_bzclose)(BZFILE *b) {
---
> void BZ2_bzclose)(BZFILE *b) {
1145c1145
<  BZ2_bzflush( )   ; 
---
>  BZ2_bzflush( )    
1147c1147
< void BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose)(BZFILE *b) {
1147c1147
< void BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  BZ_API(BZ2_bzclose)(BZFILE *b) {
1147c1147
< void BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  (BZ2_bzclose)(BZFILE *b) {
(93.0 %, 14441 bytes)
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  (BZ2_bzclose)(BZFILE *b) {
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose)(BZFILE *b) {
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  ()(BZFILE *b) {
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  )(BZFILE *b) {
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  (BZ2_bzclose(BZFILE *b) {
1147c1147
<  BZ_API(BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose(BZFILE *b) {
(93.0 %, 14435 bytes)
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose)(BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  )(BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose(BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  (BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzclose)BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  )BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  BZ2_bzcloseBZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  ()(BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  ((BZFILE *b) {
1147c1147
<  (BZ2_bzclose)(BZFILE *b) {
---
>  ()BZFILE *b) {
(93.0 %, 14433 bytes)
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  ( *b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>   *b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  (BZFILE b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZFILE b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  ( b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>   b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzcloseBZFILE *b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose *b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzcloseBZFILE b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzcloseBZFILE *) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose *) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzcloseBZFILE ) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose ) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( *b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( b) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( *) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( ) {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( *b {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( b {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose( * {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose(  {
1147c1147
<  BZ2_bzclose(BZFILE *b) {
---
>  BZ2_bzclose(BZFILE b) {
(93.0 %, 14426 bytes)
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose(  {
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( ) 
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose(  
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( ) {
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose(  {
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( ) 
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose(  
>    bzerr;
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( b {
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( b 
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b {
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b 
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b {
>   int ;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b 
>   int ;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b {
>    ;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b 
>    ;
1147c1147
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( b) 
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>    bzerr;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>   int ;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>    ;
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>   int bzerr
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>    bzerr
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>   int 
1147,1148c1147,1148
<  BZ2_bzclose( b) {
<   int bzerr;
---
>  BZ2_bzclose( b) 
>    
1148c1148
<   int bzerr;
---
>    bzerr;
1148c1148
<   int bzerr;
---
>    ;
1148c1148
<   int bzerr;
---
>    bzerr
1148c1148
<   int bzerr;
---
>    
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    bzerr;
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    ;
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    bzerr
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    
>    *fp = ((bzFile *)b)->handle;
1148c1148
<   int bzerr;
---
>   int ;
1148c1148
<   int bzerr;
---
>   int 
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>   FILE fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>   FILE fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>    fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>    fp = ((bzFile *)b)->handle;
1148c1148
<   int bzerr;
---
>   int bzerr
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    *fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    fp = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE * = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    * = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE  = ((bzFile *)b)->handle;
1148,1149c1148,1149
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>     = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *fp = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    fp = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    * = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>     = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *fp  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    fp  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>      ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE  = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE   ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE  = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp  (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE   (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ((bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp   *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp =  *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = bzFile )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp =  )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *)b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *))->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( ))->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( )->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile ))->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )b->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile b->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile ->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b)handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *bhandle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))->;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *));
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *);
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)bhandle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->handle
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)bhandle
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b);
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle;
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b);
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)->;
1149c1149
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)->
(93.0 %, 14418 bytes)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>   if b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>    b == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>   if ( == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>    ( == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>   if  == NULL)
1149c1149
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1151c1151
<   if (b == NULL)
---
>     == NULL)
1151c1151
<   if (b == NULL)
---
>    (b == NULL)
1151c1151
<   if (b == NULL)
---
>    b == NULL)
1151c1151
<   if (b == NULL)
---
>    ( == NULL)
1151c1151
<   if (b == NULL)
---
>     == NULL)
1151c1151
<   if (b == NULL)
---
>    (b  NULL)
1151c1151
<   if (b == NULL)
---
>    b  NULL)
1151c1151
<   if (b == NULL)
---
>    (  NULL)
1151c1151
<   if (b == NULL)
---
>      NULL)
1151c1151
<   if (b == NULL)
---
>   if b == NULL)
1151c1151
<   if (b == NULL)
---
>   if  == NULL)
1151c1151
<   if (b == NULL)
---
>   if b  NULL)
1151c1151
<   if (b == NULL)
---
>   if   NULL)
1151c1151
<   if (b == NULL)
---
>   if b == )
1151c1151
<   if (b == NULL)
---
>   if  == )
1151c1151
<   if (b == NULL)
---
>   if b  )
1151c1151
<   if (b == NULL)
---
>   if   )
1151c1151
<   if (b == NULL)
---
>   if ( == NULL)
1151c1151
<   if (b == NULL)
---
>   if (  NULL)
1151c1151
<   if (b == NULL)
---
>   if ( == )
1151c1151
<   if (b == NULL)
---
>   if (  )
1151c1151
<   if (b == NULL)
---
>   if ( == NULL
1151c1151
<   if (b == NULL)
---
>   if (  NULL
1151c1151
<   if (b == NULL)
---
>   if ( == 
1151c1151
<   if (b == NULL)
---
>   if (  
1151c1151
<   if (b == NULL)
---
>   if (b  NULL)
(93.0 %, 14415 bytes)
1151c1151
<   if (  NULL)
---
>   if (  
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  )
>      (((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  
>      (((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  )
>     if ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  
>     if ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  )
>      ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  
>      ((bzFile *)b)->writing)
1151c1151
<   if (  NULL)
---
>   if (  NULL
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>      (((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>     if ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>      ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>     if ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>      ((bzFile *)b)->writing)
1151,1152c1151,1152
<   if (  NULL)
<     if (((bzFile *)b)->writing)
---
>   if (  NULL
>     if (bzFile *)b)->writing)
(93.0 %, 14407 bytes)
1152c1152
<      ((bzFile *)b)->writing)
---
>       )b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (bzFile *)b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ( *)b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (bzFile )b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ( )b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (bzFile *b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ( *b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (bzFile b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ( b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( *)b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( )b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( *b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( *))->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( ))->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( *)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      (( )->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile )b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile ))->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile )->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile )b->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile b->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile )->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile ->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *b)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *b->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *b)writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *bwriting)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *))->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *))writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *))->)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)->)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)))
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *))
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b->writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)bwriting)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b->)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b->writing
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)bwriting
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b->
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b)writing)
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b))
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b)writing
1152c1152
<      ((bzFile *)b)->writing)
---
>      ((bzFile *)b)
1152,1153c1152,1153
<      ((bzFile *)b)->writing)
<       BZ2_bzWriteClose;
---
>      ((bzFile *)b)writing)
>       ;
1152,1153c1152,1153
<      ((bzFile *)b)->writing)
<       BZ2_bzWriteClose;
---
>      ((bzFile *)b))
>       ;
(93.0 %, 14398 bytes)
1152,1153c1152,1153
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
---
>      ((bzFile *)b)
>       ;
1152,1153c1152,1153
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
---
>      ((bzFile *)b)
>       BZ2_bzWriteClose
1152,1153c1152,1153
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
---
>      ((bzFile *)b)
>       
1152c1152
<      ((bzFile *)b))
---
>      ((bzFile *)b)
1154c1154
<   if (bzerr != BZ_OK)
---
>    (bzerr != BZ_OK)
1152,1154c1152,1154
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
<   if (bzerr != BZ_OK)
---
>      ((bzFile *)b)
>       ;
>    (bzerr != BZ_OK)
1152,1154c1152,1154
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
<   if (bzerr != BZ_OK)
---
>      ((bzFile *)b)
>       BZ2_bzWriteClose
>    (bzerr != BZ_OK)
1152,1154c1152,1154
<      ((bzFile *)b))
<       BZ2_bzWriteClose;
<   if (bzerr != BZ_OK)
---
>      ((bzFile *)b)
>       
>    (bzerr != BZ_OK)
1153c1153
<       BZ2_bzWriteClose;
---
>       ;
1153c1153
<       BZ2_bzWriteClose;
---
>       
(93.0 %, 14382 bytes)
1153c1153
<       ;
---
>       
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>    (bzerr != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>   if bzerr != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>    bzerr != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>   if ( != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>    ( != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>   if  != BZ_OK)
1153,1154c1153,1154
<       ;
<   if (bzerr != BZ_OK)
---
>       
>     != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    (bzerr != BZ_OK)
(93.0 %, 14381 bytes)
1154c1154
<   if (bzerr != BZ_OK)
---
>    (bzerr != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    bzerr != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    ( != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>     != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    (bzerr  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    bzerr  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>    (  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>      BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if bzerr != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if  != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if bzerr  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if   BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if bzerr != )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if  != )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if bzerr  )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if   )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if ( != BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if ( != )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (  )
1154c1154
<   if (bzerr != BZ_OK)
---
>   if ( != BZ_OK
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (  BZ_OK
1154c1154
<   if (bzerr != BZ_OK)
---
>   if ( != 
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (  
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (bzerr  BZ_OK)
1154c1154
<   if (bzerr != BZ_OK)
---
>   if (bzerr  )
(93.0 %, 14374 bytes)
1154c1154
<   if (  BZ_OK)
---
>   if (  
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  )
>     ;
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  
>     ;
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  )
>     BZ2_bzWriteClose
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  
>     BZ2_bzWriteClose
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  )
>     
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  
>     
1154c1154
<   if (  BZ_OK)
---
>   if (  BZ_OK
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     ;
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     BZ2_bzWriteClose
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     
1154c1154
<   if (  BZ_OK)
---
>   if (  BZ_OK
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     ;
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     BZ2_bzWriteClose
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
1154,1155c1154,1155
<   if (  BZ_OK)
<     BZ2_bzWriteClose;
---
>   if (  BZ_OK
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
1155c1155
<     BZ2_bzWriteClose;
---
>     ;
1155c1155
<     BZ2_bzWriteClose;
---
>     
1155c1155
<     BZ2_bzWriteClose;
---
>     ;
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
(93.0 %, 14358 bytes)
1155c1155
<     ;
---
>     
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>   else  (fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>     (fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>   else if fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>   else  fp != stdin && fp != stdout)
1155c1155
<     ;
---
>     
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>     fp != stdin && fp != stdout)
1157c1157
<   else if (fp != stdin && fp != stdout)
---
>    if (fp != stdin && fp != stdout)
(93.0 %, 14353 bytes)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>     fp != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>     ( != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>      != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>     (fp  stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>     fp  stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>     (  stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>       stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if fp != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if  != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if fp  stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if   stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if fp !=  && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if  !=  && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if fp   && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if    && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if ( != stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if (  stdin && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if ( !=  && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if (   && fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if ( != stdin  fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if (  stdin  fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if ( !=   fp != stdout)
1157c1157
<    if (fp != stdin && fp != stdout)
---
>    if (    fp != stdout)
(93.0 %, 14349 bytes)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (    fp != stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (   &&  != stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (     != stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (   && fp  stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (    fp  stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (   &&   stdout)
1157c1157
<    if (  stdin && fp != stdout)
---
>    if (      stdout)
(93.0 %, 14342 bytes)
1157c1157
<    if (    fp != stdout)
---
>    if (      stdout)
1157c1157
<    if (    fp != stdout)
---
>    if (     != )
1157c1157
<    if (    fp != stdout)
---
>    if (      )
1157c1157
<    if (    fp != stdout)
---
>    if (     != stdout
1157c1157
<    if (    fp != stdout)
---
>    if (      stdout
1157c1157
<    if (    fp != stdout)
---
>    if (     != 
1157c1157
<    if (    fp != stdout)
---
>    if (      
1157c1157
<    if (    fp != stdout)
---
>    if (    fp  stdout)
1157c1157
<    if (    fp != stdout)
---
>    if (    fp  )
(93.0 %, 14338 bytes)
1157c1157
<    if (      stdout)
---
>    if (      
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      )
>     ;
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      
>     ;
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      )
>     fclose
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      
>     fclose
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      )
>     
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      
>     
1157c1157
<    if (      stdout)
---
>    if (      stdout
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      stdout
>     ;
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      stdout
>     fclose
1157,1158c1157,1158
<    if (      stdout)
<     fclose;
---
>    if (      stdout
>     
1157c1157
<    if (      stdout)
---
>    if (      stdout
1159c1159
< }
---
> 
1157,1159c1157,1159
<    if (      stdout)
<     fclose;
< }
---
>    if (      stdout
>     ;
> 
1157,1159c1157,1159
<    if (      stdout)
<     fclose;
< }
---
>    if (      stdout
>     fclose
> 
1157,1159c1157,1159
<    if (      stdout)
<     fclose;
< }
---
>    if (      stdout
>     
> 
1158c1158
<     fclose;
---
>     ;
1158c1158
<     fclose;
---
>     
1158,1159c1158,1159
<     fclose;
< }
---
>     ;
> 
1158,1159c1158,1159
<     fclose;
< }
---
>     
> 
1158c1158
<     fclose;
---
>     ;
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
(93.0 %, 14332 bytes)
1158c1158
<     ;
---
>     
1158,1159c1158,1159
<     ;
< }
---
>     
> 
1158c1158
<     ;
---
>     
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1158,1159c1158
<     ;
< }
---
>     
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1158c1158
<     ;
---
>     
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> static  *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1158,1159c1158
<     ;
< }
---
>     
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
> static  *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1158c1158
<     ;
---
>     
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1158,1159c1158
<     ;
< }
---
>     
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159c1159
< }
---
> 
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
> static  *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
> static char bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>  char bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
> static  bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1159d1158
< }
1161c1160,1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
> 
>   bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
< static char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
(93.0 %, 14326 bytes)
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   [] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<  char *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   ] = {"OK",           "SEQUENCE_ERROR",
(93.0 %, 14322 bytes)
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   [] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   ] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings[ = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   [ = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>    = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *[] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *[ = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   * = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *[]  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *]  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *[  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings] = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings]  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  {"OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings] = "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings]  "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings[] = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings[ = {"OK",           "SEQUENCE_ERROR",
(93.0 %, 14320 bytes)
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  {,           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  ,           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  {"OK"           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  "OK"           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings  {           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings             "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = "OK",           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = ,           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = "OK"           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings =            "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = "OK",           ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = ,           ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = "OK"           ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings =            ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {,           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {           "SEQUENCE_ERROR",
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {,           ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {           ,
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {,           "SEQUENCE_ERROR"
1161c1161
<   *bzerrorstrings = {"OK",           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {           "SEQUENCE_ERROR"
(93.0 %, 14315 bytes)
1161c1161
<   *bzerrorstrings = {           "SEQUENCE_ERROR",
---
>   *bzerrorstrings = {           
1161,1162c1161,1162
<   *bzerrorstrings = {           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>   *bzerrorstrings = {           ,
>                                  ,  "MEM_ERROR",
1161,1162c1161,1162
<   *bzerrorstrings = {           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>   *bzerrorstrings = {           
>                                  ,  "MEM_ERROR",
1161,1162c1161,1162
<   *bzerrorstrings = {           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>   *bzerrorstrings = {           ,
>                                  "PARAM_ERROR"  "MEM_ERROR",
1161,1162c1161,1162
<   *bzerrorstrings = {           "SEQUENCE_ERROR",
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>   *bzerrorstrings = {           
>                                  "PARAM_ERROR"  "MEM_ERROR",
(93.0 %, 14298 bytes)
1162c1162
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>                                    "MEM_ERROR",
1162c1162
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>                                  ,  ,
1162c1162
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>                                    ,
1162c1162
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>                                  ,  "MEM_ERROR"
1162c1162
<                                  "PARAM_ERROR",  "MEM_ERROR",
---
>                                    "MEM_ERROR"
(93.0 %, 14284 bytes)
1162c1162
<                                    "MEM_ERROR",
---
>                                    
1162,1163c1162,1163
<                                    "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                    ,
>                                  ,   "DATA_ERROR_MAGIC",
1162,1163c1162,1163
<                                    "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                    
>                                  ,   "DATA_ERROR_MAGIC",
1162,1163c1162,1163
<                                    "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                    ,
>                                  "DATA_ERROR"   "DATA_ERROR_MAGIC",
1162,1163c1162,1163
<                                    "MEM_ERROR",
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                    
>                                  "DATA_ERROR"   "DATA_ERROR_MAGIC",
(93.0 %, 14272 bytes)
1163c1163
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                     "DATA_ERROR_MAGIC",
1163c1163
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                  ,   ,
1163c1163
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                     ,
1163c1163
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                  ,   "DATA_ERROR_MAGIC"
1163c1163
<                                  "DATA_ERROR",   "DATA_ERROR_MAGIC",
---
>                                     "DATA_ERROR_MAGIC"
(93.0 %, 14259 bytes)
1163c1163
<                                     "DATA_ERROR_MAGIC",
---
>                                     
1163,1164c1163,1164
<                                     "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                     ,
>                                  ,     "UNEXPECTED_EOF",
1163,1164c1163,1164
<                                     "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                     
>                                  ,     "UNEXPECTED_EOF",
1163,1164c1163,1164
<                                     "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                     ,
>                                  "IO_ERROR"     "UNEXPECTED_EOF",
1163,1164c1163,1164
<                                     "DATA_ERROR_MAGIC",
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                     
>                                  "IO_ERROR"     "UNEXPECTED_EOF",
(93.1 %, 14240 bytes)
1164c1164
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                       "UNEXPECTED_EOF",
1164c1164
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                  ,     ,
1164c1164
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                       ,
1164c1164
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                  ,     "UNEXPECTED_EOF"
1164c1164
<                                  "IO_ERROR",     "UNEXPECTED_EOF",
---
>                                       "UNEXPECTED_EOF"
(93.1 %, 14229 bytes)
1164c1164
<                                       "UNEXPECTED_EOF",
---
>                                       
1164,1165c1164,1165
<                                       "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                       ,
>                                  , "CONFIG_ERROR",
1164,1165c1164,1165
<                                       "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                       
>                                  , "CONFIG_ERROR",
1164,1165c1164,1165
<                                       "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                       ,
>                                  "OUTBUFF_FULL" "CONFIG_ERROR",
1164,1165c1164,1165
<                                       "UNEXPECTED_EOF",
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                       
>                                  "OUTBUFF_FULL" "CONFIG_ERROR",
(93.1 %, 14212 bytes)
1165c1165
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                   "CONFIG_ERROR",
1165c1165
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                  , ,
1165c1165
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                   ,
1165c1165
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                  , "CONFIG_ERROR"
1165c1165
<                                  "OUTBUFF_FULL", "CONFIG_ERROR",
---
>                                   "CONFIG_ERROR"
(93.1 %, 14197 bytes)
1165c1165
<                                   "CONFIG_ERROR",
---
>                                   
1165,1166c1165,1166
<                                   "CONFIG_ERROR",
<                                  "???",          "???",
---
>                                   ,
>                                  ,          "???",
1165,1166c1165,1166
<                                   "CONFIG_ERROR",
<                                  "???",          "???",
---
>                                   
>                                  ,          "???",
1165,1166c1165,1166
<                                   "CONFIG_ERROR",
<                                  "???",          "???",
---
>                                   ,
>                                  "???"          "???",
1165,1166c1165,1166
<                                   "CONFIG_ERROR",
<                                  "???",          "???",
---
>                                   
>                                  "???"          "???",
(93.1 %, 14182 bytes)
1166c1166
<                                  "???",          "???",
---
>                                            "???",
1166c1166
<                                  "???",          "???",
---
>                                  ,          ,
1166c1166
<                                  "???",          "???",
---
>                                            ,
1166c1166
<                                  "???",          "???",
---
>                                  ,          "???"
1166c1166
<                                  "???",          "???",
---
>                                            "???"
(93.1 %, 14176 bytes)
1166c1166
<                                            "???",
---
>                                            
1166,1167c1166,1167
<                                            "???",
<                                  "???",          "???",
---
>                                            ,
>                                  ,          "???",
1166,1167c1166,1167
<                                            "???",
<                                  "???",          "???",
---
>                                            
>                                  ,          "???",
1166,1167c1166,1167
<                                            "???",
<                                  "???",          "???",
---
>                                            ,
>                                  "???"          "???",
1166,1167c1166,1167
<                                            "???",
<                                  "???",          "???",
---
>                                            
>                                  "???"          "???",
(93.1 %, 14170 bytes)
1167c1167
<                                  "???",          "???",
---
>                                            "???",
1167c1167
<                                  "???",          "???",
---
>                                  ,          ,
1167c1167
<                                  "???",          "???",
---
>                                            ,
1167c1167
<                                  "???",          "???",
---
>                                  ,          "???"
1167c1167
<                                  "???",          "???",
---
>                                            "???"
(93.1 %, 14164 bytes)
1167c1167
<                                            "???",
---
>                                            
1167,1168c1167,1168
<                                            "???",
<                                  "???",          "???"};
---
>                                            ,
>                                  ,          "???"};
1167,1168c1167,1168
<                                            "???",
<                                  "???",          "???"};
---
>                                            
>                                  ,          "???"};
1167,1168c1167,1168
<                                            "???",
<                                  "???",          "???"};
---
>                                            ,
>                                  "???"          "???"};
1167,1168c1167,1168
<                                            "???",
<                                  "???",          "???"};
---
>                                            
>                                  "???"          "???"};
(93.1 %, 14158 bytes)
1168c1168
<                                  "???",          "???"};
---
>                                            "???"};
1168c1168
<                                  "???",          "???"};
---
>                                  ,          };
1168c1168
<                                  "???",          "???"};
---
>                                            };
1168c1168
<                                  "???",          "???"};
---
>                                  ,          "???";
1168c1168
<                                  "???",          "???"};
---
>                                            "???";
1168c1168
<                                  "???",          "???"};
---
>                                  ,          ;
1168c1168
<                                  "???",          "???"};
---
>                                            ;
1168c1168
<                                  "???",          "???"};
---
>                                  "???"          "???"};
(93.1 %, 14152 bytes)
1168c1168
<                                            "???"};
---
>                                            ;
1168c1168
<                                            "???"};
---
>                                            }
1168c1168
<                                            "???"};
---
>                                            
1168c1168
<                                            "???"};
---
>                                            };
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            ;
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            }
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???";
1168c1168
<                                            "???"};
---
>                                            "???"
1168c1168
<                                            "???"};
---
>                                            "???";
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???";
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???";
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1168c1168
<                                            "???"};
---
>                                            "???"}
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   *(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>  char (BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
>   (BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  (BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  *BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const  BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char (BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ_APIBZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ_API()(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char ()(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char BZ_API)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char )(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *()(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *)(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *(BZ2_bzerror(BZFILE *b, int *errnum) {
1170c1170
< const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) {
(93.1 %, 14146 bytes)
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror)(BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *)(BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *(BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror)BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *)BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *()(BZFILE *b, int *errnum) {
1170c1170
< const char *(BZ2_bzerror)(BZFILE *b, int *errnum) {
---
> const char *((BZFILE *b, int *errnum) {
(93.1 %, 14144 bytes)
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *( *b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char * *b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *(BZFILE b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZFILE b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *( b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char * b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE *b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror *b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE *, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror *, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE , int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror , int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( *b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( *, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( , int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( *b int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( b int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( * int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(  int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE b, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE , int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE b int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE  int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE b,  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE ,  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE b  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE   *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *, int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE * int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *,  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *, int errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE * int errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *,  errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *  errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b int *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b int errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b  errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b int *) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b  *) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b int ) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b  ) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  *errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  *) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  ) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  *errnum {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  errnum {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,  * {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b,   {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int errnum) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int ) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int errnum {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int  {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int errnum) 
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int ) 
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int errnum 
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int  
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *) {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int * {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *) 
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int * 
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *) {
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int * {
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *) 
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int * 
>    err = ((bzFile *)b)->lastErr;
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum {
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum 
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum {
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum 
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum {
>   int  = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum 
>   int  = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum {
>     = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum 
>     = ((bzFile *)b)->lastErr;
1170c1170
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>    err = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>   int  = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>     = ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>   int err  ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>    err  ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>   int   ((bzFile *)b)->lastErr;
1170,1171c1170,1171
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b)->lastErr;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
>      ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>    err = ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>     = ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>    err  ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>      ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>    err = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>     = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>    err  (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>      (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int   ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int   (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int   (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int   bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ((bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err   *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err =  *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = bzFile )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err =  )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *)b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *))->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( ))->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( )->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile ))->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )b->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile b->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile ->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b)lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *blastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))->;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *));
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *);
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)blastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->lastErr
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)blastErr
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b);
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr;
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b);
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)->;
1171c1171
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)->
(93.1 %, 14135 bytes)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    ((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    ((bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (bzFile *)b)->lastErr > 0)
1171c1171
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>    bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if  *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (bzFile )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ( )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile *b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( *b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((bzFile b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (( b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( *)b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( *b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( *))->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( ))->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( *)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if ((( )->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile )b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile ))->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile )->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile )b->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile b->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile )->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile ->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *b)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *b->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *b)lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *blastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *))->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *))lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *))-> > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)-> > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)) > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *) > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b->lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)blastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b-> > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b->lastErr  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)blastErr  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b->  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)lastErr > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b) > 0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)lastErr  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)  0)
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)lastErr > )
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b) > )
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)lastErr  )
1173c1173
<   if (((bzFile *)b)->lastErr > 0)
---
>   if (((bzFile *)b)  )
(93.1 %, 14126 bytes)
1173c1173
<   if (((bzFile *)b) > 0)
---
>   if (((bzFile *)b)  )
1173c1173
<   if (((bzFile *)b) > 0)
---
>   if (((bzFile *)b)  0
1173c1173
<   if (((bzFile *)b) > 0)
---
>   if (((bzFile *)b)  
1173,1174c1173,1174
<   if (((bzFile *)b) > 0)
<     err = 0;
---
>   if (((bzFile *)b)  0)
>      = 0;
1173,1174c1173,1174
<   if (((bzFile *)b) > 0)
<     err = 0;
---
>   if (((bzFile *)b)  )
>      = 0;
1173,1174c1173,1174
<   if (((bzFile *)b) > 0)
<     err = 0;
---
>   if (((bzFile *)b)  0
>      = 0;
1173,1174c1173,1174
<   if (((bzFile *)b) > 0)
<     err = 0;
---
>   if (((bzFile *)b)  
>      = 0;
1173c1173
<   if (((bzFile *)b) > 0)
---
>   if (((bzFile *)b) > )
1173c1173
<   if (((bzFile *)b) > 0)
---
>   if (((bzFile *)b) > 
(93.1 %, 14124 bytes)
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>      = 0;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>     err  0;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>       0;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>     err = ;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>      = ;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>     err  ;
1173,1174c1173,1174
<   if (((bzFile *)b)  )
<     err = 0;
---
>   if (((bzFile *)b)  
>       ;
1174c1174
<     err = 0;
---
>      = 0;
1174c1174
<     err = 0;
---
>       0;
1174c1174
<     err = 0;
---
>      = ;
1174c1174
<     err = 0;
---
>       ;
(93.1 %, 14120 bytes)
1174c1174
<       0;
---
>       
1174,1175c1174,1175
<       0;
<   *errnum = 0;
---
>       ;
>   errnum = 0;
(93.1 %, 14118 bytes)
1175c1175
<   *errnum = 0;
---
>    = 0;
1175c1175
<   *errnum = 0;
---
>   errnum  0;
1175c1175
<   *errnum = 0;
---
>     0;
1175c1175
<   *errnum = 0;
---
>   errnum = ;
1175c1175
<   *errnum = 0;
---
>    = ;
1175c1175
<   *errnum = 0;
---
>   errnum  ;
(93.1 %, 14110 bytes)
1175,1176c1175,1176
<     0;
<   return "OK";
---
>     
>    "OK";
1175,1176c1175,1176
<     0;
<   return "OK";
---
>     ;
>   return ;
1175,1176c1175,1176
<     0;
<   return "OK";
---
>     
>   return ;
(93.1 %, 14102 bytes)
1176,1177c1176,1177
<    "OK";
< }
---
>    
> 
1176c1176
<    "OK";
---
>    ;
1179c1179
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1176c1176
<    "OK";
---
>    
1179c1179
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1176,1177c1176
<    "OK";
< }
---
>    ;
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1176,1177c1176
<    "OK";
< }
---
>    
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1176c1176
<    "OK";
---
>    "OK"
1176,1177c1176,1177
<    "OK";
< }
---
>    "OK"
> 
1176c1176
<    "OK";
---
>    "OK"
1179c1179
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1176,1177c1176
<    "OK";
< }
---
>    "OK"
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1176c1176
<    "OK";
---
>    "OK"
1179c1179
< #define BZ_UNIX 1
---
> # BZ_UNIX 1
1176,1177c1176
<    "OK";
< }
---
>    "OK"
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> # BZ_UNIX 1
1176c1176
<    "OK";
---
>    "OK"
1179c1179
< #define BZ_UNIX 1
---
>  BZ_UNIX 1
1176,1177c1176
<    "OK";
< }
---
>    "OK"
1179c1178,1179
< #define BZ_UNIX 1
---
> 
>  BZ_UNIX 1
1177c1177
< }
---
> 
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> # BZ_UNIX 1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
>  BZ_UNIX 1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> #define  1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> define  1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
> #  1
1177d1176
< }
1179c1178,1179
< #define BZ_UNIX 1
---
> 
>   1
1179c1179
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1179c1179
< #define BZ_UNIX 1
---
>  BZ_UNIX 1
1179c1179
< #define BZ_UNIX 1
---
> define  1
1179c1179
< #define BZ_UNIX 1
---
>   1
1179c1179
< #define BZ_UNIX 1
---
> define BZ_UNIX 
1179c1179
< #define BZ_UNIX 1
---
>  BZ_UNIX 
1179c1179
< #define BZ_UNIX 1
---
> define  
1179c1179
< #define BZ_UNIX 1
---
>   
1179c1179
< #define BZ_UNIX 1
---
> # BZ_UNIX 1
1179c1179
< #define BZ_UNIX 1
---
> #  1
(93.1 %, 14087 bytes)
1181c1181
< #define BZ_LCCWIN32 0
---
>   
1181c1181
< #define BZ_LCCWIN32 0
---
> # BZ_LCCWIN32 0
1181c1181
< #define BZ_LCCWIN32 0
---
> #  0
(93.1 %, 14068 bytes)
1183c1183
< #include <signal.h>
---
>  .h>
1183c1183
< #include <signal.h>
---
> # <signal.h>
1183c1183
< #include <signal.h>
---
> # signal.h>
1183c1183
< #include <signal.h>
---
> # <.h>
1183c1183
< #include <signal.h>
---
> # .h>
1183c1183
< #include <signal.h>
---
> # <signalh>
1183c1183
< #include <signal.h>
---
> # signalh>
1183c1183
< #include <signal.h>
---
> # <h>
1183c1183
< #include <signal.h>
---
> # h>
1183c1183
< #include <signal.h>
---
> #include signal.h>
1183c1183
< #include <signal.h>
---
> #include .h>
1183c1183
< #include <signal.h>
---
> #include signalh>
1183c1183
< #include <signal.h>
---
> #include h>
1183c1183
< #include <signal.h>
---
> #include signal.>
1183c1183
< #include <signal.h>
---
> #include .>
1183c1183
< #include <signal.h>
---
> #include signal>
1183c1183
< #include <signal.h>
---
> #include >
1183c1183
< #include <signal.h>
---
> #include <.h>
1183c1183
< #include <signal.h>
---
> #include <h>
1183c1183
< #include <signal.h>
---
> #include <.>
1183c1183
< #include <signal.h>
---
> #include <>
1183c1183
< #include <signal.h>
---
> #include <.h
1183c1183
< #include <signal.h>
---
> #include <h
1183c1183
< #include <signal.h>
---
> #include <.
1183c1183
< #include <signal.h>
---
> #include <
1183c1183
< #include <signal.h>
---
> #include <signalh>
1183c1183
< #include <signal.h>
---
> #include <signal>
1183c1183
< #include <signal.h>
---
> #include <signalh
1183c1183
< #include <signal.h>
---
> #include <signal
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh>
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal>
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal
> include <errno.h>
1183c1183
< #include <signal.h>
---
> #include <signal.>
1183c1183
< #include <signal.h>
---
> #include <signal.
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> # <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> # <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
>  <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
>  <errno.h>
1183c1183
< #include <signal.h>
---
> #include <signal.h
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  <errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> #include errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # errno.h>
1183,1184c1183,1184
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  errno.h>
1184c1184
< #include <errno.h>
---
> include <errno.h>
1184c1184
< #include <errno.h>
---
>  <errno.h>
1184c1184
< #include <errno.h>
---
> include errno.h>
1184c1184
< #include <errno.h>
---
>  errno.h>
1184c1184
< #include <errno.h>
---
> include <.h>
1184c1184
< #include <errno.h>
---
>  <.h>
1184c1184
< #include <errno.h>
---
> include .h>
1184c1184
< #include <errno.h>
---
>  .h>
1184c1184
< #include <errno.h>
---
> # <errno.h>
1184c1184
< #include <errno.h>
---
> # errno.h>
1184c1184
< #include <errno.h>
---
> # <.h>
1184c1184
< #include <errno.h>
---
> # .h>
1184c1184
< #include <errno.h>
---
> # <errnoh>
1184c1184
< #include <errno.h>
---
> # errnoh>
1184c1184
< #include <errno.h>
---
> # <h>
1184c1184
< #include <errno.h>
---
> # h>
1184c1184
< #include <errno.h>
---
> #include errno.h>
1184c1184
< #include <errno.h>
---
> #include .h>
1184c1184
< #include <errno.h>
---
> #include errnoh>
1184c1184
< #include <errno.h>
---
> #include h>
1184c1184
< #include <errno.h>
---
> #include errno.>
1184c1184
< #include <errno.h>
---
> #include .>
1184c1184
< #include <errno.h>
---
> #include errno>
1184c1184
< #include <errno.h>
---
> #include >
1184c1184
< #include <errno.h>
---
> #include <.h>
1184c1184
< #include <errno.h>
---
> #include <h>
1184c1184
< #include <errno.h>
---
> #include <.>
1184c1184
< #include <errno.h>
---
> #include <>
1184c1184
< #include <errno.h>
---
> #include <.h
1184c1184
< #include <errno.h>
---
> #include <h
1184c1184
< #include <errno.h>
---
> #include <.
1184c1184
< #include <errno.h>
---
> #include <
1184c1184
< #include <errno.h>
---
> #include <errnoh>
1184c1184
< #include <errno.h>
---
> #include <errno>
1184c1184
< #include <errno.h>
---
> #include <errnoh
1184c1184
< #include <errno.h>
---
> #include <errno
1184c1184
< #include <errno.h>
---
> #include <errnoh>
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno>
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errnoh
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.>
1184c1184
< #include <errno.h>
---
> #include <errno.
1184c1184
< #include <errno.h>
---
> #include <errno.>
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.>
1186c1186
< #define ERROR_IF_EOF
---
> # ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.
1186c1186
< #define ERROR_IF_EOF
---
> # ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.>
1186c1186
< #define ERROR_IF_EOF
---
>  ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.
1186c1186
< #define ERROR_IF_EOF
---
>  ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.h
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
> # ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
>  ERROR_IF_EOF
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
> #define 
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
> define 
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
> # 
1184c1184
< #include <errno.h>
---
> #include <errno.h
1186c1186
< #define ERROR_IF_EOF
---
>  
1186c1186
< #define ERROR_IF_EOF
---
> define ERROR_IF_EOF
1186c1186
< #define ERROR_IF_EOF
---
>  ERROR_IF_EOF
1186c1186
< #define ERROR_IF_EOF
---
> define 
1186c1186
< #define ERROR_IF_EOF
---
>  
1186,1187c1186,1187
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
---
> define ERROR_IF_EOF
> define ERROR_IF_NOT_ZERO
1186,1187c1186,1187
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
---
>  ERROR_IF_EOF
> define ERROR_IF_NOT_ZERO
1186,1187c1186,1187
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
---
> define 
> define ERROR_IF_NOT_ZERO
1186,1187c1186,1187
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
---
>  
> define ERROR_IF_NOT_ZERO
1186c1186
< #define ERROR_IF_EOF
---
> # ERROR_IF_EOF
1186c1186
< #define ERROR_IF_EOF
---
> # 
(93.1 %, 14049 bytes)
1187c1187
< #define ERROR_IF_NOT_ZERO
---
>  
1187,1188c1187,1188
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
---
> define ERROR_IF_NOT_ZERO
> define ERROR_IF_MINUS_ONE
1187,1188c1187,1188
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
---
>  ERROR_IF_NOT_ZERO
> define ERROR_IF_MINUS_ONE
1187,1188c1187,1188
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
---
> define 
> define ERROR_IF_MINUS_ONE
1187,1188c1187,1188
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
---
>  
> define ERROR_IF_MINUS_ONE
1187c1187
< #define ERROR_IF_NOT_ZERO
---
> # ERROR_IF_NOT_ZERO
1187c1187
< #define ERROR_IF_NOT_ZERO
---
> # 
(93.2 %, 14025 bytes)
1188c1188
< #define ERROR_IF_MINUS_ONE
---
>  
1188c1188
< #define ERROR_IF_MINUS_ONE
---
> define ERROR_IF_MINUS_ONE
1190c1190
< #if BZ_UNIX
---
> if BZ_UNIX
1188c1188
< #define ERROR_IF_MINUS_ONE
---
>  ERROR_IF_MINUS_ONE
1190c1190
< #if BZ_UNIX
---
> if BZ_UNIX
1188c1188
< #define ERROR_IF_MINUS_ONE
---
> define 
1190c1190
< #if BZ_UNIX
---
> if BZ_UNIX
1188c1188
< #define ERROR_IF_MINUS_ONE
---
>  
1190c1190
< #if BZ_UNIX
---
> if BZ_UNIX
1188c1188
< #define ERROR_IF_MINUS_ONE
---
> # ERROR_IF_MINUS_ONE
1188c1188
< #define ERROR_IF_MINUS_ONE
---
> # 
(93.2 %, 14000 bytes)
1190c1190
< #if BZ_UNIX
---
>  
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> if BZ_UNIX
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
>  BZ_UNIX
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> if 
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
>  
> include <fcntl.h>
1190c1190
< #if BZ_UNIX
---
> # BZ_UNIX
1190c1190
< #if BZ_UNIX
---
> # 
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # BZ_UNIX
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # 
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # BZ_UNIX
> # <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # 
> # <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # BZ_UNIX
>  <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> # 
>  <fcntl.h>
1190c1190
< #if BZ_UNIX
---
> #if 
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
> include <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
> # <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
>  <fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
> #include fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
> include fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
> # fcntl.h>
1190,1191c1190,1191
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if 
>  fcntl.h>
1191c1191
< #include <fcntl.h>
---
> include <fcntl.h>
1191c1191
< #include <fcntl.h>
---
>  <fcntl.h>
(93.2 %, 13999 bytes)
1191c1191
< include <fcntl.h>
---
>  <fcntl.h>
1191c1191
< include <fcntl.h>
---
>  fcntl.h>
(93.2 %, 13992 bytes)
1191c1191
<  <fcntl.h>
---
>  fcntl.h>
1191c1191
<  <fcntl.h>
---
>  .h>
(93.2 %, 13991 bytes)
1191c1191
<  fcntl.h>
---
>  .h>
1191c1191
<  fcntl.h>
---
>  h>
1191c1191
<  fcntl.h>
---
>  .>
(93.2 %, 13986 bytes)
1191c1191
<  .h>
---
>  h>
1191c1191
<  .h>
---
>  >
(93.2 %, 13985 bytes)
1191c1191
<  h>
---
>  >
1191c1191
<  h>
---
>  
(93.2 %, 13984 bytes)
1191c1191
<  >
---
>  
1191,1192c1191,1192
<  >
< #include <utime.h>
---
>  
> include <utime.h>
1191,1192c1191,1192
<  >
< #include <utime.h>
---
>  
> # <utime.h>
(93.2 %, 13983 bytes)
1192c1192
< #include <utime.h>
---
> include <utime.h>
1192c1192
< #include <utime.h>
---
>  <utime.h>
(93.2 %, 13982 bytes)
1192c1192
< include <utime.h>
---
>  <utime.h>
1192c1192
< include <utime.h>
---
>  utime.h>
1192c1192
< include <utime.h>
---
>  <.h>
(93.2 %, 13975 bytes)
1192c1192
<  <utime.h>
---
>  utime.h>
1192c1192
<  <utime.h>
---
>  .h>
1192c1192
<  <utime.h>
---
>  utimeh>
(93.2 %, 13974 bytes)
1192c1192
<  utime.h>
---
>  .h>
1192c1192
<  utime.h>
---
>  h>
(93.2 %, 13969 bytes)
1192c1192
<  .h>
---
>  h>
1192c1192
<  .h>
---
>  >
(93.2 %, 13968 bytes)
1192c1192
<  h>
---
>  >
1192c1192
<  h>
---
>  
(93.2 %, 13967 bytes)
1192c1192
<  >
---
>  
1192c1192
<  >
---
>  
1194c1194
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1192c1192
<  >
---
>  
1194c1194
< #define PATH_SEP '/'
---
> # PATH_SEP '/'
(93.2 %, 13966 bytes)
1194c1194
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1194c1194
< #define PATH_SEP '/'
---
>  PATH_SEP '/'
(93.2 %, 13965 bytes)
1194c1194
< define PATH_SEP '/'
---
>  PATH_SEP '/'
1194c1194
< define PATH_SEP '/'
---
>   '/'
(93.2 %, 13959 bytes)
1194c1194
<  PATH_SEP '/'
---
>   '/'
1194c1194
<  PATH_SEP '/'
---
>   
1194,1195c1194,1195
<  PATH_SEP '/'
< #define MY_LSTAT lstat
---
>   '/'
> define MY_LSTAT lstat
(93.2 %, 13951 bytes)
1194c1194
<   '/'
---
>   
1194,1195c1194,1195
<   '/'
< #define MY_LSTAT lstat
---
>   
> define MY_LSTAT lstat
(93.2 %, 13948 bytes)
1195c1195
< #define MY_LSTAT lstat
---
> define MY_LSTAT lstat
1195c1195
< #define MY_LSTAT lstat
---
>  MY_LSTAT lstat
1195c1195
< #define MY_LSTAT lstat
---
> define  lstat
(93.2 %, 13947 bytes)
1195c1195
< define MY_LSTAT lstat
---
>  MY_LSTAT lstat
1195c1195
< define MY_LSTAT lstat
---
>   lstat
(93.2 %, 13941 bytes)
1195c1195
<  MY_LSTAT lstat
---
>   lstat
1195c1195
<  MY_LSTAT lstat
---
>   
(93.2 %, 13933 bytes)
1195c1195
<   lstat
---
>   
1195,1196c1195,1196
<   lstat
< #define MY_STAT stat
---
>   
> define MY_STAT stat
1195,1196c1195,1196
<   lstat
< #define MY_STAT stat
---
>   
> # MY_STAT stat
(93.2 %, 13928 bytes)
1196c1196
< #define MY_STAT stat
---
> define MY_STAT stat
1196c1196
< #define MY_STAT stat
---
>  MY_STAT stat
1196c1196
< #define MY_STAT stat
---
> define  stat
(93.2 %, 13927 bytes)
1196c1196
< define MY_STAT stat
---
>  MY_STAT stat
1196c1196
< define MY_STAT stat
---
>   stat
(93.2 %, 13921 bytes)
1196c1196
<  MY_STAT stat
---
>   stat
1196c1196
<  MY_STAT stat
---
>   
1196,1197c1196,1197
<  MY_STAT stat
< #define MY_S_ISREG S_ISREG
---
>   stat
> define MY_S_ISREG S_ISREG
(93.2 %, 13914 bytes)
1196c1196
<   stat
---
>   
1196,1197c1196,1197
<   stat
< #define MY_S_ISREG S_ISREG
---
>   
> define MY_S_ISREG S_ISREG
(93.2 %, 13910 bytes)
1197c1197
< #define MY_S_ISREG S_ISREG
---
> define MY_S_ISREG S_ISREG
1197c1197
< #define MY_S_ISREG S_ISREG
---
>  MY_S_ISREG S_ISREG
(93.2 %, 13909 bytes)
1197c1197
< define MY_S_ISREG S_ISREG
---
>  MY_S_ISREG S_ISREG
1197c1197
< define MY_S_ISREG S_ISREG
---
>   S_ISREG
1197c1197
< define MY_S_ISREG S_ISREG
---
>  MY_S_ISREG 
(93.2 %, 13903 bytes)
1197c1197
<  MY_S_ISREG S_ISREG
---
>   S_ISREG
1197c1197
<  MY_S_ISREG S_ISREG
---
>   
(93.2 %, 13893 bytes)
1197c1197
<   S_ISREG
---
>   
1197,1198c1197,1198
<   S_ISREG
< #define MY_S_ISDIR S_ISDIR
---
>   
> define MY_S_ISDIR S_ISDIR
1197,1198c1197,1198
<   S_ISREG
< #define MY_S_ISDIR S_ISDIR
---
>   
> # MY_S_ISDIR S_ISDIR
(93.2 %, 13886 bytes)
1198c1198
< #define MY_S_ISDIR S_ISDIR
---
> define MY_S_ISDIR S_ISDIR
1198c1198
< #define MY_S_ISDIR S_ISDIR
---
>  MY_S_ISDIR S_ISDIR
1198c1198
< #define MY_S_ISDIR S_ISDIR
---
> define  S_ISDIR
(93.2 %, 13885 bytes)
1198c1198
< define MY_S_ISDIR S_ISDIR
---
>  MY_S_ISDIR S_ISDIR
1198c1198
< define MY_S_ISDIR S_ISDIR
---
>   S_ISDIR
1198c1198
< define MY_S_ISDIR S_ISDIR
---
>  MY_S_ISDIR 
(93.2 %, 13879 bytes)
1198c1198
<  MY_S_ISDIR S_ISDIR
---
>   S_ISDIR
1198c1198
<  MY_S_ISDIR S_ISDIR
---
>   
1198c1198
<  MY_S_ISDIR S_ISDIR
---
>   S_ISDIR
1200c1200
< #define APPEND_FILESPEC root = snocString
---
> define APPEND_FILESPEC root = snocString
(93.2 %, 13869 bytes)
1198c1198
<   S_ISDIR
---
>   
1198c1198
<   S_ISDIR
---
>   
1200c1200
< #define APPEND_FILESPEC root = snocString
---
> define APPEND_FILESPEC root = snocString
1198c1198
<   S_ISDIR
---
>   
1200c1200
< #define APPEND_FILESPEC root = snocString
---
> # APPEND_FILESPEC root = snocString
(93.2 %, 13862 bytes)
1200c1200
< #define APPEND_FILESPEC root = snocString
---
> define APPEND_FILESPEC root = snocString
1200c1200
< #define APPEND_FILESPEC root = snocString
---
>  APPEND_FILESPEC root = snocString
1200c1200
< #define APPEND_FILESPEC root = snocString
---
> define  root = snocString
(93.2 %, 13861 bytes)
1200c1200
< define APPEND_FILESPEC root = snocString
---
>  APPEND_FILESPEC root = snocString
1200c1200
< define APPEND_FILESPEC root = snocString
---
>   root = snocString
(93.2 %, 13855 bytes)
1200c1200
<  APPEND_FILESPEC root = snocString
---
>   root = snocString
1200c1200
<  APPEND_FILESPEC root = snocString
---
>    = snocString
(93.2 %, 13840 bytes)
1200c1200
<   root = snocString
---
>    = snocString
1200c1200
<   root = snocString
---
>     snocString
1200c1200
<   root = snocString
---
>    = 
(93.2 %, 13836 bytes)
1200c1200
<    = snocString
---
>     snocString
1200c1200
<    = snocString
---
>     
(93.2 %, 13835 bytes)
1200c1200
<     snocString
---
>     
1200c1200
<     snocString
---
>     
1202c1202
< #define APPEND_FLAG root = snocString
---
> define APPEND_FLAG root = snocString
1200c1200
<     snocString
---
>     
1202c1202
< #define APPEND_FLAG root = snocString
---
> # APPEND_FLAG root = snocString
(93.3 %, 13825 bytes)
1202c1202
< #define APPEND_FLAG root = snocString
---
> define APPEND_FLAG root = snocString
1202c1202
< #define APPEND_FLAG root = snocString
---
>  APPEND_FLAG root = snocString
(93.3 %, 13824 bytes)
1202c1202
< define APPEND_FLAG root = snocString
---
>  APPEND_FLAG root = snocString
1202c1202
< define APPEND_FLAG root = snocString
---
>   root = snocString
1202c1202
< define APPEND_FLAG root = snocString
---
>  APPEND_FLAG  = snocString
(93.3 %, 13818 bytes)
1202c1202
<  APPEND_FLAG root = snocString
---
>   root = snocString
1202c1202
<  APPEND_FLAG root = snocString
---
>    = snocString
1202c1202
<  APPEND_FLAG root = snocString
---
>   root  snocString
(93.3 %, 13807 bytes)
1202c1202
<   root = snocString
---
>    = snocString
1202c1202
<   root = snocString
---
>     snocString
1202c1202
<   root = snocString
---
>    = 
(93.3 %, 13803 bytes)
1202c1202
<    = snocString
---
>     snocString
1202c1202
<    = snocString
---
>     
1202c1202
<    = snocString
---
>     snocString
1204c1204
< #define SET_BINARY_MODE
---
> define SET_BINARY_MODE
(93.3 %, 13802 bytes)
1202c1202
<     snocString
---
>     
1202c1202
<     snocString
---
>     
1204c1204
< #define SET_BINARY_MODE
---
> define SET_BINARY_MODE
(93.3 %, 13792 bytes)
1204c1204
< #define SET_BINARY_MODE
---
> define SET_BINARY_MODE
1204c1204
< #define SET_BINARY_MODE
---
>  SET_BINARY_MODE
(93.3 %, 13791 bytes)
1204c1204
< define SET_BINARY_MODE
---
>  SET_BINARY_MODE
1204c1204
< define SET_BINARY_MODE
---
>  
(93.3 %, 13785 bytes)
1204c1204
<  SET_BINARY_MODE
---
>  
1204c1204
<  SET_BINARY_MODE
---
>  
1206c1206
< #define NORETURN
---
> define NORETURN
1204c1204
<  SET_BINARY_MODE
---
>  
1206c1206
< #define NORETURN
---
> # NORETURN
(93.3 %, 13770 bytes)
1206c1206
< #define NORETURN
---
> define NORETURN
1206c1206
< #define NORETURN
---
>  NORETURN
(93.3 %, 13769 bytes)
1206c1206
< define NORETURN
---
>  NORETURN
1206c1206
< define NORETURN
---
>  
1206c1206
< define NORETURN
---
>  NORETURN
1208c1208
< #endif
---
> endif
(93.3 %, 13763 bytes)
1206c1206
<  NORETURN
---
>  
1206c1206
<  NORETURN
---
>  
1208c1208
< #endif
---
> endif
1206c1206
<  NORETURN
---
>  
1208c1208
< #endif
---
> #
1206c1206,1207
<  NORETURN
---
>  
> 
1208d1208
< #endif
1206c1206
<  NORETURN
---
>  
1210c1210
< #define True
---
> define True
1206c1206
<  NORETURN
---
>  
1208c1208
< #endif
---
> endif
1210c1210
< #define True
---
> define True
1206c1206
<  NORETURN
---
>  
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> define True
1206c1206
<  NORETURN
---
>  
1208d1207
< #endif
1210c1209,1210
< #define True
---
> 
> define True
(93.3 %, 13755 bytes)
1208c1208
< #endif
---
> endif
1208c1208
< #endif
---
> 
1208c1208
< #endif
---
> endif
1210c1210
< #define True
---
> define True
1208d1207
< #endif
1210c1209,1210
< #define True
---
> 
> define True
1208c1208
< #endif
---
> endif
1210c1210
< #define True
---
> # True
1208d1207
< #endif
1210c1209,1210
< #define True
---
> 
> # True
1208c1208
< #endif
---
> endif
1210c1210
< #define True
---
>  True
1208d1207
< #endif
1210c1209,1210
< #define True
---
> 
>  True
1208c1208
< #endif
---
> #
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> define True
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> # True
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
>  True
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> #define 
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> define 
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
> # 
1208c1208
< #endif
---
> #
1210c1210
< #define True
---
>  
1210c1210
< #define True
---
> define True
1210c1210
< #define True
---
>  True
1210c1210
< #define True
---
> define 
1210c1210
< #define True
---
>  
1210,1211c1210,1211
< #define True
< #define False
---
> define True
> define False
1210,1211c1210,1211
< #define True
< #define False
---
>  True
> define False
1210,1211c1210,1211
< #define True
< #define False
---
> define 
> define False
1210,1211c1210,1211
< #define True
< #define False
---
>  
> define False
1210c1210
< #define True
---
> # True
1210c1210
< #define True
---
> # 
(93.3 %, 13744 bytes)
1211c1211
< #define False
---
>  
1211c1211
< #define False
---
> define False
1213c1213
< #define SM_I2O 1
---
> define SM_I2O 1
1211c1211
< #define False
---
>  False
1213c1213
< #define SM_I2O 1
---
> define SM_I2O 1
1211c1211
< #define False
---
> define 
1213c1213
< #define SM_I2O 1
---
> define SM_I2O 1
1211c1211
< #define False
---
>  
1213c1213
< #define SM_I2O 1
---
> define SM_I2O 1
1211c1211
< #define False
---
> # False
1211c1211
< #define False
---
> # 
(93.3 %, 13732 bytes)
1213c1213
< #define SM_I2O 1
---
>   1
1213c1213
< #define SM_I2O 1
---
> define SM_I2O 
1213c1213
< #define SM_I2O 1
---
>  SM_I2O 
1213c1213
< #define SM_I2O 1
---
> define  
1213c1213
< #define SM_I2O 1
---
>   
1213c1213
< #define SM_I2O 1
---
> # SM_I2O 1
1213c1213
< #define SM_I2O 1
---
> #  1
(93.3 %, 13718 bytes)
1214c1214
< #define SM_F2O 2
---
>   
1214c1214
< #define SM_F2O 2
---
> # SM_F2O 2
1214c1214
< #define SM_F2O 2
---
> #  2
(93.3 %, 13704 bytes)
1215c1215
< #define SM_F2F 3
---
>   
1215c1215
< #define SM_F2F 3
---
> # SM_F2F 3
1215c1215
< #define SM_F2F 3
---
> #  3
(93.3 %, 13690 bytes)
1217c1217
< #define OM_Z 1
---
>   
1217c1217
< #define OM_Z 1
---
> # OM_Z 1
1217c1217
< #define OM_Z 1
---
> #  1
(93.3 %, 13678 bytes)
1218c1218
< #define OM_UNZ 2
---
>   
1218c1218
< #define OM_UNZ 2
---
> # OM_UNZ 2
1218c1218
< #define OM_UNZ 2
---
> #  2
(93.3 %, 13664 bytes)
1219c1219
< #define OM_TEST 3
---
>   
1219c1219
< #define OM_TEST 3
---
> # OM_TEST 3
1219c1219
< #define OM_TEST 3
---
> #  3
(93.3 %, 13649 bytes)
1221c1221
< #define FILE_NAME_LEN 1034
---
>   
1221c1221
< #define FILE_NAME_LEN 1034
---
> # FILE_NAME_LEN 1034
1221c1221
< #define FILE_NAME_LEN 1034
---
> #  1034
(93.4 %, 13625 bytes)
1223c1223
< typedef struct UInt64;
---
>   
1223c1223
< typedef struct UInt64;
---
> typedef  UInt64;
1223c1223
< typedef struct UInt64;
---
> typedef  ;
(93.4 %, 13605 bytes)
1225c1225
< #if BZ_UNIX
---
>  
1227c1227
< #endif
---
> endif
1225c1225
< #if BZ_UNIX
---
> # BZ_UNIX
1225c1225
< #if BZ_UNIX
---
> # 
1225c1225
< #if BZ_UNIX
---
> # BZ_UNIX
1227c1227
< #endif
---
> endif
1225c1225
< #if BZ_UNIX
---
> # 
1227c1227
< #endif
---
> endif
1225c1225
< #if BZ_UNIX
---
> # BZ_UNIX
1227c1227
< #endif
---
> #
1225c1225
< #if BZ_UNIX
---
> # 
1227c1227
< #endif
---
> #
1225c1225,1226
< #if BZ_UNIX
---
> # BZ_UNIX
> 
1227d1227
< #endif
1225c1225,1226
< #if BZ_UNIX
---
> # 
> 
1227d1227
< #endif
(93.4 %, 13591 bytes)
1227d1226
< #
1229c1228,1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> 
> define  4
1227d1226
< #
1229c1228,1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> 
> #  4
1227d1226
< #
1229c1228,1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> 
>   4
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> define BZ_N_SUFFIX_PAIRS 4
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
>  BZ_N_SUFFIX_PAIRS 4
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> define  4
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
>   4
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
> define BZ_N_SUFFIX_PAIRS 
1229c1229
< #define BZ_N_SUFFIX_PAIRS 4
---
>  BZ_N_SUFFIX_PAIRS 
(93.4 %, 13567 bytes)
1229c1229
< #  4
---
>   4
1231c1231
< #define ISFLAG
---
>  ISFLAG
1229c1229
< #  4
---
>   
1231c1231
< #define ISFLAG
---
>  ISFLAG
1229c1229
< #  4
---
> #  
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
> define ISFLAG
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
> # ISFLAG
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
>  ISFLAG
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
> #define 
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
> define 
1229c1229
< #  4
---
> #  
1231c1231
< #define ISFLAG
---
> # 
(93.4 %, 13566 bytes)
1231c1231
< #define ISFLAG
---
> define ISFLAG
1231c1231
< #define ISFLAG
---
>  ISFLAG
1231c1231
< #define ISFLAG
---
> define 
1231c1231
< #define ISFLAG
---
>  
1231c1231
< #define ISFLAG
---
> define ISFLAG
1233c1233
< void main(int argc);
---
>  main(int argc);
1231c1231
< #define ISFLAG
---
>  ISFLAG
1233c1233
< void main(int argc);
---
>  main(int argc);
1231c1231
< #define ISFLAG
---
> define 
1233c1233
< void main(int argc);
---
>  main(int argc);
1231c1231
< #define ISFLAG
---
>  
1233c1233
< void main(int argc);
---
>  main(int argc);
(93.4 %, 13553 bytes)
1233c1233
< void main(int argc);
---
>  int argc);
1233c1233
< void main(int argc);
---
>  main( argc);
1233c1233
< void main(int argc);
---
>  ( argc);
1233c1233
< void main(int argc);
---
>  main argc);
1233c1233
< void main(int argc);
---
>   argc);
(93.4 %, 13542 bytes)
1233c1233
<  ( argc);
---
>   )
1233c1233
<  ( argc);
---
>   argc
1233c1233
<  ( argc);
---
>   
1233c1233
<  ( argc);
---
>  ( );
1233c1233
<  ( argc);
---
>  ( ;
1233c1233
<  ( argc);
---
>  ( )
1233c1233
<  ( argc);
---
>  ( 
1233c1233
<  ( argc);
---
>  ( );
1233c1233
<  ( argc);
---
>  ( ;
1233c1233
<  ( argc);
---
>  ( )
1233c1233
<  ( argc);
---
>  ( 
(93.4 %, 13535 bytes)
Termination check: size was 25551; now 13535
===< pass_balanced :: angles >===
1c1
< 
---
>  
42c42
< #include <stdio.h>
---
> #include 
1233a1234
>  
\ No newline at end of file
1c1
< 
---
>  
119c119
< #include <stdlib.h>
---
> #include 
1233a1234
>  
\ No newline at end of file
1c1
< 
---
>  
1183c1183
< #include <signal.h>
---
> #include 
1233a1234
>  
\ No newline at end of file
1c1
< 
---
>  
1184c1184
< #include <errno.h>
---
> #include 
1233a1234
>  
\ No newline at end of file
===< pass_clang :: param-to-local >===
47c47
<   BZ2_bzCompressInit(bz_stream *, int ,
---
>   BZ2_bzCompressInit(, int ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit( int blockSize100k,
614a615
>   bz_stream * strm = 0;
47c47
<   BZ2_bzCompressInit(bz_stream *, int ,
---
>   BZ2_bzCompressInit(bz_stream *,  ,
613c613
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
>  BZ2_bzCompressInit(bz_stream *strm, 
614a615
>   int blockSize100k = 0;
48c48
<                                          int , int );
---
>                                           , int );
614c614,615
<                                int verbosity, int workFactor) {
---
>                                 int workFactor) {
>   int verbosity = 0;
48c48
<                                          int , int );
---
>                                          int t );
614c614,615
<                                int verbosity, int workFactor) {
---
>                                int verbosity) {
>   int workFactor = 0;
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(, int );
676c676,677
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( int action) {
>   bz_stream * strm = 0;
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *t );
676c676,677
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm) {
>   int action = 0;
(93.4 %, 13537 bytes)
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(, int );
677c677,678
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress( int action) {
>   bz_stream * strm = 0;
50c50
<   BZ2_bzCompress(bz_stream *, int );
---
>   BZ2_bzCompress(bz_stream *t );
677c677,678
< int BZ2_bzCompress(bz_stream *strm, int action) {
---
> int BZ2_bzCompress(bz_stream *strm) {
>   int action = 0;
54c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
---
>   BZ2_bzDecompressInit(, int ,
716c716,717
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( int verbosity, int small) {
>   bz_stream * strm = 0;
54c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
---
>   BZ2_bzDecompressInit(bz_stream *,  ,
716c716,717
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  int small) {
>   int verbosity = 0;
54,55c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int );
---
>   BZ2_bzDecompressInit(bz_stream *, int t );
716c715,716
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
>   int small = 0;
(93.4 %, 13539 bytes)
54c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
---
>   BZ2_bzDecompressInit(, int ,
717c717,718
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit( int verbosity, int small) {
>   bz_stream * strm = 0;
54c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
---
>   BZ2_bzDecompressInit(bz_stream *,  ,
717c717,718
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm,  int small) {
>   int verbosity = 0;
54,55c54
<   BZ2_bzDecompressInit(bz_stream *, int ,
<                                            int );
---
>   BZ2_bzDecompressInit(bz_stream *, int t );
717c716,717
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small) {
---
>  BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
>   int small = 0;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(, BZFILE *);
973c973,974
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( BZFILE *b) {
>   int * bzerror = 0;
68c68
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int **);
973c973,974
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror) {
>   BZFILE * b = 0;
70c70
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
---
>  void BZ2_bzReadGetUnused(, BZFILE *,
1011c1011
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( BZFILE *b, void **unused,
1012a1013
>   int * bzerror = 0;
(93.4 %, 13498 bytes)
67c67
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(, BZFILE *);
973c973,974
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( BZFILE *b) {
>   int * bzerror = 0;
67c67
<  void BZ2_bzReadClose(int *, BZFILE *);
---
>  void BZ2_bzReadClose(int **);
973c973,974
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror) {
>   BZFILE * b = 0;
69c69
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
---
>  void BZ2_bzReadGetUnused(, BZFILE *,
1011c1011
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused( BZFILE *b, void **unused,
1012a1013
>   int * bzerror = 0;
69c69
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
---
>  void BZ2_bzReadGetUnused(int *, ,
1011c1011
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror,  void **unused,
1012a1013
>   BZFILE * b = 0;
70c70
<                                            void **, int *);
---
>                                            , int *);
1011c1011
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, 
1012a1013
>   void ** unused = 0;
70c70
<                                            void **, int *);
---
>                                            void ***);
1011,1012c1011,1012
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused) {
>   int * nUnused = 0;
72c72
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(, BZFILE *, void *, int );
988c988,989
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead( BZFILE *b, void *buf, int len) {
>   int * bzerror = 0;
72c72
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, , void *, int );
988c988,989
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror,  void *buf, int len) {
>   BZFILE * b = 0;
72c72
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, , int );
988c988,989
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b,  int len) {
>   void * buf = 0;
72c72
<   BZ2_bzRead(int *, BZFILE *, void *, int );
---
>   BZ2_bzRead(int *, BZFILE *, void *t );
988c988,989
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
>   int len = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(, BZFILE *, void *, int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( BZFILE *b, void *buf, int len) {
>   int * bzerror = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, , void *, int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  void *buf, int len) {
>   BZFILE * b = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, , int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  int len) {
>   void * buf = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *t );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
>   int len = 0;
(93.4 %, 13500 bytes)
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(, BZFILE *, void *, int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite( BZFILE *b, void *buf, int len) {
>   int * bzerror = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, , void *, int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror,  void *buf, int len) {
>   BZFILE * b = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, , int );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b,  int len) {
>   void * buf = 0;
78c78
<  void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>  void BZ2_bzWrite(int *, BZFILE *, void *t );
852c852,853
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
>   int len = 0;
84c84
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(, BZFILE *, int ,
889c889
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( BZFILE *b, int abandon,
893a894
>   int * bzerror = 0;
84c84
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(int *, , int ,
889c889
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
893a894
>   BZFILE * b = 0;
(93.4 %, 13502 bytes)
84c84
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(, BZFILE *, int ,
890c890
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( BZFILE *b, int abandon,
894a895
>   int * bzerror = 0;
84c84
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(int *, , int ,
890c890
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
894a895
>   BZFILE * b = 0;
84c84
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>  void BZ2_bzWriteClose64(int *, BZFILE *,  ,
890c890
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, 
894a895
>   int abandon = 0;
85c85
<                                           unsigned  *,
---
>                                           ,
891c891
<                                 unsigned  *nbytes_in_lo32,
---
>                                 
894a895
>   unsigned int * nbytes_in_lo32 = 0;
86c86
<                                           unsigned  *,
---
>                                           ,
892c892
<                                 unsigned  *nbytes_in_hi32,
---
>                                 
894a895
>   unsigned int * nbytes_in_hi32 = 0;
87c87
<                                           unsigned  *,
---
>                                           ,
893c893
<                                 unsigned  *nbytes_out_lo32,
---
>                                 
894a895
>   unsigned int * nbytes_out_lo32 = 0;
87,88c87
<                                           unsigned  *,
<                                           unsigned  *);
---
>                                           unsigned  **);
893,894c892,893
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned  *nbytes_out_hi32) {
---
>                                 unsigned  *nbytes_out_lo32) {
>   unsigned int * nbytes_out_hi32 = 0;
91c91
<     char *, unsigned  *, char *, unsigned  ,
---
>     , unsigned  *, char *, unsigned  ,
1028c1028
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress( unsigned  *destLen,
1031a1032
>   char * dest = 0;
91c91
<     char *, unsigned  *, char *, unsigned  ,
---
>     char *, , char *, unsigned  ,
1028c1028
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffCompress(char *dest, 
1031a1032
>   unsigned int * destLen = 0;
91c91
<     char *, unsigned  *, char *, unsigned  ,
---
>     char *, unsigned  *, , unsigned  ,
1029c1029
<                                      char *source, unsigned  sourceLen,
---
>                                       unsigned  sourceLen,
1031a1032
>   char * source = 0;
91c91
<     char *, unsigned  *, char *, unsigned  ,
---
>     char *, unsigned  *, char *,   ,
1029c1029
<                                      char *source, unsigned  sourceLen,
---
>                                      char *source, 
1031a1032
>   unsigned int sourceLen = 0;
92c92
<     int , int , int );
---
>      , int , int );
1030c1030
<                                      int blockSize100k, int verbosity,
---
>                                       int verbosity,
1031a1032
>   int blockSize100k = 0;
92c92
<     int , int , int );
---
>     int ,  , int );
1030c1030
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, 
1031a1032
>   int verbosity = 0;
92c92
<     int , int , int );
---
>     int , int t );
1030,1031c1030,1031
<                                      int blockSize100k, int verbosity,
<                                      int workFactor) {
---
>                                      int blockSize100k, int verbosity) {
>   int workFactor = 0;
94c94
<   BZ2_bzBuffToBuffDecompress(char *,
---
>   BZ2_bzBuffToBuffDecompress(,
1073c1073
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress( unsigned  *destLen,
1075a1076
>   char * dest = 0;
95c95
<                                                  unsigned  *,
---
>                                                  ,
1073c1073
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, 
1075a1076
>   unsigned int * destLen = 0;
96c96
<                                                  char *,
---
>                                                  ,
1074c1074
<                                        char *source, unsigned  sourceLen,
---
>                                         unsigned  sourceLen,
1075a1076
>   char * source = 0;
(93.4 %, 13467 bytes)
94c94
<   BZ2_bzBuffToBuffDecompress(char *,
---
>   BZ2_bzBuffToBuffDecompress(,
1073c1073
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress( unsigned  *destLen,
1075a1076
>   char * dest = 0;
95c95
<                                                  unsigned  *,
---
>                                                  ,
1073c1073
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
---
>  BZ2_bzBuffToBuffDecompress(char *dest, 
1075a1076
>   unsigned int * destLen = 0;
96c96
<                                                  char *,
---
>                                                  ,
1074c1074
<                                        char *source, unsigned  sourceLen,
---
>                                         unsigned  sourceLen,
1075a1076
>   char * source = 0;
97c97
<                                                  unsigned  ,
---
>                                                    ,
1074c1074
<                                        char *source, unsigned  sourceLen,
---
>                                        char *source, 
1075a1076
>   unsigned int sourceLen = 0;
98c98
<                                                  int , int );
---
>                                                   , int );
1075c1075,1076
<                                        int small, int verbosity) {
---
>                                         int verbosity) {
>   int small = 0;
98c98
<                                                  int , int );
---
>                                                  int t );
1075c1075,1076
<                                        int small, int verbosity) {
---
>                                        int small) {
>   int verbosity = 0;
102c102
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(, const char *);
1122c1122,1123
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen( const char *mode) {
>     const char * path = 0;   }
102c102
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char **);
1122c1122,1123
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path) {
>     const char * mode = 0;   }
104c104
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen( , const char *);
1124c1124,1125
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( const char *mode) {
>     int fd = 0;
104c104
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int *);
1124c1124,1125
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd) {
>     const char * mode = 0;
(93.4 %, 13469 bytes)
102c102
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(, const char *);
1123c1123,1124
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen( const char *mode) {
>     const char * path = 0;   }
102c102
<   *BZ2_bzopen(const char *, const char *);
---
>   *BZ2_bzopen(const char **);
1123c1123,1124
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
>  *BZ2_bzopen(const char *path) {
>     const char * mode = 0;   }
104c104
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen( , const char *);
1125c1125,1126
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen( const char *mode) {
>     int fd = 0;
104c104
<   *BZ2_bzdopen(int , const char *);
---
>   *BZ2_bzdopen(int *);
1125c1125,1126
<  *BZ2_bzdopen(int fd, const char *mode) {
---
>  *BZ2_bzdopen(int fd) {
>     const char * mode = 0;
106c106
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(, void *, int );
1129c1129,1130
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread( void *buf, int len) {
>   BZFILE * b = 0;
106c106
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, , int );
1129c1129,1130
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b,  int len) {
>   void * buf = 0;
106c106
<   BZ2_bzread(BZFILE *, void *, int );
---
>   BZ2_bzread(BZFILE *, void *t );
1129c1129,1130
<  BZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzread(BZFILE *b, void *buf) {
>   int len = 0;
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(, void *, int );
1140c1140,1141
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( void *buf, int len) {
>   BZFILE * b = 0;
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, , int );
1140c1140,1141
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  int len) {
>   void * buf = 0;
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *t );
1140c1140,1141
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf) {
>   int len = 0;
(93.4 %, 13471 bytes)
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(, void *, int );
1141c1141,1142
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite( void *buf, int len) {
>   BZFILE * b = 0;
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, , int );
1141c1141,1142
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b,  int len) {
>   void * buf = 0;
108c108
<   BZ2_bzwrite(BZFILE *, void *, int );
---
>   BZ2_bzwrite(BZFILE *, void *t );
1141c1141,1142
<  BZ2_bzwrite(BZFILE *b, void *buf, int len) {
---
>  BZ2_bzwrite(BZFILE *b, void *buf) {
>   int len = 0;
114c114
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(, int *);
1176c1176,1177
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( int *errnum) {
>   BZFILE * b = 0;
114c114
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE **);
1176c1176,1177
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b) {
>   int * errnum = 0;
693c693,694
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(void) {
>   bz_stream * strm = 0;
(93.4 %, 13473 bytes)
114c114
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(, int *);
1177c1177,1178
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( int *errnum) {
>   BZFILE * b = 0;
114c114
<  const char *BZ2_bzerror(BZFILE *, int *);
---
>  const char *BZ2_bzerror(BZFILE **);
1177c1177,1178
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b) {
>   int * errnum = 0;
693c693,694
<  BZ2_bzCompressEnd(bz_stream *strm) {
---
>  BZ2_bzCompressEnd(void) {
>   bz_stream * strm = 0;
762c762,763
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(void) {
>   bz_stream * strm = 0;
(93.4 %, 13486 bytes)
763c763,764
<  BZ2_bzDecompress(bz_stream *strm) {
---
>  BZ2_bzDecompress(void) {
>   bz_stream * strm = 0;
780c780,781
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(void) {
>   bz_stream * strm = 0;
(93.4 %, 13499 bytes)
781c781,782
<  BZ2_bzDecompressEnd(bz_stream *strm) {
---
>  BZ2_bzDecompressEnd(void) {
>   bz_stream * strm = 0;
1156c1156,1157
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( void) {
>   int b = 0;
(93.4 %, 13512 bytes)
1157c1157,1158
<  BZ2_bzclose( b) {
---
>  BZ2_bzclose( void) {
>   int b = 0;
(93.4 %, 13528 bytes)
===< pass_clang :: return-void >===
clang_delta: ReturnVoid.cpp:163: bool ReturnVoid::isInTheFuncDef(clang::ReturnStmt*): Assertion `(EndPos > FuncDefStartPos) && (EndPos < FuncDefEndPos) && "Bad return statement range!"' failed.
Aborted

***************************************************

pass_clang::return-void has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=return-void --counter=1 /tmp/creduce-BiIU4s/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454717788.3852/creduce_bug_000
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: simplify-if >===
844,850c844,846
<   if (  0)
<       
<     
<      
<     
< 
<   bzf  
---
>   0;
>   
>    bzf  
881,884c881,885
<   if (bzf < 
< 
<      bzf == 0)
<       ;
---
>   bzf < 
>   
>        bzf == 0;
>   
>    ;
(93.4 %, 13502 bytes)
877,880c877,881
<   if (bzf < 
< 
<      bzf == 0)
<       ;
---
>   bzf < 
>   
>        bzf == 0;
>   
>    ;
983,985c983,985
<   if (bzf)
<     
<   ;
---
>   bzf;
>   
>    ;
(93.4 %, 13502 bytes)
984,986c984,986
<   if (bzf)
<     
<   ;
---
>   bzf;
>   
>    ;
1046,1049c1046,1048
<   if (  BZ_OK)
<      
< 
<     source
---
>   ;
>   
>    source
(93.4 %, 13497 bytes)
1046,1049c1046,1048
<   if (  BZ_OK)
<      
< 
<     source
---
>   ;
>   
>    source
1055,1056c1055,1057
<   if (  BZ_FINISH_OK)
<      ;
---
>   ;
>   
>    ;
(93.4 %, 13481 bytes)
1054,1055c1054,1056
<   if (  BZ_FINISH_OK)
<      ;
---
>   ;
>   
>    ;
1056,1067c1056
<   if (  BZ_STREAM_END)
<      
< 
<     
<   
<    
< 
< 
<   
<    
< 
< 
---
>   ;
(93.4 %, 13464 bytes)
1057,1068c1057
<   if (  BZ_STREAM_END)
<      
< 
<     
<   
<    
< 
< 
<   
<    
< 
< 
---
>   ;
1088,1091c1088,1090
<   if (  BZ_OK)
<      
< 
<     source
---
>   ;
>   
>    source
(93.5 %, 13415 bytes)
1077,1080c1077,1079
<   if (  BZ_OK)
<      
< 
<     source
---
>   ;
>   
>    source
1086,1087c1086,1088
<   if (  BZ_OK)
<      ;
---
>   ;
>   
>    ;
(93.5 %, 13399 bytes)
1085,1086c1085,1087
<   if (  BZ_OK)
<      ;
---
>   ;
>   
>    ;
1087,1090c1087,1088
<   if (  BZ_STREAM_END)
<      
< 
<     
---
>   ;
>   
1092,1093d1089
<    
< 
(93.5 %, 13389 bytes)
1088,1091c1088,1089
<   if (  BZ_STREAM_END)
<      
< 
<     
---
>   ;
>   
1093,1094d1090
<    
< 
1096c1096,1099
<   if (  0) {
---
>   {
>   0;
>   
>    {
1098a1102
>   }
(93.5 %, 13356 bytes)
1092c1092,1094
<   if (  0) {
---
>   0;
>   
>    {
1117,1120c1117,1119
<   if (((bzFile *)b)  )
<      
<     
<   if (      BZ_STREAM_END)
---
>   ((bzFile *)b);
>   
>    if (      BZ_STREAM_END)
(93.5 %, 13356 bytes)
1119,1122c1119,1121
<   if (((bzFile *)b)  )
<      
<     
<   if (      BZ_STREAM_END)
---
>   ((bzFile *)b);
>   
>    if (      BZ_STREAM_END)
1122,1123c1122,1123
<   if (      BZ_STREAM_END)
<      
---
>   {
>   ;
1125c1125,1126
<      ;
---
>    ;
>   }
(93.5 %, 13343 bytes)
1121,1124c1121,1123
<    if (      BZ_STREAM_END)
<      
<   
<      ;
---
>    ;
>    
>     ;
1132,1133c1132
<   if (bzerr == BZ_OK)
<      
---
>   ;
1135c1134
<      ;
---
>    ;
(93.5 %, 13314 bytes)
1131,1132c1131
<   if (bzerr == BZ_OK)
<      
---
>   ;
1134c1133
<      ;
---
>    ;
1166,1168c1166,1167
<   if (((bzFile *)b)  )
<       
<     
---
>   ((bzFile *)b);
>   
(93.5 %, 13299 bytes)
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-dependent-name >===
===< pass_comments :: 0 >===
===< pass_ints :: c >===
===< pass_indent :: regular >===
3,8d2
<  
< 
<   
<   
<   
< 
11c5
<   
---
> 
14c8
<  
---
> 
17,19c11
<  
<  
<  
---
> 
26,28c18,20
<    int avail_in;
<    int total_in_lo32;
<    int total_in_hi32;
---
>   int avail_in;
>   int total_in_lo32;
>   int total_in_hi32;
31,33c23,25
<    int avail_out;
<    int total_out_lo32;
<    int total_out_hi32;
---
>   int avail_out;
>   int total_out_lo32;
>   int total_out_hi32;
37,38c29,30
<   void (*bzalloc)(   );
<   void (*bzfree)(  void );
---
>   void (*bzalloc)();
>   void (*bzfree)(void);
44,45c36,37
< #define BZ_API 
< #define BZ_EXTERN 
---
> #define BZ_API
> #define BZ_EXTERN
47,48c39
<   BZ2_bzCompressInit(bz_stream *, int ,
<                                          int t );
---
> BZ2_bzCompressInit(bz_stream *, int, int t);
50c41
<   BZ2_bzCompress(bz_stream *t );
---
> BZ2_bzCompress(bz_stream *t);
52c43
<    ;
---
> ;
54c45
<   BZ2_bzDecompressInit(bz_stream *, int t );
---
> BZ2_bzDecompressInit(bz_stream *, int t);
56c47
<    ;
---
> ;
58c49
<    *strm;
---
> *strm;
62c53
< typedef  BZFILE;
---
> typedef BZFILE;
64,65c55
<   *BZ2_bzReadOpen(int *, FILE *, int ,
<                                          int , void *, int );
---
> *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
67c57
<  void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadClose(int *, BZFILE *);
69,70c59
<  void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
72c61
<   BZ2_bzRead(int *, BZFILE *, void *t );
---
> BZ2_bzRead(int *, BZFILE *, void *t);
74,76c63
<   *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
78c65
<  void BZ2_bzWrite(int *, BZFILE *, void *t );
---
> void BZ2_bzWrite(int *, BZFILE *, void *t);
80,82c67
<  void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned  *,
<                                         unsigned  *);
---
> void BZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
84,88c69,70
<  void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned  *,
<                                           unsigned  *,
<                                           unsigned  *,
<                                           unsigned  *);
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
>                         unsigned *, unsigned *);
90,92c72
<   BZ2_bzBuffToBuffCompress(
<     char *, unsigned  *, char *, unsigned  ,
<     int , int t );
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
94,98c74
<   BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned  *,
<                                                  char *,
<                                                  unsigned  ,
<                                                  int t );
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
100c76
<  const char *BZ2_bzlibVersionvoid;
---
> const char *BZ2_bzlibVersionvoid;
102c78
<   *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopen(const char *, const char *);
104c80
<   *BZ2_bzdopen(int , const char *);
---
> *BZ2_bzdopen(int, const char *);
106c82
<   BZ2_bzread(BZFILE *, void *t );
---
> BZ2_bzread(BZFILE *, void *t);
108c84
<   BZ2_bzwrite(BZFILE *, void *t );
---
> BZ2_bzwrite(BZFILE *, void *t);
110,112c86
<    ;
< 
<  void  ;
---
> ;
114c88
<  const char *BZ2_bzerror(BZFILE *, int *);
---
> void;
116c90
<  
---
> const char *BZ2_bzerror(BZFILE *, int *);
122,125c96,97
< 
< 
< typedef  Int32;
< typedef   UInt32;
---
> typedef Int32;
> typedef UInt32;
130,132c102
<  
< 
<  void ;
---
> void;
137,144c107
<   
<   
<   
<   
<   
<   
< 
< #define nnn   
---
> #define nnn
147,151d109
<   
<   
<   
<   
< 
153,156d110
<   
< 
<   
<   
160,170d113
<   
< 
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
< 
< #define BZ_RAND_DECLS                                                          \
<                                                                    \
<    
< 
< #define                                                       \
<   srNToGo                                                                 \
<     
172c115
<  
---
> #define BZ_MAX_SELECTORS ((BZ_G_SIZE))
174,176c117
< #define BZ_RAND_UPD_MASK                                                       \
<                                                                              \
<     
---
> #define BZ_RAND_DECLS
178c119
<  
---
> #define srNToGo
180c121
<  
---
> #define BZ_RAND_UPD_MASK
182,184d122
<  
< 
<   
186,187d123
<   
<   
189d124
<   
192,195c127,130
< #define BZ_N_RADIX 
< #define BZ_N_QSORT 
< #define BZ_N_SHELL 
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_RADIX
> #define BZ_N_QSORT
> #define BZ_N_SHELL
> #define BZ_N_OVERSHOOT (2)
204c139
<    ;
---
>       ;
208,209c143
<   UInt32 ftab
<    ;
---
>   UInt32 ftab;
212,214c146,148
<    char block;
<    short mtfv;
<    char zbits;
---
>   char block;
>   short mtfv;
>   char zbits;
218,220c152
<    
<    ;
<   
---
>       ;
224,225d155
<    
<    ;
227,229c157
<   Int32 nInUse;
<    char inUse[256];
<    char unseqToSeq[256]
---
>       ;
231,232c159,161
<    
<    
---
>   Int32 nInUse;
>   char inUse[256];
>   char unseqToSeq[256]
234c163
<    ;
---
>       ;
243,244c172,173
<    char ;
<    char ;
---
>   char;
>   char;
246,250c175
<    char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
<    
<    
< 
<    
---
>   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
254,259c179
< 
< 
< ;
< 
<   
<   
---
>     ;
262,301d181
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
312,314c192,193
<     ;
<    
<     
---
>       ;
> 
320,321c199,200
<    ;
<    char smallDecompress;
---
>       ;
>   char smallDecompress;
325,331c204,208
<    
<    
<    ;
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
---
>       ;
>   Int32;
>   ;
>   Int32;
>   Int32;
335,336c212,213
<    short ll16;
<    char ll4
---
>   short ll16;
>   char ll4
338,340c215
<    
<    
<    ;
---
>       ;
343,412c218,225
<    ;
<    char ;
<    char ;
<    char ;
< 
<    char ;
<   Int32 mtfbase[  MTFL_SIZE]
<     [BZ_MAX_SELECTORS]
<     [BZ_MAX_SELECTORS]
<     [BZ_MAX_ALPHA_SIZE]
< 
<    
<    
<    
<    
< 
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    ;
< 
< } DState;
< 
< #define                                                             \
<     stPos                                                    \
<                                                                          \
<     
< 
< #define                                                           \
<                                                            \
<                                                                          \
<   c_tPos  
< 
<  
< 
<  
< 
<  
< 
<  
< 
< #define                                                            \
<     BZ2_indexIntoF                                                       \
<     
< 
< void BZ2_decompress( );
< 
<  
< 
<  
---
>       ;
>   char;
>   char;
>   char;
> 
>   char;
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
414c227
< #  
---
>       ;
416,445c229
< # 
< 
<  
< 
<   
<   
< 
< # 
<  
<  
<  
<  
<  
<  
< 
< #define  bhtab   
< #define  bhtab    
<  
< #define  bhtab  
<  
< 
<  
<  
<  
<  
<  
< 
<  
< 
<  
---
> } DState;
447c231
< #  
---
> #define stPos
449c233,235
< # 
---
> #define                                                                        \
>                                                                                \
>     c_tPos
451c237
<  
---
> #define BZ2_indexIntoF
453c239
<  
---
> void BZ2_decompress();
455c241
<  
---
> #
457,459c243
<   
< # 
<   
---
> #
461,470c245
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
---
> #
472,474c247,248
<  
<  
<  
---
> #define bhtab
> #define bhtab
476,478c250
<  
<  
<  
---
> #define bhtab
480,482c252
<  
<  
<  
---
> #
484c254
<   
---
> #
486c256
< # 
---
> #
488c258
<  
---
> #
490c260
<  
---
> #
492,493c262,263
< EState  makeMaps_e_s;
<   makeMaps_e() {
---
> EState makeMaps_e_s;
> makeMaps_e() {
495,496d264
<     
<    = 0;
498,499c266,268
<   for (;   ; )
<     {
---
>       = 0;
> 
>   for (;;) {
501,504c270,272
<     
<      [0]  ;
<     }
<   ;
---
> 
>         [0];
>   };
507,508c275,276
< EState  generateMTFValues_s;
<   generateMTFValues() {
---
> EState generateMTFValues_s;
> generateMTFValues() {
515,517c283,285
<   UInt32 *  ptr;
<    char *block = block;
<    short mtfv = (mtfv)
---
>   UInt32 *ptr;
>   char *block = block;
>   short mtfv = (mtfv)
519,520c287
<   
<       
---
>       = 0;
522c289,290
<    = 0;
---
>   for (;;)
>     generateMTFValues_s.mtfFreq[0]
524,525c292
<   for (;   ; )
<     generateMTFValues_s.mtfFreq[0]  
---
>         ;
527,529c294
<     
<     
<     ;
---
>   for (;;)
531,532c296,297
<   for (;   ; )
<       
---
>     for (;;) {
>       char ll_i
534c299
<     
---
>           =
536,553c301,306
<   for (;   ; ) {
<      char ll_i
<     
<      =   
<       
<     
<        
<     ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_s.nblock]]
<     
< 
<       
<     
<      
<     
< 
<          > 0;
<         
<          {
---
>               ll_i = generateMTFValues_s
>                          .unseqToSeq[block[generateMTFValues_s.nblock]]
> 
>                      > 0;
> 
>       {
555c308
<        unsigned char *ryy_j;
---
>         unsigned char *ryy_j;
557,575d309
<         
<         
<        = 
<         ll_i;
<        (  0)
<         
<         ;
<           
<           ;
<       
<       generateMTFValues_s.mtfFreq[  1];
<     }
<   }
< 
<     
<   
<      
<   ;
<   generateMTFValues_s.mtfFreq;
577,578c311,312
<     0;
< }
---
>             = ll_i;
>         (0)
580,581c314
<   
<   
---
>             ;
583c316
<   
---
>         ;
585,588c318,320
< #define                                                                \
<    lll                                                                    \
<                                                                   
<     
---
>         generateMTFValues_s.mtfFreq[1];
>       }
>     }
590c322,323
<   
---
>     ;
>   generateMTFValues_s.mtfFreq;
592c325,326
<   
---
>   0;
> }
594c328
< # 
---
> #define lll
596c330
<   s
---
> #
598c332
<  
---
> s
600c334
<  ;
---
>     ;
602c336
<  default_bzalloc  ;
---
> default_bzalloc;
604c338
<   default_bzfree 
---
> default_bzfree
606c340
<   ();
---
>     ();
608c342
<   void
---
> void
610c344
<  ;
---
>     ;
612,613c346
<  BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                int verbosity) {
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity) {
619d351
<      
621,630c353,359
<   if (           
<             250)
<      
< 
<   if (  0)
<       
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
---
>     if (250)
> 
>       if (0)
> 
>         if (bzalloc NULL)
>           default_bzalloc;
>   if (bzfree NULL)
633,634c362,363
<   if (  NULL)
<      
---
>   if (NULL)
> 
637,644c366,373
<     NULL;
<   arr2  NULL;
<   ftab  NULL
< 
<      * blockSize100k;
<     BZALLOC(  );
<     BZALLOC((  BZ_N_OVERSHOOT) * sizeof(UInt32));
<     BZALLOC(  );
---
>         NULL;
>   arr2 NULL;
>   ftab NULL
> 
>       *blockSize100k;
>   BZALLOC();
>   BZALLOC((BZ_N_OVERSHOOT) * sizeof(UInt32));
>   BZALLOC();
646c375
<   if (arr1  NULL   ==     NULL)
---
>   if (arr1 NULL == NULL)
648,655c377,379
<       0;
<     BZ_S_INPUT;
<     BZ_M_RUNNING;
<     
<     
<         
<     
<     30;
---
>     0;
>   BZ_S_INPUT;
>   BZ_M_RUNNING;
657,660c381
<     ;
<     ;
<   zbits  NULL;
<     
---
>   30;
662,670c383,385
<     s
<    = 
<     0;
<     0;
<     
<   
<   
<   return BZ_OK;
< }
---
>   ;
>   ;
>   zbits NULL;
672c387,388
<  
---
>   s = 0;
>   0;
674c390,391
<  
---
>   return BZ_OK;
> }
680,681c397,398
<   if (  NULL)
<      
---
>   if (NULL)
> 
683,686c400
<   if (  NULL)
<      
<   if (strm  )
<      
---
>   if (NULL)
687a402
>     if (strm)
689,690c404,405
<   switch (s->mode)
<      ;
---
>       switch (s->mode)
>         ;
693,694c408,409
<  BZ2_bzCompressEnd(void) {
<   bz_stream * strm = 0;
---
> BZ2_bzCompressEnd(void) {
>   bz_stream *strm = 0;
696,710c411
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<   if (strm  )
<      
< 
<   if (arr1  NULL)
<     (arr1);
<   if (arr2  NULL)
<     (arr2);
<   if (ftab  NULL)
<     (ftab)
<   ();
---
>   if (NULL)
712a414,423
>   if (NULL)
> 
>     if (strm)
> 
>       if (arr1 NULL)
>         (arr1);
>   if (arr2 NULL)
>     (arr2);
>   if (ftab NULL)
>     (ftab)();
714c425
<    
---
>   ;
717c428
<  BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
---
> BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
722d432
<      
724,734c434,442
<   if (  NULL)
<      
<   if (      1)
<      
<   if (      4)
<      
< 
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
---
>     if (NULL)
> 
>       if (1)
> 
>         if (4)
> 
>           if (bzalloc NULL)
>             default_bzalloc;
>   if (bzfree NULL)
737,738c445,446
<   if (  NULL)
<      
---
>   if (NULL)
> 
740,754c448,454
<     s
<     
<     
<     
<     
<    = 
<     0;
<     0;
<     0;
<     small
<    = 
<   ll16  NULL;
<   tt  NULL;
<     
<     
---
>   s
> 
>       = 0;
>   0;
>   0;
>   small = ll16 NULL;
>   tt NULL;
759,761c459
<   
< 
< static  
---
> static
763,764c461,462
<  BZ2_bzDecompress(void) {
<   bz_stream * strm = 0;
---
>     BZ2_bzDecompress(void) {
>   bz_stream *strm = 0;
766,767c464,465
<   if (  NULL)
<      
---
>   if (NULL)
> 
769,772c467
<   if (  NULL)
<      
<   if (strm  )
<      
---
>   if (NULL)
774c469
<   
---
>     if (strm)
776c471
<     ( 6001)
---
>       (6001)
778c473
<    ;
---
>           ;
781,782c476,477
<  BZ2_bzDecompressEnd(void) {
<   bz_stream * strm = 0;
---
> BZ2_bzDecompressEnd(void) {
>   bz_stream *strm = 0;
784,785c479,480
<   if (  NULL)
<      
---
>   if (NULL)
> 
787,794c482,488
<   if (  NULL)
<      
<   if (strm  )
<      
< 
<   if (tt  NULL)
<     (tt);
<   if (ll16  NULL)
---
>   if (NULL)
> 
>     if (strm)
> 
>       if (tt NULL)
>         (tt);
>   if (ll16 NULL)
796c490
<   if (ll4  NULL)
---
>   if (ll4 NULL)
799,802c493,494
<   ();
<     ;
< 
<    
---
>         ();
>   ;
811c503
<    char writing;
---
>   char writing;
814c506
<    char initialisedOk
---
>   char initialisedOk
817,818c509,510
<  *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor) {
---
> *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor) {
820c512
<   bzFile *bzf  
---
>   bzFile *bzf
822c514
<   ;
---
>       ;
824,826c516
<    (    (       
<           workFactor          ))
<     ;
---
>   ((workFactor));
828,829c518
<    
<     
---
>   NULL
831,833c520,523
<     
<      NULL
<     
---
>       ;
>   False;
>   0;
>   f = bzf
835,842c525
<   ;
<     False;
<     0;
<     f
<    = 
<   bzf  
<     
<    = NULL;
---
>       = NULL;
845,848c528,529
<   
<    bzf  
<     ;
<    
---
> 
>   bzf;
854c535
<   bzFile *bzf  
---
>   bzFile *bzf
856,862c537,539
<   ;
<    (          0)
<     ;
<    ((bzf))
<     ;
<    
<     
---
>       ;
>   (0);
>   ((bzf));
864,865c541
<      
<     
---
>   bzf = buf;
867,868c543
<   bzf  
<    = buf;
---
>   bzf
870,875c545,546
<    
<     bzf  
<     
<     ;
<    (  BZ_RUN_OK)
<     ;
---
>       ;
>   (BZ_RUN_OK);
877,882c548,551
<   bzf < 
<   
<        bzf == 0;
<   
<    ;
< }
---
>   bzf <
> 
>           bzf ==
>       0;
884,886d552
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                               unsigned  *nbytes_in,
<                               unsigned  *nbytes_out) 
887a554
> }
888a556,557
> void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
>                       unsigned *nbytes_out);
891,894c560,561
<                                 unsigned  *nbytes_in_lo32,
<                                 unsigned  *nbytes_in_hi32,
<                                 unsigned  *nbytes_out_lo32,
<                                 unsigned  *nbytes_out_hi32) {
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
896c563
<   bzFile *bzf  ;
---
>   bzFile *bzf;
898,903c565,567
<    (  NULL)
<     ;
<    ((bzf))
<     ;
<    ferror
<     ;
---
>   (NULL);
>   ((bzf));
>   ferror;
905,925c569
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
< 
<   if (!    
< 
<        
< 
<        nbytes_in_lo32  )
<           bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf
---
>   if (NULL)
927,929c571,588
<   
<   ;
<   
---
>     if (NULL)
> 
>       if (NULL)
> 
>         if (NULL)
> 
>           if (!
> 
>               nbytes_in_lo32)
>             bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf
> 
>         ;
932,934c591,593
<  *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                                void *unused, int nUnused) {
<   bzFile *bzf  ;
---
> *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
>                 int nUnused) {
>   bzFile *bzf;
937c596
<   ;
---
>       ;
939,942c598
<    (    (       
<           verbosity           
<        !=   (      BZ_MAX_UNUSED)))
<     ;
---
>   ((verbosity != (BZ_MAX_UNUSED)));
944,945c600
<    
<     
---
>   NULL
947,949c602
<     
<      NULL
<     
---
>       ;
951c604,608
<   ;
---
>   False;
>   f = False;
>   bzf
> 
>       = NULL;
953,965c610
<     False;
<     f
<    = 
<     False;
<   bzf  
<     
<    = NULL;
< 
<   while (  0)
< 
<       
<      
<     
---
>   while (0)
967,968c612,613
<   bzf  ;
<   bzf  
---
>     bzf;
>   bzf
970,971c615
<    = 
<    malloc;
---
>       = malloc;
975c619
<   bzFile *bzf  
---
>   bzFile *bzf
977,979c621,622
<   ;
<    (  NULL)
<     ;
---
>       ;
>   (NULL);
981,982c624
<    (bzf)
<     ;
---
>   (bzf);
985,986c627,628
<   
<    ;
---
> 
>   ;
989c631
<  BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
---
> BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
992c634
<   bzFile *bzf  
---
>   bzFile *bzf
994c636
<   ;
---
>       ;
996,997c638
<    (          0)
<     ;
---
>   (0);
999,1003c640
<    (bzf)
<     ;
< 
<    (  0)
<     ;
---
>   (bzf);
1005,1006c642
<   bzf  
<    = buf;
---
>   (0);
1008c644
<    
---
>   bzf = buf;
1010c646
<     return 0;
---
>   return 0;
1013,1021c649,653
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused) {
<   bzFile *bzf  ;
<    (  NULL)
<     ;
<    (  BZ_STREAM_END)
<     ;
<    (      NULL)
<     
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
>   bzFile *bzf;
>   (NULL);
>   (BZ_STREAM_END);
>   (NULL)
1023,1025c655,657
<   ;
<     bzf;
<     bzf;
---
>       ;
>   bzf;
>   bzf;
1028,1030c660,661
<  BZ2_bzBuffToBuffCompress(char *dest, unsigned  *destLen,
<                                      char *source, unsigned  sourceLen,
<                                      int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
1035,1045c666,674
<   if (               
<                      
<         250)
<      
< 
<   if (  0)
<       
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     ;
---
>   if (
> 
>       250)
> 
>     if (0)
> 
>       bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
1047,1051d675
<   
<    source
<    = 
<     sourceLen
<    = 
1053c677,682
<     0;
---
>   source = sourceLen =
> 
>       0;
>   ;
> 
>   ;
1055,1056c684
<   
<    ;
---
> 
1058,1059d685
<   
<    ;
1062,1064c688,689
<  BZ2_bzBuffToBuffDecompress(char *dest, unsigned  *destLen,
<                                        char *source, unsigned  sourceLen,
<                                        int small) {
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen, int small) {
1069,1076c694,703
<   if (           
<       (      1)        )
<      
< 
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     ;
---
>   if ((1))
> 
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   ;
> 
>   source = sourceLen =
> 
>       0;
1078,1082d704
<   
<    source
<    = 
<     sourceLen
<    = 
1084d705
<     0;
1086,1087d706
<   
<    ;
1089,1090c708
<   
<   
---
> 
1093,1098d710
<   
<    {
<     
<      
<   } 
<     
1100,1102c712
< 
<   
<    
---
>   {}
1105c715
<   BZ2_bzlibVersion() {   }
---
> BZ2_bzlibVersion() {}
1107,1108c717
<   bzopen_or_bzdopen  
<                                  ;
---
> bzopen_or_bzdopen;
1110c719
<  *BZ2_bzopen(const char *path, const char *mode) {   }
---
> *BZ2_bzopen(const char *path, const char *mode){}
1112,1114c721
<  *BZ2_bzdopen(int fd, const char *mode) {
<    
< }
---
>     * BZ2_bzdopen(int fd, const char *mode) {}
1116c723
<  BZ2_bzread(BZFILE *b, void *buf) {
---
> BZ2_bzread(BZFILE *b, void *buf) {
1120,1123c727,730
<   
<    ;
<    
<     ;
---
> 
>   ;
> 
>   ;
1126c733
<  BZ2_bzwrite(BZFILE *b, void *buf) {
---
> BZ2_bzwrite(BZFILE *b, void *buf) {
1130c737
<   ;
---
>       ;
1132,1134c739,740
<      
<   
<      ;
---
> 
>     ;
1137c743
<  BZ2_bzflush( )   ; 
---
> BZ2_bzflush();
1139c745
<  BZ2_bzclose( void) {
---
> BZ2_bzclose(void) {
1144,1148c750
<   if (  
<      ((bzFile *)b))
<       
<   if (  BZ_OK)
<     
---
>   if (((bzFile *)b))
1150,1151c752,755
<    if (      stdout)
<     ;
---
>     if (BZ_OK)
> 
>       if (stdout)
>         ;
1154,1161c758,760
<   *bzerrorstrings = {           
<                                    
<                                     
<                                       
<                                   
<                                            
<                                            
<                                            "???"};
---
> *bzerrorstrings = {
> 
>     "???"};
1167,1171d765
<   
<    "OK";
< }
< 
<   
1173c767,768
<   
---
>   "OK";
> }
1178,1181d772
<  
<  
<  
< 
1183,1198d773
<  
<  
< 
<   
<   
<   
<   
<   
< 
<     
< 
<     
< 
<  
< 
<  
1202,1223c777
<  
<  
< 
<   
<   
<   
< 
<   
<   
<   
< 
<   
< 
<   
< 
< # 
< 
< 
< 
< #  
< 
<  
---
> #
1225c779
<   
---
> #
(95.5 %, 9210 bytes)
Termination check: size was 13535; now 9210
===< pass_ternary :: b >===
===< pass_balanced :: angles >===
1c1
< 
---
>  
34c34
< #include <stdio.h>
---
> #include 
779a780
>  
\ No newline at end of file
1c1
< 
---
>  
92c92
< #include <stdlib.h>
---
> #include 
779a780
>  
\ No newline at end of file
1c1
< 
---
>  
770c770
< #include <signal.h>
---
> #include 
779a780
>  
\ No newline at end of file
1c1
< 
---
>  
771c771
< #include <errno.h>
---
> #include 
779a780
>  
\ No newline at end of file
===< pass_clang :: param-to-local >===
39c39
< BZ2_bzCompressInit(bz_stream *, int, int t);
---
> BZ2_bzCompressInit(, int, int t);
346c346,347
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity) {
---
> BZ2_bzCompressInit( int blockSize100k, int verbosity) {
>   bz_stream * strm = 0;
39c39
< BZ2_bzCompressInit(bz_stream *, int, int t);
---
> BZ2_bzCompressInit(bz_stream *, , int t);
346c346,347
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity) {
---
> BZ2_bzCompressInit(bz_stream *strm,  int verbosity) {
>   int blockSize100k = 0;
39c39
< BZ2_bzCompressInit(bz_stream *, int, int t);
---
> BZ2_bzCompressInit(bz_stream *, int);
346c346,347
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity) {
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
>   int verbosity = 0;
41c41
< BZ2_bzCompress(bz_stream *t);
---
> BZ2_bzCompress(void);
393c393,394
< int BZ2_bzCompress(bz_stream *strm) {
---
> int BZ2_bzCompress(void) {
>   bz_stream * strm = 0;
(95.5 %, 9209 bytes)
41c41
< BZ2_bzCompress(bz_stream *t);
---
> BZ2_bzCompress(void);
394c394,395
< int BZ2_bzCompress(bz_stream *strm) {
---
> int BZ2_bzCompress(void) {
>   bz_stream * strm = 0;
45c45
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> BZ2_bzDecompressInit(, int t);
429c429,430
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
---
> BZ2_bzDecompressInit( int verbosity) {
>   bz_stream * strm = 0;
45c45
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> BZ2_bzDecompressInit(bz_stream *);
429c429,430
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
---
> BZ2_bzDecompressInit(bz_stream *strm) {
>   int verbosity = 0;
(95.5 %, 9214 bytes)
45c45
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> BZ2_bzDecompressInit(, int t);
430c430,431
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
---
> BZ2_bzDecompressInit( int verbosity) {
>   bz_stream * strm = 0;
45c45
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> BZ2_bzDecompressInit(bz_stream *);
430c430,431
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) {
---
> BZ2_bzDecompressInit(bz_stream *strm) {
>   int verbosity = 0;
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadClose(, BZFILE *);
620c620,621
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( BZFILE *b) {
>   int * bzerror = 0;
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadClose(int **);
620c620,621
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror) {
>   BZFILE * b = 0;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnused(, BZFILE *, void **, int *);
651c651,652
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused( BZFILE *b, void **unused, int *nUnused) {
>   int * bzerror = 0;
(95.5 %, 9213 bytes)
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadClose(, BZFILE *);
621c621,622
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose( BZFILE *b) {
>   int * bzerror = 0;
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadClose(int **);
621c621,622
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror) {
>   BZFILE * b = 0;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnused(, BZFILE *, void **, int *);
652c652,653
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused( BZFILE *b, void **unused, int *nUnused) {
>   int * bzerror = 0;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnused(int *, , void **, int *);
652c652,653
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror,  void **unused, int *nUnused) {
>   BZFILE * b = 0;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, , int *);
652c652,653
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,  int *nUnused) {
>   void ** unused = 0;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void ***);
652c652,653
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused) {
>   int * nUnused = 0;
61c61
< BZ2_bzRead(int *, BZFILE *, void *t);
---
> BZ2_bzRead(, BZFILE *, void *t);
634c634,635
< BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
---
> BZ2_bzRead( BZFILE *b, void *buf) {
>   int * bzerror = 0;
61c61
< BZ2_bzRead(int *, BZFILE *, void *t);
---
> BZ2_bzRead(int *, , void *t);
634c634,635
< BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
---
> BZ2_bzRead(int *bzerror,  void *buf) {
>   BZFILE * b = 0;
61c61
< BZ2_bzRead(int *, BZFILE *, void *t);
---
> BZ2_bzRead(int *, BZFILE *);
634c634,635
< BZ2_bzRead(int *bzerror, BZFILE *b, void *buf) {
---
> BZ2_bzRead(int *bzerror, BZFILE *b) {
>   void * buf = 0;
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(, BZFILE *, void *t);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite( BZFILE *b, void *buf) {
>   int * bzerror = 0;
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(int *, , void *t);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite(int *bzerror,  void *buf) {
>   BZFILE * b = 0;
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(int *, BZFILE *);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) {
>   void * buf = 0;
(95.5 %, 9211 bytes)
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(, BZFILE *, void *t);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite( BZFILE *b, void *buf) {
>   int * bzerror = 0;
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(int *, , void *t);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite(int *bzerror,  void *buf) {
>   BZFILE * b = 0;
65c65
< void BZ2_bzWrite(int *, BZFILE *, void *t);
---
> void BZ2_bzWrite(int *, BZFILE *);
535c535,536
< void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) {
>   void * buf = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, BZFILE *, int, unsigned *, unsigned *,
562c562
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( BZFILE *b, int abandon,
564a565
>   int * bzerror = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, , int, unsigned *, unsigned *,
562c562
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
564a565
>   BZFILE * b = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, , unsigned *, unsigned *,
562c562
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, 
564a565
>   int abandon = 0;
(95.5 %, 9209 bytes)
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, BZFILE *, int, unsigned *, unsigned *,
563c563
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64( BZFILE *b, int abandon,
565a566
>   int * bzerror = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, , int, unsigned *, unsigned *,
563c563
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
565a566
>   BZFILE * b = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, , unsigned *, unsigned *,
563c563
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, 
565a566
>   int abandon = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int, , unsigned *,
564c564
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                          unsigned *nbytes_in_hi32,
565a566
>   unsigned int * nbytes_in_lo32 = 0;
69c69
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, ,
564c564
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, 
565a566
>   unsigned int * nbytes_in_hi32 = 0;
70c70
<                         unsigned *, unsigned *);
---
>                         , unsigned *);
565c565,566
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
>                          unsigned *nbytes_out_hi32) {
>   unsigned int * nbytes_out_lo32 = 0;
70c70
<                         unsigned *, unsigned *);
---
>                         unsigned **);
565c565,566
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
>                         unsigned *nbytes_out_lo32) {
>   unsigned int * nbytes_out_hi32 = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(, unsigned *, char *, unsigned, int, int t);
665c665
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress( unsigned *destLen, char *source,
666a667
>   char * dest = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, , char *, unsigned, int, int t);
665c665
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest,  char *source,
666a667
>   unsigned int * destLen = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, , unsigned, int, int t);
665c665
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, 
666a667
>   char * source = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , int, int t);
666c666,667
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                           int blockSize100k, int verbosity) {
>   unsigned int sourceLen = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, , int t);
666c666,667
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen,  int verbosity) {
>   int blockSize100k = 0;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
666c666,667
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k) {
>   int verbosity = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(, unsigned *, char *, unsigned, int t);
693c693
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress( unsigned *destLen, char *source,
694a695
>   char * dest = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, , char *, unsigned, int t);
693c693
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  char *source,
694a695
>   unsigned int * destLen = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, , unsigned, int t);
693c693
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, 
694a695
>   char * source = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int t);
694c694,695
<                            unsigned sourceLen, int small) {
---
>                             int small) {
>   unsigned int sourceLen = 0;
(95.5 %, 9208 bytes)
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(, unsigned *, char *, unsigned, int t);
694c694
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress( unsigned *destLen, char *source,
695a696
>   char * dest = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, , char *, unsigned, int t);
694c694
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  char *source,
695a696
>   unsigned int * destLen = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, , unsigned, int t);
694c694
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, 
695a696
>   char * source = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int t);
695c695,696
<                            unsigned sourceLen, int small) {
---
>                             int small) {
>   unsigned int sourceLen = 0;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t);
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);
695c695,696
<                            unsigned sourceLen, int small) {
---
>                            unsigned sourceLen) {
>   int small = 0;
78c78
< *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopen(, const char *);
725c725,726
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen( const char *mode){
>     const char * path = 0;}
78c78
< *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopen(const char **);
725c725,726
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path){
>     const char * mode = 0;}
80c80
< *BZ2_bzdopen(int, const char *);
---
> *BZ2_bzdopen(, const char *);
727c727,728
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen( const char *mode) {
>     int fd = 0;}
80c80
< *BZ2_bzdopen(int, const char *);
---
> *BZ2_bzdopen(int*);
727c727,728
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int fd) {
>     const char * mode = 0;}
(95.5 %, 9207 bytes)
78c78
< *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopen(, const char *);
726c726,727
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen( const char *mode){
>     const char * path = 0;}
78c78
< *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopen(const char **);
726c726,727
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path){
>     const char * mode = 0;}
80c80
< *BZ2_bzdopen(int, const char *);
---
> *BZ2_bzdopen(, const char *);
728c728,729
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen( const char *mode) {
>     int fd = 0;}
80c80
< *BZ2_bzdopen(int, const char *);
---
> *BZ2_bzdopen(int*);
728c728,729
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int fd) {
>     const char * mode = 0;}
82c82
< BZ2_bzread(BZFILE *, void *t);
---
> BZ2_bzread(, void *t);
730c730,731
< BZ2_bzread(BZFILE *b, void *buf) {
---
> BZ2_bzread( void *buf) {
>   BZFILE * b = 0;
82c82
< BZ2_bzread(BZFILE *, void *t);
---
> BZ2_bzread(BZFILE *);
730c730,731
< BZ2_bzread(BZFILE *b, void *buf) {
---
> BZ2_bzread(BZFILE *b) {
>   void * buf = 0;
84c84
< BZ2_bzwrite(BZFILE *, void *t);
---
> BZ2_bzwrite(, void *t);
740c740,741
< BZ2_bzwrite(BZFILE *b, void *buf) {
---
> BZ2_bzwrite( void *buf) {
>   BZFILE * b = 0;
84c84
< BZ2_bzwrite(BZFILE *, void *t);
---
> BZ2_bzwrite(BZFILE *);
740c740,741
< BZ2_bzwrite(BZFILE *b, void *buf) {
---
> BZ2_bzwrite(BZFILE *b) {
>   void * buf = 0;
(95.5 %, 9205 bytes)
84c84
< BZ2_bzwrite(BZFILE *, void *t);
---
> BZ2_bzwrite(, void *t);
741c741,742
< BZ2_bzwrite(BZFILE *b, void *buf) {
---
> BZ2_bzwrite( void *buf) {
>   BZFILE * b = 0;
84c84
< BZ2_bzwrite(BZFILE *, void *t);
---
> BZ2_bzwrite(BZFILE *);
741c741,742
< BZ2_bzwrite(BZFILE *b, void *buf) {
---
> BZ2_bzwrite(BZFILE *b) {
>   void * buf = 0;
90c90
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerror(, int *);
770c770,771
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( int *errnum) {
>   BZFILE * b = 0;
90c90
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerror(BZFILE **);
770c770,771
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b) {
>   int * errnum = 0;
(95.5 %, 9203 bytes)
90c90
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerror(, int *);
771c771,772
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror( int *errnum) {
>   BZFILE * b = 0;
90c90
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerror(BZFILE **);
771c771,772
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b) {
>   int * errnum = 0;
===< pass_clang :: union-to-struct >===
===< pass_clang :: reduce-pointer-level >===
29c29
<   void (*bzalloc)();
---
>   void (bzalloc)();
30c30
<   void (*bzfree)(void);
---
>   void (bzfree)(void);
49c49
< *strm;
---
> strm;
76c76
< const char *BZ2_bzlibVersionvoid;
---
> const char BZ2_bzlibVersionvoid;
(95.5 %, 9202 bytes)
76c76
< const char *BZ2_bzlibVersionvoid;
---
> const char BZ2_bzlibVersionvoid;
141c141
<   UInt32 *arr1;
---
>   UInt32 arr1;
(95.5 %, 9201 bytes)
141c141
<   UInt32 *arr1;
---
>   UInt32 arr1;
142c142
<   UInt32 *arr2;
---
>   UInt32 arr2;
(95.5 %, 9200 bytes)
142c142
<   UInt32 *arr2;
---
>   UInt32 arr2;
283c283
<   UInt32 *ptr;
---
>   UInt32 ptr;
(95.5 %, 9199 bytes)
283c283
<   UInt32 *ptr;
---
>   UInt32 ptr;
284c284
<   char *block = block;
---
>   char block = &*block;
302c302
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
---
>                          .unseqToSeq[&block[generateMTFValues_s.nblock]]
308c308
<         unsigned char *ryy_j;
---
>         unsigned char ryy_j;
(95.5 %, 9198 bytes)
284c284
<   char *block = block;
---
>   char block = &*block;
302c302
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
---
>                          .unseqToSeq[&block[generateMTFValues_s.nblock]]
308c308
<         unsigned char *ryy_j;
---
>         unsigned char ryy_j;
350c350
<   EState *s;
---
>   EState s;
388c388
<   s = 0;
---
>   s = *0;
395c395
<   bz_stream * strm = 0;
---
>   bz_stream  strm ;
398c398
<   EState *s;
---
>   EState s;
(95.5 %, 9197 bytes)
350c350
<   EState *s;
---
>   EState s;
388c388
<   s = 0;
---
>   s = *0;
395c395
<   bz_stream * strm = 0;
---
>   bz_stream  strm ;
398c398
<   EState *s;
---
>   EState s;
411c411
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
412c412
<   EState *s;
---
>   EState s;
433c433
<   DState *s;
---
>   DState s;
453c453
<       = 0;
---
>       = *0;
465c465
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
466c466
<   DState *s;
---
>   DState s;
(95.5 %, 9196 bytes)
433c433
<   DState *s;
---
>   DState s;
453c453
<       = 0;
---
>       = *0;
465c465
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
466c466
<   DState *s;
---
>   DState s;
480c480
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
481c481
<   DState *s;
---
>   DState s;
(95.5 %, 9195 bytes)
480c480
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
481c481
<   DState *s;
---
>   DState s;
503c503
<   FILE *handle;
---
>   FILE handle;
(95.5 %, 9194 bytes)
503c503
<   FILE *handle;
---
>   FILE handle;
539c539
<   bzFile *bzf
---
>   bzFile bzf
543c543
<   ((bzf));
---
>   ((&bzf));
545c545
<   bzf = buf;
---
>   bzf = *buf;
547c547
<   bzf
---
>   &bzf
552c552
<   bzf <
---
>   &bzf <
554c554
<           bzf ==
---
>           &bzf ==
567c567
<   bzFile *bzf;
---
>   bzFile bzf;
570c570
<   ((bzf));
---
>   ((&bzf));
(95.5 %, 9193 bytes)
539c539
<   bzFile *bzf
---
>   bzFile bzf
543c543
<   ((bzf));
---
>   ((&bzf));
545c545
<   bzf = buf;
---
>   bzf = *buf;
547c547
<   bzf
---
>   &bzf
552c552
<   bzf <
---
>   &bzf <
554c554
<           bzf ==
---
>           &bzf ==
567c567
<   bzFile *bzf;
---
>   bzFile bzf;
570c570
<   ((bzf));
---
>   ((&bzf));
623c623
<   bzFile *bzf
---
>   bzFile bzf
628c628
<   (bzf);
---
>   (&bzf);
630c630
<   bzf;
---
>   &bzf;
(95.5 %, 9193 bytes)
623c623
<   bzFile *bzf
---
>   bzFile bzf
628c628
<   (bzf);
---
>   (&bzf);
630c630
<   bzf;
---
>   &bzf;
639c639
<   bzFile *bzf
---
>   bzFile bzf
645c645
<   (bzf);
---
>   (&bzf);
649c649
<   bzf = buf;
---
>   bzf = *buf;
655c655
<   bzFile *bzf;
---
>   bzFile bzf;
661,662c661,662
<   bzf;
<   bzf;
---
>   &bzf;
>   &bzf;
(95.5 %, 9194 bytes)
639c639
<   bzFile *bzf
---
>   bzFile bzf
645c645
<   (bzf);
---
>   (&bzf);
649c649
<   bzf = buf;
---
>   bzf = *buf;
655c655
<   bzFile *bzf;
---
>   bzFile bzf;
661,662c661,662
<   bzf;
<   bzf;
---
>   &bzf;
>   &bzf;
767,769c767
< *bzerrorstrings = {
< 
<     "???"};
---
> bzerrorstrings = {a};
(95.5 %, 9195 bytes)
767,769c767
< *bzerrorstrings = {
< 
<     "???"};
---
> bzerrorstrings = {a};
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
372c372
<   BZALLOC();
---
>   ;
373c373
<   BZALLOC((BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   (0,0);
(95.5 %, 9186 bytes)
373c373
<   BZALLOC((BZ_N_OVERSHOOT) * sizeof(UInt32));
---
>   (0,0);
374c374
<   BZALLOC();
---
>   ;
(95.5 %, 9149 bytes)
374c374
<   BZALLOC();
---
>   ;
(95.5 %, 9140 bytes)
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_unifdef :: 0 >===
782,785d781
< #if BZ_UNIX
< 
< #endif
< 
782,785d781
< #if BZ_UNIX
< 
< #endif
< 
(95.6 %, 9119 bytes)
Termination check: size was 9210; now 9119
===< pass_balanced :: curly >===
1c1
< 
---
>  
16,32c16
< typedef struct {
<   char next_in;
<   int avail_in;
<   int total_in_lo32;
<   int total_in_hi32;
< 
<   char next_out;
<   int avail_out;
<   int total_out_lo32;
<   int total_out_hi32;
< 
<   void *state;
< 
<   void (*bzalloc)();
<   void (*bzfree)(void);
<   void *opaque
< } bz_stream;
---
> typedef struct  bz_stream;
784a769
>  
\ No newline at end of file
1c1
< 
---
>  
132,177c132
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 mode;
<   Int32 state
< 
<       ;
< 
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
< 
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
< 
<   Int32 workFactor
< 
<       ;
< 
<   Int32 nblock;
<   Int32 nblockMAX
< 
<       ;
< 
<   Int32 nInUse;
<   char inUse[256];
<   char unseqToSeq[256]
< 
<       ;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
< 
<   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
< 
< } EState
---
> typedef struct  EState
784a740
>  
\ No newline at end of file
1c1
< 
---
>  
186,229c186
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 state
< 
<       ;
< 
<   ;
< 
<   UInt32 bsBuff;
<   Int32 bsLive
< 
<       ;
<   char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity
< 
<       ;
<   Int32;
<   ;
<   Int32;
<   Int32;
< 
<   UInt32 tt;
< 
<   short ll16;
<   char ll4
< 
<       ;
<   UInt32 calculatedCombinedCRC
< 
<       ;
<   char;
<   char;
<   char;
< 
<   char;
<   Int32
<       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
< 
<       ;
< 
< } DState;
---
> typedef struct  DState;
784a742
>  
\ No newline at end of file
1c1
< 
---
>  
263,273c263
< makeMaps_e() {
<   Int32 i
< 
<       = 0;
< 
<   for (;;) {
<     makeMaps_e_s.inUse
< 
<         [0];
<   };
< }
---
> makeMaps_e() 
784a775
>  
\ No newline at end of file
1c1
< 
---
>  
268,272c268
<   for (;;) {
<     makeMaps_e_s.inUse
< 
<         [0];
<   };
---
>   for (;;) ;
784a781
>  
\ No newline at end of file
1c1
< 
---
>  
276,326c276
< generateMTFValues() {
<   unsigned char yy;
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
< 
<   UInt32 ptr;
<   char *block = block;
<   short mtfv = (mtfv)
< 
<       = 0;
< 
<   for (;;)
<     generateMTFValues_s.mtfFreq[0]
< 
<         ;
< 
<   for (;;)
< 
<     for (;;) {
<       char ll_i
< 
<           =
< 
<               ll_i = generateMTFValues_s
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
< 
<                      > 0;
< 
<       {
<         char rtmp;
<         unsigned char ryy_j;
<         char rll_i
< 
<             = ll_i;
<         (0)
< 
<             ;
< 
<         ;
< 
<         generateMTFValues_s.mtfFreq[1];
<       }
<     }
< 
<     ;
<   generateMTFValues_s.mtfFreq;
< 
<   0;
< }
---
> generateMTFValues() 
784a735
>  
\ No newline at end of file
1c1
< 
---
>  
296,320c296
<     for (;;) {
<       char ll_i
< 
<           =
< 
<               ll_i = generateMTFValues_s
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
< 
<                      > 0;
< 
<       {
<         char rtmp;
<         unsigned char ryy_j;
<         char rll_i
< 
<             = ll_i;
<         (0)
< 
<             ;
< 
<         ;
< 
<         generateMTFValues_s.mtfFreq[1];
<       }
<     }
---
>     for (;;) 
784a761
>  
\ No newline at end of file
(95.6 %, 9079 bytes)
272,322c272
< generateMTFValues() {
<   unsigned char yy;
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
< 
<   UInt32 ptr;
<   char *block = block;
<   short mtfv = (mtfv)
< 
<       = 0;
< 
<   for (;;)
<     generateMTFValues_s.mtfFreq[0]
< 
<         ;
< 
<   for (;;)
< 
<     for (;;) {
<       char ll_i
< 
<           =
< 
<               ll_i = generateMTFValues_s
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
< 
<                      > 0;
< 
<       {
<         char rtmp;
<         unsigned char ryy_j;
<         char rll_i
< 
<             = ll_i;
<         (0)
< 
<             ;
< 
<         ;
< 
<         generateMTFValues_s.mtfFreq[1];
<       }
<     }
< 
<     ;
<   generateMTFValues_s.mtfFreq;
< 
<   0;
< }
---
> generateMTFValues() 
292,316c292
<     for (;;) {
<       char ll_i
< 
<           =
< 
<               ll_i = generateMTFValues_s
<                          .unseqToSeq[block[generateMTFValues_s.nblock]]
< 
<                      > 0;
< 
<       {
<         char rtmp;
<         unsigned char ryy_j;
<         char rll_i
< 
<             = ll_i;
<         (0)
< 
<             ;
< 
<         ;
< 
<         generateMTFValues_s.mtfFreq[1];
<       }
<     }
---
>     for (;;) 
302,315c302
<       {
<         char rtmp;
<         unsigned char ryy_j;
<         char rll_i
< 
<             = ll_i;
<         (0)
< 
<             ;
< 
<         ;
< 
<         generateMTFValues_s.mtfFreq[1];
<       }
---
>       
(95.7 %, 8718 bytes)
318,364c318
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
<   int verbosity = 0;
<   int workFactor = 0;
<   Int32 n;
<   EState *s;
< 
<   if (0)
< 
<     if (250)
< 
<       if (0)
< 
<         if (bzalloc NULL)
<           default_bzalloc;
<   if (bzfree NULL)
< 
<     BZALLOC();
<   if (NULL)
< 
<     *
< 
<         NULL;
<   arr2 NULL;
<   ftab NULL
< 
<       *blockSize100k;
<   ;
<   (0,0);
<   ;
< 
<   if (arr1 NULL == NULL)
< 
<     0;
<   BZ_S_INPUT;
<   BZ_M_RUNNING;
< 
<   30;
< 
<   ;
<   ;
<   zbits NULL;
< 
<   s = 0;
<   0;
< 
<   return BZ_OK;
< }
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) 
366,380c366
< int BZ2_bzCompress(void) {
<   bz_stream * strm = 0;
<   int action = 0;
< 
<   EState *s;
<   if (NULL)
< 
<     ;
<   if (NULL)
< 
<     if (strm)
< 
<       switch (s->mode)
<         ;
< }
---
> int BZ2_bzCompress(void) 
382,400c382
< BZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
<   EState s;
<   if (NULL)
< 
<     ;
<   if (NULL)
< 
<     if (strm)
< 
<       if (arr1 NULL)
<         (arr1);
<   if (arr2 NULL)
<     (arr2);
<   if (ftab NULL)
<     (ftab)();
< 
<   ;
< }
---
> BZ2_bzCompressEnd(void) 
402,432c402
< BZ2_bzDecompressInit(bz_stream *strm) {
<   int verbosity = 0;
<   int small = 0;
<   DState *s;
< 
<   if (0)
< 
<     if (NULL)
< 
<       if (1)
< 
<         if (4)
< 
<           if (bzalloc NULL)
<             default_bzalloc;
<   if (bzfree NULL)
< 
<     BZALLOC();
<   if (NULL)
< 
<     *strm;
<   s
< 
<       = 0;
<   0;
<   0;
<   small = ll16 NULL;
<   tt NULL;
< 
<   return BZ_OK;
< }
---
> BZ2_bzDecompressInit(bz_stream *strm) 
436,449c436
<     BZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
<   DState s;
<   if (NULL)
< 
<     ;
<   if (NULL)
< 
<     if (strm)
< 
<       (6001)
< 
<           ;
< }
---
>     BZ2_bzDecompress(void) 
451,470c451
< BZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
<   DState s;
<   if (NULL)
< 
<     ;
<   if (NULL)
< 
<     if (strm)
< 
<       if (tt NULL)
<         (tt);
<   if (ll16 NULL)
<     (ll16);
<   if (ll4 NULL)
<     (ll4)
< 
<         ();
<   ;
< }
---
> BZ2_bzDecompressEnd(void) 
474,482c474
< typedef struct {
<   FILE handle;
<   char buf;
<   Int32 bufN;
<   char writing;
<   bz_stream strm;
<   Int32 lastErr;
<   char initialisedOk
< } bzFile;
---
> typedef struct  bzFile;
485,505c485
<                  int workFactor) {
<   Int32 ret;
<   bzFile *bzf
< 
<       ;
< 
<   ((workFactor));
< 
<   NULL
< 
<       ;
<   False;
<   0;
<   f = bzf
< 
<       = NULL;
< 
<   0;
< 
<   bzf;
< }
---
>                  int workFactor) 
507,530c507
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
<   Int32 ret;
<   bzFile *bzf
< 
<       ;
<   (0);
<   ((bzf));
< 
<   bzf = buf;
< 
<   bzf
< 
<       ;
<   (BZ_RUN_OK);
< 
<   bzf <
< 
<           bzf ==
<       0;
< 
<   ;
< }
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) 
537,565c537
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
< 
<   bzFile bzf;
< 
<   (NULL);
<   ((&bzf));
<   ferror;
< 
<   if (NULL)
< 
<     if (NULL)
< 
<       if (NULL)
< 
<         if (NULL)
< 
<           if (!
< 
<               nbytes_in_lo32)
<             bzf;
<   if (NULL)
<     bzf;
<   if (NULL)
<     bzf;
<   if (NULL)
<     bzf
< 
<         ;
< }
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) 
568,592c568
<                 int nUnused) {
<   bzFile *bzf;
<   int ret
< 
<       ;
< 
<   ((verbosity != (BZ_MAX_UNUSED)));
< 
<   NULL
< 
<       ;
< 
<   False;
<   f = False;
<   bzf
< 
<       = NULL;
< 
<   while (0)
< 
<     bzf;
<   bzf
< 
<       = malloc;
< }
---
>                 int nUnused) 
594,605c594
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile bzf
< 
<       ;
<   (NULL);
< 
<   (&bzf);
< 
<   &bzf;
< 
<   ;
< }
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
607,624c607
< BZ2_bzRead(int *bzerror, BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
< 
<   bzFile *bzf
< 
<       ;
< 
<   (0);
< 
<   (bzf);
< 
<   (0);
< 
<   bzf = buf;
< 
<   return 0;
< }
---
> BZ2_bzRead(int *bzerror, BZFILE *b) 
626,635c626
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
<   bzFile bzf;
<   (NULL);
<   (BZ_STREAM_END);
<   (NULL)
< 
<       ;
<   &bzf;
<   &bzf;
< }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) 
638,664c638
<                          unsigned sourceLen, int blockSize100k) {
<   int verbosity = 0;
<   int workFactor = 0;
<   bz_stream strm;
<   int ret;
< 
<   if (
< 
<       250)
< 
<     if (0)
< 
<       bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
< 
<   source = sourceLen =
< 
<       0;
<   ;
< 
<   ;
<   ;
< 
<   ;
< }
---
>                          unsigned sourceLen, int blockSize100k) 
667,692c667
<                            unsigned sourceLen) {
<   int small = 0;
<   int verbosity = 0;
<   bz_stream strm;
<   int ret;
< 
<   if ((1))
< 
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
< 
<   source = sourceLen =
< 
<       0;
<   ;
< 
<   ;
<   ;
< 
< output_overflow_or_eof:
<   0;
< 
<   {}
< }
---
>                            unsigned sourceLen) 
691c691
<   {}
---
>   
694c694
< BZ2_bzlibVersion() {}
---
> BZ2_bzlibVersion() 
698c698
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path, const char *mode)
700c700
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int fd, const char *mode) 
702,711c702
< BZ2_bzread(BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
<   int bzerr, nread;
<   ((bzFile *)b);
< 
<   ;
< 
<   ;
< }
---
> BZ2_bzread(BZFILE *b) 
713,722c713
< BZ2_bzwrite(BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
<   int bzerr
< 
<       ;
<   if (bzerr == BZ_OK)
< 
<     ;
< }
---
> BZ2_bzwrite(BZFILE *b) 
(95.7 %, 8716 bytes)
694c694
< BZ2_bzlibVersion() {}
---
> BZ2_bzlibVersion() 
698c698
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path, const char *mode)
700c700
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int fd, const char *mode) 
702,711c702
< BZ2_bzread(BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
<   int bzerr, nread;
<   ((bzFile *)b);
< 
<   ;
< 
<   ;
< }
---
> BZ2_bzread(BZFILE *b) 
713,722c713
< BZ2_bzwrite(BZFILE *b) {
<   void * buf = 0;
<   int len = 0;
<   int bzerr
< 
<       ;
<   if (bzerr == BZ_OK)
< 
<     ;
< }
---
> BZ2_bzwrite(BZFILE *b) 
726,737c726
< BZ2_bzclose(void) {
<   int b = 0;
<   int bzerr;
<   FILE *fp = ((bzFile *)b);
< 
<   if (((bzFile *)b))
< 
<     if (BZ_OK)
< 
<       if (stdout)
<         ;
< }
---
> BZ2_bzclose(void) 
739,741c739
< *bzerrorstrings = {
< 
<     "???"};
---
> *bzerrorstrings = ;
743,749c743
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = ((bzFile *)b);
< 
<   ((bzFile *)b);
< 
<   "OK";
< }
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
===< pass_balanced :: parens-only >===
29c29
<   void (*bzalloc)();
---
>   void *bzalloc();
29c29
<   void (*bzalloc)();
---
>   void (*bzalloc);
30c30
<   void (*bzfree)(void);
---
>   void *bzfree(void);
30c30
<   void (*bzfree)(void);
---
>   void (*bzfree)void;
39c39
< BZ2_bzCompressInit(bz_stream *, int);
---
> BZ2_bzCompressInitbz_stream *, int;
41c41
< BZ2_bzCompress(void);
---
> BZ2_bzCompressvoid;
(95.7 %, 8714 bytes)
30c30
<   void (*bzfree)(void);
---
>   void *bzfree(void);
30c30
<   void (*bzfree)(void);
---
>   void (*bzfree)void;
39c39
< BZ2_bzCompressInit(bz_stream *, int);
---
> BZ2_bzCompressInitbz_stream *, int;
41c41
< BZ2_bzCompress(void);
---
> BZ2_bzCompressvoid;
45c45
< BZ2_bzDecompressInit(bz_stream *);
---
> BZ2_bzDecompressInitbz_stream *;
55c55
< *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ2_bzReadOpenint *, FILE *, int, int, void *, int;
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadCloseint *, BZFILE *;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnusedint *, BZFILE *, void **, int *;
61c61
< BZ2_bzRead(int *, BZFILE *);
---
> BZ2_bzReadint *, BZFILE *;
63c63
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ2_bzWriteOpenint *, FILE *, int, int, int;
65c65
< void BZ2_bzWrite(int *, BZFILE *);
---
> void BZ2_bzWriteint *, BZFILE *;
67c67
< void BZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
---
> void BZ2_bzWriteCloseint *, BZFILE *, int, unsigned *, unsigned *;
(95.7 %, 8712 bytes)
45c45
< BZ2_bzDecompressInit(bz_stream *);
---
> BZ2_bzDecompressInitbz_stream *;
55c55
< *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ2_bzReadOpenint *, FILE *, int, int, void *, int;
57c57
< void BZ2_bzReadClose(int *, BZFILE *);
---
> void BZ2_bzReadCloseint *, BZFILE *;
59c59
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> void BZ2_bzReadGetUnusedint *, BZFILE *, void **, int *;
61c61
< BZ2_bzRead(int *, BZFILE *);
---
> BZ2_bzReadint *, BZFILE *;
63c63
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ2_bzWriteOpenint *, FILE *, int, int, int;
65c65
< void BZ2_bzWrite(int *, BZFILE *);
---
> void BZ2_bzWriteint *, BZFILE *;
67c67
< void BZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
---
> void BZ2_bzWriteCloseint *, BZFILE *, int, unsigned *, unsigned *;
69,70c69,70
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
<                         unsigned *, unsigned *);
---
> void BZ2_bzWriteClose64int *, BZFILE *, int, unsigned *, unsigned *,
>                         unsigned *, unsigned *;
72c72
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
> BZ2_bzBuffToBuffCompresschar *, unsigned *, char *, unsigned, int;
74c74
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);
---
> BZ2_bzBuffToBuffDecompresschar *, unsigned *, char *, unsigned;
78c78
< *BZ2_bzopen(const char *, const char *);
---
> *BZ2_bzopenconst char *, const char *;
80c80
< *BZ2_bzdopen(int, const char *);
---
> *BZ2_bzdopenint, const char *;
82c82
< BZ2_bzread(BZFILE *);
---
> BZ2_bzreadBZFILE *;
84c84
< BZ2_bzwrite(BZFILE *);
---
> BZ2_bzwriteBZFILE *;
90c90
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerrorBZFILE *, int *;
115c115
< #define BZ_MAX_SELECTORS ((BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (BZ_G_SIZE)
115c115
< #define BZ_MAX_SELECTORS ((BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (BZ_G_SIZE)
(95.7 %, 8710 bytes)
115c115
< #define BZ_MAX_SELECTORS (BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS BZ_G_SIZE
130c130
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2
239c239
< void BZ2_decompress();
---
> void BZ2_decompress;
(95.8 %, 8708 bytes)
130c130
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2
239c239
< void BZ2_decompress();
---
> void BZ2_decompress;
263c263
< makeMaps_e() {
---
> makeMaps_e {
268c268
<   for (;;) ;
---
>   for ;; ;
272c272
< generateMTFValues() {
---
> generateMTFValues {
281c281
<   short mtfv = (mtfv)
---
>   short mtfv = mtfv
(95.8 %, 8706 bytes)
239c239
< void BZ2_decompress();
---
> void BZ2_decompress;
263c263
< makeMaps_e() {
---
> makeMaps_e {
268c268
<   for (;;) ;
---
>   for ;; ;
272c272
< generateMTFValues() {
---
> generateMTFValues {
281c281
<   short mtfv = (mtfv)
---
>   short mtfv = mtfv
285c285
<   for (;;)
---
>   for ;;
290c290
<   for (;;)
---
>   for ;;
292c292
<     for (;;) 
---
>     for ;; 
312c312
<     ();
---
>     ;
(95.8 %, 8704 bytes)
285c285
<   for (;;)
---
>   for ;;
290c290
<   for (;;)
---
>   for ;;
292c292
<     for (;;) 
---
>     for ;; 
312c312
<     ();
---
>     ;
318c318
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
---
> BZ2_bzCompressInitbz_stream *strm, int blockSize100k {
324c324
<   if (0)
---
>   if 0
326c326
<     if (250)
---
>     if 250
328c328
<       if (0)
---
>       if 0
330c330
<         if (bzalloc NULL)
---
>         if bzalloc NULL
332c332
<   if (bzfree NULL)
---
>   if bzfree NULL
334c334
<     BZALLOC();
---
>     BZALLOC;
335c335
<   if (NULL)
---
>   if NULL
(95.8 %, 8702 bytes)
318c318
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
---
> BZ2_bzCompressInitbz_stream *strm, int blockSize100k {
324c324
<   if (0)
---
>   if 0
326c326
<     if (250)
---
>     if 250
328c328
<       if (0)
---
>       if 0
330c330
<         if (bzalloc NULL)
---
>         if bzalloc NULL
332c332
<   if (bzfree NULL)
---
>   if bzfree NULL
334c334
<     BZALLOC();
---
>     BZALLOC;
335c335
<   if (NULL)
---
>   if NULL
345c345
<   (0,0);
---
>   0,0;
(95.8 %, 8700 bytes)
345c345
<   (0,0);
---
>   0,0;
348c348
<   if (arr1 NULL == NULL)
---
>   if arr1 NULL == NULL
366c366
< int BZ2_bzCompress(void) {
---
> int BZ2_bzCompressvoid {
371c371
<   if (NULL)
---
>   if NULL
(95.8 %, 8698 bytes)
348c348
<   if (arr1 NULL == NULL)
---
>   if arr1 NULL == NULL
366c366
< int BZ2_bzCompress(void) {
---
> int BZ2_bzCompressvoid {
371c371
<   if (NULL)
---
>   if NULL
374c374
<   if (NULL)
---
>   if NULL
376c376
<     if (strm)
---
>     if strm
(95.8 %, 8696 bytes)
374c374
<   if (NULL)
---
>   if NULL
376c376
<     if (strm)
---
>     if strm
378c378
<       switch (s->mode)
---
>       switch s->mode
382c382
< BZ2_bzCompressEnd(void) {
---
> BZ2_bzCompressEndvoid {
385c385
<   if (NULL)
---
>   if NULL
(95.8 %, 8694 bytes)
376c376
<     if (strm)
---
>     if strm
378c378
<       switch (s->mode)
---
>       switch s->mode
382c382
< BZ2_bzCompressEnd(void) {
---
> BZ2_bzCompressEndvoid {
385c385
<   if (NULL)
---
>   if NULL
388c388
<   if (NULL)
---
>   if NULL
(95.8 %, 8692 bytes)
388c388
<   if (NULL)
---
>   if NULL
390c390
<     if (strm)
---
>     if strm
392c392
<       if (arr1 NULL)
---
>       if arr1 NULL
393c393
<         (arr1);
---
>         arr1;
(95.8 %, 8690 bytes)
390c390
<     if (strm)
---
>     if strm
392c392
<       if (arr1 NULL)
---
>       if arr1 NULL
393c393
<         (arr1);
---
>         arr1;
394c394
<   if (arr2 NULL)
---
>   if arr2 NULL
395c395
<     (arr2);
---
>     arr2;
(95.8 %, 8688 bytes)
394c394
<   if (arr2 NULL)
---
>   if arr2 NULL
395c395
<     (arr2);
---
>     arr2;
396c396
<   if (ftab NULL)
---
>   if ftab NULL
397c397
<     (ftab)();
---
>     ftab();
(95.8 %, 8686 bytes)
396c396
<   if (ftab NULL)
---
>   if ftab NULL
397c397
<     (ftab)();
---
>     ftab();
397c397
<     (ftab)();
---
>     (ftab);
(95.8 %, 8684 bytes)
397c397
<     ftab();
---
>     ftab;
402c402
< BZ2_bzDecompressInit(bz_stream *strm) {
---
> BZ2_bzDecompressInitbz_stream *strm {
407c407
<   if (0)
---
>   if 0
409c409
<     if (NULL)
---
>     if NULL
(95.8 %, 8682 bytes)
402c402
< BZ2_bzDecompressInit(bz_stream *strm) {
---
> BZ2_bzDecompressInitbz_stream *strm {
407c407
<   if (0)
---
>   if 0
409c409
<     if (NULL)
---
>     if NULL
411c411
<       if (1)
---
>       if 1
413c413
<         if (4)
---
>         if 4
415c415
<           if (bzalloc NULL)
---
>           if bzalloc NULL
417c417
<   if (bzfree NULL)
---
>   if bzfree NULL
419c419
<     BZALLOC();
---
>     BZALLOC;
420c420
<   if (NULL)
---
>   if NULL
(95.8 %, 8680 bytes)
411c411
<       if (1)
---
>       if 1
413c413
<         if (4)
---
>         if 4
415c415
<           if (bzalloc NULL)
---
>           if bzalloc NULL
417c417
<   if (bzfree NULL)
---
>   if bzfree NULL
419c419
<     BZALLOC();
---
>     BZALLOC;
420c420
<   if (NULL)
---
>   if NULL
436c436
<     BZ2_bzDecompress(void) {
---
>     BZ2_bzDecompressvoid {
439c439
<   if (NULL)
---
>   if NULL
(95.8 %, 8678 bytes)
436c436
<     BZ2_bzDecompress(void) {
---
>     BZ2_bzDecompressvoid {
439c439
<   if (NULL)
---
>   if NULL
442c442
<   if (NULL)
---
>   if NULL
(95.8 %, 8676 bytes)
442c442
<   if (NULL)
---
>   if NULL
444c444
<     if (strm)
---
>     if strm
446c446
<       (6001)
---
>       6001
(95.8 %, 8674 bytes)
444c444
<     if (strm)
---
>     if strm
446c446
<       (6001)
---
>       6001
451c451
< BZ2_bzDecompressEnd(void) {
---
> BZ2_bzDecompressEndvoid {
454c454
<   if (NULL)
---
>   if NULL
(95.8 %, 8672 bytes)
451c451
< BZ2_bzDecompressEnd(void) {
---
> BZ2_bzDecompressEndvoid {
454c454
<   if (NULL)
---
>   if NULL
457c457
<   if (NULL)
---
>   if NULL
(95.8 %, 8670 bytes)
457c457
<   if (NULL)
---
>   if NULL
459c459
<     if (strm)
---
>     if strm
461c461
<       if (tt NULL)
---
>       if tt NULL
462c462
<         (tt);
---
>         tt;
(95.8 %, 8668 bytes)
459c459
<     if (strm)
---
>     if strm
461c461
<       if (tt NULL)
---
>       if tt NULL
462c462
<         (tt);
---
>         tt;
463c463
<   if (ll16 NULL)
---
>   if ll16 NULL
464c464
<     (ll16);
---
>     ll16;
(95.8 %, 8666 bytes)
463c463
<   if (ll16 NULL)
---
>   if ll16 NULL
464c464
<     (ll16);
---
>     ll16;
465c465
<   if (ll4 NULL)
---
>   if ll4 NULL
466c466
<     (ll4)
---
>     ll4
(95.8 %, 8664 bytes)
465c465
<   if (ll4 NULL)
---
>   if ll4 NULL
466c466
<     (ll4)
---
>     ll4
468c468
<         ();
---
>         ;
(95.8 %, 8662 bytes)
468c468
<         ();
---
>         ;
484,485c484,485
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {
---
> *BZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor {
491c491
<   ((workFactor));
---
>   (workFactor);
(95.8 %, 8660 bytes)
484,485c484,485
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {
---
> *BZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor {
491c491
<   ((workFactor));
---
>   (workFactor);
491c491
<   ((workFactor));
---
>   (workFactor);
507c507
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
---
> void BZ2_bzWriteint *bzerror, BZFILE *b {
(95.8 %, 8658 bytes)
491c491
<   (workFactor);
---
>   workFactor;
507c507
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
---
> void BZ2_bzWriteint *bzerror, BZFILE *b {
514c514
<   (0);
---
>   0;
(95.8 %, 8656 bytes)
507c507
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
---
> void BZ2_bzWriteint *bzerror, BZFILE *b {
514c514
<   (0);
---
>   0;
515c515
<   ((bzf));
---
>   (bzf);
(95.8 %, 8654 bytes)
515c515
<   ((bzf));
---
>   (bzf);
515c515
<   ((bzf));
---
>   (bzf);
522c522
<   (BZ_RUN_OK);
---
>   BZ_RUN_OK;
(95.8 %, 8652 bytes)
515c515
<   (bzf);
---
>   bzf;
522c522
<   (BZ_RUN_OK);
---
>   BZ_RUN_OK;
(95.8 %, 8650 bytes)
522c522
<   (BZ_RUN_OK);
---
>   BZ_RUN_OK;
532,533c532,533
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out);
---
> void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
>                       unsigned *nbytes_out;
535c535
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
537c537
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 {
541c541
<   (NULL);
---
>   NULL;
(95.8 %, 8648 bytes)
532,533c532,533
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out);
---
> void BZ2_bzWriteCloseint *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
>                       unsigned *nbytes_out;
535c535
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
537c537
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 {
541c541
<   (NULL);
---
>   NULL;
542c542
<   ((&bzf));
---
>   (&bzf);
(95.8 %, 8646 bytes)
542c542
<   ((&bzf));
---
>   (&bzf);
542c542
<   ((&bzf));
---
>   (&bzf);
545c545
<   if (NULL)
---
>   if NULL
(95.8 %, 8644 bytes)
542c542
<   (&bzf);
---
>   &bzf;
545c545
<   if (NULL)
---
>   if NULL
(95.8 %, 8642 bytes)
545c545
<   if (NULL)
---
>   if NULL
547c547
<     if (NULL)
---
>     if NULL
549c549
<       if (NULL)
---
>       if NULL
(95.8 %, 8640 bytes)
547c547
<     if (NULL)
---
>     if NULL
549c549
<       if (NULL)
---
>       if NULL
(95.8 %, 8638 bytes)
549c549
<       if (NULL)
---
>       if NULL
551c551
<         if (NULL)
---
>         if NULL
(95.8 %, 8636 bytes)
551c551
<         if (NULL)
---
>         if NULL
553c553
<           if (!
---
>           if !
555c555
<               nbytes_in_lo32)
---
>               nbytes_in_lo32
557c557
<   if (NULL)
---
>   if NULL
(95.8 %, 8634 bytes)
553c553
<           if (!
---
>           if !
555c555
<               nbytes_in_lo32)
---
>               nbytes_in_lo32
557c557
<   if (NULL)
---
>   if NULL
559c559
<   if (NULL)
---
>   if NULL
(95.8 %, 8632 bytes)
559c559
<   if (NULL)
---
>   if NULL
561c561
<   if (NULL)
---
>   if NULL
(95.8 %, 8630 bytes)
561c561
<   if (NULL)
---
>   if NULL
567,568c567,568
< *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
<                 int nUnused) {
---
> *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small, void *unused,
>                 int nUnused {
574c574
<   ((verbosity != (BZ_MAX_UNUSED)));
---
>   (verbosity != (BZ_MAX_UNUSED));
(95.8 %, 8628 bytes)
567,568c567,568
< *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
<                 int nUnused) {
---
> *BZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small, void *unused,
>                 int nUnused {
574c574
<   ((verbosity != (BZ_MAX_UNUSED)));
---
>   (verbosity != (BZ_MAX_UNUSED));
574c574
<   ((verbosity != (BZ_MAX_UNUSED)));
---
>   (verbosity != (BZ_MAX_UNUSED));
(95.8 %, 8626 bytes)
574c574
<   (verbosity != (BZ_MAX_UNUSED));
---
>   verbosity != (BZ_MAX_UNUSED);
574c574
<   (verbosity != (BZ_MAX_UNUSED));
---
>   (verbosity != BZ_MAX_UNUSED);
586c586
<   while (0)
---
>   while 0
(95.8 %, 8624 bytes)
574c574
<   verbosity != (BZ_MAX_UNUSED);
---
>   verbosity != BZ_MAX_UNUSED;
586c586
<   while (0)
---
>   while 0
594c594
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint *bzerror, BZFILE *b {
598c598
<   (NULL);
---
>   NULL;
(95.8 %, 8622 bytes)
586c586
<   while (0)
---
>   while 0
594c594
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadCloseint *bzerror, BZFILE *b {
598c598
<   (NULL);
---
>   NULL;
600c600
<   (&bzf);
---
>   &bzf;
607c607
< BZ2_bzRead(int *bzerror, BZFILE *b) {
---
> BZ2_bzReadint *bzerror, BZFILE *b {
(95.8 %, 8620 bytes)
600c600
<   (&bzf);
---
>   &bzf;
607c607
< BZ2_bzRead(int *bzerror, BZFILE *b) {
---
> BZ2_bzReadint *bzerror, BZFILE *b {
615c615
<   (0);
---
>   0;
(95.8 %, 8618 bytes)
607c607
< BZ2_bzRead(int *bzerror, BZFILE *b) {
---
> BZ2_bzReadint *bzerror, BZFILE *b {
615c615
<   (0);
---
>   0;
617c617
<   (bzf);
---
>   bzf;
(95.8 %, 8616 bytes)
617c617
<   (bzf);
---
>   bzf;
619c619
<   (0);
---
>   0;
(95.8 %, 8614 bytes)
619c619
<   (0);
---
>   0;
626c626
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b, void **unused, int *nUnused {
628c628
<   (NULL);
---
>   NULL;
(95.8 %, 8612 bytes)
626c626
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnusedint *bzerror, BZFILE *b, void **unused, int *nUnused {
628c628
<   (NULL);
---
>   NULL;
629c629
<   (BZ_STREAM_END);
---
>   BZ_STREAM_END;
(95.8 %, 8610 bytes)
629c629
<   (BZ_STREAM_END);
---
>   BZ_STREAM_END;
630c630
<   (NULL)
---
>   NULL
(95.8 %, 8608 bytes)
630c630
<   (NULL)
---
>   NULL
637,638c637,638
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompresschar *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k {
644c644
<   if (
---
>   if 
646c646
<       250)
---
>       250
648c648
<     if (0)
---
>     if 0
666,667c666,667
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen) {
---
> BZ2_bzBuffToBuffDecompresschar *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen {
673c673
<   if ((1))
---
>   if (1)
(95.8 %, 8606 bytes)
637,638c637,638
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompresschar *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k {
644c644
<   if (
---
>   if 
646c646
<       250)
---
>       250
648c648
<     if (0)
---
>     if 0
666,667c666,667
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen) {
---
> BZ2_bzBuffToBuffDecompresschar *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen {
673c673
<   if ((1))
---
>   if (1)
673c673
<   if ((1))
---
>   if (1)
(95.8 %, 8604 bytes)
673c673
<   if (1)
---
>   if 1
694c694
< BZ2_bzlibVersion() {}
---
> BZ2_bzlibVersion {}
698c698
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopenconst char *path, const char *mode{}
700c700
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopenint fd, const char *mode {}
702c702
< BZ2_bzread(BZFILE *b) {
---
> BZ2_bzreadBZFILE *b {
706c706
<   ((bzFile *)b);
---
>   (bzFile *)b;
706c706
<   ((bzFile *)b);
---
>   (bzFile *b);
713c713
< BZ2_bzwrite(BZFILE *b) {
---
> BZ2_bzwriteBZFILE *b {
719c719
<   if (bzerr == BZ_OK)
---
>   if bzerr == BZ_OK
724c724
< BZ2_bzflush();
---
> BZ2_bzflush;
(95.8 %, 8602 bytes)
706c706
<   (bzFile *)b;
---
>   bzFile *b;
713c713
< BZ2_bzwrite(BZFILE *b) {
---
> BZ2_bzwriteBZFILE *b {
719c719
<   if (bzerr == BZ_OK)
---
>   if bzerr == BZ_OK
724c724
< BZ2_bzflush();
---
> BZ2_bzflush;
726c726
< BZ2_bzclose(void) {
---
> BZ2_bzclosevoid {
729c729
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = (bzFile *)b;
(95.8 %, 8600 bytes)
726c726
< BZ2_bzclose(void) {
---
> BZ2_bzclosevoid {
729c729
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = (bzFile *)b;
729c729
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = (bzFile *b);
731c731
<   if (((bzFile *)b))
---
>   if ((bzFile *)b)
(95.8 %, 8598 bytes)
729c729
<   FILE *fp = (bzFile *)b;
---
>   FILE *fp = bzFile *b;
731c731
<   if (((bzFile *)b))
---
>   if ((bzFile *)b)
731c731
<   if (((bzFile *)b))
---
>   if ((bzFile *)b)
(95.8 %, 8596 bytes)
731c731
<   if ((bzFile *)b)
---
>   if (bzFile *)b
731c731
<   if ((bzFile *)b)
---
>   if (bzFile *b)
733c733
<     if (BZ_OK)
---
>     if BZ_OK
735c735
<       if (stdout)
---
>       if stdout
743c743
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerrorBZFILE *b, int *errnum {
744c744
<   int err = ((bzFile *)b);
---
>   int err = (bzFile *)b;
744c744
<   int err = ((bzFile *)b);
---
>   int err = (bzFile *b);
746c746
<   ((bzFile *)b);
---
>   (bzFile *)b;
(95.8 %, 8594 bytes)
744c744
<   int err = (bzFile *)b;
---
>   int err = bzFile *b;
746c746
<   ((bzFile *)b);
---
>   (bzFile *)b;
746c746
<   ((bzFile *)b);
---
>   (bzFile *b);
(95.8 %, 8592 bytes)
746c746
<   (bzFile *)b;
---
>   bzFile *b;
===< pass_clang :: simple-inliner >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: replace-undefined-function >===
67c67
< void BZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
---
> 
532,533c532
< void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out);
---
> 
(95.9 %, 8399 bytes)
===< pass_special :: c >===
===< pass_ints :: a >===
51c51
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
110c110
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
113c113
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 0
(95.9 %, 8398 bytes)
51c51
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
110c110
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
113c113
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 0
(95.9 %, 8397 bytes)
51c51
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
110c110
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(95.9 %, 8396 bytes)
110c110
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
113c113
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 0
(95.9 %, 8395 bytes)
110c110
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
113c113
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 0
160c160
<   char inUse[256];
---
>   char inUse[56];
(95.9 %, 8394 bytes)
113c113
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 0
160c160
<   char inUse[256];
---
>   char inUse[56];
(95.9 %, 8393 bytes)
160c160
<   char inUse[256];
---
>   char inUse[56];
161c161
<   char unseqToSeq[256]
---
>   char unseqToSeq[56]
181c181
< #define BZ_X_MAGIC_1 10
---
> #define BZ_X_MAGIC_1 0
(95.9 %, 8392 bytes)
160c160
<   char inUse[56];
---
>   char inUse[6];
161c161
<   char unseqToSeq[256]
---
>   char unseqToSeq[56]
(95.9 %, 8391 bytes)
161c161
<   char unseqToSeq[256]
---
>   char unseqToSeq[56]
181c181
< #define BZ_X_MAGIC_1 10
---
> #define BZ_X_MAGIC_1 0
183c183
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(95.9 %, 8390 bytes)
161c161
<   char unseqToSeq[56]
---
>   char unseqToSeq[6]
181c181
< #define BZ_X_MAGIC_1 10
---
> #define BZ_X_MAGIC_1 0
183c183
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(95.9 %, 8389 bytes)
181c181
< #define BZ_X_MAGIC_1 10
---
> #define BZ_X_MAGIC_1 0
183c183
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(95.9 %, 8388 bytes)
183c183
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
184c184
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
326c326
<     if (250)
---
>     if (50)
(95.9 %, 8387 bytes)
183c183
< #define MTFA_SIZE 096
---
> #define MTFA_SIZE 06
184c184
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
326c326
<     if (250)
---
>     if (50)
(95.9 %, 8386 bytes)
183c183
< #define MTFA_SIZE 06
---
> #define MTFA_SIZE 6
184c184
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
326c326
<     if (250)
---
>     if (50)
(95.9 %, 8385 bytes)
184c184
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
326c326
<     if (250)
---
>     if (50)
(95.9 %, 8384 bytes)
326c326
<     if (250)
---
>     if (50)
354c354
<   30;
---
>   0;
446c446
<       6001
---
>       001
(95.9 %, 8383 bytes)
326c326
<     if (50)
---
>     if (0)
354c354
<   30;
---
>   0;
(95.9 %, 8382 bytes)
354c354
<   30;
---
>   0;
446c446
<       6001
---
>       001
645c645
<       250)
---
>       50)
(95.9 %, 8381 bytes)
446c446
<       6001
---
>       001
645c645
<       250)
---
>       50)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8380 bytes)
446c446
<       001
---
>       01
645c645
<       250)
---
>       50)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8379 bytes)
446c446
<       01
---
>       1
645c645
<       250)
---
>       50)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8378 bytes)
645c645
<       250)
---
>       50)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8377 bytes)
645c645
<       50)
---
>       0)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8376 bytes)
699c699
<     * BZ2_bzdopen(int fd, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) {}
(95.9 %, 8375 bytes)
===< pass_ints :: b >===
===< pass_ints :: d >===
Termination check: size was 9119; now 8375
===< pass_balanced :: curly-only >===
16c16
< typedef struct {
---
> typedef struct 
32c32
< } bz_stream;
---
>  bz_stream;
132c132
< typedef struct {
---
> typedef struct 
177c177
< } EState
---
>  EState
186c186
< typedef struct {
---
> typedef struct 
229c229
< } DState;
---
>  DState;
263c263
< makeMaps_e() {
---
> makeMaps_e() 
269c269
< }
---
> 
272c272
< generateMTFValues() {
---
> generateMTFValues() 
298c298
< }
---
> 
318c318
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) 
364c364
< }
---
> 
366c366
< int BZ2_bzCompress(void) {
---
> int BZ2_bzCompress(void) 
380c380
< }
---
> 
382c382
< BZ2_bzCompressEnd(void) {
---
> BZ2_bzCompressEnd(void) 
400c400
< }
---
> 
402c402
< BZ2_bzDecompressInit(bz_stream *strm) {
---
> BZ2_bzDecompressInit(bz_stream *strm) 
432c432
< }
---
> 
436c436
<     BZ2_bzDecompress(void) {
---
>     BZ2_bzDecompress(void) 
449c449
< }
---
> 
451c451
< BZ2_bzDecompressEnd(void) {
---
> BZ2_bzDecompressEnd(void) 
470c470
< }
---
> 
474c474
< typedef struct {
---
> typedef struct 
482c482
< } bzFile;
---
>  bzFile;
485c485
<                  int workFactor) {
---
>                  int workFactor) 
505c505
< }
---
> 
507c507
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) 
530c530
< }
---
> 
536c536
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) 
564c564
< }
---
> 
567c567
<                 int nUnused) {
---
>                 int nUnused) 
591c591
< }
---
> 
593c593
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) 
604c604
< }
---
> 
606c606
< BZ2_bzRead(int *bzerror, BZFILE *b) {
---
> BZ2_bzRead(int *bzerror, BZFILE *b) 
623c623
< }
---
> 
625c625
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) 
634c634
< }
---
> 
637c637
<                          unsigned sourceLen, int blockSize100k) {
---
>                          unsigned sourceLen, int blockSize100k) 
663c663
< }
---
> 
666c666
<                            unsigned sourceLen) {
---
>                            unsigned sourceLen) 
691c691
< }
---
> 
693c693
< BZ2_bzlibVersion() {}
---
> BZ2_bzlibVersion() 
697c697
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path, const char *mode)
699c699
<     * BZ2_bzdopen(int d, const char *mode) {}
---
>     * BZ2_bzdopen(int d, const char *mode) 
701c701
< BZ2_bzread(BZFILE *b) {
---
> BZ2_bzread(BZFILE *b) 
710c710
< }
---
> 
712c712
< BZ2_bzwrite(BZFILE *b) {
---
> BZ2_bzwrite(BZFILE *b) 
721c721
< }
---
> 
725c725
< BZ2_bzclose(void) {
---
> BZ2_bzclose(void) 
736c736
< }
---
> 
738c738
< *bzerrorstrings = {
---
> *bzerrorstrings = 
740c740
<     "???"};
---
>     "???";
742c742
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
748c748
< }
---
> 
(95.9 %, 8373 bytes)
742c742
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) 
748c748
< }
---
> 
===< pass_clang :: return-void >===
clang_delta: ReturnVoid.cpp:163: bool ReturnVoid::isInTheFuncDef(clang::ReturnStmt*): Assertion `(EndPos > FuncDefStartPos) && (EndPos < FuncDefEndPos) && "Bad return statement range!"' failed.
Aborted

***************************************************

pass_clang::return-void has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=return-void --counter=1 /tmp/creduce-NDTn_V/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454717788.3852/creduce_bug_001
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: reduce-pointer-level >===
30c30
<   void (*bzfree)(void);
---
>   void (bzfree)(void);
280c280
<   char *block = block;
---
>   char block = &*block;
322c322
<   EState *s;
---
>   EState s;
360c360
<   s = 0;
---
>   s = *0;
367c367
<   bz_stream * strm = 0;
---
>   bz_stream  strm ;
370c370
<   EState *s;
---
>   EState s;
383c383
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
405c405
<   DState *s;
---
>   DState s;
425c425
<       = 0;
---
>       = *0;
437c437
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
452c452
<   bz_stream *strm = 0;
---
>   bz_stream strm ;
511c511
<   bzFile *bzf
---
>   bzFile bzf
515c515
<   bzf;
---
>   &bzf;
517c517
<   bzf = buf;
---
>   bzf = *buf;
519c519
<   bzf
---
>   &bzf
524c524
<   bzf <
---
>   &bzf <
526c526
<           bzf ==
---
>           &bzf ==
610c610
<   bzFile *bzf
---
>   bzFile bzf
616c616
<   bzf;
---
>   &bzf;
620c620
<   bzf = buf;
---
>   bzf = *buf;
738c738
< *bzerrorstrings = 
---
> bzerrorstrings = 
740c740
<     "???";
---
>     a;
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: simplify-comma-expr >===
345c345,347
<   0,0;
---
>   0;
>   
>   0;
(95.9 %, 8379 bytes)
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: simplify-recursive-template-instantiation >===
Termination check: size was 8375; now 8379
===< pass_clang :: rename-fun >===
clang_delta: RenameFun.cpp:142: bool RenameFunVisitor::VisitDeclRefExpr(clang::DeclRefExpr*): Assertion `(I != ConsumerInstance->FunToNameMap.end()) && "Cannot find FunctionDecl!"' failed.
Aborted

***************************************************

pass_clang::rename-fun has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=rename-fun --counter=1 /tmp/creduce-CYt02b/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454717788.3852/creduce_bug_002
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: rename-param >===
318c318
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
---
> BZ2_bzCompressInit(bz_stream *p1, int p2) {
404c404
< BZ2_bzDecompressInit(bz_stream *strm) {
---
> BZ2_bzDecompressInit(bz_stream *p1) {
509c509
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
---
> void BZ2_bzWrite(int *p1, BZFILE *p2) {
536,538c536,538
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
> void BZ2_bzWriteClose64(int *p1, BZFILE *p2, int p3,
>                         unsigned *p4, unsigned *p5,
>                         unsigned *p6, unsigned *p7) {
544c544
<   ferror;
---
>   p1;
595c595
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
---
> void BZ2_bzReadClose(int *p1, BZFILE *p2) {
608c608
< BZ2_bzRead(int *bzerror, BZFILE *b) {
---
> BZ2_bzRead(int *p1, BZFILE *p2) {
627c627
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void BZ2_bzReadGetUnused(int *p1, BZFILE *p2, void **p3, int *p4) {
638,639c638,639
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompress(char *p1, unsigned *p2, char *p3,
>                          unsigned p4, int p5) {
656c656
<   source = sourceLen =
---
>   p3 = p4 =
667,668c667,668
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen) {
---
> BZ2_bzBuffToBuffDecompress(char *p1, unsigned *p2, char *p3,
>                            unsigned p4) {
681c681
<   source = sourceLen =
---
>   p3 = p4 =
699c699
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *p1, const char *p2){}
701c701
<     * BZ2_bzdopen(int d, const char *mode) {}
---
>     * BZ2_bzdopen(int p1, const char *p2) {}
703c703
< BZ2_bzread(BZFILE *b) {
---
> BZ2_bzread(BZFILE *p1) {
707c707
<   (bzFile *)b;
---
>   (bzFile *)p1;
714c714
< BZ2_bzwrite(BZFILE *b) {
---
> BZ2_bzwrite(BZFILE *p1) {
744,745c744,745
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = (bzFile *)b;
---
> const char *BZ2_bzerror(BZFILE *p1, int *p2) {
>   int err = (bzFile *)p1;
747c747
<   (bzFile *)b;
---
>   (bzFile *)p1;
===< pass_clang :: rename-var >===
41c41
< BZ2_bzCompressvoid;
---
> a;
49c49
< strm;
---
> c;
76c76
< const char BZ2_bzlibVersionvoid;
---
> const char d;
262c262
< EState makeMaps_e_s;
---
> EState e;
271c271
< EState generateMTFValues_s;
---
> EState f;
273c273
<   unsigned char yy;
---
>   unsigned char g;
275,281c275,281
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
< 
<   UInt32 ptr;
<   char *block = block;
<   short mtfv = mtfv
---
>   Int32 h;
>   Int32 k;
>   Int32 l;
> 
>   UInt32 m;
>   char *o = o;
>   short p = p
286c286
<     generateMTFValues_s.mtfFreq[0]
---
>     f.mtfFreq[0]
295c295
<   generateMTFValues_s.mtfFreq;
---
>   f.mtfFreq;
308c308
< default_bzalloc;
---
> q;
310c310
< default_bzfree
---
> r
319,320c319,320
<   int verbosity = 0;
<   int workFactor = 0;
---
>   int t = 0;
>   int u = 0;
369,370c369,370
<   bz_stream * strm = 0;
<   int action = 0;
---
>   bz_stream * v = 0;
>   int w = 0;
385c385
<   bz_stream *strm = 0;
---
>   bz_stream *x = 0;
405,406c405,406
<   int verbosity = 0;
<   int small = 0;
---
>   int y = 0;
>   int z = 0;
439c439
<   bz_stream *strm = 0;
---
>   bz_stream *t1 = 0;
454c454
<   bz_stream *strm = 0;
---
>   bz_stream *t2 = 0;
510,513c510,513
<   void * buf = 0;
<   int len = 0;
<   Int32 ret;
<   bzFile *bzf
---
>   void * t5 = 0;
>   int t6 = 0;
>   Int32 t7;
>   bzFile *t8
517c517
<   bzf;
---
>   t8;
519c519
<   bzf = buf;
---
>   t8 = t5;
521c521
<   bzf
---
>   t8
526c526
<   bzf <
---
>   t8 <
528c528
<           bzf ==
---
>           t8 ==
540c540
<   bzFile bzf;
---
>   bzFile t9;
543c543
<   &bzf;
---
>   &t9;
596c596
<   bzFile bzf
---
>   bzFile t12
601c601
<   &bzf;
---
>   &t12;
603c603
<   &bzf;
---
>   &t12;
609,610c609,610
<   void * buf = 0;
<   int len = 0;
---
>   void * t13 = 0;
>   int t14 = 0;
612c612
<   bzFile *bzf
---
>   bzFile *t15
618c618
<   bzf;
---
>   t15;
622c622
<   bzf = buf;
---
>   t15 = t13;
628c628
<   bzFile bzf;
---
>   bzFile t16;
634,635c634,635
<   &bzf;
<   &bzf;
---
>   &t16;
>   &t16;
640,643c640,643
<   int verbosity = 0;
<   int workFactor = 0;
<   bz_stream strm;
<   int ret;
---
>   int t17 = 0;
>   int t18 = 0;
>   bz_stream t19;
>   int t20;
669,672c669,672
<   int small = 0;
<   int verbosity = 0;
<   bz_stream strm;
<   int ret;
---
>   int t21 = 0;
>   int t22 = 0;
>   bz_stream t23;
>   int t24;
697c697
< bzopen_or_bzdopen;
---
> t25;
704,706c704,706
<   void * buf = 0;
<   int len = 0;
<   int bzerr, nread;
---
>   void * t26 = 0;
>   int t27 = 0;
>   int t28, t29;
715,717c715,717
<   void * buf = 0;
<   int len = 0;
<   int bzerr
---
>   void * t30 = 0;
>   int t31 = 0;
>   int t32
720c720
<   if (bzerr == BZ_OK)
---
>   if (t32 == BZ_OK)
725c725
< BZ2_bzflush;
---
> t33;
729c729
<   int bzerr;
---
>   int t34;
740c740
< *bzerrorstrings = 
---
> *t35 = 
745c745
<   int err = (bzFile *)b;
---
>   int t36 = (bzFile *)b;
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
41c41,43
< BZ2_bzCompressvoid;
---
> BZ2_bzCompressvoid, 
> 
> strm;
49c51
< strm;
---
> 
262c262
< EState makeMaps_e_s;
---
> EState makeMaps_e_s,  generateMTFValues_s;
271c271
< EState generateMTFValues_s;
---
> 
(95.9 %, 8382 bytes)
264c264
< EState makeMaps_e_s;
---
> EState makeMaps_e_s,  generateMTFValues_s;
273c273
< EState generateMTFValues_s;
---
> 
43c43,47
< strm;
---
> strm, 
> 
> s
> 
>     ;
306d309
< s
308d310
<     ;
(95.9 %, 8377 bytes)
43c43,47
< strm;
---
> strm, 
> 
> s
> 
>     ;
306d309
< s
308d310
<     ;
43c43,45
< strm;
---
> strm, 
> 
> default_bzalloc;
310c312
< default_bzalloc;
---
> 
(95.9 %, 8380 bytes)
45c45,49
< s
---
> s, 
> 
> 
> 
> default_bzalloc
312c316
< default_bzalloc;
---
> 
45c45,49
< s
---
> s, 
> 
> default_bzfree
> 
>     
314d317
< default_bzfree
316d318
<     ;
(95.9 %, 8385 bytes)
49c49,57
< default_bzalloc
---
> default_bzalloc, 
> 
> 
> 
> 
> 
> default_bzfree
> 
>     
318d325
< default_bzfree
320d326
<     ;
49c49,51
< default_bzalloc
---
> default_bzalloc, 
> 
> bzopen_or_bzdopen
705c707
< bzopen_or_bzdopen;
---
> 
(95.9 %, 8392 bytes)
55c55,57
< default_bzfree
---
> default_bzfree, 
> 
> bzopen_or_bzdopen
711c713
< bzopen_or_bzdopen;
---
> 
55c55,57
< default_bzfree
---
> default_bzfree, 
> 
> BZ2_bzflush
739c741
< BZ2_bzflush;
---
> 
(95.9 %, 8395 bytes)
57c57,59
< bzopen_or_bzdopen
---
> bzopen_or_bzdopen, 
> 
> BZ2_bzflush
741c743
< BZ2_bzflush;
---
> 
(95.9 %, 8398 bytes)
===< pass_clang :: combine-local-var >===
296,297c296,297
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j, zPend;
>   
296c296
<   Int32 i, j;
---
>   Int32 i, j, wr;
298c298
<   Int32 wr;
---
>   
(95.9 %, 8393 bytes)
296c296,297
<   Int32 i, j, zPend;
---
>   Int32 i, j, zPend, wr;
>   
298d298
<   Int32 wr;
296c296
<   Int32 i, j, zPend;
---
>   Int32 i, j, zPend, EOB;
299c299
<   Int32 EOB;
---
>   
(95.9 %, 8388 bytes)
296c296,297
<   Int32 i, j, zPend, wr;
---
>   Int32 i, j, zPend, wr, EOB;
>   
299d299
<   Int32 EOB;
296c296
<   Int32 i, j, zPend, wr;
---
>   Int32 i, j, zPend, wr, ptr;
301c301
<   UInt32 ptr;
---
>   
(95.9 %, 8383 bytes)
296c296
<   Int32 i, j, zPend, wr, EOB;
---
>   Int32 i, j, zPend, wr, EOB, ptr;
301c301
<   UInt32 ptr;
---
>   
337,338c337,338
<   int verbosity = 0;
<   int workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0;
>   
(95.9 %, 8377 bytes)
337,338c337,338
<   int verbosity = 0;
<   int workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0;
>   
337c337
<   int verbosity = 0;
---
>   int verbosity = 0, n;
339c339
<   Int32 n;
---
>   
(95.9 %, 8375 bytes)
337c337,338
<   int verbosity = 0,  workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0, n;
>   
339d339
<   Int32 n;
423,424c423,424
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity = 0,  small = 0;
>   
(95.9 %, 8370 bytes)
423,424c423,424
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity = 0,  small = 0;
>   
529,530c529,530
<   int len = 0;
<   Int32 ret;
---
>   int len = 0, ret;
>   
(95.9 %, 8368 bytes)
529,530c529,530
<   int len = 0;
<   Int32 ret;
---
>   int len = 0, ret;
>   
658,659c658,659
<   int verbosity = 0;
<   int workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0;
>   
(95.9 %, 8363 bytes)
658,659c658,659
<   int verbosity = 0;
<   int workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0;
>   
658c658
<   int verbosity = 0;
---
>   int verbosity = 0,  ret;
661c661
<   int ret;
---
>   
(95.9 %, 8361 bytes)
658c658
<   int verbosity = 0,  workFactor = 0;
---
>   int verbosity = 0,  workFactor = 0,  ret;
661c661
<   int ret;
---
>   
687,688c687,688
<   int small = 0;
<   int verbosity = 0;
---
>   int small = 0,  verbosity = 0;
>   
(95.9 %, 8359 bytes)
687,688c687,688
<   int small = 0;
<   int verbosity = 0;
---
>   int small = 0,  verbosity = 0;
>   
687c687
<   int small = 0;
---
>   int small = 0,  ret;
690c690
<   int ret;
---
>   
(95.9 %, 8357 bytes)
687c687
<   int small = 0,  verbosity = 0;
---
>   int small = 0,  verbosity = 0,  ret;
690c690
<   int ret;
---
>   
723,724c723,724
<   int len = 0;
<   int bzerr, nread;
---
>   int len = 0,  bzerr, nread;
>   
734,735c734
<   int len = 0;
<   int bzerr
---
>   int len = 0,  bzerr
737a737
>   
(95.9 %, 8355 bytes)
723,724c723,724
<   int len = 0;
<   int bzerr, nread;
---
>   int len = 0,  bzerr, nread;
>   
734,735c734
<   int len = 0;
<   int bzerr
---
>   int len = 0,  bzerr
737a737
>   
746,747c746,747
<   int b = 0;
<   int bzerr;
---
>   int b = 0,  bzerr;
>   
(95.9 %, 8353 bytes)
734,735c734
<   int len = 0;
<   int bzerr
---
>   int len = 0,  bzerr
737a737
>   
746,747c746,747
<   int b = 0;
<   int bzerr;
---
>   int b = 0,  bzerr;
>   
(95.9 %, 8351 bytes)
746,747c746,747
<   int b = 0;
<   int bzerr;
---
>   int b = 0,  bzerr;
>   
(95.9 %, 8349 bytes)
===< pass_clang :: simplify-struct-union-decl >===
199c199
< } EState
---
> } EState,  makeMaps_e_s,  generateMTFValues_s
284c284
< EState makeMaps_e_s,  generateMTFValues_s;
---
> 
===< pass_clang :: move-global-var >===
39,40d38
< BZ2_bzCompressInit(bz_stream *, int);
< 
63a62,64
> BZ2_bzCompressInit(bz_stream *, int);
> 
> 
38a39,41
> ;
> 
> BZ2_bzDecompressInit(bz_stream *);
65d67
< ;
67d68
< BZ2_bzDecompressInit(bz_stream *);
(95.9 %, 8350 bytes)
61a62,64
> ;
> 
> BZ2_bzDecompressInit(bz_stream *);
66d68
< ;
68d69
< BZ2_bzDecompressInit(bz_stream *);
62c62
< BZ2_bzCompressInit(bz_stream *, int);
---
> ;
66c66
< ;
---
> #define BZ_MAX_UNUSED 0
68c68,69
< BZ2_bzDecompressInit(bz_stream *);
---
> typedef BZFILE;
> BZ2_bzCompressInit(bz_stream *, int);
70d70
< ;
72a73,75
> ;
> 
> BZ2_bzDecompressInit(bz_stream *);
74d76
< #define BZ_MAX_UNUSED 0
76d77
< typedef BZFILE;
(95.9 %, 8351 bytes)
64,65c64
< BZ2_bzDecompressInit(bz_stream *);
< BZ2_bzCompressInit(bz_stream *, int);
---
> ;
68a68,72
> #define BZ_MAX_UNUSED 0
> 
> typedef BZFILE;
> BZ2_bzDecompressInit(bz_stream *);
> BZ2_bzCompressInit(bz_stream *, int);
71d74
< ;
75d77
< #define BZ_MAX_UNUSED 0
77d78
< typedef BZFILE;
63a64
> typedef BZFILE;
77c78
< typedef BZFILE;
---
> 
(95.9 %, 8352 bytes)
70a71
> const char BZ2_bzlibVersionvoid;
101c102
< const char BZ2_bzlibVersionvoid;
---
> 
70a71,73
> ;
> 
> void;
111d113
< ;
113d114
< void;
(95.9 %, 8353 bytes)
71a72,74
> ;
> 
> void;
112d114
< ;
114d115
< void;
71a72
> typedef Int32;
122c123
< typedef Int32;
---
> 
(95.9 %, 8354 bytes)
74a75
> typedef Int32;
123c124
< typedef Int32;
---
> 
74a75
> typedef UInt32;
124c125
< typedef UInt32;
---
> 
(95.9 %, 8355 bytes)
75a76
> typedef UInt32;
125c126
< typedef UInt32;
---
> 
75a76,123
> struct {
> 
>   bz_stream strm;
> 
>   Int32 mode;
>   Int32 state
> 
>       ;
> 
>   UInt32 arr1;
>   UInt32 arr2;
>   UInt32 ftab;
> 
>   UInt32 ptr;
>   char block;
>   short mtfv;
>   char zbits;
> 
>   Int32 workFactor
> 
>       ;
> 
>   Int32 nblock;
>   Int32 nblockMAX
> 
>       ;
> 
>   Int32 nInUse;
>   char inUse[6];
>   char unseqToSeq[6]
> 
>       ;
>   UInt32 combinedCRC;
> 
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
> 
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   char;
>   char;
> 
>   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
> 
> } EState
> 
>     ;
160,207c208
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 mode;
<   Int32 state
< 
<       ;
< 
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
< 
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
< 
<   Int32 workFactor
< 
<       ;
< 
<   Int32 nblock;
<   Int32 nblockMAX
< 
<       ;
< 
<   Int32 nInUse;
<   char inUse[6];
<   char unseqToSeq[6]
< 
<       ;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
< 
<   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
< 
< } EState
< 
<     ;
---
> typedef 
75a76,119
> struct {
> 
>   bz_stream strm;
> 
>   Int32 state
> 
>       ;
> 
>   ;
> 
>   UInt32 bsBuff;
>   Int32 bsLive
> 
>       ;
>   char smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity
> 
>       ;
>   Int32;
>   ;
>   Int32;
>   Int32;
> 
>   UInt32 tt;
> 
>   short ll16;
>   char ll4
> 
>       ;
>   UInt32 calculatedCombinedCRC
> 
>       ;
>   char;
>   char;
>   char;
> 
>   char;
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
> 
>       ;
> 
> } DState;
214,257c258
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 state
< 
<       ;
< 
<   ;
< 
<   UInt32 bsBuff;
<   Int32 bsLive
< 
<       ;
<   char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity
< 
<       ;
<   Int32;
<   ;
<   Int32;
<   Int32;
< 
<   UInt32 tt;
< 
<   short ll16;
<   char ll4
< 
<       ;
<   UInt32 calculatedCombinedCRC
< 
<       ;
<   char;
<   char;
<   char;
< 
<   char;
<   Int32
<       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
< 
<       ;
< 
< } DState;
---
> typedef 
75a76
> EState makeMaps_e_s,  generateMTFValues_s;
290c291
< EState makeMaps_e_s,  generateMTFValues_s;
---
> 
75a76,84
> struct {
>   FILE handle;
>   char buf;
>   Int32 bufN;
>   char writing;
>   bz_stream strm;
>   Int32 lastErr;
>   char initialisedOk
> } bzFile;
500,508c509
< typedef struct {
<   FILE handle;
<   char buf;
<   Int32 bufN;
<   char writing;
<   bz_stream strm;
<   Int32 lastErr;
<   char initialisedOk
< } bzFile;
---
> typedef 
(95.9 %, 8356 bytes)
76a77,124
> struct {
> 
>   bz_stream strm;
> 
>   Int32 mode;
>   Int32 state
> 
>       ;
> 
>   UInt32 arr1;
>   UInt32 arr2;
>   UInt32 ftab;
> 
>   UInt32 ptr;
>   char block;
>   short mtfv;
>   char zbits;
> 
>   Int32 workFactor
> 
>       ;
> 
>   Int32 nblock;
>   Int32 nblockMAX
> 
>       ;
> 
>   Int32 nInUse;
>   char inUse[6];
>   char unseqToSeq[6]
> 
>       ;
>   UInt32 combinedCRC;
> 
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
> 
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   char;
>   char;
> 
>   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
> 
> } EState
> 
>     ;
161,208c209
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 mode;
<   Int32 state
< 
<       ;
< 
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
< 
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
< 
<   Int32 workFactor
< 
<       ;
< 
<   Int32 nblock;
<   Int32 nblockMAX
< 
<       ;
< 
<   Int32 nInUse;
<   char inUse[6];
<   char unseqToSeq[6]
< 
<       ;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
< 
<   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
< 
< } EState
< 
<     ;
---
> typedef 
76a77,120
> struct {
> 
>   bz_stream strm;
> 
>   Int32 state
> 
>       ;
> 
>   ;
> 
>   UInt32 bsBuff;
>   Int32 bsLive
> 
>       ;
>   char smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity
> 
>       ;
>   Int32;
>   ;
>   Int32;
>   Int32;
> 
>   UInt32 tt;
> 
>   short ll16;
>   char ll4
> 
>       ;
>   UInt32 calculatedCombinedCRC
> 
>       ;
>   char;
>   char;
>   char;
> 
>   char;
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
> 
>       ;
> 
> } DState;
215,258c259
< typedef struct {
< 
<   bz_stream strm;
< 
<   Int32 state
< 
<       ;
< 
<   ;
< 
<   UInt32 bsBuff;
<   Int32 bsLive
< 
<       ;
<   char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity
< 
<       ;
<   Int32;
<   ;
<   Int32;
<   Int32;
< 
<   UInt32 tt;
< 
<   short ll16;
<   char ll4
< 
<       ;
<   UInt32 calculatedCombinedCRC
< 
<       ;
<   char;
<   char;
<   char;
< 
<   char;
<   Int32
<       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
< 
<       ;
< 
< } DState;
---
> typedef 
76a77
> EState makeMaps_e_s,  generateMTFValues_s;
291c292
< EState makeMaps_e_s,  generateMTFValues_s;
---
> 
76a77,85
> struct {
>   FILE handle;
>   char buf;
>   Int32 bufN;
>   char writing;
>   bz_stream strm;
>   Int32 lastErr;
>   char initialisedOk
> } bzFile;
501,509c510
< typedef struct {
<   FILE handle;
<   char buf;
<   Int32 bufN;
<   char writing;
<   bz_stream strm;
<   Int32 lastErr;
<   char initialisedOk
< } bzFile;
---
> typedef 
76a77,79
> *bzerrorstrings = 
> 
>     "???";
765d767
< *bzerrorstrings = 
767d768
<     "???";
(95.9 %, 8357 bytes)
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
79c79
<     "???";
---
>     "";
126c126
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION ""
(95.9 %, 8354 bytes)
126c126
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION ""
775c775
<   "OK";
---
>   "";
(95.9 %, 8336 bytes)
775c775
<   "OK";
---
>   "";
(95.9 %, 8334 bytes)
===< pass_indent :: final >===
1d0
<  
16c15,16
< typedef struct {
---
> typedef struct
> {
29,32c29,31
<   void (*bzalloc);
<   void (*bzfree)(void);
<   void *opaque
< } bz_stream;
---
>   void ( *bzalloc );
>   void ( *bzfree ) ( void );
> void *opaque} bz_stream;
39,61c38,39
< BZ2_bzCompressvoid, 
< 
< strm, 
< 
< s, 
< 
< 
< 
< default_bzalloc, 
< 
< 
< 
< 
< 
< default_bzfree, 
< 
< bzopen_or_bzdopen, 
< 
< BZ2_bzflush
< 
<     
< 
<     ;
---
> BZ2_bzCompressvoid,
>   strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen, BZ2_bzflush;
66,67d43
< 
< 
77c53,55
< *bzerrorstrings = 
---
> *bzerrorstrings = "";
> BZ2_bzDecompressInit ( bz_stream * );
> BZ2_bzCompressInit ( bz_stream *, int );
79,81c57
<     "";
< BZ2_bzDecompressInit(bz_stream *);
< BZ2_bzCompressInit(bz_stream *, int);
---
> *BZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
82a59
> void BZ2_bzReadClose ( int *, BZFILE * );
83a61
> void BZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
84a63
> BZ2_bzRead ( int *, BZFILE * );
85a65
> *BZ2_bzWriteOpen ( int *, FILE *, int, int, int );
86a67
> void BZ2_bzWrite ( int *, BZFILE * );
87a69,70
> void BZ2_bzWriteClose64 ( int *, BZFILE *, int, unsigned *, unsigned *,
> 			  unsigned *, unsigned * );
89c72
< *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> BZ2_bzBuffToBuffCompress ( char *, unsigned *, char *, unsigned, int );
91c74
< void BZ2_bzReadClose(int *, BZFILE *);
---
> BZ2_bzBuffToBuffDecompress ( char *, unsigned *, char *, unsigned );
93c76
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
---
> *BZ2_bzopen ( const char *, const char * );
95c78
< BZ2_bzRead(int *, BZFILE *);
---
> *BZ2_bzdopen ( int, const char * );
97c80
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ2_bzread ( BZFILE * );
99c82
< void BZ2_bzWrite(int *, BZFILE *);
---
> BZ2_bzwrite ( BZFILE * );
101,122c84
< 
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
<                         unsigned *, unsigned *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);
< 
< 
< 
< *BZ2_bzopen(const char *, const char *);
< 
< *BZ2_bzdopen(int, const char *);
< 
< BZ2_bzread(BZFILE *);
< 
< BZ2_bzwrite(BZFILE *);
< 
< 
< 
< const char *BZ2_bzerror(BZFILE *, int *);
---
> const char *BZ2_bzerror ( BZFILE *, int * );
128,130d89
< 
< 
< 
164c123,124
< typedef struct {
---
> typedef struct
> {
169,171c129
<   Int32 state
< 
<       ;
---
>   Int32 state;
182,184c140
<   Int32 workFactor
< 
<       ;
---
>   Int32 workFactor;
187,189c143
<   Int32 nblockMAX
< 
<       ;
---
>   Int32 nblockMAX;
193,195c147
<   char unseqToSeq[6]
< 
<       ;
---
>   char unseqToSeq[6];
207,211c159
<   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
< 
< } EState
< 
<     ;
---
> char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE} EState;
218c166,167
< typedef struct {
---
> typedef struct
> {
222,224c171
<   Int32 state
< 
<       ;
---
>   Int32 state;
226c173
<   ;
---
>    ;
229,231c176
<   Int32 bsLive
< 
<       ;
---
>   Int32 bsLive;
234,240c179,183
<   Int32 verbosity
< 
<       ;
<   Int32;
<   ;
<   Int32;
<   Int32;
---
>   Int32 verbosity;
>     Int32;
>    ;
>     Int32;
>     Int32;
245,250c188,189
<   char ll4
< 
<       ;
<   UInt32 calculatedCombinedCRC
< 
<       ;
---
>   char ll4;
>   UInt32 calculatedCombinedCRC;
256,259c195,196
<   Int32
<       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
< 
<       ;
---
>     Int32
>     mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
271c208
< void BZ2_decompress();
---
> void BZ2_decompress (  );
294,298c231,234
< EState makeMaps_e_s,  generateMTFValues_s;
< makeMaps_e() {
<   Int32 i
< 
<       = 0;
---
> EState makeMaps_e_s, generateMTFValues_s;
> makeMaps_e (  )
> {
>   Int32 i = 0;
300c236
<   for (;;) ;
---
>   for ( ;; ) ;
303,304c239,240
< 
< generateMTFValues() {
---
> generateMTFValues (  )
> {
307,309d242
<   
<   
<   
311d243
<   
313,315c245
<   short mtfv = mtfv
< 
<       = 0;
---
>   short mtfv = mtfv = 0;
317,318c247,248
<   for (;;)
<     generateMTFValues_s.mtfFreq[0]
---
>   for ( ;; )
>     generateMTFValues_s.mtfFreq[0];
320c250
<         ;
---
>   for ( ;; )
322c252
<   for (;;)
---
>     for ( ;; )
324,326c254
<     for (;;) 
< 
<     ;
---
>       ;
335a264
> void;
336a266,268
> BZ2_bzCompressInit ( bz_stream * strm, int blockSize100k )
> {
>   int verbosity = 0, workFactor = 0, n;
338,349d269
< 
< 
< 
< 
< void
< 
<     ;
< 
< BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
<   int verbosity = 0,  workFactor = 0, n;
<   
<   
352c272
<   if (0)
---
>   if ( 0 )
354c274
<     if (0)
---
>     if ( 0 )
356c276
<       if (0)
---
>       if ( 0 )
358,360c278,280
<         if (bzalloc NULL)
<           default_bzalloc;
<   if (bzfree NULL)
---
> 	if ( bzalloc NULL )
> 	  default_bzalloc;
>   if ( bzfree NULL )
362c282
<     BZALLOC();
---
>     BZALLOC (  );
365,367c285
<     *
< 
<         NULL;
---
>     *NULL;
369,371c287
<   ftab NULL
< 
<       *blockSize100k;
---
>   ftab NULL * blockSize100k;
374c290
<   
---
> 
378c294
<   if (arr1 NULL == NULL)
---
>   if ( arr1 NULL == NULL )
396,397c312,315
< int BZ2_bzCompress(void) {
<   bz_stream * strm = 0;
---
> int
> BZ2_bzCompress ( void )
> {
>   bz_stream *strm = 0;
406c324
<     if (strm)
---
>     if ( strm )
408,409c326,327
<       switch (s->mode)
<         ;
---
>       switch ( s->mode )
> 	;
412c330,331
< BZ2_bzCompressEnd(void) {
---
> BZ2_bzCompressEnd ( void )
> {
420c339
<     if (strm)
---
>     if ( strm )
422,424c341,343
<       if (arr1 NULL)
<         arr1;
<   if (arr2 NULL)
---
>       if ( arr1 NULL )
> 	arr1;
>   if ( arr2 NULL )
426c345
<   if (ftab NULL)
---
>   if ( ftab NULL )
432,434c351,354
< BZ2_bzDecompressInit(bz_stream *strm) {
<   int verbosity = 0,  small = 0;
<   
---
> BZ2_bzDecompressInit ( bz_stream * strm )
> {
>   int verbosity = 0, small = 0;
> 
437c357
<   if (0)
---
>   if ( 0 )
441c361
<       if (1)
---
>       if ( 1 )
443c363
<         if (4)
---
> 	if ( 4 )
445,447c365,367
<           if (bzalloc NULL)
<             default_bzalloc;
<   if (bzfree NULL)
---
> 	  if ( bzalloc NULL )
> 	    default_bzalloc;
>   if ( bzfree NULL )
449c369
<     BZALLOC();
---
>     BZALLOC (  );
453,455c373
<   s
< 
<       = 0;
---
>   s = 0;
465,466c383,384
< 
<     BZ2_bzDecompress(void) {
---
> BZ2_bzDecompress ( void )
> {
474,476c392
<     if (strm)
< 
<       1
---
>     if ( strm )
478c394
<           ;
---
>       1;
481c397,398
< BZ2_bzDecompressEnd(void) {
---
> BZ2_bzDecompressEnd ( void )
> {
489c406
<     if (strm)
---
>     if ( strm )
491,493c408,410
<       if (tt NULL)
<         tt;
<   if (ll16 NULL)
---
>       if ( tt NULL )
> 	tt;
>   if ( ll16 NULL )
495,498c412,413
<   if (ll4 NULL)
<     ll4
< 
<         ;
---
>   if ( ll4 NULL )
>     ll4;
504c419,420
< typedef struct {
---
> typedef struct
> {
511,512c427
<   char initialisedOk
< } bzFile;
---
> char initialisedOk} bzFile;
514,515c429,431
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {
---
> *BZ2_bzWriteOpen ( int *bzerror, FILE * f, int blockSize100k, int verbosity,
> 		   int workFactor )
> {
517,519c433
<   bzFile *bzf
< 
<       ;
---
>   bzFile *bzf;
523,525c437
<   NULL
< 
<       ;
---
>   NULL;
528,530c440
<   f = bzf
< 
<       = NULL;
---
>   f = bzf = NULL;
537,538c447,450
< void BZ2_bzWrite(int *bzerror, BZFILE *b) {
<   void * buf = 0;
---
> void
> BZ2_bzWrite ( int *bzerror, BZFILE * b )
> {
>   void *buf = 0;
540,541d451
<   
<   bzFile *bzf
543c453
<       ;
---
>   bzFile *bzf;
549,551c459
<   bzf
< 
<       ;
---
>   bzf;
554,557c462
<   bzf <
< 
<           bzf ==
<       0;
---
>   bzf < bzf == 0;
562,566c467,471
< 
< 
< void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
---
> void
> BZ2_bzWriteClose64 ( int *bzerror, BZFILE * b, int abandon,
> 		     unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
> 		     unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 )
> {
580,582c485
<         if NULL
< 
<           if (!
---
> 	if NULL
584,585c487,488
<               nbytes_in_lo32)
<             bzf;
---
> 	  if ( !nbytes_in_lo32 )
> 	    bzf;
591,593c494
<     bzf
< 
<         ;
---
>     bzf;
596,597c497,499
< *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
<                 int nUnused) {
---
> *BZ2_bzReadOpen ( int *bzerror, FILE * f, int verbosity, int small,
> 		  void *unused, int nUnused )
> {
599,601c501
<   int ret
< 
<       ;
---
>   int ret;
605,607c505
<   NULL
< 
<       ;
---
>   NULL;
611c509
<   bzf
---
>   bzf = NULL;
613,615c511
<       = NULL;
< 
<   while (0)
---
>   while ( 0 )
618,620c514
<   bzf
< 
<       = malloc;
---
>   bzf = malloc;
623,626c517,520
< void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
<   bzFile bzf
< 
<       ;
---
> void
> BZ2_bzReadClose ( int *bzerror, BZFILE * b )
> {
>   bzFile bzf;
636,637c530,532
< BZ2_bzRead(int *bzerror, BZFILE *b) {
<   void * buf = 0;
---
> BZ2_bzRead ( int *bzerror, BZFILE * b )
> {
>   void *buf = 0;
640,642c535
<   bzFile *bzf
< 
<       ;
---
>   bzFile *bzf;
655c548,550
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
---
> void
> BZ2_bzReadGetUnused ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
> {
659,661c554
<   NULL
< 
<       ;
---
>   NULL;
666,671c559,562
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   int verbosity = 0,  workFactor = 0,  ret;
<   
<   bz_stream strm;
<   
---
> BZ2_bzBuffToBuffCompress ( char *dest, unsigned *destLen, char *source,
> 			   unsigned sourceLen, int blockSize100k )
> {
>   int verbosity = 0, workFactor = 0, ret;
673c564
<   if (
---
>   bz_stream strm;
675c566
<       0)
---
>   if ( 0 )
677c568
<     if (0)
---
>     if ( 0 )
684,686c575
<   source = sourceLen =
< 
<       0;
---
>   source = sourceLen = 0;
695,698c584,588
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen) {
<   int small = 0,  verbosity = 0,  ret;
<   
---
> BZ2_bzBuffToBuffDecompress ( char *dest, unsigned *destLen, char *source,
> 			     unsigned sourceLen )
> {
>   int small = 0, verbosity = 0, ret;
> 
700d589
<   
702c591
<   if (1)
---
>   if ( 1 )
709,711c598
<   source = sourceLen =
< 
<       0;
---
>   source = sourceLen = 0;
720d606
<   
723,724c609,611
< BZ2_bzlibVersion() {}
< 
---
> BZ2_bzlibVersion (  )
> {
> }
725a613,615
> *BZ2_bzopen ( const char *path, const char *mode )
> {
> }
727c617,619
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzdopen ( int d, const char *mode )
> {
> }
729c621,624
<     * BZ2_bzdopen(int d, const char *mode) {}
---
> BZ2_bzread ( BZFILE * b )
> {
>   void *buf = 0;
>   int len = 0, bzerr, nread;
731,735c626
< BZ2_bzread(BZFILE *b) {
<   void * buf = 0;
<   int len = 0,  bzerr, nread;
<   
<   (bzFile *)b;
---
>   ( bzFile * ) b;
742,744c633,636
< BZ2_bzwrite(BZFILE *b) {
<   void * buf = 0;
<   int len = 0,  bzerr
---
> BZ2_bzwrite ( BZFILE * b )
> {
>   void *buf = 0;
>   int len = 0, bzerr;
746,748c638
<       ;
<   
<   if (bzerr == BZ_OK)
---
>   if ( bzerr == BZ_OK )
752a643,645
> BZ2_bzclose ( void )
> {
>   int b = 0, bzerr;
753a647
>   FILE *fp = ( bzFile * ) b;
755,760c649
< BZ2_bzclose(void) {
<   int b = 0,  bzerr;
<   
<   FILE *fp = (bzFile *)b;
< 
<   if ((bzFile *)b)
---
>   if ( ( bzFile * ) b )
762c651
<     if (BZ_OK)
---
>     if ( BZ_OK )
764,765c653,654
<       if (stdout)
<         ;
---
>       if ( stdout )
> 	;
767a657,660
> const char *
> BZ2_bzerror ( BZFILE * b, int *errnum )
> {
>   int err = ( bzFile * ) b;
769,773c662
< 
< const char *BZ2_bzerror(BZFILE *b, int *errnum) {
<   int err = (bzFile *)b;
< 
<   (bzFile *)b;
---
>   ( bzFile * ) b;
784d672
<  
\ No newline at end of file
1c1
<  
---
> 
17,31c17,31
<   char next_in;
<   int avail_in;
<   int total_in_lo32;
<   int total_in_hi32;
< 
<   char next_out;
<   int avail_out;
<   int total_out_lo32;
<   int total_out_hi32;
< 
<   void *state;
< 
<   void (*bzalloc);
<   void (*bzfree)(void);
<   void *opaque
---
>     char next_in;
>     int avail_in;
>     int total_in_lo32;
>     int total_in_hi32;
> 
>     char next_out;
>     int avail_out;
>     int total_out_lo32;
>     int total_out_hi32;
> 
>     void *state;
> 
>     void (*bzalloc);
>     void (*bzfree)(void);
>     void *opaque
39c39
< BZ2_bzCompressvoid, 
---
> BZ2_bzCompressvoid,
41c41
< strm, 
---
> strm,
43c43
< s, 
---
> s,
47c47
< default_bzalloc, 
---
> default_bzalloc,
53c53
< default_bzfree, 
---
> default_bzfree,
55c55
< bzopen_or_bzdopen, 
---
> bzopen_or_bzdopen,
59d58
<     
61c60,61
<     ;
---
> 
> ;
77c77
< *bzerrorstrings = 
---
> *bzerrorstrings =
166c166
<   bz_stream strm;
---
>     bz_stream strm;
168,169c168,169
<   Int32 mode;
<   Int32 state
---
>     Int32 mode;
>     Int32 state
171,180c171
<       ;
< 
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
< 
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
---
>     ;
182c173,180
<   Int32 workFactor
---
>     UInt32 arr1;
>     UInt32 arr2;
>     UInt32 ftab;
> 
>     UInt32 ptr;
>     char block;
>     short mtfv;
>     char zbits;
184c182
<       ;
---
>     Int32 workFactor
186,187c184
<   Int32 nblock;
<   Int32 nblockMAX
---
>     ;
189c186,187
<       ;
---
>     Int32 nblock;
>     Int32 nblockMAX
191,193c189
<   Int32 nInUse;
<   char inUse[6];
<   char unseqToSeq[6]
---
>     ;
195,196c191,193
<       ;
<   UInt32 combinedCRC;
---
>     Int32 nInUse;
>     char inUse[6];
>     char unseqToSeq[6]
198,200c195,196
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>     ;
>     UInt32 combinedCRC;
202,205c198,205
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
---
>     Int32 verbosity;
>     Int32 blockNo;
>     Int32 blockSize100k;
> 
>     Int32 nMTF;
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>     char;
>     char;
207c207
<   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
---
>     char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
211c211
<     ;
---
> ;
220,222c220
<   bz_stream strm;
< 
<   Int32 state
---
>     bz_stream strm;
224c222
<       ;
---
>     Int32 state
226c224
<   ;
---
>     ;
228,229c226
<   UInt32 bsBuff;
<   Int32 bsLive
---
>     ;
231,234c228,229
<       ;
<   char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity
---
>     UInt32 bsBuff;
>     Int32 bsLive
236,240c231,234
<       ;
<   Int32;
<   ;
<   Int32;
<   Int32;
---
>     ;
>     char smallDecompress;
>     Int32 currBlockNo;
>     Int32 verbosity
242c236,240
<   UInt32 tt;
---
>     ;
>     Int32;
>     ;
>     Int32;
>     Int32;
244,245c242
<   short ll16;
<   char ll4
---
>     UInt32 tt;
247,248c244,245
<       ;
<   UInt32 calculatedCombinedCRC
---
>     short ll16;
>     char ll4
250,253c247,248
<       ;
<   char;
<   char;
<   char;
---
>     ;
>     UInt32 calculatedCombinedCRC
255,257c250,257
<   char;
<   Int32
<       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
---
>     ;
>     char;
>     char;
>     char;
> 
>     char;
>     Int32
>     mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE]
259c259
<       ;
---
>     ;
296c296
<   Int32 i
---
>     Int32 i
298c298
<       = 0;
---
>         = 0;
300c300
<   for (;;) ;
---
>     for (;;) ;
305,313c305,306
<   unsigned char yy;
<   Int32 i, j, zPend, wr, EOB, ptr;
<   
<   
<   
< 
<   
<   char *block = block;
<   short mtfv = mtfv
---
>     unsigned char yy;
>     Int32 i, j, zPend, wr, EOB, ptr;
315d307
<       = 0;
317,318c309,318
<   for (;;)
<     generateMTFValues_s.mtfFreq[0]
---
> 
> 
> 
>     char *block = block;
>     short mtfv = mtfv
> 
>                  = 0;
> 
>     for (;;)
>         generateMTFValues_s.mtfFreq[0]
322c322
<   for (;;)
---
>     for (;;)
324c324
<     for (;;) 
---
>         for (;;)
326,327c326,327
<     ;
<   generateMTFValues_s.mtfFreq;
---
>             ;
>     generateMTFValues_s.mtfFreq;
329c329
<   0;
---
>     0;
344c344
<     ;
---
> ;
347,350c347
<   int verbosity = 0,  workFactor = 0, n;
<   
<   
<   EState *s;
---
>     int verbosity = 0,  workFactor = 0, n;
352c349,350
<   if (0)
---
> 
>     EState *s;
356c354
<       if (0)
---
>         if (0)
358,360c356
<         if (bzalloc NULL)
<           default_bzalloc;
<   if (bzfree NULL)
---
>             if (0)
362,363c358,363
<     BZALLOC();
<   if NULL
---
>                 if (bzalloc NULL)
>                     default_bzalloc;
>     if (bzfree NULL)
> 
>         BZALLOC();
>     if NULL
367,376c367,369
<         NULL;
<   arr2 NULL;
<   ftab NULL
< 
<       *blockSize100k;
<   ;
<   0;
<   
<   0;
<   ;
---
>     NULL;
> arr2 NULL;
> ftab NULL
378c371,373
<   if (arr1 NULL == NULL)
---
> *blockSize100k;
> ;
> 0;
380,382c375,378
<     0;
<   BZ_S_INPUT;
<   BZ_M_RUNNING;
---
> 0;
> ;
> 
> if (arr1 NULL == NULL)
384c380,382
<   0;
---
>         0;
>     BZ_S_INPUT;
>     BZ_M_RUNNING;
386,388c384
<   ;
<   ;
<   zbits NULL;
---
>     0;
390,391c386,391
<   s = 0;
<   0;
---
>     ;
>     ;
>     zbits NULL;
> 
>     s = 0;
>     0;
393c393
<   return BZ_OK;
---
>     return BZ_OK;
397,398c397,398
<   bz_stream * strm = 0;
<   int action = 0;
---
>     bz_stream * strm = 0;
>     int action = 0;
400,401c400,401
<   EState *s;
<   if NULL
---
>     EState *s;
>     if NULL
404c404
<   if NULL
---
> if NULL
408,409c408,409
<       switch (s->mode)
<         ;
---
>             switch (s->mode)
>                 ;
413,415c413,415
<   bz_stream *strm = 0;
<   EState s;
<   if NULL
---
>     bz_stream *strm = 0;
>     EState s;
>     if NULL
418c418
<   if NULL
---
> if NULL
422,427c422,427
<       if (arr1 NULL)
<         arr1;
<   if (arr2 NULL)
<     arr2;
<   if (ftab NULL)
<     ftab;
---
>             if (arr1 NULL)
>                 arr1;
>     if (arr2 NULL)
>         arr2;
>     if (ftab NULL)
>         ftab;
429c429
<   ;
---
>     ;
433,435c433
<   int verbosity = 0,  small = 0;
<   
<   DState *s;
---
>     int verbosity = 0,  small = 0;
437c435
<   if (0)
---
>     DState *s;
439c437,439
<     if NULL
---
>     if (0)
> 
>         if NULL
441c441
<       if (1)
---
>         if (1)
443c443
<         if (4)
---
>                 if (4)
445,447c445,447
<           if (bzalloc NULL)
<             default_bzalloc;
<   if (bzfree NULL)
---
>                     if (bzalloc NULL)
>                         default_bzalloc;
>     if (bzfree NULL)
449,450c449,450
<     BZALLOC();
<   if NULL
---
>         BZALLOC();
>     if NULL
453c453
<   s
---
> s
455,459c455,459
<       = 0;
<   0;
<   0;
<   small = ll16 NULL;
<   tt NULL;
---
>     = 0;
> 0;
> 0;
> small = ll16 NULL;
> tt NULL;
461c461
<   return BZ_OK;
---
> return BZ_OK;
466,469c466,469
<     BZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
<   DState s;
<   if NULL
---
> BZ2_bzDecompress(void) {
>     bz_stream *strm = 0;
>     DState s;
>     if NULL
472c472
<   if NULL
---
> if NULL
476c476
<       1
---
>             1
478c478
<           ;
---
>             ;
482,484c482,484
<   bz_stream *strm = 0;
<   DState s;
<   if NULL
---
>     bz_stream *strm = 0;
>     DState s;
>     if NULL
487c487
<   if NULL
---
> if NULL
491,496c491,496
<       if (tt NULL)
<         tt;
<   if (ll16 NULL)
<     ll16;
<   if (ll4 NULL)
<     ll4
---
>             if (tt NULL)
>                 tt;
>     if (ll16 NULL)
>         ll16;
>     if (ll4 NULL)
>         ll4
499c499
<   ;
---
>     ;
505,511c505,511
<   FILE handle;
<   char buf;
<   Int32 bufN;
<   char writing;
<   bz_stream strm;
<   Int32 lastErr;
<   char initialisedOk
---
>     FILE handle;
>     char buf;
>     Int32 bufN;
>     char writing;
>     bz_stream strm;
>     Int32 lastErr;
>     char initialisedOk
516,517c516,517
<   Int32 ret;
<   bzFile *bzf
---
>     Int32 ret;
>     bzFile *bzf
519c519
<       ;
---
>     ;
521c521
<   workFactor;
---
>     workFactor;
523c523
<   NULL
---
>     NULL
525,528c525,528
<       ;
<   False;
<   0;
<   f = bzf
---
>     ;
>     False;
>     0;
>     f = bzf
530c530
<       = NULL;
---
>         = NULL;
532c532
<   0;
---
>     0;
534c534
<   bzf;
---
>     bzf;
538,541c538,541
<   void * buf = 0;
<   int len = 0, ret;
<   
<   bzFile *bzf
---
>     void * buf = 0;
>     int len = 0, ret;
> 
>     bzFile *bzf
543,545c543,545
<       ;
<   0;
<   bzf;
---
>     ;
>     0;
>     bzf;
547c547
<   bzf = buf;
---
>     bzf = buf;
549c549
<   bzf
---
>     bzf
551,552c551,552
<       ;
<   BZ_RUN_OK;
---
>     ;
>     BZ_RUN_OK;
554c554
<   bzf <
---
>     bzf <
556,557c556,557
<           bzf ==
<       0;
---
>     bzf ==
>     0;
559c559
<   ;
---
>     ;
568c568
<   bzFile bzf;
---
>     bzFile bzf;
570,574c570,572
<   NULL;
<   &bzf;
<   ferror;
< 
<   if NULL
---
>     NULL;
>     &bzf;
>     ferror;
578c576
<       if NULL
---
>     if NULL
582c580,582
<           if (!
---
>             if NULL
> 
>                 if (!
584,586c584,586
<               nbytes_in_lo32)
<             bzf;
<   if NULL
---
>                             nbytes_in_lo32)
>                         bzf;
>     if NULL
588c588
<   if NULL
---
> if NULL
590c590
<   if NULL
---
> if NULL
593c593
<         ;
---
>     ;
598,599c598,599
<   bzFile *bzf;
<   int ret
---
>     bzFile *bzf;
>     int ret
601c601
<       ;
---
>     ;
603c603
<   verbosity != BZ_MAX_UNUSED;
---
>     verbosity != BZ_MAX_UNUSED;
605c605
<   NULL
---
>     NULL
607c607
<       ;
---
>     ;
609,611c609,611
<   False;
<   f = False;
<   bzf
---
>     False;
>     f = False;
>     bzf
613c613
<       = NULL;
---
>         = NULL;
615c615
<   while (0)
---
>     while (0)
617,618c617,618
<     bzf;
<   bzf
---
>         bzf;
>     bzf
620c620
<       = malloc;
---
>         = malloc;
624c624
<   bzFile bzf
---
>     bzFile bzf
626,627c626,627
<       ;
<   NULL;
---
>     ;
>     NULL;
629c629
<   &bzf;
---
>     &bzf;
631c631
<   &bzf;
---
>     &bzf;
633c633
<   ;
---
>     ;
637,638c637,638
<   void * buf = 0;
<   int len = 0;
---
>     void * buf = 0;
>     int len = 0;
640c640
<   bzFile *bzf
---
>     bzFile *bzf
642c642
<       ;
---
>     ;
644c644
<   0;
---
>     0;
646c646
<   bzf;
---
>     bzf;
648c648
<   0;
---
>     0;
650c650
<   bzf = buf;
---
>     bzf = buf;
652c652
<   return 0;
---
>     return 0;
656,663c656,663
<   bzFile bzf;
<   NULL;
<   BZ_STREAM_END;
<   NULL
< 
<       ;
<   &bzf;
<   &bzf;
---
>     bzFile bzf;
>     NULL;
>     BZ_STREAM_END;
>     NULL
> 
>     ;
>     &bzf;
>     &bzf;
668,671c668
<   int verbosity = 0,  workFactor = 0,  ret;
<   
<   bz_stream strm;
<   
---
>     int verbosity = 0,  workFactor = 0,  ret;
673c670
<   if (
---
>     bz_stream strm;
675d671
<       0)
677c673
<     if (0)
---
>     if (
679,682c675
<       bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
---
>         0)
684c677
<   source = sourceLen =
---
>         if (0)
686,687c679,687
<       0;
<   ;
---
>             bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     ;
> 
>     source = sourceLen =
> 
>                  0;
>     ;
689,690c689,690
<   ;
<   ;
---
>     ;
>     ;
692c692
<   ;
---
>     ;
697,700c697
<   int small = 0,  verbosity = 0,  ret;
<   
<   bz_stream strm;
<   
---
>     int small = 0,  verbosity = 0,  ret;
702c699
<   if (1)
---
>     bz_stream strm;
704,707d700
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
709c702
<   source = sourceLen =
---
>     if (1)
711,712c704,707
<       0;
<   ;
---
>         bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     ;
714,715c709,715
<   ;
<   ;
---
>     source = sourceLen =
> 
>                  0;
>     ;
> 
>     ;
>     ;
718c718,719
<   0;
---
>     0;
> 
720d720
<   
727c727
< *BZ2_bzopen(const char *path, const char *mode){}
---
> *BZ2_bzopen(const char *path, const char *mode) {}
729c729
<     * BZ2_bzdopen(int d, const char *mode) {}
---
> * BZ2_bzdopen(int d, const char *mode) {}
732,735c732,733
<   void * buf = 0;
<   int len = 0,  bzerr, nread;
<   
<   (bzFile *)b;
---
>     void * buf = 0;
>     int len = 0,  bzerr, nread;
737c735
<   ;
---
>     (bzFile *)b;
739c737,739
<   ;
---
>     ;
> 
>     ;
743,744c743,744
<   void * buf = 0;
<   int len = 0,  bzerr
---
>     void * buf = 0;
>     int len = 0,  bzerr
746,748c746
<       ;
<   
<   if (bzerr == BZ_OK)
---
>               ;
750c748,750
<     ;
---
>     if (bzerr == BZ_OK)
> 
>         ;
756,758c756
<   int b = 0,  bzerr;
<   
<   FILE *fp = (bzFile *)b;
---
>     int b = 0,  bzerr;
760c758
<   if ((bzFile *)b)
---
>     FILE *fp = (bzFile *)b;
762c760
<     if (BZ_OK)
---
>     if ((bzFile *)b)
764,765c762,765
<       if (stdout)
<         ;
---
>         if (BZ_OK)
> 
>             if (stdout)
>                 ;
771c771
<   int err = (bzFile *)b;
---
>     int err = (bzFile *)b;
773c773
<   (bzFile *)b;
---
>     (bzFile *)b;
775c775
<   "";
---
>     "";
784d783
<  
\ No newline at end of file
(96.1 %, 7909 bytes)
17,31c17,32
<   char next_in;
<   int avail_in;
<   int total_in_lo32;
<   int total_in_hi32;
< 
<   char next_out;
<   int avail_out;
<   int total_out_lo32;
<   int total_out_hi32;
< 
<   void *state;
< 
<   void ( *bzalloc );
<   void ( *bzfree ) ( void );
< void *opaque} bz_stream;
---
>     char next_in;
>     int avail_in;
>     int total_in_lo32;
>     int total_in_hi32;
> 
>     char next_out;
>     int avail_out;
>     int total_out_lo32;
>     int total_out_hi32;
> 
>     void *state;
> 
>     void ( *bzalloc );
>     void ( *bzfree ) ( void );
>     void *opaque
> } bz_stream;
39c40
<   strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen, BZ2_bzflush;
---
> strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen, BZ2_bzflush;
70c71
< 			  unsigned *, unsigned * );
---
>                           unsigned *, unsigned * );
126c127
<   bz_stream strm;
---
>     bz_stream strm;
128,129c129,130
<   Int32 mode;
<   Int32 state;
---
>     Int32 mode;
>     Int32 state;
131,133c132,134
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
---
>     UInt32 arr1;
>     UInt32 arr2;
>     UInt32 ftab;
135,138c136,139
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
---
>     UInt32 ptr;
>     char block;
>     short mtfv;
>     char zbits;
140c141
<   Int32 workFactor;
---
>     Int32 workFactor;
142,143c143,144
<   Int32 nblock;
<   Int32 nblockMAX;
---
>     Int32 nblock;
>     Int32 nblockMAX;
145,148c146,149
<   Int32 nInUse;
<   char inUse[6];
<   char unseqToSeq[6];
<   UInt32 combinedCRC;
---
>     Int32 nInUse;
>     char inUse[6];
>     char unseqToSeq[6];
>     UInt32 combinedCRC;
150,152c151,153
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>     Int32 verbosity;
>     Int32 blockNo;
>     Int32 blockSize100k;
154,157c155,158
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
---
>     Int32 nMTF;
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>     char;
>     char;
159c160,161
< char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE} EState;
---
>     char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
> } EState;
169c171
<   bz_stream strm;
---
>     bz_stream strm;
171c173
<   Int32 state;
---
>     Int32 state;
173c175
<    ;
---
>     ;
175,179c177,181
<   UInt32 bsBuff;
<   Int32 bsLive;
<   char smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>     UInt32 bsBuff;
>     Int32 bsLive;
>     char smallDecompress;
>     Int32 currBlockNo;
>     Int32 verbosity;
181c183
<    ;
---
>     ;
185c187
<   UInt32 tt;
---
>     UInt32 tt;
187,192c189,194
<   short ll16;
<   char ll4;
<   UInt32 calculatedCombinedCRC;
<   char;
<   char;
<   char;
---
>     short ll16;
>     char ll4;
>     UInt32 calculatedCombinedCRC;
>     char;
>     char;
>     char;
194c196
<   char;
---
>     char;
234c236
<   Int32 i = 0;
---
>     Int32 i = 0;
236c238
<   for ( ;; ) ;
---
>     for ( ;; ) ;
241,242c243,244
<   unsigned char yy;
<   Int32 i, j, zPend, wr, EOB, ptr;
---
>     unsigned char yy;
>     Int32 i, j, zPend, wr, EOB, ptr;
244,245c246,247
<   char *block = block;
<   short mtfv = mtfv = 0;
---
>     char *block = block;
>     short mtfv = mtfv = 0;
247,250c249,250
<   for ( ;; )
<     generateMTFValues_s.mtfFreq[0];
< 
<   for ( ;; )
---
>     for ( ;; )
>         generateMTFValues_s.mtfFreq[0];
254,255c254
<       ;
<   generateMTFValues_s.mtfFreq;
---
>         for ( ;; )
257c256,259
<   0;
---
>             ;
>     generateMTFValues_s.mtfFreq;
> 
>     0;
268,270c270
<   int verbosity = 0, workFactor = 0, n;
< 
<   EState *s;
---
>     int verbosity = 0, workFactor = 0, n;
272c272
<   if ( 0 )
---
>     EState *s;
276c276
<       if ( 0 )
---
>         if ( 0 )
278,280c278
< 	if ( bzalloc NULL )
< 	  default_bzalloc;
<   if ( bzfree NULL )
---
>             if ( 0 )
282,283c280,285
<     BZALLOC (  );
<   if NULL
---
>                 if ( bzalloc NULL )
>                     default_bzalloc;
>     if ( bzfree NULL )
> 
>         BZALLOC (  );
>     if NULL
286,289c288,291
<   arr2 NULL;
<   ftab NULL * blockSize100k;
<   ;
<   0;
---
> arr2 NULL;
> ftab NULL * blockSize100k;
> ;
> 0;
291,292c293,294
<   0;
<   ;
---
> 0;
> ;
294c296
<   if ( arr1 NULL == NULL )
---
> if ( arr1 NULL == NULL )
296,298c298,300
<     0;
<   BZ_S_INPUT;
<   BZ_M_RUNNING;
---
>         0;
>     BZ_S_INPUT;
>     BZ_M_RUNNING;
300c302
<   0;
---
>     0;
302,304c304,306
<   ;
<   ;
<   zbits NULL;
---
>     ;
>     ;
>     zbits NULL;
306,307c308,309
<   s = 0;
<   0;
---
>     s = 0;
>     0;
309c311
<   return BZ_OK;
---
>     return BZ_OK;
315,316c317,318
<   bz_stream *strm = 0;
<   int action = 0;
---
>     bz_stream *strm = 0;
>     int action = 0;
318,319c320,321
<   EState *s;
<   if NULL
---
>     EState *s;
>     if NULL
322c324
<   if NULL
---
> if NULL
326,327c328,329
<       switch ( s->mode )
< 	;
---
>             switch ( s->mode )
>                 ;
332,334c334,336
<   bz_stream *strm = 0;
<   EState s;
<   if NULL
---
>     bz_stream *strm = 0;
>     EState s;
>     if NULL
337c339
<   if NULL
---
> if NULL
341,346c343,348
<       if ( arr1 NULL )
< 	arr1;
<   if ( arr2 NULL )
<     arr2;
<   if ( ftab NULL )
<     ftab;
---
>             if ( arr1 NULL )
>                 arr1;
>     if ( arr2 NULL )
>         arr2;
>     if ( ftab NULL )
>         ftab;
348c350
<   ;
---
>     ;
353c355
<   int verbosity = 0, small = 0;
---
>     int verbosity = 0, small = 0;
355c357
<   DState *s;
---
>     DState *s;
357c359
<   if ( 0 )
---
>     if ( 0 )
359c361
<     if NULL
---
>         if NULL
361c363
<       if ( 1 )
---
>         if ( 1 )
363c365
< 	if ( 4 )
---
>                 if ( 4 )
365,367c367,369
< 	  if ( bzalloc NULL )
< 	    default_bzalloc;
<   if ( bzfree NULL )
---
>                     if ( bzalloc NULL )
>                         default_bzalloc;
>     if ( bzfree NULL )
369,370c371,372
<     BZALLOC (  );
<   if NULL
---
>         BZALLOC (  );
>     if NULL
373,377c375,379
<   s = 0;
<   0;
<   0;
<   small = ll16 NULL;
<   tt NULL;
---
> s = 0;
> 0;
> 0;
> small = ll16 NULL;
> tt NULL;
379c381
<   return BZ_OK;
---
> return BZ_OK;
385,387c387,389
<   bz_stream *strm = 0;
<   DState s;
<   if NULL
---
>     bz_stream *strm = 0;
>     DState s;
>     if NULL
390c392
<   if NULL
---
> if NULL
394c396
<       1;
---
>             1;
399,401c401,403
<   bz_stream *strm = 0;
<   DState s;
<   if NULL
---
>     bz_stream *strm = 0;
>     DState s;
>     if NULL
404c406
<   if NULL
---
> if NULL
408,414c410,416
<       if ( tt NULL )
< 	tt;
<   if ( ll16 NULL )
<     ll16;
<   if ( ll4 NULL )
<     ll4;
<   ;
---
>             if ( tt NULL )
>                 tt;
>     if ( ll16 NULL )
>         ll16;
>     if ( ll4 NULL )
>         ll4;
>     ;
421,427c423,430
<   FILE handle;
<   char buf;
<   Int32 bufN;
<   char writing;
<   bz_stream strm;
<   Int32 lastErr;
< char initialisedOk} bzFile;
---
>     FILE handle;
>     char buf;
>     Int32 bufN;
>     char writing;
>     bz_stream strm;
>     Int32 lastErr;
>     char initialisedOk
> } bzFile;
430c433
< 		   int workFactor )
---
>                    int workFactor )
432,433c435,436
<   Int32 ret;
<   bzFile *bzf;
---
>     Int32 ret;
>     bzFile *bzf;
435c438
<   workFactor;
---
>     workFactor;
437,440c440,443
<   NULL;
<   False;
<   0;
<   f = bzf = NULL;
---
>     NULL;
>     False;
>     0;
>     f = bzf = NULL;
442c445
<   0;
---
>     0;
444c447
<   bzf;
---
>     bzf;
450,451c453,454
<   void *buf = 0;
<   int len = 0, ret;
---
>     void *buf = 0;
>     int len = 0, ret;
453,455c456,458
<   bzFile *bzf;
<   0;
<   bzf;
---
>     bzFile *bzf;
>     0;
>     bzf;
457c460
<   bzf = buf;
---
>     bzf = buf;
459,460c462,463
<   bzf;
<   BZ_RUN_OK;
---
>     bzf;
>     BZ_RUN_OK;
462c465
<   bzf < bzf == 0;
---
>     bzf < bzf == 0;
464c467
<   ;
---
>     ;
469,470c472,473
< 		     unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
< 		     unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 )
---
>                      unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                      unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 )
473c476
<   bzFile bzf;
---
>     bzFile bzf;
475,477c478,480
<   NULL;
<   &bzf;
<   ferror;
---
>     NULL;
>     &bzf;
>     ferror;
479c482
<   if NULL
---
>     if NULL
483c486
<       if NULL
---
>         if NULL
485c488
< 	if NULL
---
>             if NULL
487,489c490,492
< 	  if ( !nbytes_in_lo32 )
< 	    bzf;
<   if NULL
---
>                 if ( !nbytes_in_lo32 )
>                         bzf;
>     if NULL
491c494
<   if NULL
---
> if NULL
493c496
<   if NULL
---
> if NULL
498c501
< 		  void *unused, int nUnused )
---
>                   void *unused, int nUnused )
500,501c503,504
<   bzFile *bzf;
<   int ret;
---
>     bzFile *bzf;
>     int ret;
503c506
<   verbosity != BZ_MAX_UNUSED;
---
>     verbosity != BZ_MAX_UNUSED;
505c508
<   NULL;
---
>     NULL;
507,509c510,512
<   False;
<   f = False;
<   bzf = NULL;
---
>     False;
>     f = False;
>     bzf = NULL;
511c514
<   while ( 0 )
---
>     while ( 0 )
513,514c516,517
<     bzf;
<   bzf = malloc;
---
>         bzf;
>     bzf = malloc;
520,521c523,524
<   bzFile bzf;
<   NULL;
---
>     bzFile bzf;
>     NULL;
523c526
<   &bzf;
---
>     &bzf;
525c528
<   &bzf;
---
>     &bzf;
527c530
<   ;
---
>     ;
532,533c535,536
<   void *buf = 0;
<   int len = 0;
---
>     void *buf = 0;
>     int len = 0;
535c538
<   bzFile *bzf;
---
>     bzFile *bzf;
537c540
<   0;
---
>     0;
539c542
<   bzf;
---
>     bzf;
541c544
<   0;
---
>     0;
543c546
<   bzf = buf;
---
>     bzf = buf;
545c548
<   return 0;
---
>     return 0;
551,556c554,559
<   bzFile bzf;
<   NULL;
<   BZ_STREAM_END;
<   NULL;
<   &bzf;
<   &bzf;
---
>     bzFile bzf;
>     NULL;
>     BZ_STREAM_END;
>     NULL;
>     &bzf;
>     &bzf;
560c563
< 			   unsigned sourceLen, int blockSize100k )
---
>                            unsigned sourceLen, int blockSize100k )
562,564c565
<   int verbosity = 0, workFactor = 0, ret;
< 
<   bz_stream strm;
---
>     int verbosity = 0, workFactor = 0, ret;
566c567
<   if ( 0 )
---
>     bz_stream strm;
570,573c571
<       bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
---
>         if ( 0 )
575,576c573,576
<   source = sourceLen = 0;
<   ;
---
>             bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     ;
578,579c578,582
<   ;
<   ;
---
>     source = sourceLen = 0;
>     ;
> 
>     ;
>     ;
581c584
<   ;
---
>     ;
585c588
< 			     unsigned sourceLen )
---
>                              unsigned sourceLen )
587c590
<   int small = 0, verbosity = 0, ret;
---
>     int small = 0, verbosity = 0, ret;
589c592
<   bz_stream strm;
---
>     bz_stream strm;
591c594
<   if ( 1 )
---
>     if ( 1 )
593,596c596,599
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   ;
---
>         bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     ;
598,599c601,602
<   source = sourceLen = 0;
<   ;
---
>     source = sourceLen = 0;
>     ;
601,602c604,605
<   ;
<   ;
---
>     ;
>     ;
605c608
<   0;
---
>     0;
623,624c626,627
<   void *buf = 0;
<   int len = 0, bzerr, nread;
---
>     void *buf = 0;
>     int len = 0, bzerr, nread;
626c629
<   ( bzFile * ) b;
---
>     ( bzFile * ) b;
628c631
<   ;
---
>     ;
630c633
<   ;
---
>     ;
635,636c638,639
<   void *buf = 0;
<   int len = 0, bzerr;
---
>     void *buf = 0;
>     int len = 0, bzerr;
638c641
<   if ( bzerr == BZ_OK )
---
>     if ( bzerr == BZ_OK )
640c643
<     ;
---
>         ;
645c648
<   int b = 0, bzerr;
---
>     int b = 0, bzerr;
647c650
<   FILE *fp = ( bzFile * ) b;
---
>     FILE *fp = ( bzFile * ) b;
649c652
<   if ( ( bzFile * ) b )
---
>     if ( ( bzFile * ) b )
651c654
<     if ( BZ_OK )
---
>         if ( BZ_OK )
653,654c656,657
<       if ( stdout )
< 	;
---
>             if ( stdout )
>                 ;
660c663
<   int err = ( bzFile * ) b;
---
>     int err = ( bzFile * ) b;
662c665
<   ( bzFile * ) b;
---
>     ( bzFile * ) b;
664c667
<   "";
---
>     "";
15,16c15
< typedef struct
< {
---
> typedef struct {
29,31c28,31
<   void ( *bzalloc );
<   void ( *bzfree ) ( void );
< void *opaque} bz_stream;
---
>   void(*bzalloc);
>   void (*bzfree)(void);
>   void *opaque
> } bz_stream;
38,39c38,39
< BZ2_bzCompressvoid,
<   strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen, BZ2_bzflush;
---
> BZ2_bzCompressvoid, strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen,
>     BZ2_bzflush;
54,55c54,55
< BZ2_bzDecompressInit ( bz_stream * );
< BZ2_bzCompressInit ( bz_stream *, int );
---
> BZ2_bzDecompressInit(bz_stream *);
> BZ2_bzCompressInit(bz_stream *, int);
57c57
< *BZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
---
> *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
59c59
< void BZ2_bzReadClose ( int *, BZFILE * );
---
> void BZ2_bzReadClose(int *, BZFILE *);
61c61
< void BZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
63c63
< BZ2_bzRead ( int *, BZFILE * );
---
> BZ2_bzRead(int *, BZFILE *);
65c65
< *BZ2_bzWriteOpen ( int *, FILE *, int, int, int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
67c67
< void BZ2_bzWrite ( int *, BZFILE * );
---
> void BZ2_bzWrite(int *, BZFILE *);
69,70c69,70
< void BZ2_bzWriteClose64 ( int *, BZFILE *, int, unsigned *, unsigned *,
< 			  unsigned *, unsigned * );
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
>                         unsigned *, unsigned *);
72c72
< BZ2_bzBuffToBuffCompress ( char *, unsigned *, char *, unsigned, int );
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
74c74
< BZ2_bzBuffToBuffDecompress ( char *, unsigned *, char *, unsigned );
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);
76c76
< *BZ2_bzopen ( const char *, const char * );
---
> *BZ2_bzopen(const char *, const char *);
78c78
< *BZ2_bzdopen ( int, const char * );
---
> *BZ2_bzdopen(int, const char *);
80c80
< BZ2_bzread ( BZFILE * );
---
> BZ2_bzread(BZFILE *);
82c82
< BZ2_bzwrite ( BZFILE * );
---
> BZ2_bzwrite(BZFILE *);
84c84
< const char *BZ2_bzerror ( BZFILE *, int * );
---
> const char *BZ2_bzerror(BZFILE *, int *);
123,124c123
< typedef struct
< {
---
> typedef struct {
159c158,159
< char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE} EState;
---
>   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
> } EState;
166,167c166
< typedef struct
< {
---
> typedef struct {
173c172
<    ;
---
>   ;
180,183c179,182
<     Int32;
<    ;
<     Int32;
<     Int32;
---
>   Int32;
>   ;
>   Int32;
>   Int32;
195,196c194,195
<     Int32
<     mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
---
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
208c207
< void BZ2_decompress (  );
---
> void BZ2_decompress();
232,233c231
< makeMaps_e (  )
< {
---
> makeMaps_e() {
236c234,235
<   for ( ;; ) ;
---
>   for (;;)
>     ;
239,240c238
< generateMTFValues (  )
< {
---
> generateMTFValues() {
247c245
<   for ( ;; )
---
>   for (;;)
250c248
<   for ( ;; )
---
>   for (;;)
252c250
<     for ( ;; )
---
>     for (;;)
266,267c264
< BZ2_bzCompressInit ( bz_stream * strm, int blockSize100k )
< {
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
272c269
<   if ( 0 )
---
>   if (0)
274c271
<     if ( 0 )
---
>     if (0)
276c273
<       if ( 0 )
---
>       if (0)
278,280c275,277
< 	if ( bzalloc NULL )
< 	  default_bzalloc;
<   if ( bzfree NULL )
---
>         if (bzalloc NULL)
>           default_bzalloc;
>   if (bzfree NULL)
282,283c279,281
<     BZALLOC (  );
<   if NULL
---
>     BZALLOC();
>   if
>     NULL
285c283
<     *NULL;
---
>         *NULL;
287c285
<   ftab NULL * blockSize100k;
---
>   ftab NULL *blockSize100k;
294c292
<   if ( arr1 NULL == NULL )
---
>   if (arr1 NULL == NULL)
312,314c310
< int
< BZ2_bzCompress ( void )
< {
---
> int BZ2_bzCompress(void) {
319c315,316
<   if NULL
---
>   if
>     NULL
321,322c318,320
<     ;
<   if NULL
---
>         ;
>   if
>     NULL
324c322
<     if ( strm )
---
>         if (strm)
326,327c324
<       switch ( s->mode )
< 	;
---
>             switch (s->mode);
330,331c327
< BZ2_bzCompressEnd ( void )
< {
---
> BZ2_bzCompressEnd(void) {
334c330,331
<   if NULL
---
>   if
>     NULL
336,337c333,335
<     ;
<   if NULL
---
>         ;
>   if
>     NULL
339c337
<     if ( strm )
---
>         if (strm)
341,343c339,340
<       if ( arr1 NULL )
< 	arr1;
<   if ( arr2 NULL )
---
>             if (arr1 NULL) arr1;
>   if (arr2 NULL)
345c342
<   if ( ftab NULL )
---
>   if (ftab NULL)
351,352c348
< BZ2_bzDecompressInit ( bz_stream * strm )
< {
---
> BZ2_bzDecompressInit(bz_stream *strm) {
357c353
<   if ( 0 )
---
>   if (0)
359c355,356
<     if NULL
---
>     if
>       NULL
361c358
<       if ( 1 )
---
>           if (1)
363c360
< 	if ( 4 )
---
>               if (4)
365,367c362,363
< 	  if ( bzalloc NULL )
< 	    default_bzalloc;
<   if ( bzfree NULL )
---
>                   if (bzalloc NULL) default_bzalloc;
>   if (bzfree NULL)
369,370c365,367
<     BZALLOC (  );
<   if NULL
---
>     BZALLOC();
>   if
>     NULL
372c369
<     *strm;
---
>         *strm;
382,384c379
< static
< BZ2_bzDecompress ( void )
< {
---
> static BZ2_bzDecompress(void) {
387c382,383
<   if NULL
---
>   if
>     NULL
389,390c385,387
<     ;
<   if NULL
---
>         ;
>   if
>     NULL
392c389
<     if ( strm )
---
>         if (strm)
394c391
<       1;
---
>             1;
397,398c394
< BZ2_bzDecompressEnd ( void )
< {
---
> BZ2_bzDecompressEnd(void) {
401c397,398
<   if NULL
---
>   if
>     NULL
403,404c400,402
<     ;
<   if NULL
---
>         ;
>   if
>     NULL
406c404
<     if ( strm )
---
>         if (strm)
408,410c406,407
<       if ( tt NULL )
< 	tt;
<   if ( ll16 NULL )
---
>             if (tt NULL) tt;
>   if (ll16 NULL)
412c409
<   if ( ll4 NULL )
---
>   if (ll4 NULL)
419,420c416
< typedef struct
< {
---
> typedef struct {
427c423,424
< char initialisedOk} bzFile;
---
>   char initialisedOk
> } bzFile;
429,431c426,427
< *BZ2_bzWriteOpen ( int *bzerror, FILE * f, int blockSize100k, int verbosity,
< 		   int workFactor )
< {
---
> *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor) {
447,449c443
< void
< BZ2_bzWrite ( int *bzerror, BZFILE * b )
< {
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) {
467,471c461,463
< void
< BZ2_bzWriteClose64 ( int *bzerror, BZFILE * b, int abandon,
< 		     unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
< 		     unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 )
< {
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
479c471,472
<   if NULL
---
>   if
>     NULL
481c474
<     if NULL
---
>         if NULL
483c476
<       if NULL
---
>         if NULL
485c478
< 	if NULL
---
>         if NULL
487,494c480,486
< 	  if ( !nbytes_in_lo32 )
< 	    bzf;
<   if NULL
<     bzf;
<   if NULL
<     bzf;
<   if NULL
<     bzf;
---
>         if (!nbytes_in_lo32) bzf;
>   if
>     NULL bzf;
>   if
>     NULL bzf;
>   if
>     NULL bzf;
497,499c489,490
< *BZ2_bzReadOpen ( int *bzerror, FILE * f, int verbosity, int small,
< 		  void *unused, int nUnused )
< {
---
> *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
>                 int nUnused) {
511c502
<   while ( 0 )
---
>   while (0)
517,519c508
< void
< BZ2_bzReadClose ( int *bzerror, BZFILE * b )
< {
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
530,531c519
< BZ2_bzRead ( int *bzerror, BZFILE * b )
< {
---
> BZ2_bzRead(int *bzerror, BZFILE *b) {
548,550c536
< void
< BZ2_bzReadGetUnused ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
< {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
559,561c545,546
< BZ2_bzBuffToBuffCompress ( char *dest, unsigned *destLen, char *source,
< 			   unsigned sourceLen, int blockSize100k )
< {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k) {
566c551
<   if ( 0 )
---
>   if (0)
568c553
<     if ( 0 )
---
>     if (0)
584,586c569,570
< BZ2_bzBuffToBuffDecompress ( char *dest, unsigned *destLen, char *source,
< 			     unsigned sourceLen )
< {
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen) {
591c575
<   if ( 1 )
---
>   if (1)
606d589
< 
609,611c592
< BZ2_bzlibVersion (  )
< {
< }
---
> BZ2_bzlibVersion(){}
613,615c594
< *BZ2_bzopen ( const char *path, const char *mode )
< {
< }
---
>     * BZ2_bzopen(const char *path, const char *mode){}
617,619c596
< *BZ2_bzdopen ( int d, const char *mode )
< {
< }
---
>     * BZ2_bzdopen(int d, const char *mode) {}
621,622c598
< BZ2_bzread ( BZFILE * b )
< {
---
> BZ2_bzread(BZFILE *b) {
626c602
<   ( bzFile * ) b;
---
>   (bzFile *)b;
633,634c609
< BZ2_bzwrite ( BZFILE * b )
< {
---
> BZ2_bzwrite(BZFILE *b) {
638c613
<   if ( bzerr == BZ_OK )
---
>   if (bzerr == BZ_OK)
643,644c618
< BZ2_bzclose ( void )
< {
---
> BZ2_bzclose(void) {
647c621
<   FILE *fp = ( bzFile * ) b;
---
>   FILE *fp = (bzFile *)b;
649c623
<   if ( ( bzFile * ) b )
---
>   if ((bzFile *)b)
651c625
<     if ( BZ_OK )
---
>     if (BZ_OK)
653,654c627,628
<       if ( stdout )
< 	;
---
>       if (stdout)
>         ;
657,660c631,632
< const char *
< BZ2_bzerror ( BZFILE * b, int *errnum )
< {
<   int err = ( bzFile * ) b;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) {
>   int err = (bzFile *)b;
662c634
<   ( bzFile * ) b;
---
>   (bzFile *)b;
(95.8 %, 8693 bytes)
15,31c15,30
< typedef struct
< {
<     char next_in;
<     int avail_in;
<     int total_in_lo32;
<     int total_in_hi32;
< 
<     char next_out;
<     int avail_out;
<     int total_out_lo32;
<     int total_out_hi32;
< 
<     void *state;
< 
<     void ( *bzalloc );
<     void ( *bzfree ) ( void );
<     void *opaque
---
> typedef struct {
>   char next_in;
>   int avail_in;
>   int total_in_lo32;
>   int total_in_hi32;
> 
>   char next_out;
>   int avail_out;
>   int total_out_lo32;
>   int total_out_hi32;
> 
>   void *state;
> 
>   void(*bzalloc);
>   void (*bzfree)(void);
>   void *opaque
39,40c38,39
< BZ2_bzCompressvoid,
< strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen, BZ2_bzflush;
---
> BZ2_bzCompressvoid, strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen,
>     BZ2_bzflush;
55,56c54,55
< BZ2_bzDecompressInit ( bz_stream * );
< BZ2_bzCompressInit ( bz_stream *, int );
---
> BZ2_bzDecompressInit(bz_stream *);
> BZ2_bzCompressInit(bz_stream *, int);
58c57
< *BZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
---
> *BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
60c59
< void BZ2_bzReadClose ( int *, BZFILE * );
---
> void BZ2_bzReadClose(int *, BZFILE *);
62c61
< void BZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
64c63
< BZ2_bzRead ( int *, BZFILE * );
---
> BZ2_bzRead(int *, BZFILE *);
66c65
< *BZ2_bzWriteOpen ( int *, FILE *, int, int, int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
68c67
< void BZ2_bzWrite ( int *, BZFILE * );
---
> void BZ2_bzWrite(int *, BZFILE *);
70,71c69,70
< void BZ2_bzWriteClose64 ( int *, BZFILE *, int, unsigned *, unsigned *,
<                           unsigned *, unsigned * );
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
>                         unsigned *, unsigned *);
73c72
< BZ2_bzBuffToBuffCompress ( char *, unsigned *, char *, unsigned, int );
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
75c74
< BZ2_bzBuffToBuffDecompress ( char *, unsigned *, char *, unsigned );
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);
77c76
< *BZ2_bzopen ( const char *, const char * );
---
> *BZ2_bzopen(const char *, const char *);
79c78
< *BZ2_bzdopen ( int, const char * );
---
> *BZ2_bzdopen(int, const char *);
81c80
< BZ2_bzread ( BZFILE * );
---
> BZ2_bzread(BZFILE *);
83c82
< BZ2_bzwrite ( BZFILE * );
---
> BZ2_bzwrite(BZFILE *);
85c84
< const char *BZ2_bzerror ( BZFILE *, int * );
---
> const char *BZ2_bzerror(BZFILE *, int *);
124,125c123
< typedef struct
< {
---
> typedef struct {
127c125
<     bz_stream strm;
---
>   bz_stream strm;
129,130c127,128
<     Int32 mode;
<     Int32 state;
---
>   Int32 mode;
>   Int32 state;
132,134c130,132
<     UInt32 arr1;
<     UInt32 arr2;
<     UInt32 ftab;
---
>   UInt32 arr1;
>   UInt32 arr2;
>   UInt32 ftab;
136,139c134,137
<     UInt32 ptr;
<     char block;
<     short mtfv;
<     char zbits;
---
>   UInt32 ptr;
>   char block;
>   short mtfv;
>   char zbits;
141c139
<     Int32 workFactor;
---
>   Int32 workFactor;
143,144c141,142
<     Int32 nblock;
<     Int32 nblockMAX;
---
>   Int32 nblock;
>   Int32 nblockMAX;
146,149c144,147
<     Int32 nInUse;
<     char inUse[6];
<     char unseqToSeq[6];
<     UInt32 combinedCRC;
---
>   Int32 nInUse;
>   char inUse[6];
>   char unseqToSeq[6];
>   UInt32 combinedCRC;
151,153c149,151
<     Int32 verbosity;
<     Int32 blockNo;
<     Int32 blockSize100k;
---
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
155,158c153,156
<     Int32 nMTF;
<     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<     char;
<     char;
---
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   char;
>   char;
160c158
<     char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
---
>   char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
168,169c166
< typedef struct
< {
---
> typedef struct {
171c168
<     bz_stream strm;
---
>   bz_stream strm;
173c170
<     Int32 state;
---
>   Int32 state;
175,187c172
<     ;
< 
<     UInt32 bsBuff;
<     Int32 bsLive;
<     char smallDecompress;
<     Int32 currBlockNo;
<     Int32 verbosity;
<     Int32;
<     ;
<     Int32;
<     Int32;
< 
<     UInt32 tt;
---
>   ;
189,198c174,195
<     short ll16;
<     char ll4;
<     UInt32 calculatedCombinedCRC;
<     char;
<     char;
<     char;
< 
<     char;
<     Int32
<     mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
---
>   UInt32 bsBuff;
>   Int32 bsLive;
>   char smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
>   Int32;
>   ;
>   Int32;
>   Int32;
> 
>   UInt32 tt;
> 
>   short ll16;
>   char ll4;
>   UInt32 calculatedCombinedCRC;
>   char;
>   char;
>   char;
> 
>   char;
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
210c207
< void BZ2_decompress (  );
---
> void BZ2_decompress();
234,236c231,232
< makeMaps_e (  )
< {
<     Int32 i = 0;
---
> makeMaps_e() {
>   Int32 i = 0;
238c234,235
<     for ( ;; ) ;
---
>   for (;;)
>     ;
241,244c238,240
< generateMTFValues (  )
< {
<     unsigned char yy;
<     Int32 i, j, zPend, wr, EOB, ptr;
---
> generateMTFValues() {
>   unsigned char yy;
>   Int32 i, j, zPend, wr, EOB, ptr;
246,247c242,243
<     char *block = block;
<     short mtfv = mtfv = 0;
---
>   char *block = block;
>   short mtfv = mtfv = 0;
249,250c245,246
<     for ( ;; )
<         generateMTFValues_s.mtfFreq[0];
---
>   for (;;)
>     generateMTFValues_s.mtfFreq[0];
252c248
<     for ( ;; )
---
>   for (;;)
254c250
<         for ( ;; )
---
>     for (;;)
256,257c252,253
<             ;
<     generateMTFValues_s.mtfFreq;
---
>       ;
>   generateMTFValues_s.mtfFreq;
259c255
<     0;
---
>   0;
268,270c264,265
< BZ2_bzCompressInit ( bz_stream * strm, int blockSize100k )
< {
<     int verbosity = 0, workFactor = 0, n;
---
> BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
>   int verbosity = 0, workFactor = 0, n;
272c267
<     EState *s;
---
>   EState *s;
274c269
<     if ( 0 )
---
>   if (0)
276c271
<         if ( 0 )
---
>     if (0)
278c273
<             if ( 0 )
---
>       if (0)
280,282c275,277
<                 if ( bzalloc NULL )
<                     default_bzalloc;
<     if ( bzfree NULL )
---
>         if (bzalloc NULL)
>           default_bzalloc;
>   if (bzfree NULL)
284,291c279,281
<         BZALLOC (  );
<     if NULL
< 
<     *NULL;
< arr2 NULL;
< ftab NULL * blockSize100k;
< ;
< 0;
---
>     BZALLOC();
>   if
>     NULL
293,294c283,287
< 0;
< ;
---
>         *NULL;
>   arr2 NULL;
>   ftab NULL *blockSize100k;
>   ;
>   0;
296c289,290
< if ( arr1 NULL == NULL )
---
>   0;
>   ;
298,300c292
<         0;
<     BZ_S_INPUT;
<     BZ_M_RUNNING;
---
>   if (arr1 NULL == NULL)
302a295,296
>   BZ_S_INPUT;
>   BZ_M_RUNNING;
304,306c298
<     ;
<     ;
<     zbits NULL;
---
>   0;
308,309c300,302
<     s = 0;
<     0;
---
>   ;
>   ;
>   zbits NULL;
311c304,307
<     return BZ_OK;
---
>   s = 0;
>   0;
> 
>   return BZ_OK;
314,318c310,312
< int
< BZ2_bzCompress ( void )
< {
<     bz_stream *strm = 0;
<     int action = 0;
---
> int BZ2_bzCompress(void) {
>   bz_stream *strm = 0;
>   int action = 0;
320,321c314,316
<     EState *s;
<     if NULL
---
>   EState *s;
>   if
>     NULL
323,324c318,320
<     ;
< if NULL
---
>         ;
>   if
>     NULL
326c322
<     if ( strm )
---
>         if (strm)
328,329c324
<             switch ( s->mode )
<                 ;
---
>             switch (s->mode);
332,336c327,331
< BZ2_bzCompressEnd ( void )
< {
<     bz_stream *strm = 0;
<     EState s;
<     if NULL
---
> BZ2_bzCompressEnd(void) {
>   bz_stream *strm = 0;
>   EState s;
>   if
>     NULL
338,339c333,335
<     ;
< if NULL
---
>         ;
>   if
>     NULL
341c337
<     if ( strm )
---
>         if (strm)
343,348c339,343
<             if ( arr1 NULL )
<                 arr1;
<     if ( arr2 NULL )
<         arr2;
<     if ( ftab NULL )
<         ftab;
---
>             if (arr1 NULL) arr1;
>   if (arr2 NULL)
>     arr2;
>   if (ftab NULL)
>     ftab;
350c345
<     ;
---
>   ;
353,355c348,349
< BZ2_bzDecompressInit ( bz_stream * strm )
< {
<     int verbosity = 0, small = 0;
---
> BZ2_bzDecompressInit(bz_stream *strm) {
>   int verbosity = 0, small = 0;
357c351
<     DState *s;
---
>   DState *s;
359c353
<     if ( 0 )
---
>   if (0)
361c355,356
<         if NULL
---
>     if
>       NULL
363c358
<         if ( 1 )
---
>           if (1)
365c360
<                 if ( 4 )
---
>               if (4)
367,369c362,363
<                     if ( bzalloc NULL )
<                         default_bzalloc;
<     if ( bzfree NULL )
---
>                   if (bzalloc NULL) default_bzalloc;
>   if (bzfree NULL)
371,372c365,367
<         BZALLOC (  );
<     if NULL
---
>     BZALLOC();
>   if
>     NULL
374,379c369,374
<     *strm;
< s = 0;
< 0;
< 0;
< small = ll16 NULL;
< tt NULL;
---
>         *strm;
>   s = 0;
>   0;
>   0;
>   small = ll16 NULL;
>   tt NULL;
381c376
< return BZ_OK;
---
>   return BZ_OK;
384,389c379,383
< static
< BZ2_bzDecompress ( void )
< {
<     bz_stream *strm = 0;
<     DState s;
<     if NULL
---
> static BZ2_bzDecompress(void) {
>   bz_stream *strm = 0;
>   DState s;
>   if
>     NULL
391,392c385,387
<     ;
< if NULL
---
>         ;
>   if
>     NULL
394c389
<     if ( strm )
---
>         if (strm)
399,403c394,398
< BZ2_bzDecompressEnd ( void )
< {
<     bz_stream *strm = 0;
<     DState s;
<     if NULL
---
> BZ2_bzDecompressEnd(void) {
>   bz_stream *strm = 0;
>   DState s;
>   if
>     NULL
405,406c400,402
<     ;
< if NULL
---
>         ;
>   if
>     NULL
408c404
<     if ( strm )
---
>         if (strm)
410,416c406,411
<             if ( tt NULL )
<                 tt;
<     if ( ll16 NULL )
<         ll16;
<     if ( ll4 NULL )
<         ll4;
<     ;
---
>             if (tt NULL) tt;
>   if (ll16 NULL)
>     ll16;
>   if (ll4 NULL)
>     ll4;
>   ;
421,429c416,423
< typedef struct
< {
<     FILE handle;
<     char buf;
<     Int32 bufN;
<     char writing;
<     bz_stream strm;
<     Int32 lastErr;
<     char initialisedOk
---
> typedef struct {
>   FILE handle;
>   char buf;
>   Int32 bufN;
>   char writing;
>   bz_stream strm;
>   Int32 lastErr;
>   char initialisedOk
432,436c426,429
< *BZ2_bzWriteOpen ( int *bzerror, FILE * f, int blockSize100k, int verbosity,
<                    int workFactor )
< {
<     Int32 ret;
<     bzFile *bzf;
---
> *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor) {
>   Int32 ret;
>   bzFile *bzf;
438c431
<     workFactor;
---
>   workFactor;
440,443c433,436
<     NULL;
<     False;
<     0;
<     f = bzf = NULL;
---
>   NULL;
>   False;
>   0;
>   f = bzf = NULL;
445c438
<     0;
---
>   0;
447c440
<     bzf;
---
>   bzf;
450,454c443,445
< void
< BZ2_bzWrite ( int *bzerror, BZFILE * b )
< {
<     void *buf = 0;
<     int len = 0, ret;
---
> void BZ2_bzWrite(int *bzerror, BZFILE *b) {
>   void *buf = 0;
>   int len = 0, ret;
456,458c447,449
<     bzFile *bzf;
<     0;
<     bzf;
---
>   bzFile *bzf;
>   0;
>   bzf;
460c451
<     bzf = buf;
---
>   bzf = buf;
462,463c453,454
<     bzf;
<     BZ_RUN_OK;
---
>   bzf;
>   BZ_RUN_OK;
465c456
<     bzf < bzf == 0;
---
>   bzf < bzf == 0;
467c458
<     ;
---
>   ;
470,474c461,463
< void
< BZ2_bzWriteClose64 ( int *bzerror, BZFILE * b, int abandon,
<                      unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                      unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 )
< {
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {
476c465
<     bzFile bzf;
---
>   bzFile bzf;
478,480c467,469
<     NULL;
<     &bzf;
<     ferror;
---
>   NULL;
>   &bzf;
>   ferror;
482c471,472
<     if NULL
---
>   if
>     NULL
484c474
<     if NULL
---
>         if NULL
488c478
<             if NULL
---
>         if NULL
490,497c480,486
<                 if ( !nbytes_in_lo32 )
<                         bzf;
<     if NULL
<     bzf;
< if NULL
<     bzf;
< if NULL
<     bzf;
---
>         if (!nbytes_in_lo32) bzf;
>   if
>     NULL bzf;
>   if
>     NULL bzf;
>   if
>     NULL bzf;
500,504c489,492
< *BZ2_bzReadOpen ( int *bzerror, FILE * f, int verbosity, int small,
<                   void *unused, int nUnused )
< {
<     bzFile *bzf;
<     int ret;
---
> *BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
>                 int nUnused) {
>   bzFile *bzf;
>   int ret;
506c494
<     verbosity != BZ_MAX_UNUSED;
---
>   verbosity != BZ_MAX_UNUSED;
508c496
<     NULL;
---
>   NULL;
510,512c498,500
<     False;
<     f = False;
<     bzf = NULL;
---
>   False;
>   f = False;
>   bzf = NULL;
514c502
<     while ( 0 )
---
>   while (0)
516,517c504,505
<         bzf;
<     bzf = malloc;
---
>     bzf;
>   bzf = malloc;
520,524c508,510
< void
< BZ2_bzReadClose ( int *bzerror, BZFILE * b )
< {
<     bzFile bzf;
<     NULL;
---
> void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
>   bzFile bzf;
>   NULL;
526c512
<     &bzf;
---
>   &bzf;
528c514
<     &bzf;
---
>   &bzf;
530c516
<     ;
---
>   ;
533,536c519,521
< BZ2_bzRead ( int *bzerror, BZFILE * b )
< {
<     void *buf = 0;
<     int len = 0;
---
> BZ2_bzRead(int *bzerror, BZFILE *b) {
>   void *buf = 0;
>   int len = 0;
538c523
<     bzFile *bzf;
---
>   bzFile *bzf;
540c525
<     0;
---
>   0;
542c527
<     bzf;
---
>   bzf;
544c529
<     0;
---
>   0;
546c531
<     bzf = buf;
---
>   bzf = buf;
548c533
<     return 0;
---
>   return 0;
551,559c536,542
< void
< BZ2_bzReadGetUnused ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
< {
<     bzFile bzf;
<     NULL;
<     BZ_STREAM_END;
<     NULL;
<     &bzf;
<     &bzf;
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
>   bzFile bzf;
>   NULL;
>   BZ_STREAM_END;
>   NULL;
>   &bzf;
>   &bzf;
562,565c545,547
< BZ2_bzBuffToBuffCompress ( char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int blockSize100k )
< {
<     int verbosity = 0, workFactor = 0, ret;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k) {
>   int verbosity = 0, workFactor = 0, ret;
567c549
<     bz_stream strm;
---
>   bz_stream strm;
569c551
<     if ( 0 )
---
>   if (0)
571c553
<         if ( 0 )
---
>     if (0)
573,576c555,558
<             bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
<     ;
---
>       bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   ;
578,579c560,561
<     source = sourceLen = 0;
<     ;
---
>   source = sourceLen = 0;
>   ;
581,582c563,564
<     ;
<     ;
---
>   ;
>   ;
584c566
<     ;
---
>   ;
587,599c569,571
< BZ2_bzBuffToBuffDecompress ( char *dest, unsigned *destLen, char *source,
<                              unsigned sourceLen )
< {
<     int small = 0, verbosity = 0, ret;
< 
<     bz_stream strm;
< 
<     if ( 1 )
< 
<         bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
<     ;
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen) {
>   int small = 0, verbosity = 0, ret;
601,602c573
<     source = sourceLen = 0;
<     ;
---
>   bz_stream strm;
604,605c575
<     ;
<     ;
---
>   if (1)
607,608c577,580
< output_overflow_or_eof:
<     0;
---
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   ;
610c582,583
< }
---
>   source = sourceLen = 0;
>   ;
612,614c585,586
< BZ2_bzlibVersion (  )
< {
< }
---
>   ;
>   ;
616,617c588,589
< *BZ2_bzopen ( const char *path, const char *mode )
< {
---
> output_overflow_or_eof:
>   0;
620,622c592
< *BZ2_bzdopen ( int d, const char *mode )
< {
< }
---
> BZ2_bzlibVersion(){}
624,627c594
< BZ2_bzread ( BZFILE * b )
< {
<     void *buf = 0;
<     int len = 0, bzerr, nread;
---
>     * BZ2_bzopen(const char *path, const char *mode){}
629c596
<     ( bzFile * ) b;
---
>     * BZ2_bzdopen(int d, const char *mode) {}
631c598,600
<     ;
---
> BZ2_bzread(BZFILE *b) {
>   void *buf = 0;
>   int len = 0, bzerr, nread;
633c602,606
<     ;
---
>   (bzFile *)b;
> 
>   ;
> 
>   ;
636,639c609,611
< BZ2_bzwrite ( BZFILE * b )
< {
<     void *buf = 0;
<     int len = 0, bzerr;
---
> BZ2_bzwrite(BZFILE *b) {
>   void *buf = 0;
>   int len = 0, bzerr;
641c613
<     if ( bzerr == BZ_OK )
---
>   if (bzerr == BZ_OK)
643c615
<         ;
---
>     ;
646,648c618,619
< BZ2_bzclose ( void )
< {
<     int b = 0, bzerr;
---
> BZ2_bzclose(void) {
>   int b = 0, bzerr;
650c621
<     FILE *fp = ( bzFile * ) b;
---
>   FILE *fp = (bzFile *)b;
652c623
<     if ( ( bzFile * ) b )
---
>   if ((bzFile *)b)
654c625
<         if ( BZ_OK )
---
>     if (BZ_OK)
656,657c627,628
<             if ( stdout )
<                 ;
---
>       if (stdout)
>         ;
660,663c631,632
< const char *
< BZ2_bzerror ( BZFILE * b, int *errnum )
< {
<     int err = ( bzFile * ) b;
---
> const char *BZ2_bzerror(BZFILE *b, int *errnum) {
>   int err = (bzFile *)b;
665c634
<     ( bzFile * ) b;
---
>   (bzFile *)b;
667c636
<     "";
---
>   "";
(96.1 %, 7970 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 8 times
  method pass_balanced :: angles-only worked 0 times and failed 26 times
  method pass_balanced :: curly worked 72 times and failed 79 times
  method pass_balanced :: curly-only worked 12 times and failed 62 times
  method pass_balanced :: parens worked 150 times and failed 278 times
  method pass_balanced :: parens-only worked 62 times and failed 88 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 23 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 7 times and failed 0 times
  method pass_clang :: combine-local-var worked 15 times and failed 0 times
  method pass_clang :: copy-propagation worked 23 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 4 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 8 times and failed 4 times
  method pass_clang :: param-to-global worked 19 times and failed 1 times
  method pass_clang :: param-to-local worked 22 times and failed 83 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 27 times and failed 44 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 1 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 0 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 1 times
  method pass_clang :: rename-var worked 0 times and failed 1 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 7 times and failed 13 times
  method pass_clang :: replace-undefined-function worked 1 times and failed 0 times
  method pass_clang :: return-void worked 6 times and failed 1 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 3 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 1 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 18 times and failed 1 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 1 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 3 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 1456 times and failed 16047 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 2 times and failed 0 times
  method pass_ints :: a worked 24 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 11 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 0 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454717788.3852/bzip2.c' reduced to:

#define BZ_OK 0
#define BZ_RUN_OK 1

#define BZ_FINISH_OK 3
#define BZ_STREAM_END 4

#define BZ_PARAM_ERROR -2
#define BZ_MEM_ERROR -3

#define BZ_UNEXPECTED_EOF -7
#define BZ_OUTBUFF_FULL -8
#define BZ_CONFIG_ERROR -9

typedef struct {
  char next_in;
  int avail_in;
  int total_in_lo32;
  int total_in_hi32;

  char next_out;
  int avail_out;
  int total_out_lo32;
  int total_out_hi32;

  void *state;

  void(*bzalloc);
  void (*bzfree)(void);
  void *opaque
} bz_stream;

#include <stdio.h>

#define BZ_API
#define BZ_EXTERN

BZ2_bzCompressvoid, strm, s, default_bzalloc, default_bzfree, bzopen_or_bzdopen,
    BZ2_bzflush;
;

;

#define BZ_MAX_UNUSED 0

typedef BZFILE;
const char BZ2_bzlibVersionvoid;
;

void;
typedef Int32;
typedef UInt32;
*bzerrorstrings = "";
BZ2_bzDecompressInit(bz_stream *);
BZ2_bzCompressInit(bz_stream *, int);

*BZ2_bzReadOpen(int *, FILE *, int, int, void *, int);

void BZ2_bzReadClose(int *, BZFILE *);

void BZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);

BZ2_bzRead(int *, BZFILE *);

*BZ2_bzWriteOpen(int *, FILE *, int, int, int);

void BZ2_bzWrite(int *, BZFILE *);

void BZ2_bzWriteClose64(int *, BZFILE *, int, unsigned *, unsigned *,
                        unsigned *, unsigned *);

BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);

BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned);

*BZ2_bzopen(const char *, const char *);

*BZ2_bzdopen(int, const char *);

BZ2_bzread(BZFILE *);

BZ2_bzwrite(BZFILE *);

const char *BZ2_bzerror(BZFILE *, int *);

#include <stdlib.h>

#define BZ_VERSION ""

#define True 1
#define False 0

void;
#define AssertH

#define AssertD

#define nnn
#define ppp

#define BZ_MAX_ALPHA_SIZE 8

#define BZ_N_GROUPS 6
#define BZ_G_SIZE 0

#define BZ_MAX_SELECTORS BZ_G_SIZE

#define BZ_RAND_DECLS

#define srNToGo

#define BZ_RAND_UPD_MASK

#define BZ_M_RUNNING 2

#define BZ_S_INPUT 2

#define BZ_N_RADIX
#define BZ_N_QSORT
#define BZ_N_SHELL
#define BZ_N_OVERSHOOT 2

typedef struct {

  bz_stream strm;

  Int32 mode;
  Int32 state;

  UInt32 arr1;
  UInt32 arr2;
  UInt32 ftab;

  UInt32 ptr;
  char block;
  short mtfv;
  char zbits;

  Int32 workFactor;

  Int32 nblock;
  Int32 nblockMAX;

  Int32 nInUse;
  char inUse[6];
  char unseqToSeq[6];
  UInt32 combinedCRC;

  Int32 verbosity;
  Int32 blockNo;
  Int32 blockSize100k;

  Int32 nMTF;
  Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
  char;
  char;

  char lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
} EState;

#define BZ_X_MAGIC_1 0

#define MTFA_SIZE 6
#define MTFL_SIZE 6

typedef struct {

  bz_stream strm;

  Int32 state;

  ;

  UInt32 bsBuff;
  Int32 bsLive;
  char smallDecompress;
  Int32 currBlockNo;
  Int32 verbosity;
  Int32;
  ;
  Int32;
  Int32;

  UInt32 tt;

  short ll16;
  char ll4;
  UInt32 calculatedCombinedCRC;
  char;
  char;
  char;

  char;
  Int32
      mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];

} DState;

#define stPos

#define                                                                        \
                                                                               \
    c_tPos

#define BZ2_indexIntoF

void BZ2_decompress();

#

#

#

#define bhtab
#define bhtab

#define bhtab

#

#

#

#

#

EState makeMaps_e_s, generateMTFValues_s;
makeMaps_e() {
  Int32 i = 0;

  for (;;)
    ;
}

generateMTFValues() {
  unsigned char yy;
  Int32 i, j, zPend, wr, EOB, ptr;

  char *block = block;
  short mtfv = mtfv = 0;

  for (;;)
    generateMTFValues_s.mtfFreq[0];

  for (;;)

    for (;;)

      ;
  generateMTFValues_s.mtfFreq;

  0;
}

#define lll

#

void;

BZ2_bzCompressInit(bz_stream *strm, int blockSize100k) {
  int verbosity = 0, workFactor = 0, n;

  EState *s;

  if (0)

    if (0)

      if (0)

        if (bzalloc NULL)
          default_bzalloc;
  if (bzfree NULL)

    BZALLOC();
  if
    NULL

        *NULL;
  arr2 NULL;
  ftab NULL *blockSize100k;
  ;
  0;

  0;
  ;

  if (arr1 NULL == NULL)

    0;
  BZ_S_INPUT;
  BZ_M_RUNNING;

  0;

  ;
  ;
  zbits NULL;

  s = 0;
  0;

  return BZ_OK;
}

int BZ2_bzCompress(void) {
  bz_stream *strm = 0;
  int action = 0;

  EState *s;
  if
    NULL

        ;
  if
    NULL

        if (strm)

            switch (s->mode);
}

BZ2_bzCompressEnd(void) {
  bz_stream *strm = 0;
  EState s;
  if
    NULL

        ;
  if
    NULL

        if (strm)

            if (arr1 NULL) arr1;
  if (arr2 NULL)
    arr2;
  if (ftab NULL)
    ftab;

  ;
}

BZ2_bzDecompressInit(bz_stream *strm) {
  int verbosity = 0, small = 0;

  DState *s;

  if (0)

    if
      NULL

          if (1)

              if (4)

                  if (bzalloc NULL) default_bzalloc;
  if (bzfree NULL)

    BZALLOC();
  if
    NULL

        *strm;
  s = 0;
  0;
  0;
  small = ll16 NULL;
  tt NULL;

  return BZ_OK;
}

static BZ2_bzDecompress(void) {
  bz_stream *strm = 0;
  DState s;
  if
    NULL

        ;
  if
    NULL

        if (strm)

            1;
}

BZ2_bzDecompressEnd(void) {
  bz_stream *strm = 0;
  DState s;
  if
    NULL

        ;
  if
    NULL

        if (strm)

            if (tt NULL) tt;
  if (ll16 NULL)
    ll16;
  if (ll4 NULL)
    ll4;
  ;
}

#define BZ_SETERR

typedef struct {
  FILE handle;
  char buf;
  Int32 bufN;
  char writing;
  bz_stream strm;
  Int32 lastErr;
  char initialisedOk
} bzFile;

*BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
                 int workFactor) {
  Int32 ret;
  bzFile *bzf;

  workFactor;

  NULL;
  False;
  0;
  f = bzf = NULL;

  0;

  bzf;
}

void BZ2_bzWrite(int *bzerror, BZFILE *b) {
  void *buf = 0;
  int len = 0, ret;

  bzFile *bzf;
  0;
  bzf;

  bzf = buf;

  bzf;
  BZ_RUN_OK;

  bzf < bzf == 0;

  ;
}

void BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
                        unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
                        unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {

  bzFile bzf;

  NULL;
  &bzf;
  ferror;

  if
    NULL

        if NULL

        if NULL

        if NULL

        if (!nbytes_in_lo32) bzf;
  if
    NULL bzf;
  if
    NULL bzf;
  if
    NULL bzf;
}

*BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused,
                int nUnused) {
  bzFile *bzf;
  int ret;

  verbosity != BZ_MAX_UNUSED;

  NULL;

  False;
  f = False;
  bzf = NULL;

  while (0)

    bzf;
  bzf = malloc;
}

void BZ2_bzReadClose(int *bzerror, BZFILE *b) {
  bzFile bzf;
  NULL;

  &bzf;

  &bzf;

  ;
}

BZ2_bzRead(int *bzerror, BZFILE *b) {
  void *buf = 0;
  int len = 0;

  bzFile *bzf;

  0;

  bzf;

  0;

  bzf = buf;

  return 0;
}

void BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused) {
  bzFile bzf;
  NULL;
  BZ_STREAM_END;
  NULL;
  &bzf;
  &bzf;
}

BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
                         unsigned sourceLen, int blockSize100k) {
  int verbosity = 0, workFactor = 0, ret;

  bz_stream strm;

  if (0)

    if (0)

      bzalloc NULL;
  bzfree NULL;
  opaque NULL;
  ;

  source = sourceLen = 0;
  ;

  ;
  ;

  ;
}

BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
                           unsigned sourceLen) {
  int small = 0, verbosity = 0, ret;

  bz_stream strm;

  if (1)

    bzalloc NULL;
  bzfree NULL;
  opaque NULL;
  ;

  source = sourceLen = 0;
  ;

  ;
  ;

output_overflow_or_eof:
  0;
}

BZ2_bzlibVersion(){}

    * BZ2_bzopen(const char *path, const char *mode){}

    * BZ2_bzdopen(int d, const char *mode) {}

BZ2_bzread(BZFILE *b) {
  void *buf = 0;
  int len = 0, bzerr, nread;

  (bzFile *)b;

  ;

  ;
}

BZ2_bzwrite(BZFILE *b) {
  void *buf = 0;
  int len = 0, bzerr;

  if (bzerr == BZ_OK)

    ;
}

BZ2_bzclose(void) {
  int b = 0, bzerr;

  FILE *fp = (bzFile *)b;

  if ((bzFile *)b)

    if (BZ_OK)

      if (stdout)
        ;
}

const char *BZ2_bzerror(BZFILE *b, int *errnum) {
  int err = (bzFile *)b;

  (bzFile *)b;

  "";
}

#include <signal.h>
#include <errno.h>

#

#
2498.74user 776.76system 38:34.38elapsed 141%CPU (0avgtext+0avgdata 60124maxresident)k
99304inputs+33939584outputs (506major+267535422minor)pagefaults 0swaps
