===< 24951 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
5068d5067
< #   include <utime.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
5069d5068
< #   include <sys/times.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
111d110
< #ifdef _WIN32
118,121d116
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
111,118d110
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
121d112
< #endif
4987,4993d4977
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
5049,5057d5048
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5031d5030
< #   ifdef __DJGPP__
5043d5041
< #   endif
6672,6674d6669
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5031,5044d5030
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6672d6657
< #  ifndef __DJGPP__
6674d6658
< #  endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1220,1222c1220
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
732c732
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
745,748c745
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
811,819c811
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
816,830c816
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
1152,1179c1152
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
1147,1154c1147
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
---
>    while (1) ;                                             \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1280c1280
<    Bool progress;
---
>    
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, n2;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ternary :: c >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (0)
(84.4 %, 32064 bytes)
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: replace-simple-typedef >===
30,48c30
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> 
61c43
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
68c50
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
73c55
<       bz_stream* strm 
---
>       struct bz_stream* strm 
77c59
<       bz_stream *strm, 
---
>       struct bz_stream *strm, 
83c65
<       bz_stream* strm 
---
>       struct bz_stream* strm 
87c69
<       bz_stream *strm 
---
>       struct bz_stream *strm 
357c339
<       bz_stream* strm;
---
>       struct bz_stream* strm;
503c485
<       bz_stream* strm;
---
>       struct bz_stream* strm;
1070c1052
<                     ( bz_stream* strm, 
---
>                     ( struct bz_stream* strm, 
1152c1134
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( struct bz_stream* strm )
1157c1139
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( struct bz_stream *strm, int action )
1173c1155
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( struct bz_stream *strm )
1198c1180
<                      ( bz_stream* strm, 
---
>                      ( struct bz_stream* strm, 
1254c1236
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( struct bz_stream *strm )
1271c1253
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( struct bz_stream *strm )
1303c1285
<       bz_stream strm;
---
>       struct bz_stream strm;
1592c1574
<    bz_stream strm;
---
>    struct bz_stream strm;
1642c1624
<    bz_stream strm;
---
>    struct bz_stream strm;
240c240
< typedef char            Char;
---
> 
1300c1300
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
2148c2148
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main ( IntNative argc, char *argv[] )
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1064c1064
< Bool isempty_RL ( EState* s )
---
> unsigned char isempty_RL ( EState* s )
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> unsigned char handle_compress ( bz_stream* strm )
1225c1225
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1302c1302
<       Bool      writing;
---
>       unsigned char      writing;
1305c1305
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
910c910
<    UChar   yy[256];
---
>    unsigned char   yy[256];
918c918
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
931c931
<       UChar ll_i;
---
>       unsigned char ll_i;
943,945c943,945
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1113c1113
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
(84.4 %, 32035 bytes)
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1064c1064
< Bool isempty_RL ( EState* s )
---
> unsigned char isempty_RL ( EState* s )
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> unsigned char handle_compress ( bz_stream* strm )
1225c1225
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1302c1302
<       Bool      writing;
---
>       unsigned char      writing;
1305c1305
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
910c910
<    UChar   yy[256];
---
>    unsigned char   yy[256];
918c918
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
931c931
<       UChar ll_i;
---
>       unsigned char ll_i;
943,945c943,945
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1113c1113
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
628c628
< extern Int32 
---
> extern int 
896c896
<    Int32 i;
---
>    int i;
911,914c911,914
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> int BZ2_decompress ( DState* s )
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque, int items, int size )
1075c1075
<    Int32   n;
---
>    int   n;
1301c1301
<       Int32     bufN;
---
>       int     bufN;
1304c1304
<       Int32     lastErr;
---
>       int     lastErr;
1369c1369
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
917c917
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
(84.3 %, 32173 bytes)
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
628c628
< extern Int32 
---
> extern int 
896c896
<    Int32 i;
---
>    int i;
911,914c911,914
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> int BZ2_decompress ( DState* s )
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque, int items, int size )
1075c1075
<    Int32   n;
---
>    int   n;
1301c1301
<       Int32     bufN;
---
>       int     bufN;
1304c1304
<       Int32     lastErr;
---
>       int     lastErr;
1369c1369
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
917c917
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
919c919
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1114c1114
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
(84.3 %, 32143 bytes)
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
919c919
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1114c1114
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       UInt16*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
894c824
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( struct EState* s )
908c838
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( struct EState* s )
1053c983
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( struct EState* s )
1059c989
< void init_RL ( EState* s )
---
> void init_RL ( struct EState* s )
1064c994
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( struct EState* s )
1076c1006
<    EState* s;
---
>    struct EState* s;
1160c1090
<    EState* s;
---
>    struct EState* s;
1175c1105
<    EState* s;
---
>    struct EState* s;
500,588d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
590,591d500
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1012c921
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress ( struct DState* s )
1202c1111
<    DState* s;
---
>    struct DState* s;
1238c1147
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( struct DState* s )
1249c1158
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( struct DState* s )
1256c1165
<    DState* s;
---
>    struct DState* s;
1273c1182
<    DState* s;
---
>    struct DState* s;
1297,1307c1297
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1370c1360
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1424c1414
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1512c1502
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1535c1525
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1564c1554
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1729c1719
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1804c1794
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
(84.3 %, 32144 bytes)
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
894c824
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( struct EState* s )
908c838
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( struct EState* s )
1053c983
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( struct EState* s )
1059c989
< void init_RL ( EState* s )
---
> void init_RL ( struct EState* s )
1064c994
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( struct EState* s )
1076c1006
<    EState* s;
---
>    struct EState* s;
1160c1090
<    EState* s;
---
>    struct EState* s;
1175c1105
<    EState* s;
---
>    struct EState* s;
500,588d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
590,591d500
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1012c921
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress ( struct DState* s )
1202c1111
<    DState* s;
---
>    struct DState* s;
1238c1147
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( struct DState* s )
1249c1158
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( struct DState* s )
1256c1165
<    DState* s;
---
>    struct DState* s;
1273c1182
<    DState* s;
---
>    struct DState* s;
1297,1307c1297
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1370c1360
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1424c1414
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1512c1502
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1535c1525
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1564c1554
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1729c1719
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1804c1794
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1889c1889
< typedef int IntNative;
---
> 
2148c2148
< IntNative main ( IntNative argc, char *argv[] )
---
> int main ( int argc, char *argv[] )
2124,2126c2124
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.3 %, 32110 bytes)
2124,2126c2124
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.3 %, 32078 bytes)
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-unresolved-base >===
===< pass_comments :: 0 >===
===< pass_special :: c >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
(84.3 %, 32077 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.3 %, 32076 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.3 %, 32075 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.3 %, 32074 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(84.3 %, 32073 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(84.4 %, 32072 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.4 %, 32071 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.4 %, 32070 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.4 %, 32069 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.4 %, 32068 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(84.4 %, 32067 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.4 %, 32066 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.4 %, 32065 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.4 %, 32064 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(84.4 %, 32063 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(84.4 %, 32062 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(84.4 %, 32061 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(84.4 %, 32060 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(84.4 %, 32059 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(84.4 %, 32058 bytes)
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.4 %, 32057 bytes)
396c396
<       unsigned char    unseqToSeq[56];
---
>       unsigned char    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.4 %, 32056 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.4 %, 32055 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(84.4 %, 32054 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(84.4 %, 32053 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
(84.4 %, 32052 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(84.4 %, 32051 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.4 %, 32050 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(84.4 %, 32049 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.4 %, 32048 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.4 %, 32047 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
(84.4 %, 32046 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(84.4 %, 32045 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.4 %, 32044 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.4 %, 32043 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(84.4 %, 32042 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.4 %, 32041 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(84.4 %, 32040 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(84.4 %, 32039 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(84.4 %, 32038 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(84.4 %, 32037 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(84.4 %, 32036 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(84.4 %, 32035 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(84.4 %, 32034 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(84.4 %, 32033 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(84.4 %, 32032 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(84.4 %, 32031 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(84.4 %, 32030 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
(84.4 %, 32029 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.4 %, 32028 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(84.4 %, 32027 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(84.4 %, 32026 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.4 %, 32025 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(84.4 %, 32024 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(84.4 %, 32023 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
(84.4 %, 32022 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(84.4 %, 32021 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(84.4 %, 32020 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(84.4 %, 32019 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(84.4 %, 32018 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(84.4 %, 32017 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(84.4 %, 32016 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(84.4 %, 32015 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
(84.4 %, 32014 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.4 %, 32013 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.4 %, 32012 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.4 %, 32011 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.4 %, 32010 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.4 %, 32009 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.4 %, 32008 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.4 %, 32007 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
(84.4 %, 32006 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.4 %, 32005 bytes)
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.4 %, 32004 bytes)
550c550
<       unsigned char    seqToUnseq[56];
---
>       unsigned char    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(84.4 %, 32003 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(84.4 %, 32002 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(84.4 %, 32001 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.4 %, 32000 bytes)
597c597
< #define BZ_GET_FAST(ccc)                     \
---
> #define BZ_GET_FAST(cc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(84.4 %, 31999 bytes)
597c597
< #define BZ_GET_FAST(cc)                     \
---
> #define BZ_GET_FAST(c)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.4 %, 31998 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.4 %, 31997 bytes)
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xff);           \
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xf);           \
(84.4 %, 31996 bytes)
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xff);           \
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
(84.4 %, 31995 bytes)
599c599
<     c = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
(84.4 %, 31994 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(84.4 %, 31993 bytes)
602c602
< #define BZ_GET_FAST_C(ccc)                   \
---
> #define BZ_GET_FAST_C(cc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.4 %, 31992 bytes)
602c602
< #define BZ_GET_FAST_C(cc)                   \
---
> #define BZ_GET_FAST_C(c)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.4 %, 31991 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(84.4 %, 31990 bytes)
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xff);            \
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(84.4 %, 31989 bytes)
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xff);            \
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xf);            \
(84.4 %, 31988 bytes)
604c604
<     c = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(84.4 %, 31987 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(84.4 %, 31986 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.4 %, 31985 bytes)
619c619
< #define BZ_GET_SMALL(ccc)                            \
---
> #define BZ_GET_SMALL(cc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(84.4 %, 31984 bytes)
619c619
< #define BZ_GET_SMALL(cc)                            \
---
> #define BZ_GET_SMALL(c)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(84.4 %, 31983 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.4 %, 31982 bytes)
620c620
<       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.4 %, 31981 bytes)
620c620
<       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.4 %, 31980 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.4 %, 31979 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(84.4 %, 31978 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(84.4 %, 31977 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(84.4 %, 31976 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(84.4 %, 31975 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(84.4 %, 31974 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.4 %, 31973 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0xf)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.4 %, 31972 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.4 %, 31971 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(84.4 %, 31970 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
(84.4 %, 31969 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(84.4 %, 31968 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31967 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31966 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31965 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31964 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31963 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31962 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x0)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.4 %, 31961 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31960 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31959 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
910c910
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.4 %, 31958 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31957 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31956 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xff)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.4 %, 31955 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xf)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
910c910
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.4 %, 31954 bytes)
898c898
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
910c910
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
(84.4 %, 31953 bytes)
898c898
<    for (i = 0; i < 56; i++)
---
>    for (i = 0; i < 6; i++)
910c910
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.4 %, 31952 bytes)
910c910
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
(84.4 %, 31951 bytes)
910c910
<    unsigned char   yy[56];
---
>    unsigned char   yy[6];
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
969c969
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.4 %, 31950 bytes)
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
969c969
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
(84.4 %, 31949 bytes)
969c969
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31948 bytes)
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1097c1097
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
(84.4 %, 31947 bytes)
1082c1082
<        workFactor < 0 || workFactor > 50)
---
>        workFactor < 0 || workFactor > 0)
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31946 bytes)
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1097c1097
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.4 %, 31945 bytes)
1097c1097
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.4 %, 31944 bytes)
1097c1097
<    n       = 00000 * blockSize100k;
---
>    n       = 0000 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.4 %, 31943 bytes)
1097c1097
<    n       = 0000 * blockSize100k;
---
>    n       = 000 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.4 %, 31942 bytes)
1097c1097
<    n       = 000 * blockSize100k;
---
>    n       = 00 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.4 %, 31941 bytes)
1097c1097
<    n       = 00 * blockSize100k;
---
>    n       = 0 * blockSize100k;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.4 %, 31940 bytes)
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.4 %, 31939 bytes)
1100c1100
<    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.4 %, 31938 bytes)
1100c1100
<    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
(84.4 %, 31937 bytes)
1100c1100
<    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.4 %, 31936 bytes)
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.4 %, 31935 bytes)
1109c1109
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 9;
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.4 %, 31934 bytes)
1109c1109
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 9;
(84.4 %, 31933 bytes)
1109c1109
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 9;
(84.4 %, 31932 bytes)
1109c1109
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 19;
1109c1109
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 9;
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.4 %, 31931 bytes)
1109c1109
<    s->nblockMAX         = 0 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 9;
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.4 %, 31930 bytes)
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.4 %, 31929 bytes)
1264c1264
<    AssertH ( 0, 001 );
---
>    AssertH ( 0, 01 );
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.4 %, 31928 bytes)
1264c1264
<    AssertH ( 0, 01 );
---
>    AssertH ( 0, 1 );
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.4 %, 31927 bytes)
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.4 %, 31926 bytes)
1294c1294
< #define BZ_SETERR(ee)                    \
---
> #define BZ_SETERR(e)                    \
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31925 bytes)
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31924 bytes)
1329c1329
<        (workFactor < 0 || workFactor > 50) ||
---
>        (workFactor < 0 || workFactor > 0) ||
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31923 bytes)
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1599c1599
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(84.4 %, 31922 bytes)
1599c1599
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1602c1602
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1700c1700
<                  int fd,             
---
>                  int d,             
(84.4 %, 31921 bytes)
1599c1599
<        workFactor < 0 || workFactor > 50) 
---
>        workFactor < 0 || workFactor > 0) 
1602c1602
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.4 %, 31920 bytes)
1602c1602
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1700c1700
<                  int fd,             
---
>                  int d,             
(84.4 %, 31919 bytes)
1700c1700
<                  int fd,             
---
>                  int d,             
1718c1718
<                ( int fd,
---
>                ( int d,
1721c1721
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1874c1874
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
(84.4 %, 31918 bytes)
1718c1718
<                ( int fd,
---
>                ( int d,
1721c1721
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1874c1874
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
1915c1915
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(84.4 %, 31917 bytes)
1915c1915
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(84.4 %, 31916 bytes)
1915c1915
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
(84.4 %, 31915 bytes)
1915c1915
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
(84.4 %, 31914 bytes)
===< pass_ints :: c >===
Termination check: size was 204936; now 31914
===< pass_balanced :: parens-only >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    -1
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
(84.4 %, 31912 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
(84.4 %, 31910 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
(84.4 %, 31908 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
(84.4 %, 31906 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
(84.4 %, 31904 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
(84.4 %, 31902 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
(84.4 %, 31900 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
(84.4 %, 31898 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
(84.4 %, 31896 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
(84.4 %, 31894 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
(84.4 %, 31892 bytes)
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
(84.4 %, 31890 bytes)
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
(84.4 %, 31888 bytes)
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
(84.4 %, 31886 bytes)
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
(84.4 %, 31884 bytes)
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen)  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
(84.4 %, 31882 bytes)
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
(84.4 %, 31880 bytes)
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
(84.4 %, 31878 bytes)
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(84.4 %, 31876 bytes)
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen)  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
(84.4 %, 31874 bytes)
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
(84.4 %, 31872 bytes)
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
(84.4 %, 31870 bytes)
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(84.4 %, 31868 bytes)
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
(84.5 %, 31866 bytes)
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
(84.5 %, 31864 bytes)
184c184
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
(84.5 %, 31862 bytes)
188c188
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
(84.5 %, 31860 bytes)
193c193
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
(84.5 %, 31858 bytes)
198c198
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int BZ_APIBZ2_bzread 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
(84.5 %, 31856 bytes)
204c204
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(84.5 %, 31854 bytes)
210c210
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
(84.5 %, 31852 bytes)
214c214
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(84.5 %, 31850 bytes)
218c218
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
(84.5 %, 31848 bytes)
248c248
< #define True  (Bool)1
---
> #define True  Bool1
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
(84.5 %, 31846 bytes)
249c249
< #define False (Bool)0
---
> #define False Bool0
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
(84.5 %, 31844 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(84.5 %, 31842 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(84.5 %, 31840 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
(84.5 %, 31838 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
(84.5 %, 31836 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
(84.5 %, 31834 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
(84.5 %, 31832 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
(84.5 %, 31830 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
(84.5 %, 31828 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
(84.5 %, 31826 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
(84.5 %, 31824 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
(84.5 %, 31822 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
(84.5 %, 31820 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
(84.5 %, 31818 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)strm->opaque,(nnn),1
(84.5 %, 31816 bytes)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)strm->opaque,(nnn),1
(84.5 %, 31814 bytes)
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,nnn,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
(84.5 %, 31812 bytes)
272c272
< #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
(84.5 %, 31810 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
(84.5 %, 31808 bytes)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)strm->opaque,(ppp)
(84.5 %, 31806 bytes)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,ppp)
(84.5 %, 31804 bytes)
273c273
< #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
---
> #define BZFREEppp  strm->bzfreestrm->opaque,ppp
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
(84.5 %, 31802 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 0 / BZ_G_SIZE)
(84.5 %, 31800 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
311c311
< #define BZ_RAND_MASK (0)
---
> #define BZ_RAND_MASK 0
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
(84.5 %, 31798 bytes)
311c311
< #define BZ_RAND_MASK (0)
---
> #define BZ_RAND_MASK 0
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(84.5 %, 31796 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(84.5 %, 31794 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(84.5 %, 31792 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(84.5 %, 31790 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
(84.5 %, 31788 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define BZ_GET_FASTc                     \
(84.5 %, 31786 bytes)
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define BZ_GET_FASTc                     \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = UChar(s->tPos & 0xf);           \
(84.5 %, 31784 bytes)
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = UChar(s->tPos & 0xf);           \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = (UChar)s->tPos & 0xf;           \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define BZ_GET_FAST_Cc                   \
(84.5 %, 31782 bytes)
599c599
<     c = UChar(s->tPos & 0xf);           \
---
>     c = UChars->tPos & 0xf;           \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define BZ_GET_FAST_Cc                   \
(84.5 %, 31780 bytes)
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define BZ_GET_FAST_Cc                   \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = UChar(c_tPos & 0xf);            \
(84.5 %, 31778 bytes)
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = UChar(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = (UChar)c_tPos & 0xf;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
(84.5 %, 31776 bytes)
604c604
<     c = UChar(c_tPos & 0xf);            \
---
>     c = UCharc_tPos & 0xf;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
(84.5 %, 31774 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
(84.5 %, 31772 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
(84.5 %, 31770 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4)) & 0xF)
(84.5 %, 31768 bytes)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
(84.5 %, 31766 bytes)
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
(84.5 %, 31764 bytes)
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
(84.5 %, 31762 bytes)
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[i >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[(i) >> 1]) >> ((i) << 2) & 0x4 & 0xF
(84.5 %, 31760 bytes)
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> ((i) << 2) & 0x4 & 0xF
(84.5 %, 31758 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2 & 0x4) & 0xF
(84.5 %, 31756 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i << 2) & 0x4 & 0xF
(84.5 %, 31754 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
(84.5 %, 31752 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
(84.5 %, 31750 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32)s->ll16[i] | (GET_LL4(i) << 6))
(84.5 %, 31748 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32)s->ll16[i] | (GET_LL4(i) << 6))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32s->ll16[i]) | (GET_LL4(i) << 6))
(84.5 %, 31746 bytes)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6)
---
>    (UInt32)s->ll16[i] | (GET_LL4(i) << 6)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6)
---
>    (UInt32s->ll16[i]) | (GET_LL4(i) << 6)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6)
---
>    ((UInt32)s->ll16[i]) | GET_LL4(i) << 6
(84.5 %, 31744 bytes)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 6)
---
>    UInt32s->ll16[i] | (GET_LL4(i) << 6)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 6)
---
>    (UInt32)s->ll16[i] | GET_LL4(i) << 6
(84.5 %, 31742 bytes)
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 6)
---
>    UInt32s->ll16[i] | GET_LL4(i) << 6
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 6)
---
>    UInt32s->ll16[i] | (GET_LL4i << 6)
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define BZ_GET_SMALLc                            \
(84.5 %, 31740 bytes)
617c617
<    UInt32s->ll16[i] | GET_LL4(i) << 6
---
>    UInt32s->ll16[i] | GET_LL4i << 6
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define BZ_GET_SMALLc                            \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
(84.5 %, 31738 bytes)
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define BZ_GET_SMALLc                            \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
(84.5 %, 31736 bytes)
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
(84.5 %, 31734 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
(84.5 %, 31732 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
(84.5 %, 31730 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
(84.5 %, 31728 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) (a) < (b) ? (a) : (b)
(84.5 %, 31726 bytes)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a) < (b) ? (a) : (b)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a < (b)) ? (a) : (b)
(84.5 %, 31724 bytes)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? (a) : (b)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b (a) < b ? (a) : (b)
(84.5 %, 31722 bytes)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < b ? (a) : (b)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? a : (b)
(84.5 %, 31720 bytes)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? a : (b)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? (a) : b
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
(84.5 %, 31718 bytes)
665c665
< #define fmina,b a < b ? a : (b)
---
> #define fmina,b a < b ? a : b
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
(84.5 %, 31716 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(84.5 %, 31714 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BH(zz)  bhtab[zz >> 5] |= (1 << ((zz) & 1))
(84.5 %, 31712 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BH(zz)  bhtab[zz >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= 1 << ((zz) & 1)
(84.5 %, 31710 bytes)
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= 1 << ((zz) & 1)
(84.5 %, 31708 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 1)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << (zz) & 1)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 1))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << (zz & 1))
(84.5 %, 31706 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 1)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 1
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 1)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz & 1)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(84.5 %, 31704 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 1
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 1
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BH(zz)  bhtab[zz >> 5] &= ~(1 << ((zz) & 1))
(84.5 %, 31702 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BH(zz)  bhtab[zz >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~1 << ((zz) & 1)
(84.5 %, 31700 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~1 << ((zz) & 1)
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << (zz) & 1)
(84.5 %, 31698 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 1)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 1))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << (zz) & 1)
(84.5 %, 31696 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 1)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 1
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 1)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz & 1)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(84.5 %, 31694 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 1
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 1
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BH(zz)  bhtab[(zz) >> 5] & (1 << ((zz) & 1))
(84.5 %, 31692 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BH(zz)  bhtab[(zz) >> 5] & (1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BH(zz)  (bhtab[zz >> 5] & (1 << ((zz) & 1)))
(84.5 %, 31690 bytes)
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 1))
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ISSET_BHzz  (bhtab[zz >> 5] & (1 << ((zz) & 1)))
(84.5 %, 31688 bytes)
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 1))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 1))
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 1))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & 1 << ((zz) & 1)
(84.5 %, 31686 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 1))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 1)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 1))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << (zz) & 1)
(84.5 %, 31684 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 1)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 1
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 1)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz & 1)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
(84.5 %, 31682 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 1
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
(84.5 %, 31680 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[zz >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  ((zz) & 0xf)
(84.5 %, 31678 bytes)
692c692
< #define      WORD_BHzz  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[zz >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  ((zz) & 0xf)
(84.5 %, 31676 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BH(zz)  (zz) & 0xf
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BH(zz)  (zz & 0xf)
(84.5 %, 31674 bytes)
693c693
< #define UNALIGNED_BHzz  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  (zz) & 0xf
693c693
< #define UNALIGNED_BHzz  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  (zz & 0xf)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(84.5 %, 31672 bytes)
693c693
< #define UNALIGNED_BHzz  (zz) & 0xf
---
> #define UNALIGNED_BHzz  zz & 0xf
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(84.5 %, 31670 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
(84.5 %, 31668 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
(84.5 %, 31666 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
(84.5 %, 31664 bytes)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? (a) : (b)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a < (b)) ? (a) : (b)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < b) ? (a) : (b)
(84.6 %, 31662 bytes)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < b ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? a : (b)
(84.6 %, 31660 bytes)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < b ? (a) : (b)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? a : (b)
(84.6 %, 31658 bytes)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? a : (b)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? (a) : b
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(84.6 %, 31656 bytes)
732c732
< #define mmina,b a < b ? a : (b)
---
> #define mmina,b a < b ? a : b
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(84.6 %, 31654 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
(84.6 %, 31652 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
(84.6 %, 31650 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) nextHi[az]-nextLo[az]
(84.6 %, 31648 bytes)
739c739
< #define mnextsizeaz (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz nextHi[az]-nextLo[az]
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
(84.6 %, 31646 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
(84.6 %, 31644 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
(84.6 %, 31642 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[(b)+1 << 8] - ftab[(b) << 8])
(84.6 %, 31640 bytes)
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[(b)+1 << 8] - ftab[(b) << 8])
(84.6 %, 31638 bytes)
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b+1) << 8] - ftab[(b) << 8]
(84.6 %, 31636 bytes)
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[b << 8]
767c767
< #define SETMASK (1 << 1)
---
> #define SETMASK 1 << 1
(84.6 %, 31634 bytes)
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
767c767
< #define SETMASK (1 << 1)
---
> #define SETMASK 1 << 1
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
(84.6 %, 31632 bytes)
767c767
< #define SETMASK (1 << 1)
---
> #define SETMASK 1 << 1
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
(84.6 %, 31630 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~SETMASK)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define WEIGHTOFzz0  ((zz0) & 0x0)
(84.6 %, 31628 bytes)
768c768
< #define CLEARMASK ~(SETMASK)
---
> #define CLEARMASK ~SETMASK
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define WEIGHTOFzz0  ((zz0) & 0x0)
(84.6 %, 31626 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define WEIGHTOFzz0  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define WEIGHTOF(zz0)  (zz0) & 0x0
(84.6 %, 31624 bytes)
793c793
< #define WEIGHTOFzz0  ((zz0) & 0x0)
---
> #define WEIGHTOFzz0  (zz0) & 0x0
793c793
< #define WEIGHTOFzz0  ((zz0) & 0x0)
---
> #define WEIGHTOFzz0  (zz0 & 0x0)
(84.6 %, 31622 bytes)
793c793
< #define WEIGHTOFzz0  (zz0) & 0x0
---
> #define WEIGHTOFzz0  zz0 & 0x0
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define DEPTHOFzz1   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define DEPTHOF(zz1)   (zz1) & 0xf
(84.6 %, 31620 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define DEPTHOFzz1   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define DEPTHOF(zz1)   (zz1) & 0xf
(84.6 %, 31618 bytes)
794c794
< #define DEPTHOFzz1   ((zz1) & 0xf)
---
> #define DEPTHOFzz1   (zz1) & 0xf
794c794
< #define DEPTHOFzz1   ((zz1) & 0xf)
---
> #define DEPTHOFzz1   (zz1 & 0xf)
(84.6 %, 31616 bytes)
794c794
< #define DEPTHOFzz1   (zz1) & 0xf
---
> #define DEPTHOFzz1   zz1 & 0xf
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
(84.6 %, 31614 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) (zz2) > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) (zz2 > (zz3) ? (zz2) : (zz3))
(84.6 %, 31612 bytes)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2 > (zz3) ? (zz2) : (zz3))
(84.6 %, 31610 bytes)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 (zz2) > zz3 ? (zz2) : (zz3)
(84.6 %, 31608 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? zz2 : (zz3)
(84.6 %, 31606 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : zz3
(84.6 %, 31604 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
(84.6 %, 31602 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(84.6 %, 31600 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(84.6 %, 31598 bytes)
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOFzw2 |                    \
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
(84.6 %, 31596 bytes)
798c798
<    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
(84.6 %, 31594 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2)))
(84.6 %, 31592 bytes)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2))
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOFzw2)
(84.6 %, 31590 bytes)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOFzw2
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
(84.6 %, 31588 bytes)
799c799
<    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
(84.6 %, 31586 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
(84.6 %, 31584 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
898c898
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++
899c899
<       if (s->inUse[i]) {
---
>       if s->inUse[i] {
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++ s->mtfFreq[i] = 0;
(84.6 %, 31582 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
898c898
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++
899c899
<       if (s->inUse[i]) {
---
>       if s->inUse[i] {
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++ s->mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for i = 0; i < s->nInUse; i++ yy[i] = (unsigned char) i;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = unsigned char i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++ {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD  wr <= i, "generateMTFValues(1)" ;
(84.6 %, 31580 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
898c898
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++
899c899
<       if (s->inUse[i]) {
---
>       if s->inUse[i] {
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++ s->mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for i = 0; i < s->nInUse; i++ yy[i] = (unsigned char) i;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = unsigned char i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++ {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD  wr <= i, "generateMTFValues(1)" ;
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr <= i, "generateMTFValues1" );
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if j < 0 j += s->nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
---
>       AssertD  ll_i < s->nInUse, "generateMTFValues(a)" ;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
937c937
<       if (yy[0] == ll_i) { 
---
>       if yy[0] == ll_i { 
941c941
<          if (zPend > 0) 
---
>          if zPend > 0 
(84.6 %, 31578 bytes)
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if j < 0 j += s->nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
---
>       AssertD  ll_i < s->nInUse, "generateMTFValues(a)" ;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
937c937
<       if (yy[0] == ll_i) { 
---
>       if yy[0] == ll_i { 
941c941
<          if (zPend > 0) 
---
>          if zPend > 0 
948c948
<             ryy_j = &(yy[1]);
---
>             ryy_j = &yy[1];
(84.6 %, 31576 bytes)
937c937
<       if (yy[0] == ll_i) { 
---
>       if yy[0] == ll_i { 
941c941
<          if (zPend > 0) 
---
>          if zPend > 0 
948c948
<             ryy_j = &(yy[1]);
---
>             ryy_j = &yy[1];
950c950
<             while ( rll_i != rtmp ) ;
---
>             while  rll_i != rtmp  ;
952c952
<             j = ryy_j - &(yy[0]);
---
>             j = ryy_j - &yy[0];
(84.6 %, 31574 bytes)
950c950
<             while ( rll_i != rtmp ) ;
---
>             while  rll_i != rtmp  ;
952c952
<             j = ryy_j - &(yy[0]);
---
>             j = ryy_j - &yy[0];
959c959
<    if (zPend > 0) 
---
>    if zPend > 0 
993c993
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
996c996
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
(84.6 %, 31572 bytes)
959c959
<    if (zPend > 0) 
---
>    if zPend > 0 
993c993
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
996c996
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
998c998
<    while (True) 
---
>    while True 
(84.6 %, 31570 bytes)
996c996
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
998c998
<    while (True) 
---
>    while True 
(84.6 %, 31568 bytes)
998c998
<    while (True) 
---
>    while True 
1000c1000
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(84.6 %, 31566 bytes)
1000c1000
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
(84.6 %, 31564 bytes)
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
1004c1004
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(84.6 %, 31562 bytes)
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
1004c1004
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(84.6 %, 31560 bytes)
1004c1004
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
1007c1007
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
(84.6 %, 31558 bytes)
1007c1007
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
1037c1037
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
1047c1047
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
1053c1053
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
1059c1059
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1064c1064
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1069c1069
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
(84.6 %, 31556 bytes)
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
1037c1037
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
1047c1047
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
1053c1053
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
1059c1059
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1064c1064
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1069c1069
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
1070c1070
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1073c1073
<                      int        workFactor )
---
>                      int        workFactor 
1078c1078
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1080c1080
<    if (strm == NULL || 
---
>    if strm == NULL || 
1082c1082
<        workFactor < 0 || workFactor > 0)
---
>        workFactor < 0 || workFactor > 0
1085c1085
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1086c1086
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1087c1087
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC sizeof(EState) ;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeofEState );
1090c1090
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC n                  * sizeof(UInt32) ;
(84.6 %, 31554 bytes)
1070c1070
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1073c1073
<                      int        workFactor )
---
>                      int        workFactor 
1078c1078
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1080c1080
<    if (strm == NULL || 
---
>    if strm == NULL || 
1082c1082
<        workFactor < 0 || workFactor > 0)
---
>        workFactor < 0 || workFactor > 0
1085c1085
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1086c1086
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1087c1087
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC sizeof(EState) ;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeofEState );
1090c1090
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC n                  * sizeof(UInt32) ;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC( n                  * sizeofUInt32 );
1099c1099
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1099c1099
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( n+BZ_N_OVERSHOOT * sizeof(UInt32) );
(84.6 %, 31552 bytes)
1099c1099
<    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s->arr2 = BZALLOC n+BZ_N_OVERSHOOT * sizeof(UInt32) ;
1099c1099
<    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeofUInt32 ;
1100c1100
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC 7              * sizeof(UInt32) ;
1100c1100
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 7              * sizeofUInt32 );
1102c1102
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL 
1113c1113
<    s->block             = (unsigned char*)s->arr2;
---
>    s->block             = unsigned char*s->arr2;
1114c1114
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->mtfv              = unsigned short*s->arr1;
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = UInt32*s->arr1;
1138c1138
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1161c1161
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1163c1163
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1164c1164
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
(84.6 %, 31550 bytes)
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1161c1161
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1163c1163
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1164c1164
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1167c1167
<    switch (s->mode) 
---
>    switch s->mode 
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(84.6 %, 31548 bytes)
1157c1157
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action 
1161c1161
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1163c1163
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1164c1164
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1167c1167
<    switch (s->mode) 
---
>    switch s->mode 
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)   bz_stream *strm 
1176c1176
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1178c1178
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1179c1179
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL BZFREE(s->arr1);
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREEs->arr1;
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s->arr2 != NULL BZFREE(s->arr2);
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREEs->arr2;
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s->ftab != NULL BZFREE(s->ftab);
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREEs->ftab;
1184c1184
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1197c1197
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
(84.6 %, 31546 bytes)
1173c1173
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm 
1176c1176
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1178c1178
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1179c1179
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL BZFREE(s->arr1);
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREEs->arr1;
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s->arr2 != NULL BZFREE(s->arr2);
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREEs->arr2;
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s->ftab != NULL BZFREE(s->ftab);
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREEs->ftab;
1184c1184
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1197c1197
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
1198c1198
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1200c1200
<                        int        small )
---
>                        int        small 
1204c1204
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1206c1206
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1207c1207
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small != 0 && small != 1 return BZ_PARAM_ERROR;
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4 return BZ_PARAM_ERROR;
1210c1210
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1211c1211
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC sizeof(DState) ;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeofDState );
1214c1214
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1225c1225
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = Boolsmall;
1238c1238
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
(84.6 %, 31544 bytes)
1198c1198
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1200c1200
<                        int        small )
---
>                        int        small 
1204c1204
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1206c1206
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1207c1207
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small != 0 && small != 1 return BZ_PARAM_ERROR;
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4 return BZ_PARAM_ERROR;
1210c1210
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1211c1211
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC sizeof(DState) ;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeofDState );
1214c1214
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1225c1225
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = Boolsmall;
1238c1238
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1249c1249
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress)  bz_stream *strm 
1257c1257
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1259c1259
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1260c1260
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1262c1262
<    while (True) 
---
>    while True 
1264c1264
<    AssertH ( 0, 1 );
---
>    AssertH  0, 1 ;
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(84.6 %, 31542 bytes)
1254c1254
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress  bz_stream *strm 
1257c1257
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1259c1259
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1260c1260
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1262c1262
<    while (True) 
---
>    while True 
1264c1264
<    AssertH ( 0, 1 );
---
>    AssertH  0, 1 ;
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)   bz_stream *strm 
1274c1274
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1276c1276
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1277c1277
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL BZFREE(s->tt);
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREEs->tt;
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s->ll16 != NULL BZFREE(s->ll16);
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREEs->ll16;
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->ll4  != NULL BZFREE(s->ll4);
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREEs->ll4;
1283c1283
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1294c1294
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    \
(84.6 %, 31540 bytes)
1271c1271
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm 
1274c1274
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1276c1276
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1277c1277
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if s->strm != strm return BZ_PARAM_ERROR;
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL BZFREE(s->tt);
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREEs->tt;
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s->ll16 != NULL BZFREE(s->ll16);
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREEs->ll16;
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->ll4  != NULL BZFREE(s->ll4);
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREEs->ll4;
1283c1283
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1294c1294
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    \
1315c1315
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
(84.6 %, 31538 bytes)
1315c1315
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1316c1316
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1320c1320
<                       int   workFactor )
---
>                       int   workFactor 
1325c1325
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1327c1327
<    if (f == NULL ||
---
>    if f == NULL ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity < 0 || verbosity > 4)
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        blockSize100k < 1 || blockSize100k > 9 ||
(84.6 %, 31536 bytes)
1316c1316
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1320c1320
<                       int   workFactor )
---
>                       int   workFactor 
1325c1325
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1327c1327
<    if (f == NULL ||
---
>    if f == NULL ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity < 0 || verbosity > 4)
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        blockSize100k < 1 || blockSize100k > 9 ||
1329c1329
<        (workFactor < 0 || workFactor > 0) ||
---
>        workFactor < 0 || workFactor > 0 ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity < 0 || verbosity > 4)
(84.6 %, 31534 bytes)
1329c1329
<        (workFactor < 0 || workFactor > 0) ||
---
>        workFactor < 0 || workFactor > 0 ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity < 0 || verbosity > 4)
(84.6 %, 31532 bytes)
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity < 0 || verbosity > 4)
1333c1333
<    if (ferror(f))
---
>    if ferror(f)
1333c1333
<    if (ferror(f))
---
>    if (ferrorf)
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1337c1337
<    if (bzf == NULL)
---
>    if bzf == NULL
1340c1340
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1349c1349
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1350,1351c1350,1351
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit  &(bzf->strm), blockSize100k, 
>                               verbosity, workFactor ;
1350c1350
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
(84.6 %, 31530 bytes)
1333c1333
<    if (ferror(f))
---
>    if ferror(f)
1333c1333
<    if (ferror(f))
---
>    if (ferrorf)
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1337c1337
<    if (bzf == NULL)
---
>    if bzf == NULL
1340c1340
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1349c1349
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1350,1351c1350,1351
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit  &(bzf->strm), blockSize100k, 
>                               verbosity, workFactor ;
1350c1350
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1352c1352
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1363c1363
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
(84.6 %, 31528 bytes)
1352c1352
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1363c1363
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
1364c1364
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1367c1367
<                int     len )
---
>                int     len 
1370c1370
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1372c1372
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1373c1373
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1375c1375
<    if (!(bzf->writing))
---
>    if !(bzf->writing)
1375c1375
<    if (!(bzf->writing))
---
>    if (!bzf->writing)
(84.6 %, 31526 bytes)
1364c1364
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1367c1367
<                int     len )
---
>                int     len 
1370c1370
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1372c1372
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1373c1373
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1375c1375
<    if (!(bzf->writing))
---
>    if !(bzf->writing)
1375c1375
<    if (!(bzf->writing))
---
>    if (!bzf->writing)
1377c1377
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1377c1377
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1380c1380
<    if (len == 0)
---
>    if len == 0
1386c1386
<    while (True) {
---
>    while True {
1390c1390
<       if (ret != BZ_RUN_OK)
---
>       if ret != BZ_RUN_OK
1393c1393
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if bzf->strm.avail_out < BZ_MAX_UNUSED 
1395c1395
<       if (bzf->strm.avail_in == 0)
---
>       if bzf->strm.avail_in == 0
1402c1402
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
(84.6 %, 31524 bytes)
1377c1377
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1377c1377
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1380c1380
<    if (len == 0)
---
>    if len == 0
1386c1386
<    while (True) {
---
>    while True {
1390c1390
<       if (ret != BZ_RUN_OK)
---
>       if ret != BZ_RUN_OK
1393c1393
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if bzf->strm.avail_out < BZ_MAX_UNUSED 
1395c1395
<       if (bzf->strm.avail_in == 0)
---
>       if bzf->strm.avail_in == 0
1402c1402
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
1403c1403
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1407c1407
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1409,1410c1409,1410
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
1414c1414
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
(84.6 %, 31522 bytes)
1403c1403
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1407c1407
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1409,1410c1409,1410
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
1414c1414
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
1415c1415
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1421c1421
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1424c1424
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1426c1426
<    if (bzf == NULL)
---
>    if bzf == NULL
1428c1428
<    if (!(bzf->writing))
---
>    if !(bzf->writing)
1428c1428
<    if (!(bzf->writing))
---
>    if (!bzf->writing)
(84.6 %, 31520 bytes)
1415c1415
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1421c1421
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1424c1424
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1426c1426
<    if (bzf == NULL)
---
>    if bzf == NULL
1428c1428
<    if (!(bzf->writing))
---
>    if !(bzf->writing)
1428c1428
<    if (!(bzf->writing))
---
>    if (!bzf->writing)
1430c1430
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1430c1430
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1433c1433
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL *nbytes_in_lo32 = 0;
1434c1434
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != NULL *nbytes_in_hi32 = 0;
1435c1435
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != NULL *nbytes_out_lo32 = 0;
1436c1436
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != NULL *nbytes_out_hi32 = 0;
1438c1438
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon) && bzf->lastErr == BZ_OK 
1438c1438
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon && bzf->lastErr == BZ_OK) 
(84.6 %, 31518 bytes)
1430c1430
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1430c1430
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1433c1433
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL *nbytes_in_lo32 = 0;
1434c1434
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != NULL *nbytes_in_hi32 = 0;
1435c1435
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != NULL *nbytes_out_lo32 = 0;
1436c1436
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != NULL *nbytes_out_hi32 = 0;
1438c1438
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon) && bzf->lastErr == BZ_OK 
1438c1438
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon && bzf->lastErr == BZ_OK) 
1440c1440
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  !abandon && !ferror ( bzf->handle )  
1440c1440
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  bzf->handle  ) 
1442c1442
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL
1444c1444
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != NULL
1446c1446
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != NULL
1448c1448
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != NULL
1451c1451
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1458c1458
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
(84.6 %, 31516 bytes)
1440c1440
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  !abandon && !ferror ( bzf->handle )  
1440c1440
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  bzf->handle  ) 
1442c1442
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL
1444c1444
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != NULL
1446c1446
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != NULL
1448c1448
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != NULL
1451c1451
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1458c1458
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
1459c1459
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1464c1464
<                      int   nUnused )
---
>                      int   nUnused 
1469c1469
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1471c1471
<    if (f == NULL || 
---
>    if f == NULL || 
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1472c1472
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
(84.6 %, 31514 bytes)
1459c1459
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1464c1464
<                      int   nUnused )
---
>                      int   nUnused 
1469c1469
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1471c1471
<    if (f == NULL || 
---
>    if f == NULL || 
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1472c1472
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
1473c1473
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity < 0 || verbosity > 4 ||
(84.6 %, 31512 bytes)
1473c1473
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity < 0 || verbosity > 4 ||
1474c1474
<        (unused == NULL && nUnused != 0) ||
---
>        unused == NULL && nUnused != 0 ||
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
(84.6 %, 31510 bytes)
1474c1474
<        (unused == NULL && nUnused != 0) ||
---
>        unused == NULL && nUnused != 0 ||
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED))
(84.6 %, 31508 bytes)
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED))
(84.6 %, 31506 bytes)
1475c1475
<        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
---
>        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1478c1478
<    if (ferror(f))
---
>    if ferror(f)
1478c1478
<    if (ferror(f))
---
>    if (ferrorf)
1481c1481
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1481c1481
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1482c1482
<    if (bzf == NULL) 
---
>    if bzf == NULL 
1485c1485
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1495c1495
<    while (nUnused > 0) 
---
>    while nUnused > 0 
1497c1497
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit  &(bzf->strm), verbosity, small ;
1497c1497
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
(84.6 %, 31504 bytes)
1478c1478
<    if (ferror(f))
---
>    if ferror(f)
1478c1478
<    if (ferror(f))
---
>    if (ferrorf)
1481c1481
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1481c1481
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1482c1482
<    if (bzf == NULL) 
---
>    if bzf == NULL 
1485c1485
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1495c1495
<    while (nUnused > 0) 
---
>    while nUnused > 0 
1497c1497
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit  &(bzf->strm), verbosity, small ;
1497c1497
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1498c1498
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1510c1510
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
(84.6 %, 31502 bytes)
1498c1498
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1510c1510
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1510c1510
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)  int *bzerror, BZFILE *b 
1512c1512
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1514c1514
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1515c1515
<    if (bzf == NULL)
---
>    if bzf == NULL
1518c1518
<    if (bzf->writing)
---
>    if bzf->writing
1521c1521
<    if (bzf->initialisedOk)
---
>    if bzf->initialisedOk
1522c1522
<       (void)0;
---
>       void0;
1528c1528
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
(84.6 %, 31500 bytes)
1510c1510
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b 
1512c1512
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1514c1514
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1515c1515
<    if (bzf == NULL)
---
>    if bzf == NULL
1518c1518
<    if (bzf->writing)
---
>    if bzf->writing
1521c1521
<    if (bzf->initialisedOk)
---
>    if bzf->initialisedOk
1522c1522
<       (void)0;
---
>       void0;
1528c1528
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
1529c1529
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1532c1532
<              int     len )
---
>              int     len 
1535c1535
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1537c1537
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1539c1539
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1542c1542
<    if (bzf->writing)
---
>    if bzf->writing
1545c1545
<    if (len == 0)
---
>    if len == 0
1551c1551
<    while (True) 
---
>    while True 
1558c1558
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
(84.6 %, 31498 bytes)
1529c1529
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1532c1532
<              int     len )
---
>              int     len 
1535c1535
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1537c1537
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1539c1539
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1542c1542
<    if (bzf->writing)
---
>    if bzf->writing
1545c1545
<    if (len == 0)
---
>    if len == 0
1551c1551
<    while (True) 
---
>    while True 
1558c1558
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
1559c1559
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1562c1562
<                        int*    nUnused )
---
>                        int*    nUnused 
1564c1564
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1565c1565
<    if (bzf == NULL)
---
>    if bzf == NULL
1567c1567
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if bzf->lastErr != BZ_STREAM_END
1569c1569
<    if (unused == NULL || nUnused == NULL)
---
>    if unused == NULL || nUnused == NULL
1572c1572
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1583c1583
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
(84.6 %, 31496 bytes)
1559c1559
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1562c1562
<                        int*    nUnused )
---
>                        int*    nUnused 
1564c1564
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1565c1565
<    if (bzf == NULL)
---
>    if bzf == NULL
1567c1567
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if bzf->lastErr != BZ_STREAM_END
1569c1569
<    if (unused == NULL || nUnused == NULL)
---
>    if unused == NULL || nUnused == NULL
1572c1572
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1583c1583
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1584c1584
<                          ( char*         dest, 
---
>                           char*         dest, 
1590c1590
<                            int           workFactor )
---
>                            int           workFactor 
1595c1595
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1599c1599
<        workFactor < 0 || workFactor > 0) 
---
>        workFactor < 0 || workFactor > 0 
1602c1602
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1607c1607
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1615c1615
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == BZ_FINISH_OK goto output_overflow;
1616c1616
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1634c1634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
(84.6 %, 31494 bytes)
1584c1584
<                          ( char*         dest, 
---
>                           char*         dest, 
1590c1590
<                            int           workFactor )
---
>                            int           workFactor 
1595c1595
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1599c1599
<        workFactor < 0 || workFactor > 0) 
---
>        workFactor < 0 || workFactor > 0 
1602c1602
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1607c1607
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1615c1615
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == BZ_FINISH_OK goto output_overflow;
1616c1616
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1634c1634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
1635c1635
<                            ( char*         dest, 
---
>                             char*         dest, 
1640c1640
<                              int           verbosity )
---
>                              int           verbosity 
1645c1645
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1648c1648
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity < 0 || verbosity > 4 
1647c1647
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
(84.6 %, 31492 bytes)
1635c1635
<                            ( char*         dest, 
---
>                             char*         dest, 
1640c1640
<                              int           verbosity )
---
>                              int           verbosity 
1645c1645
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1648c1648
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity < 0 || verbosity > 4 
1647c1647
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
1655c1655
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1663c1663
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == BZ_OK goto output_overflow_or_eof;
1664c1664
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1672c1672
<    if (strm.avail_out > 0) {
---
>    if strm.avail_out > 0 {
1689c1689
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
(84.6 %, 31490 bytes)
1655c1655
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1663c1663
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == BZ_OK goto output_overflow_or_eof;
1664c1664
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1672c1672
<    if (strm.avail_out > 0) {
---
>    if strm.avail_out > 0 {
1689c1689
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
1689c1689
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)void
1699c1699
<                ( const char *path,   
---
>                 const char *path,   
1702c1702
<                  int open_mode)      
---
>                  int open_mode      
1708c1708
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(84.6 %, 31488 bytes)
1689c1689
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1699c1699
<                ( const char *path,   
---
>                 const char *path,   
1702c1702
<                  int open_mode)      
---
>                  int open_mode      
1708c1708
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1709,1710c1709,1710
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1717c1717
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
(84.6 %, 31486 bytes)
1709,1710c1709,1710
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1717c1717
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
1718,1719c1718,1719
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1721c1721
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopenNULL,fd,mode,1;
1726c1726
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
(84.6 %, 31484 bytes)
1718,1719c1718,1719
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1721c1721
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopenNULL,fd,mode,1;
1726c1726
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1726c1726
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) BZFILE* b, void* buf, int len 
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1731c1731
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END {
1740c1740
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(84.6 %, 31482 bytes)
1726c1726
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len 
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1729c1729
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1731c1731
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END {
1740c1740
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
1740c1740
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) BZFILE* b, void* buf, int len 
1745c1745
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK{
1754c1754
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
(84.6 %, 31480 bytes)
1740c1740
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len 
1745c1745
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK{
1754c1754
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
1754c1754
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) BZFILE *b
1762c1762
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
(84.6 %, 31478 bytes)
1754c1754
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush BZFILE *b
1762c1762
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
1762c1762
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) BZFILE* b
1765c1765
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b->handle;
1765c1765
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *b)->handle;
1767c1767
<    if (b==NULL) 
---
>    if b==NULL 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b)->writing{
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b->writing){
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*b)->writing){
1769c1769
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL;
1770c1770
<       if(bzerr != BZ_OK){
---
>       ifbzerr != BZ_OK{
1771c1771
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL;
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!=stdin && fp!=stdout{
1775c1775
<       fclose(fp);
---
>       fclosefp;
1802c1802
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
(84.6 %, 31476 bytes)
1762c1762
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b
1765c1765
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b->handle;
1765c1765
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *b)->handle;
1767c1767
<    if (b==NULL) 
---
>    if b==NULL 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b)->writing{
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b->writing){
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*b)->writing){
1769c1769
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL;
1770c1770
<       if(bzerr != BZ_OK){
---
>       ifbzerr != BZ_OK{
1771c1771
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL;
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!=stdin && fp!=stdout{
1775c1775
<       fclose(fp);
---
>       fclosefp;
1802c1802
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1802c1802
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) BZFILE *b, int *errnum
1804c1804
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b->lastErr;
1804c1804
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *b)->lastErr;
1806c1806
<    if(err>0) err = 0;
---
>    iferr>0 err = 0;
1850c1850
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
(84.6 %, 31474 bytes)
1802c1802
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum
1804c1804
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b->lastErr;
1804c1804
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *b)->lastErr;
1806c1806
<    if(err>0) err = 0;
---
>    iferr>0 err = 0;
1850c1850
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
1851c1851
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
(84.6 %, 31472 bytes)
1851c1851
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
1852c1852
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
(84.6 %, 31470 bytes)
1852c1852
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
1868c1868
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
(84.6 %, 31468 bytes)
1868c1868
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
1869c1869
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
(84.6 %, 31466 bytes)
1869c1869
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1869c1869
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
1869c1869
<       root=snocString((root), (name))
---
>       root=snocString((root), name)
(84.6 %, 31464 bytes)
1869c1869
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1869c1869
<       root=snocString(root), (name)
---
>       root=snocString(root), name
1871c1871
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(84.6 %, 31462 bytes)
1869c1869
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1871c1871
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(84.6 %, 31460 bytes)
1871c1871
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
1872c1872
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
(84.6 %, 31458 bytes)
1872c1872
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1872c1872
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(84.7 %, 31456 bytes)
1872c1872
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1872c1872
<       root=snocString(root), (name)
---
>       root=snocString(root), name
1874c1874
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
(84.7 %, 31454 bytes)
1872c1872
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1874c1874
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
(84.7 %, 31452 bytes)
1874c1874
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
1885c1885
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1885c1885
< #define True  ((Bool)1)
---
> #define True  (Bool1)
(84.7 %, 31450 bytes)
1885c1885
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1885c1885
< #define True  ((Bool)1)
---
> #define True  (Bool1)
(84.7 %, 31448 bytes)
1885c1885
< #define True  (Bool)1
---
> #define True  Bool1
1886c1886
< #define False ((Bool)0)
---
> #define False (Bool)0
1886c1886
< #define False ((Bool)0)
---
> #define False (Bool0)
(84.7 %, 31446 bytes)
1886c1886
< #define False ((Bool)0)
---
> #define False (Bool)0
1886c1886
< #define False ((Bool)0)
---
> #define False (Bool0)
(84.7 %, 31444 bytes)
1886c1886
< #define False (Bool)0
---
> #define False Bool0
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
(84.7 %, 31442 bytes)
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) strcmp(aa->name, (s))==0
(84.7 %, 31440 bytes)
2144c2144
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs strcmp(aa->name, (s))==0
2144c2144
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmpaa->name, (s)==0)
2144c2144
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, s)==0)
(84.7 %, 31438 bytes)
2144c2144
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmpaa->name, (s)==0
2144c2144
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmp(aa->name, s)==0
(84.7 %, 31436 bytes)
2144c2144
< #define ISFLAGs strcmpaa->name, (s)==0
---
> #define ISFLAGs strcmpaa->name, s==0
2146c2146
< int main ( int argc, char *argv[] )
---
> int main  int argc, char *argv[] 
(84.7 %, 31434 bytes)
2146c2146
< int main ( int argc, char *argv[] )
---
> int main  int argc, char *argv[] 
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
611c611
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
621c621
<       s->tPos = GET_LLs->tPos;
---
>       s-tPos = GET_LLs->tPos;
611c611
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
617c617
<    UInt32s->ll16[i] | GET_LL4i << 6
---
>    UInt32s-ll16[i] | GET_LL4i << 6
(84.7 %, 31432 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
617c617
<    UInt32s->ll16[i] | GET_LL4i << 6
---
>    UInt32s-ll16[i] | GET_LL4i << 6
617c617
<    UInt32s->ll16[i] | GET_LL4i << 6
---
>    UInt32s->ll16[i] | GET_LL4i < 6
620c620
<       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       c = BZ2_indexIntoF  s->tPos, s-cftab ;    \
617c617
<    UInt32s->ll16[i] | GET_LL4i << 6
---
>    UInt32s->ll16[i] | GET_LL4i < 6
620c620
<       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       c = BZ2_indexIntoF  s-tPos, s->cftab ;    \
(84.7 %, 31430 bytes)
617c617
<    UInt32s-ll16[i] | GET_LL4i << 6
---
>    UInt32s-ll16[i] | GET_LL4i < 6
620c620
<       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       c = BZ2_indexIntoF  s->tPos, s-cftab ;    \
617c617
<    UInt32s-ll16[i] | GET_LL4i << 6
---
>    UInt32s-ll16[i] | GET_LL4i < 6
620c620
<       c = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       c = BZ2_indexIntoF  s-tPos, s->cftab ;    \
(84.7 %, 31428 bytes)
617c617
<    UInt32s-ll16[i] | GET_LL4i < 6
---
>    UInt32s-ll16[i] | GET_LL4i  6
620c620
<       c = BZ2_indexIntoF  s->tPos, s-cftab ;    \
---
>       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
665c665
< #define fmina,b a < b ? a : b
---
> #define fmina,b a  b ? a : b
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 1
(84.7 %, 31426 bytes)
665c665
< #define fmina,b a < b ? a : b
---
> #define fmina,b a  b ? a : b
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 1
689,690c689,690
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 1
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 < zz & 1
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
(84.7 %, 31424 bytes)
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 1
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 1
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 1
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 1
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
(84.7 %, 31422 bytes)
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 1
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 1
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
---
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 < zz & 1
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 1
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
---
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 < zz & 1
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
(84.7 %, 31420 bytes)
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 1
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 1
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 1
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 1
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 1
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 < zz & 1
> #define      WORD_BHzz  bhtab[zz > 5]
(84.7 %, 31418 bytes)
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 1
< #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
> #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 1
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 < zz & 1
> #define      WORD_BHzz  bhtab[zz > 5]
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 1
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 < zz & 1
> #define      WORD_BHzz  bhtab[zz > 5]
(84.7 %, 31416 bytes)
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 1
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 1
> #define      WORD_BHzz  bhtab[zz > 5]
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 1
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 1
> #define      WORD_BHzz  bhtab[zz > 5]
(84.7 %, 31414 bytes)
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 1
< #define      WORD_BHzz  bhtab[zz > 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
> #define      WORD_BHzz  bhtab[zz  5]
732c732
< #define mmina,b a < b ? a : b
---
> #define mmina,b a  b ? a : b
918c918
<    unsigned char* block  = s->block;
---
>    unsigned char* block  = s-block;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
917c917
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = s-ptr;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
901c901
<          s->nInUse++;
---
>          s-nInUse++;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = s-nInUse;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-unseqToSeq[i] = s->nInUse;
767c767
< #define SETMASK 1 << 1
---
> #define SETMASK 1 < 1
897c897
<    s->nInUse = 0;
---
>    s-nInUse = 0;
767c767
< #define SETMASK 1 << 1
---
> #define SETMASK 1 < 1
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
---
> #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
(84.7 %, 31412 bytes)
732c732
< #define mmina,b a < b ? a : b
---
> #define mmina,b a  b ? a : b
918c918
<    unsigned char* block  = s->block;
---
>    unsigned char* block  = s-block;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
917c917
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = s-ptr;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
901c901
<          s->nInUse++;
---
>          s-nInUse++;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = s-nInUse;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-unseqToSeq[i] = s->nInUse;
767c767
< #define SETMASK 1 << 1
---
> #define SETMASK 1 < 1
897c897
<    s->nInUse = 0;
---
>    s-nInUse = 0;
767c767
< #define SETMASK 1 << 1
---
> #define SETMASK 1 < 1
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
---
> #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
898,899c898,899
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  6; i++)
>       if (s-inUse[i]) {
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] = (unsigned char) i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
932c932
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>       AssertD ( wr = i, "generateMTFValues1" );
934c934
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s-unseqToSeq[block[j]];
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValuesa" );
1081c1081
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
(84.7 %, 31410 bytes)
898,899c898,899
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  6; i++)
>       if (s-inUse[i]) {
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] = (unsigned char) i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
932c932
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>       AssertD ( wr = i, "generateMTFValues1" );
934c934
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s-unseqToSeq[block[j]];
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValuesa" );
1081c1081
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1082c1082
<        workFactor < 0 || workFactor > 0)
---
>        workFactor  0 || workFactor  0)
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  0 || verbosity  4) return BZ_PARAM_ERROR;
1328c1328
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1329c1329
<        workFactor < 0 || workFactor > 0 ||
---
>        workFactor  0 || workFactor  0 ||
1330c1330
<        verbosity < 0 || verbosity > 4)
---
>        verbosity  0 || verbosity  4)
1373c1373
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1375c1375
<    if (!bzf->writing)
---
>    if (!bzf-writing)
1393c1393
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf->strm.avail_out  BZ_MAX_UNUSED) 
1395c1395
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf-strm.avail_in == 0)
1473c1473
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  0 || verbosity  4 ||
1475c1475
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>        unused != NULL && nUnused  0 || nUnused  BZ_MAX_UNUSED)
1539c1539
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1542c1542
<    if (bzf->writing)
---
>    if (bzf-writing)
1597c1597
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1598c1598
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  0 || verbosity  4 ||
1599c1599
<        workFactor < 0 || workFactor > 0) 
---
>        workFactor  0 || workFactor  0) 
1648c1648
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity  0 || verbosity  4) 
1847c1847
< #include <signal.h>
---
> #include signal.h
1848c1848
< #include <errno.h>
---
> #include errno.h
1859c1859
< #   include <fcntl.h>
---
> #   include fcntl.h
1860c1860
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: aggregate-to-scalar >===
910a911
>    unsigned char yy_0;
928c929
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
937c938
<       if (yy[0] == ll_i) { 
---
>       if (yy_0 == ll_i) { 
947c948
<             yy[1] = yy[0];
---
>             yy[1] = yy_0;
951,952c952,953
<             yy[0] = rtmp;
<             j = ryy_j - &yy[0];
---
>             yy_0 = rtmp;
>             j = ryy_j - &yy_0;
917a918
>    UInt32 ptr_0;
933c934
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
(84.7 %, 31428 bytes)
918a919
>    UInt32 ptr_0;
934c935
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
919a920
>    unsigned char block_0;
935c936
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
(84.7 %, 31444 bytes)
920a921
>    unsigned char block_0;
936c937
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
910a911
>    unsigned char yy_1;
948,950c949,951
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &yy[1];
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &yy_1;
(84.6 %, 31469 bytes)
910a911
>    unsigned char yy_1;
949,951c950,952
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &yy[1];
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &yy_1;
922a923
>    unsigned short mtfv_0;
956c957
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
964c965
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
(84.6 %, 31489 bytes)
923a924
>    unsigned short mtfv_0;
957c958
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
965c966
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
1080a1081
>    bz_stream *s_0;
1095c1096
<    s->strm = strm;
---
>    s_0 = strm;
(84.6 %, 31511 bytes)
1081a1082
>    bz_stream *s_0;
1096c1097
<    s->strm = strm;
---
>    s_0 = strm;
1081a1082
>    UInt32 *s_4;
1103c1104
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1119c1120
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s_4;
1121c1122
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
(84.6 %, 31526 bytes)
1081a1082
>    UInt32 *s_4;
1104c1105
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1120c1121
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s_4;
1122c1123
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
1081a1082
>    UInt32 *s_5;
1105c1106
<    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1119c1120
<    s->block             = (unsigned char*)s->arr2;
---
>    s->block             = (unsigned char*)s_5;
(84.6 %, 31530 bytes)
1081a1082
>    UInt32 *s_5;
1106c1107
<    s->arr2 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1120c1121
<    s->block             = (unsigned char*)s->arr2;
---
>    s->block             = (unsigned char*)s_5;
1081a1082
>    UInt32 *s_6;
1107c1108
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
(84.6 %, 31538 bytes)
1081a1082
>    UInt32 *s_6;
1108c1109
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
1081a1082
>    Int32 s_2;
1113c1114
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
(84.6 %, 31550 bytes)
1081a1082
>    Int32 s_2;
1114c1115
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
1081a1082
>    Int32 s_1;
1115c1116
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
(84.6 %, 31559 bytes)
1081a1082
>    Int32 s_1;
1116c1117
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
1081a1082
>    UInt32 s_27;
1117c1118
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
(84.6 %, 31569 bytes)
1081a1082
>    UInt32 s_27;
1118c1119
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
1081a1082
>    Int32 s_30;
1119c1120
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
(84.6 %, 31575 bytes)
1081a1082
>    Int32 s_30;
1120c1121
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
1081a1082
>    Int32 s_18;
1121c1122
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s_18         = 0 * blockSize100k - 9;
(84.6 %, 31578 bytes)
1081a1082
>    Int32 s_18;
1122c1123
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s_18         = 0 * blockSize100k - 9;
1081a1082
>    Int32 s_28;
1123c1124
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
(84.6 %, 31585 bytes)
1081a1082
>    Int32 s_28;
1124c1125
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
1081a1082
>    Int32 s_12;
1125c1126
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
(84.6 %, 31592 bytes)
1081a1082
>    Int32 s_12;
1126c1127
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
1081a1082
>    unsigned char *s_9;
1128c1129
<    s->block             = (unsigned char*)s_5;
---
>    s_9             = (unsigned char*)s_5;
(84.6 %, 31598 bytes)
1081a1082
>    unsigned char *s_9;
1129c1130
<    s->block             = (unsigned char*)s_5;
---
>    s_9             = (unsigned char*)s_5;
1081a1082
>    unsigned short *s_10;
1130c1131
<    s->mtfv              = (unsigned short*)s_4;
---
>    s_10              = (unsigned short*)s_4;
(84.6 %, 31616 bytes)
1081a1082
>    unsigned short *s_10;
1131c1132
<    s->mtfv              = (unsigned short*)s_4;
---
>    s_10              = (unsigned short*)s_4;
1081a1082
>    UInt32 *s_8;
1133c1134
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
(84.6 %, 31638 bytes)
1081a1082
>    UInt32 *s_8;
1134c1135
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
1178a1179
>    bz_stream *s_0;
1182c1183
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.6 %, 31651 bytes)
1179a1180
>    bz_stream *s_0;
1183c1184
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1179a1180
>    Int32 s_1;
1186c1187
<    switch (s->mode) 
---
>    switch (s_1) 
(84.5 %, 31666 bytes)
1179a1180
>    Int32 s_1;
1187c1188
<    switch (s->mode) 
---
>    switch (s_1) 
1195a1196
>    bz_stream *s_0;
1199c1200
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.5 %, 31676 bytes)
1196a1197
>    bz_stream *s_0;
1200c1201
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1223a1224
>    bz_stream *s_0;
1236c1237
<    s->strm                  = strm;
---
>    s_0                  = strm;
(84.5 %, 31691 bytes)
1224a1225
>    bz_stream *s_0;
1237c1238
<    s->strm                  = strm;
---
>    s_0                  = strm;
1224a1225
>    Int32 s_1;
1239c1240
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
(84.5 %, 31706 bytes)
1224a1225
>    Int32 s_1;
1240c1241
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
1224a1225
>    Int32 s_8;
1241c1242
<    s->bsLive                = 0;
---
>    s_8                = 0;
(84.5 %, 31715 bytes)
1224a1225
>    Int32 s_8;
1242c1243
<    s->bsLive                = 0;
---
>    s_8                = 0;
1224a1225
>    UInt32 s_7;
1243c1244
<    s->bsBuff                = 0;
---
>    s_7                = 0;
(84.5 %, 31723 bytes)
1224a1225
>    UInt32 s_7;
1244c1245
<    s->bsBuff                = 0;
---
>    s_7                = 0;
1224a1225
>    UInt32 s_26;
1245c1246
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
(84.5 %, 31732 bytes)
1224a1225
>    UInt32 s_26;
1246c1247
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
1224a1225
>    Bool s_10;
1251c1252
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
(84.5 %, 31728 bytes)
1224a1225
>    Bool s_10;
1252c1253
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
1224a1225
>    Int32 s_11;
1256c1257
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
(84.5 %, 31728 bytes)
1224a1225
>    Int32 s_11;
1257c1258
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
1224a1225
>    Int32 s_12;
1258c1259
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
1284a1285
>    bz_stream *s_0;
1288c1289
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.5 %, 31733 bytes)
1224a1225
>    Int32 s_12;
1259c1260
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
1285a1286
>    bz_stream *s_0;
1289c1290
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.5 %, 31740 bytes)
1286a1287
>    bz_stream *s_0;
1290c1291
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1303a1304
>    bz_stream *s_0;
1307c1308
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1400a1401
>    Bool bzf_3;
1405c1406
<    if (!bzf->writing)
---
>    if (!bzf_3)
(84.5 %, 31755 bytes)
1304a1305
>    bz_stream *s_0;
1308c1309
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1401a1402
>    Bool bzf_3;
1406c1407
<    if (!bzf->writing)
---
>    if (!bzf_3)
(84.5 %, 31770 bytes)
1402a1403
>    Bool bzf_3;
1407c1408
<    if (!bzf->writing)
---
>    if (!bzf_3)
1402a1403
>    unsigned int bzf_4_1;
1415c1416
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1427c1428
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
(84.5 %, 31778 bytes)
1402a1403
>    unsigned int bzf_4_1;
1416c1417
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1428c1429
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
1402a1403
>    char *bzf_4_0;
1417c1418
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
1402a1403
>    unsigned int bzf_4_5;
1420c1421
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1426c1427
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
(84.5 %, 31781 bytes)
1402a1403
>    char *bzf_4_0;
1418c1419
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
1402a1403
>    unsigned int bzf_4_5;
1421c1422
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1427c1428
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
1402a1403
>    char *bzf_4_4;
1422c1423
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
(84.5 %, 31789 bytes)
1402a1403
>    unsigned int bzf_4_5;
1422c1423
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1428c1429
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
1402a1403
>    char *bzf_4_4;
1423c1424
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
1459a1460
>    Bool bzf_3;
1463c1464
<    if (!bzf->writing)
---
>    if (!bzf_3)
(84.5 %, 31790 bytes)
1402a1403
>    char *bzf_4_4;
1424c1425
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
1460a1461
>    Bool bzf_3;
1464c1465
<    if (!bzf->writing)
---
>    if (!bzf_3)
(84.5 %, 31797 bytes)
1461a1462
>    Bool bzf_3;
1465c1466
<    if (!bzf->writing)
---
>    if (!bzf_3)
1503a1504
>    Bool bzf_6;
1524c1525
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1541c1542
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
(84.5 %, 31805 bytes)
1504a1505
>    Bool bzf_6;
1525c1526
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1542c1543
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
1504a1505
>    Int32 bzf_2;
1527c1528
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1539c1540
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
1504a1505
>    Bool bzf_3;
1528c1529
<    bzf->writing       = False;
---
>    bzf_3       = False;
(84.5 %, 31794 bytes)
1504a1505
>    Int32 bzf_2;
1528c1529
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1540c1541
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
1504a1505
>    Bool bzf_3;
1529c1530
<    bzf->writing       = False;
---
>    bzf_3       = False;
(84.5 %, 31802 bytes)
1504a1505
>    Bool bzf_3;
1530c1531
<    bzf->writing       = False;
---
>    bzf_3       = False;
1504a1505
>    unsigned int bzf_4_1;
1541c1542
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
(84.5 %, 31810 bytes)
1504a1505
>    unsigned int bzf_4_1;
1542c1543
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
1504a1505
>    char *bzf_4_0;
1543c1544
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
(84.5 %, 31824 bytes)
1504a1505
>    char *bzf_4_0;
1544c1545
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
1554a1555
>    Bool bzf_3;
1560c1561
<    if (bzf->writing)
---
>    if (bzf_3)
(84.5 %, 31832 bytes)
1555a1556
>    Bool bzf_3;
1561c1562
<    if (bzf->writing)
---
>    if (bzf_3)
1555a1556
>    Bool bzf_6;
1564c1565
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
(84.5 %, 31840 bytes)
1555a1556
>    Bool bzf_6;
1565c1566
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
1579a1580
>    Bool bzf_3;
1586c1587
<    if (bzf->writing)
---
>    if (bzf_3)
(84.5 %, 31842 bytes)
1580a1581
>    Bool bzf_3;
1587c1588
<    if (bzf->writing)
---
>    if (bzf_3)
1580a1581
>    unsigned int bzf_4_5;
1593c1594
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
1580a1581
>    char *bzf_4_4;
1594c1595
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(84.5 %, 31850 bytes)
1580a1581
>    unsigned int bzf_4_5;
1594c1595
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
1580a1581
>    char *bzf_4_4;
1595c1596
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(84.5 %, 31863 bytes)
1580a1581
>    char *bzf_4_4;
1596c1597
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
1611a1612
>    Int32 bzf_5;
1614c1615
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
1611a1612
>    unsigned int bzf_4_1;
1620c1621
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
(84.4 %, 31870 bytes)
1612a1613
>    Int32 bzf_5;
1615c1616
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
1612a1613
>    unsigned int bzf_4_1;
1621c1622
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
(84.4 %, 31879 bytes)
1612a1613
>    unsigned int bzf_4_1;
1622c1623
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
1612a1613
>    char *bzf_4_0;
1623c1624
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
1641a1642
>    char *strm_0;
1658c1659
<    strm.next_in = source;
---
>    strm_0 = source;
(84.4 %, 31893 bytes)
1612a1613
>    char *bzf_4_0;
1624c1625
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
1642a1643
>    char *strm_0;
1659c1660
<    strm.next_in = source;
---
>    strm_0 = source;
(84.4 %, 31901 bytes)
1643a1644
>    char *strm_0;
1660c1661
<    strm.next_in = source;
---
>    strm_0 = source;
1643a1644
>    char *strm_4;
1661c1662
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.4 %, 31912 bytes)
1643a1644
>    char *strm_4;
1662c1663
<    strm.next_out = dest;
---
>    strm_4 = dest;
1643a1644
>    unsigned int strm_1;
1663c1664
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.4 %, 31922 bytes)
1643a1644
>    unsigned int strm_1;
1664c1665
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1643a1644
>    unsigned int strm_5;
1665c1666
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1672c1673
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
(84.4 %, 31939 bytes)
1643a1644
>    unsigned int strm_5;
1666c1667
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1673c1674
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
1696a1697
>    char *strm_0;
1711c1712
<    strm.next_in = source;
---
>    strm_0 = source;
(84.4 %, 31947 bytes)
1697a1698
>    char *strm_0;
1712c1713
<    strm.next_in = source;
---
>    strm_0 = source;
1697a1698
>    char *strm_4;
1713c1714
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.4 %, 31958 bytes)
1697a1698
>    char *strm_4;
1714c1715
<    strm.next_out = dest;
---
>    strm_4 = dest;
1697a1698
>    unsigned int strm_1;
1715c1716
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.4 %, 31968 bytes)
1697a1698
>    unsigned int strm_1;
1716c1717
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1697a1698
>    unsigned int strm_5;
1717c1718
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1724c1725
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1729c1730
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
(84.4 %, 31985 bytes)
1697a1698
>    unsigned int strm_5;
1718c1719
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1725c1726
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1730c1731
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
1857a1858
> static char *bzerrorstrings_0 = "OK";
1866c1867
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.4 %, 31985 bytes)
1858a1859
> static char *bzerrorstrings_0 = "OK";
1867c1868
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.4 %, 32017 bytes)
===< pass_clang :: remove-nested-function >===
===< pass_clang :: move-function-body >===
80a81,125
> int BZ_APIBZ2_bzDecompressInit 
>                      ( bz_stream* strm, 
>                        int        verbosity,
>                        int        small )
> {
>    DState* s;
>    Int32 s_12;
>    Int32 s_11;
>    Bool s_10;
>    UInt32 s_26;
>    UInt32 s_7;
>    Int32 s_8;
>    Int32 s_1;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
>    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
> 
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(DState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0                  = strm;
>    strm->state              = s;
>    s_1                 = BZ_X_MAGIC_1;
>    s_8                = 0;
>    s_7                = 0;
>    s_26 = 0;
>    strm->total_in_lo32      = 0;
>    strm->total_in_hi32      = 0;
>    strm->total_out_lo32     = 0;
>    strm->total_out_hi32     = 0;
>    s_10       = (Bool)small;
>    s->ll4                   = NULL;
>    s->ll16                  = NULL;
>    s->tt                    = NULL;
>    s_11           = 0;
>    s_12             = verbosity;
> 
>    return BZ_OK;
> }
1219,1260d1263
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
1262,1263d1264
<    return BZ_OK;
< }
186a187,190
> const char * BZ_APIBZ2_bzlibVersion(void)
> {
>    return BZ_VERSION;
> }
1748,1751c1752
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
<    return BZ_VERSION;
< }
---
> 
147a148,157
> void BZ_APIBZ2_bzWriteClose
>                   ( int*          bzerror, 
>                     BZFILE*       b, 
>                     int           abandon,
>                     unsigned int* nbytes_in,
>                     unsigned int* nbytes_out )
> {
>    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL );
> }
1439,1448c1449
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
221a222,229
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
> {
>    int err = ((bzFile *)b)->lastErr;
> 
>    if(err>0) err = 0;
>    *errnum = err;
>    return bzerrorstrings_0;
> }
1862,1864d1869
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
1866,1869d1870
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings_0;
< }
191a192,197
> BZFILE * BZ_APIBZ2_bzopen
>                ( const char *path,
>                  const char *mode )
> {
>    return 0;
> }
1767,1772c1773
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
> 
221a222,229
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
> {
>    int err = ((bzFile *)b)->lastErr;
> 
>    if(err>0) err = 0;
>    *errnum = err;
>    return bzerrorstrings_0;
> }
1862,1864d1869
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
1866,1869d1870
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings_0;
< }
212a213,217
> int BZ_APIBZ2_bzflush (BZFILE *b)
> {
>    
>    return 0;
> }
1813,1817c1818
< int BZ_APIBZ2_bzflush (BZFILE *b)
< {
<    
<    return 0;
< }
---
> 
(84.4 %, 32018 bytes)
147a148,157
> void BZ_APIBZ2_bzWriteClose
>                   ( int*          bzerror, 
>                     BZFILE*       b, 
>                     int           abandon,
>                     unsigned int* nbytes_in,
>                     unsigned int* nbytes_out )
> {
>    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL );
> }
1445,1454c1455
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
117a118,138
> void BZ_APIBZ2_bzReadGetUnused 
>                      ( int*    bzerror, 
>                        BZFILE* b, 
>                        void**  unused, 
>                        int*    nUnused )
> {
>    bzFile* bzf = (bzFile*)b;
>    char *bzf_4_0;
>    unsigned int bzf_4_1;
>    Int32 bzf_5;
>    if (bzf == NULL)
>       ;
>    if (bzf_5 != BZ_STREAM_END)
>       ;
>    if (unused == NULL || nUnused == NULL)
>       ;
> 
>    BZ_SETERR(BZ_OK);
>    *nUnused = bzf_4_1;
>    *unused = bzf_4_0;
> }
1612,1627d1632
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
1629,1632d1633
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf_4_1;
<    *unused = bzf_4_0;
< }
227a228,235
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
> {
>    int err = ((bzFile *)b)->lastErr;
> 
>    if(err>0) err = 0;
>    *errnum = err;
>    return bzerrorstrings_0;
> }
1863,1865d1870
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
1867,1870d1871
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings_0;
< }
65a66,137
> int BZ_APIBZ2_bzCompressInit 
>                     ( bz_stream* strm, 
>                      int        blockSize100k,
>                      int        verbosity,
>                      int        workFactor )
> {
>    Int32   n;
>    EState* s;
>    UInt32 *s_8;
>    unsigned short *s_10;
>    unsigned char *s_9;
>    Int32 s_12;
>    Int32 s_28;
>    Int32 s_18;
>    Int32 s_30;
>    UInt32 s_27;
>    Int32 s_1;
>    Int32 s_2;
>    UInt32 *s_6;
>    UInt32 *s_5;
>    UInt32 *s_4;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL || 
>        blockSize100k < 1 || blockSize100k > 9 ||
>        workFactor < 0 || workFactor > 0)
>      return BZ_PARAM_ERROR;
> 
>    if (workFactor == 0) workFactor = 0;
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(EState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0 = strm;
> 
>    s->arr1 = NULL;
>    s->arr2 = NULL;
>    s->ftab = NULL;
> 
>    n       = 0 * blockSize100k;
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
> 
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
> 
>    s->blockNo           = 0;
>    s_2             = BZ_S_INPUT;
>    s_1              = BZ_M_RUNNING;
>    s_27       = 0;
>    s_30     = blockSize100k;
>    s_18         = 0 * blockSize100k - 9;
>    s_28         = verbosity;
>    s_12        = workFactor;
> 
>    s_9             = (unsigned char*)s_5;
>    s_10              = (unsigned short*)s_4;
>    s->zbits             = NULL;
>    s_8               = (UInt32*)s_4;
> 
>    strm->state          = s;
>    strm->total_in_lo32  = 0;
>    strm->total_in_hi32  = 0;
>    strm->total_out_lo32 = 0;
>    strm->total_out_hi32 = 0;
>    ;
>    ;
>    return BZ_OK;
> }
1080,1108d1151
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    UInt32 *s_8;
<    unsigned short *s_10;
<    unsigned char *s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
1110,1151d1152
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0 = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s_2             = BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
<    s_27       = 0;
<    s_30     = blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
<    s_28         = verbosity;
<    s_12        = workFactor;
< 
<    s_9             = (unsigned char*)s_5;
<    s_10              = (unsigned short*)s_4;
<    s->zbits             = NULL;
<    s_8               = (UInt32*)s_4;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
214a215,225
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
> {
>    int bzerr;
> 
>    ;
>    if(bzerr == BZ_OK){
>       return len;
>    }else{
>       return -1;
>    }
> }
1800,1802d1810
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
1804,1810d1811
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
88a89,106
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
> {
>    DState* s;
>    bz_stream *s_0;
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    s = strm->state;
>    if (s == NULL) return BZ_PARAM_ERROR;
>    if (s_0 != strm) return BZ_PARAM_ERROR;
> 
>    if (s->tt   != NULL) BZFREE(s->tt);
>    if (s->ll16 != NULL) BZFREE(s->ll16);
>    if (s->ll4  != NULL) BZFREE(s->ll4);
> 
>    BZFREE(strm->state);
>    strm->state = NULL;
> 
>    return BZ_OK;
> }
1308,1315d1325
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1317,1325d1326
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
202a203,208
> BZFILE * BZ_APIBZ2_bzdopen
>                ( int fd,
>                  const char *mode )
> {
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
> }
1777,1782c1783
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
147a148,157
> void BZ_APIBZ2_bzWriteClose
>                   ( int*          bzerror, 
>                     BZFILE*       b, 
>                     int           abandon,
>                     unsigned int* nbytes_in,
>                     unsigned int* nbytes_out )
> {
>    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL );
> }
1445,1454c1455
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
110a111,127
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
> {
>    bzFile* bzf = (bzFile*)b;
>    Bool bzf_6;
>    Bool bzf_3;
> 
>    BZ_SETERR(BZ_OK);
>    if (bzf == NULL)
>       ;
> 
>    if (bzf_3)
>       ;
> 
>    if (bzf_6)
>       (void)0;
>    0;
> }
1559,1570d1575
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf_3)
<       ;
1572,1575d1576
<    if (bzf_6)
<       (void)0;
<    0;
< }
70a71,85
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
> {
>    
>    EState* s;
>    Int32 s_1;
>    bz_stream *s_0;
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    s = strm->state;
>    if (s == NULL) return BZ_PARAM_ERROR;
>    if (s_0 != strm) return BZ_PARAM_ERROR;
> 
>    preswitch:
>    switch (s_1) 
>    return BZ_OK; 
> }
1182,1191d1196
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1193,1196d1197
<    preswitch:
<    switch (s_1) 
<    return BZ_OK; 
< }
(84.4 %, 32019 bytes)
74a75,92
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
> {
>    EState* s;
>    bz_stream *s_0;
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    s = strm->state;
>    if (s == NULL) return BZ_PARAM_ERROR;
>    if (s_0 != strm) return BZ_PARAM_ERROR;
> 
>    if (s->arr1 != NULL) BZFREE(s->arr1);
>    if (s->arr2 != NULL) BZFREE(s->arr2);
>    if (s->ftab != NULL) BZFREE(s->ftab);
>    BZFREE(strm->state);
> 
>    strm->state = NULL;   
> 
>    return BZ_OK;
> }
1211,1218d1228
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1220,1228d1229
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
88a89,106
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
> {
>    DState* s;
>    bz_stream *s_0;
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    s = strm->state;
>    if (s == NULL) return BZ_PARAM_ERROR;
>    if (s_0 != strm) return BZ_PARAM_ERROR;
> 
>    if (s->tt   != NULL) BZFREE(s->tt);
>    if (s->ll16 != NULL) BZFREE(s->ll16);
>    if (s->ll4  != NULL) BZFREE(s->ll4);
> 
>    BZFREE(strm->state);
>    strm->state = NULL;
> 
>    return BZ_OK;
> }
1319,1326d1336
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1328,1336d1337
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
238a239,246
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
> {
>    int err = ((bzFile *)b)->lastErr;
> 
>    if(err>0) err = 0;
>    *errnum = err;
>    return bzerrorstrings_0;
> }
1864,1866d1871
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
1868,1871d1872
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings_0;
< }
202a203,208
> BZFILE * BZ_APIBZ2_bzdopen
>                ( int fd,
>                  const char *mode )
> {
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
> }
1788,1793c1794
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
179a180,230
> int BZ_APIBZ2_bzBuffToBuffDecompress 
>                            ( char*         dest, 
>                              unsigned int* destLen,
>                              char*         source, 
>                              unsigned int  sourceLen,
>                              int           small,
>                              int           verbosity )
> {
>    bz_stream strm;
>    unsigned int strm_5;
>    unsigned int strm_1;
>    char *strm_4;
>    char *strm_0;
>    int ret;
> 
>    if (dest == NULL || destLen == NULL || 
>        source == NULL ||
>        small != 0 && small != 1 ||
>        verbosity < 0 || verbosity > 4) 
>           return BZ_PARAM_ERROR;
> 
>    strm.bzalloc = NULL;
>    strm.bzfree = NULL;
>    strm.opaque = NULL;
>    ret = 0;
>    if (ret != BZ_OK) return ret;
> 
>    strm_0 = source;
>    strm_4 = dest;
>    strm_1 = sourceLen;
>    strm_5 = *destLen;
> 
>    ret = 0;
>    if (ret == BZ_OK) goto output_overflow_or_eof;
>    if (ret != BZ_STREAM_END) goto errhandler;
> 
>    
>    *destLen -= strm_5;
>    0;
>    return BZ_OK;
> 
>    output_overflow_or_eof:
>    if (strm_5 > 0) {
>       0;
>       return BZ_UNEXPECTED_EOF;
>    } else ;      
> 
>    errhandler:
>    0;
>    return ret; 
> }
1706,1731d1756
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        small != 0 && small != 1 ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
1733,1756d1757
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
179a180,230
> int BZ_APIBZ2_bzBuffToBuffDecompress 
>                            ( char*         dest, 
>                              unsigned int* destLen,
>                              char*         source, 
>                              unsigned int  sourceLen,
>                              int           small,
>                              int           verbosity )
> {
>    bz_stream strm;
>    unsigned int strm_5;
>    unsigned int strm_1;
>    char *strm_4;
>    char *strm_0;
>    int ret;
> 
>    if (dest == NULL || destLen == NULL || 
>        source == NULL ||
>        small != 0 && small != 1 ||
>        verbosity < 0 || verbosity > 4) 
>           return BZ_PARAM_ERROR;
> 
>    strm.bzalloc = NULL;
>    strm.bzfree = NULL;
>    strm.opaque = NULL;
>    ret = 0;
>    if (ret != BZ_OK) return ret;
> 
>    strm_0 = source;
>    strm_4 = dest;
>    strm_1 = sourceLen;
>    strm_5 = *destLen;
> 
>    ret = 0;
>    if (ret == BZ_OK) goto output_overflow_or_eof;
>    if (ret != BZ_STREAM_END) goto errhandler;
> 
>    
>    *destLen -= strm_5;
>    0;
>    return BZ_OK;
> 
>    output_overflow_or_eof:
>    if (strm_5 > 0) {
>       0;
>       return BZ_UNEXPECTED_EOF;
>    } else ;      
> 
>    errhandler:
>    0;
>    return ret; 
> }
1706,1731d1756
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        small != 0 && small != 1 ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
1733,1756d1757
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
65a66,137
> int BZ_APIBZ2_bzCompressInit 
>                     ( bz_stream* strm, 
>                      int        blockSize100k,
>                      int        verbosity,
>                      int        workFactor )
> {
>    Int32   n;
>    EState* s;
>    UInt32 *s_8;
>    unsigned short *s_10;
>    unsigned char *s_9;
>    Int32 s_12;
>    Int32 s_28;
>    Int32 s_18;
>    Int32 s_30;
>    UInt32 s_27;
>    Int32 s_1;
>    Int32 s_2;
>    UInt32 *s_6;
>    UInt32 *s_5;
>    UInt32 *s_4;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL || 
>        blockSize100k < 1 || blockSize100k > 9 ||
>        workFactor < 0 || workFactor > 0)
>      return BZ_PARAM_ERROR;
> 
>    if (workFactor == 0) workFactor = 0;
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(EState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0 = strm;
> 
>    s->arr1 = NULL;
>    s->arr2 = NULL;
>    s->ftab = NULL;
> 
>    n       = 0 * blockSize100k;
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
> 
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
> 
>    s->blockNo           = 0;
>    s_2             = BZ_S_INPUT;
>    s_1              = BZ_M_RUNNING;
>    s_27       = 0;
>    s_30     = blockSize100k;
>    s_18         = 0 * blockSize100k - 9;
>    s_28         = verbosity;
>    s_12        = workFactor;
> 
>    s_9             = (unsigned char*)s_5;
>    s_10              = (unsigned short*)s_4;
>    s->zbits             = NULL;
>    s_8               = (UInt32*)s_4;
> 
>    strm->state          = s;
>    strm->total_in_lo32  = 0;
>    strm->total_in_hi32  = 0;
>    strm->total_out_lo32 = 0;
>    strm->total_out_hi32 = 0;
>    ;
>    ;
>    return BZ_OK;
> }
1091,1119d1162
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    UInt32 *s_8;
<    unsigned short *s_10;
<    unsigned char *s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
1121,1162d1163
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0 = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s_2             = BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
<    s_27       = 0;
<    s_30     = blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
<    s_28         = verbosity;
<    s_12        = workFactor;
< 
<    s_9             = (unsigned char*)s_5;
<    s_10              = (unsigned short*)s_4;
<    s->zbits             = NULL;
<    s_8               = (UInt32*)s_4;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
(84.4 %, 32020 bytes)
74a75,92
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
> {
>    EState* s;
>    bz_stream *s_0;
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    s = strm->state;
>    if (s == NULL) return BZ_PARAM_ERROR;
>    if (s_0 != strm) return BZ_PARAM_ERROR;
> 
>    if (s->arr1 != NULL) BZFREE(s->arr1);
>    if (s->arr2 != NULL) BZFREE(s->arr2);
>    if (s->ftab != NULL) BZFREE(s->ftab);
>    BZFREE(strm->state);
> 
>    strm->state = NULL;   
> 
>    return BZ_OK;
> }
1262,1269d1279
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1271,1279d1280
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
280a281,285
> int BZ_APIBZ2_bzflush (BZFILE *b)
> {
>    
>    return 0;
> }
1816,1820c1821
< int BZ_APIBZ2_bzflush (BZFILE *b)
< {
<    
<    return 0;
< }
---
> 
237a238,241
> const char * BZ_APIBZ2_bzlibVersion(void)
> {
>    return BZ_VERSION;
> }
1766,1769c1770
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
<    return BZ_VERSION;
< }
---
> 
80a81,125
> int BZ_APIBZ2_bzDecompressInit 
>                      ( bz_stream* strm, 
>                        int        verbosity,
>                        int        small )
> {
>    DState* s;
>    Int32 s_12;
>    Int32 s_11;
>    Bool s_10;
>    UInt32 s_26;
>    UInt32 s_7;
>    Int32 s_8;
>    Int32 s_1;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
>    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
> 
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(DState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0                  = strm;
>    strm->state              = s;
>    s_1                 = BZ_X_MAGIC_1;
>    s_8                = 0;
>    s_7                = 0;
>    s_26 = 0;
>    strm->total_in_lo32      = 0;
>    strm->total_in_hi32      = 0;
>    strm->total_out_lo32     = 0;
>    strm->total_out_hi32     = 0;
>    s_10       = (Bool)small;
>    s->ll4                   = NULL;
>    s->ll16                  = NULL;
>    s->tt                    = NULL;
>    s_11           = 0;
>    s_12             = verbosity;
> 
>    return BZ_OK;
> }
1287,1328d1331
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
1330,1331d1332
<    return BZ_OK;
< }
80a81,125
> int BZ_APIBZ2_bzDecompressInit 
>                      ( bz_stream* strm, 
>                        int        verbosity,
>                        int        small )
> {
>    DState* s;
>    Int32 s_12;
>    Int32 s_11;
>    Bool s_10;
>    UInt32 s_26;
>    UInt32 s_7;
>    Int32 s_8;
>    Int32 s_1;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL) return BZ_PARAM_ERROR;
>    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
>    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
> 
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(DState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0                  = strm;
>    strm->state              = s;
>    s_1                 = BZ_X_MAGIC_1;
>    s_8                = 0;
>    s_7                = 0;
>    s_26 = 0;
>    strm->total_in_lo32      = 0;
>    strm->total_in_hi32      = 0;
>    strm->total_out_lo32     = 0;
>    strm->total_out_hi32     = 0;
>    s_10       = (Bool)small;
>    s->ll4                   = NULL;
>    s->ll16                  = NULL;
>    s->tt                    = NULL;
>    s_11           = 0;
>    s_12             = verbosity;
> 
>    return BZ_OK;
> }
1287,1328d1331
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
1330,1331d1332
<    return BZ_OK;
< }
259a260,270
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
> {
>    int bzerr, nread;
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
>    nread = 0;
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
>       return nread;
>    } else {
>       return -1;
>    }
> }
1798,1808c1809
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
(84.4 %, 32021 bytes)
117a118,138
> void BZ_APIBZ2_bzReadGetUnused 
>                      ( int*    bzerror, 
>                        BZFILE* b, 
>                        void**  unused, 
>                        int*    nUnused )
> {
>    bzFile* bzf = (bzFile*)b;
>    char *bzf_4_0;
>    unsigned int bzf_4_1;
>    Int32 bzf_5;
>    if (bzf == NULL)
>       ;
>    if (bzf_5 != BZ_STREAM_END)
>       ;
>    if (unused == NULL || nUnused == NULL)
>       ;
> 
>    BZ_SETERR(BZ_OK);
>    *nUnused = bzf_4_1;
>    *unused = bzf_4_0;
> }
1679,1694d1699
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
1696,1699d1700
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf_4_1;
<    *unused = bzf_4_0;
< }
147a148,157
> void BZ_APIBZ2_bzWriteClose
>                   ( int*          bzerror, 
>                     BZFILE*       b, 
>                     int           abandon,
>                     unsigned int* nbytes_in,
>                     unsigned int* nbytes_out )
> {
>    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL );
> }
1512,1521c1522
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
65a66,137
> int BZ_APIBZ2_bzCompressInit 
>                     ( bz_stream* strm, 
>                      int        blockSize100k,
>                      int        verbosity,
>                      int        workFactor )
> {
>    Int32   n;
>    EState* s;
>    UInt32 *s_8;
>    unsigned short *s_10;
>    unsigned char *s_9;
>    Int32 s_12;
>    Int32 s_28;
>    Int32 s_18;
>    Int32 s_30;
>    UInt32 s_27;
>    Int32 s_1;
>    Int32 s_2;
>    UInt32 *s_6;
>    UInt32 *s_5;
>    UInt32 *s_4;
>    bz_stream *s_0;
> 
>    if (!0) return BZ_CONFIG_ERROR;
> 
>    if (strm == NULL || 
>        blockSize100k < 1 || blockSize100k > 9 ||
>        workFactor < 0 || workFactor > 0)
>      return BZ_PARAM_ERROR;
> 
>    if (workFactor == 0) workFactor = 0;
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>    s = BZALLOC( sizeof(EState) );
>    if (s == NULL) return BZ_MEM_ERROR;
>    s_0 = strm;
> 
>    s->arr1 = NULL;
>    s->arr2 = NULL;
>    s->ftab = NULL;
> 
>    n       = 0 * blockSize100k;
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
> 
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
> 
>    s->blockNo           = 0;
>    s_2             = BZ_S_INPUT;
>    s_1              = BZ_M_RUNNING;
>    s_27       = 0;
>    s_30     = blockSize100k;
>    s_18         = 0 * blockSize100k - 9;
>    s_28         = verbosity;
>    s_12        = workFactor;
> 
>    s_9             = (unsigned char*)s_5;
>    s_10              = (unsigned short*)s_4;
>    s->zbits             = NULL;
>    s_8               = (UInt32*)s_4;
> 
>    strm->state          = s;
>    strm->total_in_lo32  = 0;
>    strm->total_in_hi32  = 0;
>    strm->total_out_lo32 = 0;
>    strm->total_out_hi32 = 0;
>    ;
>    ;
>    return BZ_OK;
> }
1147,1175d1218
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    UInt32 *s_8;
<    unsigned short *s_10;
<    unsigned char *s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
1177,1218d1219
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0 = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s_2             = BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
<    s_27       = 0;
<    s_30     = blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
<    s_28         = verbosity;
<    s_12        = workFactor;
< 
<    s_9             = (unsigned char*)s_5;
<    s_10              = (unsigned short*)s_4;
<    s->zbits             = NULL;
<    s_8               = (UInt32*)s_4;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
110a111,127
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
> {
>    bzFile* bzf = (bzFile*)b;
>    Bool bzf_6;
>    Bool bzf_3;
> 
>    BZ_SETERR(BZ_OK);
>    if (bzf == NULL)
>       ;
> 
>    if (bzf_3)
>       ;
> 
>    if (bzf_6)
>       (void)0;
>    0;
> }
1626,1637d1642
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf_3)
<       ;
1639,1642d1643
<    if (bzf_6)
<       (void)0;
<    0;
< }
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-array >===
983c983
<    unsigned char   yy[6];
---
>    unsigned char   yy;
(84.4 %, 32018 bytes)
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-undefined-function >===
1351,1353c1351
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> 
326c326
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> 
1109,1110c1109
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
> 
(84.4 %, 31964 bytes)
1136,1138c1136
< static
< void init_RL ( EState* s )
< ;
---
> 
326c326
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> 
1109,1110c1109
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
> 
(84.4 %, 31929 bytes)
326c326
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> 
1109,1110c1109
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
> 
701,702c701
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
1090,1091c1089
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
(84.5 %, 31835 bytes)
701,702c701
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
1090,1091c1089
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
(84.5 %, 31758 bytes)
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_unifdef :: 0 >===
1915d1914
< #if BZ_UNIX
1935,1936d1933
< #endif 
< 
2117,2131d2113
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
1915,1940d1914
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEd 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
2117,2131d2090
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
(84.5 %, 31705 bytes)
===< pass_ints :: a >===
365c365
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
566c566
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
1788c1788
<                ( int fd,
---
>                ( int d,
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define _BZLIB_H
---
> define _BZLIB_H
9c9
< #define _BZLIB_H
---
>  _BZLIB_H
9c9
< #define _BZLIB_H
---
> define 
9c9
< #define _BZLIB_H
---
>  
9c9
< #define _BZLIB_H
---
> define _BZLIB_H
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
>  _BZLIB_H
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
> define 
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
>  
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
> # _BZLIB_H
9c9
< #define _BZLIB_H
---
> # 
(84.5 %, 31690 bytes)
11c11
< #define BZ_RUN               0
---
>                 0
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               
11c11
< #define BZ_RUN               0
---
>  BZ_RUN               
11c11
< #define BZ_RUN               0
---
> define                
11c11
< #define BZ_RUN               0
---
>                 
11c11
< #define BZ_RUN               0
---
> # BZ_RUN               0
11c11
< #define BZ_RUN               0
---
> #                0
(84.5 %, 31676 bytes)
12c12
< #define BZ_FLUSH             1
---
>               
12c12
< #define BZ_FLUSH             1
---
> # BZ_FLUSH             1
12c12
< #define BZ_FLUSH             1
---
> #              1
(84.6 %, 31660 bytes)
13c13
< #define BZ_FINISH            2
---
>              
13c13
< #define BZ_FINISH            2
---
> # BZ_FINISH            2
13c13
< #define BZ_FINISH            2
---
> #             2
(84.6 %, 31643 bytes)
15c15
< #define BZ_OK                0
---
>                  
15c15
< #define BZ_OK                0
---
> # BZ_OK                0
15c15
< #define BZ_OK                0
---
> #                 0
15c15
< #define BZ_OK                0
---
> # BZ_OK                
15c15
< #define BZ_OK                0
---
> #                 
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> # BZ_OK                0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #                 0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> # BZ_OK                
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #                 
> define BZ_RUN_OK            1
15c15
< #define BZ_OK                0
---
> #define                 0
15c15
< #define BZ_OK                0
---
> #define                 
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
>  BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
>  BZ_RUN_OK            1
15c15
< #define BZ_OK                0
---
> #define BZ_OK                
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
>  BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> #define             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> define             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> #             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
>              1
16c16
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
>  BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
> define             1
16c16
< #define BZ_RUN_OK            1
---
>              1
16c16
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
>  BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
> define             
16c16
< #define BZ_RUN_OK            1
---
>              
16c16
< #define BZ_RUN_OK            1
---
> # BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
> #             1
16c16
< #define BZ_RUN_OK            1
---
> # BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
> #             
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> # BZ_RUN_OK            1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #             1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> # BZ_RUN_OK            
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #             
> define BZ_FLUSH_OK          2
16c16
< #define BZ_RUN_OK            1
---
> #define             1
16c16
< #define BZ_RUN_OK            1
---
> #define             
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
>  BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
>  BZ_FLUSH_OK          2
16c16
< #define BZ_RUN_OK            1
---
> #define BZ_RUN_OK            
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
>  BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> #define           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> define           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> #           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
>            2
17c17
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
>  BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
> define           2
17c17
< #define BZ_FLUSH_OK          2
---
>            2
17c17
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          
17c17
< #define BZ_FLUSH_OK          2
---
>  BZ_FLUSH_OK          
17c17
< #define BZ_FLUSH_OK          2
---
> define           
17c17
< #define BZ_FLUSH_OK          2
---
>            
17c17
< #define BZ_FLUSH_OK          2
---
> # BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
> #           2
(84.6 %, 31624 bytes)
18c18
< #define BZ_FINISH_OK         3
---
>           
18c18
< #define BZ_FINISH_OK         3
---
> # BZ_FINISH_OK         3
18c18
< #define BZ_FINISH_OK         3
---
> #          3
18c18
< #define BZ_FINISH_OK         3
---
> # BZ_FINISH_OK         
18c18
< #define BZ_FINISH_OK         3
---
> #          
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> # BZ_FINISH_OK         3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #          3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> # BZ_FINISH_OK         
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #          
> define BZ_STREAM_END        4
18c18
< #define BZ_FINISH_OK         3
---
> #define          3
18c18
< #define BZ_FINISH_OK         3
---
> #define          
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
>  BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
>  BZ_STREAM_END        4
18c18
< #define BZ_FINISH_OK         3
---
> #define BZ_FINISH_OK         
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
>  BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> #define         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> define         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> #         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
>          4
19c19
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
> define         4
19c19
< #define BZ_STREAM_END        4
---
>          4
19c19
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
> define         
19c19
< #define BZ_STREAM_END        4
---
>          
19c19
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
> #         4
19c19
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
> #         
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_STREAM_END        4
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #         4
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_STREAM_END        
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #         
> define BZ_SEQUENCE_ERROR    -1
19c19
< #define BZ_STREAM_END        4
---
> #define         4
19c19
< #define BZ_STREAM_END        4
---
> #define         
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         4
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         4
> # BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         
> # BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         4
>  BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define         
>  BZ_SEQUENCE_ERROR    -1
19c19
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
> define BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
> # BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
>  BZ_SEQUENCE_ERROR    -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
> #define     -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
> define     -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
> #     -1
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_STREAM_END        
>      -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> define BZ_SEQUENCE_ERROR    -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
>  BZ_SEQUENCE_ERROR    -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> define     -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
>      -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> define BZ_SEQUENCE_ERROR    1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
>  BZ_SEQUENCE_ERROR    1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> define     1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
>      1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_SEQUENCE_ERROR    -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> #     -1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_SEQUENCE_ERROR    1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> #     1
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_SEQUENCE_ERROR    -
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> #     -
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> # BZ_SEQUENCE_ERROR    
20c20
< #define BZ_SEQUENCE_ERROR    -1
---
> #     
(84.6 %, 31600 bytes)
20,21c20,21
< #     1
< #define BZ_PARAM_ERROR       -2
---
> #     
>  BZ_PARAM_ERROR       -2
20,21c20,21
< #     1
< #define BZ_PARAM_ERROR       -2
---
> #     
> #define        -2
20,21c20,21
< #     1
< #define BZ_PARAM_ERROR       -2
---
> #     
> define        -2
20,21c20,21
< #     1
< #define BZ_PARAM_ERROR       -2
---
> #     
> #        -2
20,21c20,21
< #     1
< #define BZ_PARAM_ERROR       -2
---
> #     
>         -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> define BZ_PARAM_ERROR       -2
21c21
< #define BZ_PARAM_ERROR       -2
---
>  BZ_PARAM_ERROR       -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> define        -2
21c21
< #define BZ_PARAM_ERROR       -2
---
>         -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> define BZ_PARAM_ERROR       2
21c21
< #define BZ_PARAM_ERROR       -2
---
>  BZ_PARAM_ERROR       2
21c21
< #define BZ_PARAM_ERROR       -2
---
> define        2
21c21
< #define BZ_PARAM_ERROR       -2
---
>         2
21c21
< #define BZ_PARAM_ERROR       -2
---
> # BZ_PARAM_ERROR       -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> #        -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> # BZ_PARAM_ERROR       2
21c21
< #define BZ_PARAM_ERROR       -2
---
> #        2
21c21
< #define BZ_PARAM_ERROR       -2
---
> # BZ_PARAM_ERROR       -
21c21
< #define BZ_PARAM_ERROR       -2
---
> #        -
21c21
< #define BZ_PARAM_ERROR       -2
---
> # BZ_PARAM_ERROR       
21c21
< #define BZ_PARAM_ERROR       -2
---
> #        
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define        -2
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define        2
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define        -
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define        
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define        -2
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define        2
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define        -
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define        
> define BZ_MEM_ERROR         -3
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_PARAM_ERROR       2
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_PARAM_ERROR       
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       2
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       2
> # BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> # BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       2
>  BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
>  BZ_MEM_ERROR         -3
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_PARAM_ERROR       -
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       -
> define BZ_MEM_ERROR         -3
(84.6 %, 31599 bytes)
21c21
< #define BZ_PARAM_ERROR       2
---
> #define BZ_PARAM_ERROR       
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> define BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> # BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
>  BZ_MEM_ERROR         -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> #define          -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> define          -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
> #          -3
21,22c21,22
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_PARAM_ERROR       
>           -3
22c22
< #define BZ_MEM_ERROR         -3
---
> define BZ_MEM_ERROR         -3
22c22
< #define BZ_MEM_ERROR         -3
---
>  BZ_MEM_ERROR         -3
22c22
< #define BZ_MEM_ERROR         -3
---
> define          -3
22c22
< #define BZ_MEM_ERROR         -3
---
>           -3
22c22
< #define BZ_MEM_ERROR         -3
---
> define BZ_MEM_ERROR         3
22c22
< #define BZ_MEM_ERROR         -3
---
>  BZ_MEM_ERROR         3
22c22
< #define BZ_MEM_ERROR         -3
---
> define          3
22c22
< #define BZ_MEM_ERROR         -3
---
>           3
22c22
< #define BZ_MEM_ERROR         -3
---
> # BZ_MEM_ERROR         -3
22c22
< #define BZ_MEM_ERROR         -3
---
> #          -3
22c22
< #define BZ_MEM_ERROR         -3
---
> # BZ_MEM_ERROR         3
22c22
< #define BZ_MEM_ERROR         -3
---
> #          3
22c22
< #define BZ_MEM_ERROR         -3
---
> # BZ_MEM_ERROR         -
22c22
< #define BZ_MEM_ERROR         -3
---
> #          -
22c22
< #define BZ_MEM_ERROR         -3
---
> # BZ_MEM_ERROR         
22c22
< #define BZ_MEM_ERROR         -3
---
> #          
22c22
< #define BZ_MEM_ERROR         -3
---
> #define          -3
22c22
< #define BZ_MEM_ERROR         -3
---
> #define          3
22c22
< #define BZ_MEM_ERROR         -3
---
> #define          -
22c22
< #define BZ_MEM_ERROR         -3
---
> #define          
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define          -3
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define          3
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define          -
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define          
> define BZ_DATA_ERROR        -4
22c22
< #define BZ_MEM_ERROR         -3
---
> #define BZ_MEM_ERROR         3
22c22
< #define BZ_MEM_ERROR         -3
---
> #define BZ_MEM_ERROR         
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         3
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         3
> # BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> # BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         3
>  BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
>  BZ_DATA_ERROR        -4
22c22
< #define BZ_MEM_ERROR         -3
---
> #define BZ_MEM_ERROR         -
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         -
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         -
> # BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         -
>  BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         -
> #define         -4
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         -
> define         -4
(84.6 %, 31598 bytes)
22c22
< #define BZ_MEM_ERROR         3
---
> #define BZ_MEM_ERROR         
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> define BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> # BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
>  BZ_DATA_ERROR        -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> #define         -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> define         -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
> #         -4
22,23c22,23
< #define BZ_MEM_ERROR         3
< #define BZ_DATA_ERROR        -4
---
> #define BZ_MEM_ERROR         
>          -4
23c23
< #define BZ_DATA_ERROR        -4
---
> define BZ_DATA_ERROR        -4
23c23
< #define BZ_DATA_ERROR        -4
---
>  BZ_DATA_ERROR        -4
23c23
< #define BZ_DATA_ERROR        -4
---
> define         -4
23c23
< #define BZ_DATA_ERROR        -4
---
>          -4
23c23
< #define BZ_DATA_ERROR        -4
---
> define BZ_DATA_ERROR        4
23c23
< #define BZ_DATA_ERROR        -4
---
>  BZ_DATA_ERROR        4
23c23
< #define BZ_DATA_ERROR        -4
---
> define         4
23c23
< #define BZ_DATA_ERROR        -4
---
>          4
23c23
< #define BZ_DATA_ERROR        -4
---
> # BZ_DATA_ERROR        -4
23c23
< #define BZ_DATA_ERROR        -4
---
> #         -4
23c23
< #define BZ_DATA_ERROR        -4
---
> # BZ_DATA_ERROR        4
23c23
< #define BZ_DATA_ERROR        -4
---
> #         4
23c23
< #define BZ_DATA_ERROR        -4
---
> # BZ_DATA_ERROR        -
23c23
< #define BZ_DATA_ERROR        -4
---
> #         -
23c23
< #define BZ_DATA_ERROR        -4
---
> # BZ_DATA_ERROR        
23c23
< #define BZ_DATA_ERROR        -4
---
> #         
(84.6 %, 31578 bytes)
23,24c23,24
< #         4
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #         
>  BZ_DATA_ERROR_MAGIC  -5
23,24c23,24
< #         4
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #         
> #define   -5
23,24c23,24
< #         4
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #         
> define   -5
23,24c23,24
< #         4
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #         
> #   -5
23,24c23,24
< #         4
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #         
>    -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> define BZ_DATA_ERROR_MAGIC  -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
>  BZ_DATA_ERROR_MAGIC  -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> define   -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
>    -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> define BZ_DATA_ERROR_MAGIC  5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
>  BZ_DATA_ERROR_MAGIC  5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> define   5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
>    5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> # BZ_DATA_ERROR_MAGIC  -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #   -5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> # BZ_DATA_ERROR_MAGIC  5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #   5
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> # BZ_DATA_ERROR_MAGIC  -
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #   -
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> # BZ_DATA_ERROR_MAGIC  
24c24
< #define BZ_DATA_ERROR_MAGIC  -5
---
> #   
(84.6 %, 31552 bytes)
24,25c24,25
< #   5
< #define BZ_IO_ERROR          -6
---
> #   
>  BZ_IO_ERROR          -6
24,25c24,25
< #   5
< #define BZ_IO_ERROR          -6
---
> #   
> #define           -6
24,25c24,25
< #   5
< #define BZ_IO_ERROR          -6
---
> #   
> define           -6
24,25c24,25
< #   5
< #define BZ_IO_ERROR          -6
---
> #   
> #           -6
24,25c24,25
< #   5
< #define BZ_IO_ERROR          -6
---
> #   
>            -6
25c25
< #define BZ_IO_ERROR          -6
---
> define BZ_IO_ERROR          -6
25c25
< #define BZ_IO_ERROR          -6
---
>  BZ_IO_ERROR          -6
25c25
< #define BZ_IO_ERROR          -6
---
> define           -6
25c25
< #define BZ_IO_ERROR          -6
---
>            -6
25c25
< #define BZ_IO_ERROR          -6
---
> define BZ_IO_ERROR          6
25c25
< #define BZ_IO_ERROR          -6
---
>  BZ_IO_ERROR          6
25c25
< #define BZ_IO_ERROR          -6
---
> define           6
25c25
< #define BZ_IO_ERROR          -6
---
>            6
25c25
< #define BZ_IO_ERROR          -6
---
> # BZ_IO_ERROR          -6
25c25
< #define BZ_IO_ERROR          -6
---
> #           -6
25c25
< #define BZ_IO_ERROR          -6
---
> # BZ_IO_ERROR          6
25c25
< #define BZ_IO_ERROR          -6
---
> #           6
25c25
< #define BZ_IO_ERROR          -6
---
> # BZ_IO_ERROR          -
25c25
< #define BZ_IO_ERROR          -6
---
> #           -
25c25
< #define BZ_IO_ERROR          -6
---
> # BZ_IO_ERROR          
25c25
< #define BZ_IO_ERROR          -6
---
> #           
(84.6 %, 31534 bytes)
25,26c25,26
< #           6
< #define BZ_UNEXPECTED_EOF    -7
---
> #           
>  BZ_UNEXPECTED_EOF    -7
25,26c25,26
< #           6
< #define BZ_UNEXPECTED_EOF    -7
---
> #           
> #define     -7
25,26c25,26
< #           6
< #define BZ_UNEXPECTED_EOF    -7
---
> #           
> define     -7
25,26c25,26
< #           6
< #define BZ_UNEXPECTED_EOF    -7
---
> #           
> #     -7
25,26c25,26
< #           6
< #define BZ_UNEXPECTED_EOF    -7
---
> #           
>      -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> define BZ_UNEXPECTED_EOF    -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
>  BZ_UNEXPECTED_EOF    -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> define     -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
>      -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> define BZ_UNEXPECTED_EOF    7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
>  BZ_UNEXPECTED_EOF    7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> define     7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
>      7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> # BZ_UNEXPECTED_EOF    -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #     -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> # BZ_UNEXPECTED_EOF    7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #     7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> # BZ_UNEXPECTED_EOF    -
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #     -
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> # BZ_UNEXPECTED_EOF    
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #     
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define     -7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define     7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define     -
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define     
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define     -7
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define     7
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define     -
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define     
> define BZ_OUTBUFF_FULL      -8
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define BZ_UNEXPECTED_EOF    7
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define BZ_UNEXPECTED_EOF    
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    7
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    7
> # BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> # BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    7
>  BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
>  BZ_OUTBUFF_FULL      -8
(84.6 %, 31533 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    7
---
> #define BZ_UNEXPECTED_EOF    
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> define BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> # BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
>  BZ_OUTBUFF_FULL      -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> #define       -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> define       -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
> #       -8
26,27c26,27
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_UNEXPECTED_EOF    
>        -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> define BZ_OUTBUFF_FULL      -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
>  BZ_OUTBUFF_FULL      -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> define       -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
>        -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> define BZ_OUTBUFF_FULL      8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
>  BZ_OUTBUFF_FULL      8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> define       8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
>        8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> # BZ_OUTBUFF_FULL      -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #       -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> # BZ_OUTBUFF_FULL      8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #       8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> # BZ_OUTBUFF_FULL      -
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #       -
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> # BZ_OUTBUFF_FULL      
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #       
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define       -8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define       8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define       -
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define       
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define       -8
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define       8
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define       -
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define       
> define BZ_CONFIG_ERROR      -9
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_OUTBUFF_FULL      8
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_OUTBUFF_FULL      
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      8
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      8
> # BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> # BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      8
>  BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
>  BZ_CONFIG_ERROR      -9
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_OUTBUFF_FULL      -
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      -
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      -
> # BZ_CONFIG_ERROR      -9
(84.6 %, 31532 bytes)
27c27
< #define BZ_OUTBUFF_FULL      8
---
> #define BZ_OUTBUFF_FULL      
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> define BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> # BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
>  BZ_CONFIG_ERROR      -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> #define       -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> define       -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
> #       -9
27,28c27,28
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_OUTBUFF_FULL      
>        -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> define BZ_CONFIG_ERROR      -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
>  BZ_CONFIG_ERROR      -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> define       -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
>        -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> define BZ_CONFIG_ERROR      9
28c28
< #define BZ_CONFIG_ERROR      -9
---
>  BZ_CONFIG_ERROR      9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> define       9
28c28
< #define BZ_CONFIG_ERROR      -9
---
>        9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> # BZ_CONFIG_ERROR      -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #       -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> # BZ_CONFIG_ERROR      9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #       9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> # BZ_CONFIG_ERROR      -
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #       -
28c28
< #define BZ_CONFIG_ERROR      -9
---
> # BZ_CONFIG_ERROR      
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #       
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       -9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       -
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       -9
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       9
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       -
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define       
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
30c30
< typedef 
---
>  
(84.6 %, 31531 bytes)
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
31c31
<    struct {
---
>    struct 
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
30,31c30,31
< typedef 
<    struct {
---
>  
>    struct 
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
31c31
<    struct {
---
>     
28c28
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_CONFIG_ERROR      
30,31c30,31
< typedef 
<    struct {
---
>  
>     
30c30
< typedef 
---
>  
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
30,31c30,31
< typedef 
<    struct {
---
>  
>    struct 
30,31c30,31
< typedef 
<    struct {
---
>  
>     
30c30
< typedef 
---
>  
32c32
<       char *next_in;
---
>        *next_in;
30,32c30,32
< typedef 
<    struct {
<       char *next_in;
---
>  
>     {
>        *next_in;
30,32c30,32
< typedef 
<    struct {
<       char *next_in;
---
>  
>    struct 
>        *next_in;
30,32c30,32
< typedef 
<    struct {
<       char *next_in;
---
>  
>     
>        *next_in;
31c31
<    struct {
---
>     {
31c31
<    struct {
---
>     
31,32c31,32
<    struct {
<       char *next_in;
---
>     {
>        *next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>     
>        *next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>     {
>       char next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>     
>       char next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>     {
>        next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>     
>        next_in;
31c31
<    struct {
---
>    struct 
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>        *next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>       char next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>        next_in;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>       char *;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>        *;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>       char ;
31,32c31,32
<    struct {
<       char *next_in;
---
>    struct 
>        ;
32c32
<       char *next_in;
---
>        *next_in;
32c32
<       char *next_in;
---
>        next_in;
32c32
<       char *next_in;
---
>        *;
32c32
<       char *next_in;
---
>        ;
32c32
<       char *next_in;
---
>        *next_in
32c32
<       char *next_in;
---
>        next_in
32c32
<       char *next_in;
---
>        *
32c32
<       char *next_in;
---
>        
(84.6 %, 31519 bytes)
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>         avail_in;
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>       unsigned int ;
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>        int ;
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>       unsigned  ;
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>         ;
33c33
<       unsigned int avail_in;
---
>        int avail_in;
33c33
<       unsigned int avail_in;
---
>         avail_in;
33c33
<       unsigned int avail_in;
---
>        int ;
33c33
<       unsigned int avail_in;
---
>         ;
33c33
<       unsigned int avail_in;
---
>        int avail_in
33c33
<       unsigned int avail_in;
---
>         avail_in
33c33
<       unsigned int avail_in;
---
>        int 
33c33
<       unsigned int avail_in;
---
>         
33c33
<       unsigned int avail_in;
---
>       unsigned  avail_in;
(84.6 %, 31511 bytes)
33c33
<        int avail_in;
---
>         avail_in;
33c33
<        int avail_in;
---
>         ;
33c33
<        int avail_in;
---
>         avail_in
33c33
<        int avail_in;
---
>         
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         avail_in;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         ;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         avail_in
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         
>        int total_in_lo32;
33c33
<        int avail_in;
---
>        int ;
33c33
<        int avail_in;
---
>        int 
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>         total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>         total_in_lo32;
33c33
<        int avail_in;
---
>        int avail_in
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>         total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned int ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>        int ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned  ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>         ;
34c34
<       unsigned int total_in_lo32;
---
>        int total_in_lo32;
34c34
<       unsigned int total_in_lo32;
---
>         total_in_lo32;
34c34
<       unsigned int total_in_lo32;
---
>        int ;
34c34
<       unsigned int total_in_lo32;
---
>         ;
34c34
<       unsigned int total_in_lo32;
---
>        int total_in_lo32
34c34
<       unsigned int total_in_lo32;
---
>         total_in_lo32
34c34
<       unsigned int total_in_lo32;
---
>        int 
34c34
<       unsigned int total_in_lo32;
---
>         
34c34
<       unsigned int total_in_lo32;
---
>       unsigned  total_in_lo32;
(84.6 %, 31503 bytes)
34c34
<        int total_in_lo32;
---
>         total_in_lo32;
34c34
<        int total_in_lo32;
---
>         ;
34c34
<        int total_in_lo32;
---
>         total_in_lo32
34c34
<        int total_in_lo32;
---
>         
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         total_in_lo32;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         ;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         total_in_lo32
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         
>        int total_in_hi32;
34c34
<        int total_in_lo32;
---
>        int ;
34c34
<        int total_in_lo32;
---
>        int 
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>         total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>         total_in_hi32;
34c34
<        int total_in_lo32;
---
>        int total_in_lo32
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>         total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned int ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>        int ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned  ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>         ;
35c35
<       unsigned int total_in_hi32;
---
>        int total_in_hi32;
35c35
<       unsigned int total_in_hi32;
---
>         total_in_hi32;
35c35
<       unsigned int total_in_hi32;
---
>        int ;
35c35
<       unsigned int total_in_hi32;
---
>         ;
35c35
<       unsigned int total_in_hi32;
---
>        int total_in_hi32
35c35
<       unsigned int total_in_hi32;
---
>         total_in_hi32
35c35
<       unsigned int total_in_hi32;
---
>        int 
35c35
<       unsigned int total_in_hi32;
---
>         
35c35
<       unsigned int total_in_hi32;
---
>       unsigned  total_in_hi32;
(84.6 %, 31495 bytes)
35c35
<        int total_in_hi32;
---
>         total_in_hi32;
35c35
<        int total_in_hi32;
---
>         ;
35c35
<        int total_in_hi32;
---
>         total_in_hi32
35c35
<        int total_in_hi32;
---
>         
35c35
<        int total_in_hi32;
---
>         total_in_hi32;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         ;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         total_in_hi32
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int ;
35c35
<        int total_in_hi32;
---
>        int 
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char *;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        *;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char ;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        ;
37c37
<       char *next_out;
---
>        *next_out;
37c37
<       char *next_out;
---
>        next_out;
37c37
<       char *next_out;
---
>        *;
37c37
<       char *next_out;
---
>        ;
(84.6 %, 31481 bytes)
37,38c37,38
<        ;
<       unsigned int avail_out;
---
>        
>         ;
38c38
<       unsigned int avail_out;
---
>        int avail_out;
(84.6 %, 31460 bytes)
37a38
>         
39d39
<       unsigned int total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>        int total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>         total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>        int ;
39c39
<       unsigned int total_out_lo32;
---
>         ;
39c39
<       unsigned int total_out_lo32;
---
>        int total_out_lo32
39c39
<       unsigned int total_out_lo32;
---
>         total_out_lo32
39c39
<       unsigned int total_out_lo32;
---
>        int 
39c39
<       unsigned int total_out_lo32;
---
>         
39c39
<       unsigned int total_out_lo32;
---
>       unsigned  total_out_lo32;
(84.7 %, 31452 bytes)
39c39
<        int total_out_lo32;
---
>         total_out_lo32;
39c39
<        int total_out_lo32;
---
>         ;
39c39
<        int total_out_lo32;
---
>         total_out_lo32
39c39
<        int total_out_lo32;
---
>         
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         total_out_lo32;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         ;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         total_out_lo32
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         
>        int total_out_hi32;
39c39
<        int total_out_lo32;
---
>        int ;
39c39
<        int total_out_lo32;
---
>        int 
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>         total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>         total_out_hi32;
39c39
<        int total_out_lo32;
---
>        int total_out_lo32
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>         total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned int ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>        int ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned  ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>         ;
40c40
<       unsigned int total_out_hi32;
---
>        int total_out_hi32;
40c40
<       unsigned int total_out_hi32;
---
>         total_out_hi32;
40c40
<       unsigned int total_out_hi32;
---
>        int ;
40c40
<       unsigned int total_out_hi32;
---
>         ;
40c40
<       unsigned int total_out_hi32;
---
>        int total_out_hi32
40c40
<       unsigned int total_out_hi32;
---
>         total_out_hi32
40c40
<       unsigned int total_out_hi32;
---
>        int 
40c40
<       unsigned int total_out_hi32;
---
>         
40c40
<       unsigned int total_out_hi32;
---
>       unsigned  total_out_hi32;
(84.7 %, 31444 bytes)
40c40
<        int total_out_hi32;
---
>         total_out_hi32;
40c40
<        int total_out_hi32;
---
>         ;
40c40
<        int total_out_hi32;
---
>         total_out_hi32
40c40
<        int total_out_hi32;
---
>         
40c40
<        int total_out_hi32;
---
>         total_out_hi32;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         ;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         total_out_hi32
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int ;
40c40
<        int total_out_hi32;
---
>        int 
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void *;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        *;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void ;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        ;
42c42
<       void *state;
---
>        *state;
42c42
<       void *state;
---
>        state;
42c42
<       void *state;
---
>        *;
42c42
<       void *state;
---
>        ;
42c42
<       void *state;
---
>        *state
42c42
<       void *state;
---
>        state
42c42
<       void *state;
---
>        *
42c42
<       void *state;
---
>        
42c42
<       void *state;
---
>       void state;
42c42
<       void *state;
---
>       void ;
42c42
<       void *state;
---
>       void state
42c42
<       void *state;
---
>       void 
42c42
<       void *state;
---
>       void state;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void ;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void 
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
42c42
<       void *state;
---
>       void *
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        **bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        **bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void ()(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void )(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **(void *,int,int);
(84.7 %, 31443 bytes)
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void bzalloc)(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void *)(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void )(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void *bzalloc(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void bzalloc(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (bzalloc)(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void ()(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (bzalloc(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void ((void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (bzalloc)void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void ()void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (bzallocvoid *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*)(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*)void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*)( *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*( *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*) *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (* *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc(void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzallocvoid *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc( *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc(void ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzallocvoid ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc( ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)void *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc) *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)void ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc) ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)void *int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc) *int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)void int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc) int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( *,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( *int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( *,,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( ,,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( *,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)( ,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void ,int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void int,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void ,,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void ,int);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void ,intint);
44c44
<       void (*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void intint);
(84.7 %, 31437 bytes)
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( );
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( ,int;
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( int;
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( ,;
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( ;
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( intint);
44c44
<       void (*bzalloc)( int,int);
---
>       void (*bzalloc)( int);
(84.7 %, 31430 bytes)
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( 
>        (*bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( ;
>       void *bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( 
>       void *bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( ;
>        *bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( 
>        *bzfree)(void *,void *);
44c44
<       void (*bzalloc)( );
---
>       void (*bzalloc)( )
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>        (*bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>       void *bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>        *bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>       void (bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>        (bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>       void bzfree)(void *,void *);
44,45c44,45
<       void (*bzalloc)( );
<       void (*bzfree)(void *,void *);
---
>       void (*bzalloc)( )
>        bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (*bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        *bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (*)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        *)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        ()(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        )(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void )(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ()(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ((void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ()void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfreevoid *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*) *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (* *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfreevoid *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree(void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfreevoid ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree( ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *, *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( , *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( * *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(  *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void , *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void  *);
(84.7 %, 31424 bytes)
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)(  ;
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)(  *)
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)(  )
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)(  *
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)(  
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void );
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void ;
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void )
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void 
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void );
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void ;
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void )
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void 
>        *opaque;
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void *;
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void *
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *;
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *;
>       void opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *
>       void opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *;
>        opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *
>        opaque;
45c45
<       void (*bzfree)( void *);
---
>       void (*bzfree)( void *)
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *)
>        *opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *)
>       void opaque;
45,46c45,46
<       void (*bzfree)( void *);
<       void *opaque;
---
>       void (*bzfree)( void *)
>        opaque;
(84.7 %, 31423 bytes)
45c45
<       void (*bzfree)( void );
---
>       void (*bzfree)( void ;
45c45
<       void (*bzfree)( void );
---
>       void (*bzfree)( void 
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void ;
>        *opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void 
>        *opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void ;
>       void opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void 
>       void opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void ;
>        opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void 
>        opaque;
45c45
<       void (*bzfree)( void );
---
>       void (*bzfree)( void )
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>        *opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>       void opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>        opaque;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>       void *;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>        *;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>       void ;
45,46c45,46
<       void (*bzfree)( void );
<       void *opaque;
---
>       void (*bzfree)( void )
>        ;
46c46
<       void *opaque;
---
>        *opaque;
46c46
<       void *opaque;
---
>        opaque;
46c46
<       void *opaque;
---
>        *;
46c46
<       void *opaque;
---
>        ;
46c46
<       void *opaque;
---
>        *opaque
46c46
<       void *opaque;
---
>        opaque
46c46
<       void *opaque;
---
>        *
46c46
<       void *opaque;
---
>        
46c46
<       void *opaque;
---
>       void opaque;
46c46
<       void *opaque;
---
>       void ;
46c46
<       void *opaque;
---
>       void opaque
46c46
<       void *opaque;
---
>       void 
46,47c46,47
<       void *opaque;
<    } 
---
>       void opaque;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void ;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void opaque
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void 
>     
46c46
<       void *opaque;
---
>       void *;
46c46
<       void *opaque;
---
>       void *
46,47c46,47
<       void *opaque;
<    } 
---
>       void *;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void *
>     
46c46
<       void *opaque;
---
>       void *;
48c48
<    bz_stream;
---
>    ;
46c46
<       void *opaque;
---
>       void *
48c48
<    bz_stream;
---
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *;
>     
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *
>     
>    ;
46c46
<       void *opaque;
---
>       void *opaque
46,47c46,47
<       void *opaque;
<    } 
---
>       void *opaque
>     
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    ;
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    bz_stream
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    bz_stream
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    
47c47
<    } 
---
>     
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
47c47
<    } 
---
>     
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
48c48
<    bz_stream;
---
>    
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> # <stdio.h>
(84.7 %, 31422 bytes)
47c47
<    } 
---
>     
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
47c47
<    } 
---
>     
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
48c48
<    bz_stream;
---
>    
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> #include stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> include stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> # stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
>  stdio.h>
52c52
< #include <stdio.h>
---
> include <stdio.h>
52c52
< #include <stdio.h>
---
>  <stdio.h>
52c52
< #include <stdio.h>
---
> include stdio.h>
52c52
< #include <stdio.h>
---
>  stdio.h>
52c52
< #include <stdio.h>
---
> include <.h>
52c52
< #include <stdio.h>
---
>  <.h>
52c52
< #include <stdio.h>
---
> include .h>
52c52
< #include <stdio.h>
---
>  .h>
52c52
< #include <stdio.h>
---
> # <stdio.h>
52c52
< #include <stdio.h>
---
> # stdio.h>
52c52
< #include <stdio.h>
---
> # <.h>
52c52
< #include <stdio.h>
---
> # .h>
52c52
< #include <stdio.h>
---
> # <stdioh>
52c52
< #include <stdio.h>
---
> # stdioh>
52c52
< #include <stdio.h>
---
> # <h>
52c52
< #include <stdio.h>
---
> # h>
52c52
< #include <stdio.h>
---
> #include stdio.h>
52c52
< #include <stdio.h>
---
> #include .h>
52c52
< #include <stdio.h>
---
> #include stdioh>
52c52
< #include <stdio.h>
---
> #include h>
52c52
< #include <stdio.h>
---
> #include stdio.>
52c52
< #include <stdio.h>
---
> #include .>
52c52
< #include <stdio.h>
---
> #include stdio>
52c52
< #include <stdio.h>
---
> #include >
52c52
< #include <stdio.h>
---
> #include <.h>
52c52
< #include <stdio.h>
---
> #include <h>
52c52
< #include <stdio.h>
---
> #include <.>
52c52
< #include <stdio.h>
---
> #include <>
52c52
< #include <stdio.h>
---
> #include <.h
52c52
< #include <stdio.h>
---
> #include <h
52c52
< #include <stdio.h>
---
> #include <.
52c52
< #include <stdio.h>
---
> #include <
52c52
< #include <stdio.h>
---
> #include <stdioh>
52c52
< #include <stdio.h>
---
> #include <stdio>
52c52
< #include <stdio.h>
---
> #include <stdioh
52c52
< #include <stdio.h>
---
> #include <stdio
52c52
< #include <stdio.h>
---
> #include <stdioh>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdioh
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
52c52
< #include <stdio.h>
---
> #include <stdio.
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #   define (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>    define (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #    (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>     (func) func
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
>    define (func) func
54c54
< #   define BZ_API(func) func
---
>     (func) func
54c54
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
>    define func) func
54c54
< #   define BZ_API(func) func
---
>     func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
> #    (func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
> #    func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API() func
54c54
< #   define BZ_API(func) func
---
> #    () func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API) func
54c54
< #   define BZ_API(func) func
---
> #    ) func
54c54
< #   define BZ_API(func) func
---
> #   define (func) func
54c54
< #   define BZ_API(func) func
---
> #   define func) func
54c54
< #   define BZ_API(func) func
---
> #   define () func
54c54
< #   define BZ_API(func) func
---
> #   define ) func
54c54
< #   define BZ_API(func) func
---
> #   define (func func
54c54
< #   define BZ_API(func) func
---
> #   define func func
54c54
< #   define BZ_API(func) func
---
> #   define ( func
54c54
< #   define BZ_API(func) func
---
> #   define  func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API) func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API) 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API() func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API( func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API() 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API( 
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() 
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( 
>    define BZ_EXTERN extern
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API(func func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API(func 
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func 
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func func
> #    BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func 
> #    BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func func
>     BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func 
>     BZ_EXTERN extern
(84.7 %, 31412 bytes)
55c55
< #   define BZ_EXTERN extern
---
>      
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
55c55
< #   define BZ_EXTERN extern
---
> #     extern
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
55c55
< #   define BZ_EXTERN extern
---
> #     
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #     extern
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #     
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
55c55
< #   define BZ_EXTERN extern
---
> #   define  
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
55c55
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
(84.7 %, 31406 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit ( 
(84.7 %, 31397 bytes)
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit ( 
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>    ( 
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit  
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>     
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit ( 
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>  int  ( 
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>  int   
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int  ( 
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int   
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int  ( 
>       bz_stream strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int   
>       bz_stream strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int  ( 
>        strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int   
>        strm, 
60c60
<  int BZ_APIBZ2_bzCompressInit ( 
---
>  int BZ_APIBZ2_bzCompressInit  
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int BZ_APIBZ2_bzCompressInit  
>       * strm, 
60,61c60,61
<  int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>  int BZ_APIBZ2_bzCompressInit  
>       bz_stream strm, 
(84.7 %, 31394 bytes)
60c60
<   BZ_APIBZ2_bzCompressInit ( 
---
>    ( 
60c60
<   BZ_APIBZ2_bzCompressInit ( 
---
>     
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>       bz_stream strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>       bz_stream strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>        strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>        strm, 
60c60
<   BZ_APIBZ2_bzCompressInit ( 
---
>   BZ_APIBZ2_bzCompressInit  
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       * strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       bz_stream strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>        strm, 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       bz_stream* , 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       * , 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>       bz_stream , 
60,61c60,61
<   BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompressInit  
>        , 
61c61
<       bz_stream* strm, 
---
>       * strm, 
61c61
<       bz_stream* strm, 
---
>        strm, 
61c61
<       bz_stream* strm, 
---
>       * , 
61c61
<       bz_stream* strm, 
---
>        , 
61c61
<       bz_stream* strm, 
---
>       * strm 
61c61
<       bz_stream* strm, 
---
>        strm 
61c61
<       bz_stream* strm, 
---
>       *  
61c61
<       bz_stream* strm, 
---
>         
61c61
<       bz_stream* strm, 
---
>       bz_stream strm, 
61c61
<       bz_stream* strm, 
---
>       bz_stream , 
61c61
<       bz_stream* strm, 
---
>       bz_stream strm 
61c61
<       bz_stream* strm, 
---
>       bz_stream  
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream strm, 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream , 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream strm 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream  
>               blockSize100k, 
61c61
<       bz_stream* strm, 
---
>       bz_stream* , 
61c61
<       bz_stream* strm, 
---
>       bz_stream*  
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream* , 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream* , 
>       int        , 
(84.7 %, 31390 bytes)
61c61
<       bz_stream* , 
---
>       bz_stream*  
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k, 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int        , 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               , 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int        blockSize100k 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int         
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>                
62c62
<       int        blockSize100k, 
---
>               blockSize100k, 
62c62
<       int        blockSize100k, 
---
>               , 
62c62
<       int        blockSize100k, 
---
>               blockSize100k 
62c62
<       int        blockSize100k, 
---
>                
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               blockSize100k, 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               , 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               blockSize100k 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>                
>               verbosity, 
62c62
<       int        blockSize100k, 
---
>       int        , 
62c62
<       int        blockSize100k, 
---
>       int         
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int        , 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int         
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int        , 
>       int        , 
(84.7 %, 31377 bytes)
62c62
<       int        , 
---
>       int         
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               verbosity, 
61a62
>       int         
63d63
<       int        verbosity, 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               , 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>       int        verbosity 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               verbosity 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>       int         
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>                
63c63
<       int        verbosity, 
---
>               verbosity, 
63c63
<       int        verbosity, 
---
>               , 
63c63
<       int        verbosity, 
---
>               verbosity 
63c63
<       int        verbosity, 
---
>                
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               verbosity, 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               , 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               verbosity 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>                
>               workFactor 
63c63
<       int        verbosity, 
---
>       int        , 
63c63
<       int        verbosity, 
---
>       int         
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int        , 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int         
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int        , 
>       int         
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int         
>       int         
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int        , 
>                
(84.7 %, 31368 bytes)
63c63
<       int        , 
---
>       int         
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>               workFactor 
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>       int         
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>                
63c63
<       int        , 
---
>       int         
65c65
<    );
---
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>               workFactor 
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>       int         
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>                
>    ;
64c64
<       int        workFactor 
---
>               workFactor 
64c64
<       int        workFactor 
---
>                
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    
64c64
<       int        workFactor 
---
>       int         
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    
64c64
<       int        workFactor 
---
>       int         
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int BZ_APIBZ2_bzCompress ( 
(84.7 %, 31358 bytes)
65c65
<    );
---
>    ;
65c65
<    );
---
>    
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    )
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int  ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int  ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN   ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>    ( 
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>  int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress ( 
(84.7 %, 31349 bytes)
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress ( 
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>    ( 
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress  
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>     
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress ( 
>       * strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       * strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>  int  ( 
67c67
<  int BZ_APIBZ2_bzCompress ( 
---
>  int   
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int  ( 
>       * strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int   
>       * strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int  ( 
>       bz_stream strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int   
>       bz_stream strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int  ( 
>        strm, 
67,68c67,68
<  int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>  int   
>        strm, 
(84.7 %, 31346 bytes)
67c67
<   BZ_APIBZ2_bzCompress ( 
---
>    ( 
67c67
<   BZ_APIBZ2_bzCompress ( 
---
>     
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>       bz_stream strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>       bz_stream strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>        strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>        strm, 
67c67
<   BZ_APIBZ2_bzCompress ( 
---
>   BZ_APIBZ2_bzCompress  
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       * strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       bz_stream strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>        strm, 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       bz_stream* , 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       * , 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>       bz_stream , 
67,68c67,68
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ_APIBZ2_bzCompress  
>        , 
68c68
<       bz_stream* strm, 
---
>       * strm, 
68c68
<       bz_stream* strm, 
---
>        strm, 
68c68
<       bz_stream* strm, 
---
>       * , 
68c68
<       bz_stream* strm, 
---
>        , 
68c68
<       bz_stream* strm, 
---
>       * strm 
68c68
<       bz_stream* strm, 
---
>        strm 
68c68
<       bz_stream* strm, 
---
>       *  
68c68
<       bz_stream* strm, 
---
>         
68c68
<       bz_stream* strm, 
---
>       bz_stream strm, 
68c68
<       bz_stream* strm, 
---
>       bz_stream , 
68c68
<       bz_stream* strm, 
---
>       bz_stream strm 
68c68
<       bz_stream* strm, 
---
>       bz_stream  
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream strm, 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream , 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream strm 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream  
>        action 
68c68
<       bz_stream* strm, 
---
>       bz_stream* , 
68c68
<       bz_stream* strm, 
---
>       bz_stream*  
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* , 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream*  
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* , 
>       int  
(84.7 %, 31342 bytes)
68c68
<       bz_stream* , 
---
>       bz_stream*  
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>        action 
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>       int  
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>         
68c68
<       bz_stream* , 
---
>       bz_stream*  
70c70
<    );
---
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>        action 
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>       int  
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>         
>    ;
69c69
<       int action 
---
>        action 
69c69
<       int action 
---
>         
69,70c69,70
<       int action 
<    );
---
>        action 
>    ;
69,70c69,70
<       int action 
<    );
---
>         
>    ;
69,70c69,70
<       int action 
<    );
---
>        action 
>    )
69,70c69,70
<       int action 
<    );
---
>         
>    )
69,70c69,70
<       int action 
<    );
---
>        action 
>    
69,70c69,70
<       int action 
<    );
---
>         
>    
69c69
<       int action 
---
>       int  
69,70c69,70
<       int action 
<    );
---
>       int  
>    ;
69,70c69,70
<       int action 
<    );
---
>       int  
>    )
69,70c69,70
<       int action 
<    );
---
>       int  
>    
69c69
<       int action 
---
>       int  
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int BZ_APIBZ2_bzCompressEnd ( 
(84.7 %, 31336 bytes)
70c70
<    );
---
>    ;
70c70
<    );
---
>    
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    )
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int  ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int  ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN   ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>    ( 
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
>  int  ( 
(84.7 %, 31327 bytes)
72c72
<  int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd ( 
72c72
<  int BZ_APIBZ2_bzCompressEnd ( 
---
>    ( 
72c72
<  int BZ_APIBZ2_bzCompressEnd ( 
---
>   BZ_APIBZ2_bzCompressEnd  
72c72
<  int BZ_APIBZ2_bzCompressEnd ( 
---
>     
72,73c72,73
<  int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzCompressEnd ( 
>       * strm 
72,73c72,73
<  int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
(84.7 %, 31324 bytes)
72c72
<   BZ_APIBZ2_bzCompressEnd ( 
---
>    ( 
72c72
<   BZ_APIBZ2_bzCompressEnd ( 
---
>     
72,73c72,73
<   BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
72,73c72,73
<   BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>     
>       * strm 
72,73c72,73
<   BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>       bz_stream strm 
72,73c72,73
<   BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>     
>       bz_stream strm 
72,73c72,73
<   BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>        strm 
(84.7 %, 31292 bytes)
72,73c72,73
<    ( 
<       * strm 
---
>     
>       *  
72,73c72,73
<    ( 
<       * strm 
---
>     
>         
72c72
<    ( 
---
>     
74c74
<    );
---
>    ;
72,74c72,74
<    ( 
<       * strm 
<    );
---
>     
>        strm 
>    ;
(84.7 %, 31290 bytes)
73c73
<       * strm 
---
>        strm 
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
>  int BZ_APIBZ2_bzDecompressInit ( 
73c73
<       * strm 
---
>         
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
>  int BZ_APIBZ2_bzDecompressInit ( 
73,74c73,74
<       * strm 
<    ;
---
>        strm 
>    
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
>  int BZ_APIBZ2_bzDecompressInit ( 
(84.7 %, 31280 bytes)
73c73
<        strm 
---
>         
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>  int  ( 
73,74c73,74
<        strm 
<    ;
---
>         
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>  int  ( 
73c73
<        strm 
---
>         
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>    ( 
73,74c73,74
<        strm 
<    ;
---
>         
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>    ( 
74c74
<    ;
---
>    
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>   BZ_APIBZ2_bzDecompressInit ( 
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>  int  ( 
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>    ( 
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>  int BZ_APIBZ2_bzDecompressInit  
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>   BZ_APIBZ2_bzDecompressInit  
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>  int   
74c74
<    ;
---
>    
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>     
76c76
<  int BZ_APIBZ2_bzDecompressInit ( 
---
>   BZ_APIBZ2_bzDecompressInit ( 
(84.8 %, 31250 bytes)
76,77c76,77
<    ( 
<       bz_stream *strm, 
---
>     
>        strm, 
76,77c76,77
<    ( 
<       bz_stream *strm, 
---
>     
>       bz_stream *, 
76,77c76,77
<    ( 
<       bz_stream *strm, 
---
>     
>        *, 
76,77c76,77
<    ( 
<       bz_stream *strm, 
---
>     
>       bz_stream , 
76,77c76,77
<    ( 
<       bz_stream *strm, 
---
>     
>        , 
77c77
<       bz_stream *strm, 
---
>        *strm, 
77c77
<       bz_stream *strm, 
---
>        strm, 
77c77
<       bz_stream *strm, 
---
>        *, 
77c77
<       bz_stream *strm, 
---
>        , 
77c77
<       bz_stream *strm, 
---
>        *strm 
77c77
<       bz_stream *strm, 
---
>        strm 
77c77
<       bz_stream *strm, 
---
>        * 
77c77
<       bz_stream *strm, 
---
>         
77c77
<       bz_stream *strm, 
---
>       bz_stream strm, 
(84.8 %, 31235 bytes)
78,79c78,79
<       int       verbosity, 
<       int       small
---
>               
>              small
78c78
<       int       verbosity, 
---
>       int       , 
78c78
<       int       verbosity, 
---
>       int        
78,79c78,79
<       int       verbosity, 
<       int       small
---
>       int       , 
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>       int        
>              small
(84.8 %, 31226 bytes)
78c78
<       int       , 
---
>       int        
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>              small
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>       int       
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>              
(84.8 %, 31222 bytes)
79,80c79,80
<              small
<    );
---
>              
>    ;
79,80c79,80
<              small
<    );
---
>              
>    )
79,80c79,80
<              small
<    );
---
>              
>    
79c79
<              small
---
>              
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
79,80c79,80
<              small
<    );
---
>              
>    ;
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
79,80c79,80
<              small
<    );
---
>              
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
79,80c79,80
<              small
<    );
---
>              
>    
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    ;
80c80
<    );
---
>    
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    )
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int  ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
>  int  ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN   ( 
(84.8 %, 31208 bytes)
80c80
<    );
---
>    ;
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int  ( 
80c80
<    );
---
>    
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int  ( 
80c80
<    );
---
>    ;
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>    ( 
80c80
<    );
---
>    
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>    ( 
80c80
<    );
---
>    )
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress ( 
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int  ( 
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>    ( 
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress  
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress  
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int   
80c80
<    );
---
>    )
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>     
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress ( 
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>    ( 
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress  
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>     
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress ( 
>       * strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       * strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>       * strm 
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int  ( 
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int   
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int  ( 
>       * strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int   
>       * strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int  ( 
>       bz_stream strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int   
>       bz_stream strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int  ( 
>        strm 
82,83c82,83
<  int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>  int   
>        strm 
82c82
<  int BZ_APIBZ2_bzDecompress ( 
---
>  int BZ_APIBZ2_bzDecompress  
(84.8 %, 31205 bytes)
82c82
<   BZ_APIBZ2_bzDecompress ( 
---
>    ( 
82c82
<   BZ_APIBZ2_bzDecompress ( 
---
>     
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>       * strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>       bz_stream strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>       bz_stream strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>        strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>        strm 
82c82
<   BZ_APIBZ2_bzDecompress ( 
---
>   BZ_APIBZ2_bzDecompress  
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       * strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       bz_stream strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>        strm 
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       bz_stream*  
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       *  
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>       bz_stream  
82,83c82,83
<   BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
---
>   BZ_APIBZ2_bzDecompress  
>         
83c83
<       bz_stream* strm 
---
>       * strm 
83c83
<       bz_stream* strm 
---
>        strm 
83c83
<       bz_stream* strm 
---
>       *  
83c83
<       bz_stream* strm 
---
>         
83,84c83,84
<       bz_stream* strm 
<    );
---
>       * strm 
>    ;
83,84c83,84
<       bz_stream* strm 
<    );
---
>        strm 
>    ;
83,84c83,84
<       bz_stream* strm 
<    );
---
>       *  
>    ;
83,84c83,84
<       bz_stream* strm 
<    );
---
>         
>    ;
83c83
<       bz_stream* strm 
---
>       bz_stream strm 
83c83
<       bz_stream* strm 
---
>       bz_stream  
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream strm 
>    ;
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream  
>    ;
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream strm 
>    )
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream  
>    )
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream strm 
>    
83,84c83,84
<       bz_stream* strm 
<    );
---
>       bz_stream  
>    
83c83
<       bz_stream* strm 
---
>       bz_stream*  
(84.8 %, 31191 bytes)
84c84
<    );
---
>    
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    )
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int  ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int  ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN   ( 
84c84
<    );
---
>    )
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>    ( 
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
(84.8 %, 31182 bytes)
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>    ( 
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd  
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>     
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd ( 
>        *strm 
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>        *strm 
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>        *strm 
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>        *strm 
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int  ( 
86c86
<  int BZ_APIBZ2_bzDecompressEnd ( 
---
>  int   
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>  int  ( 
>        *strm 
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>  int   
>        *strm 
86,87c86,87
<  int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>  int  ( 
>       bz_stream strm 
(84.8 %, 31179 bytes)
86c86
<   BZ_APIBZ2_bzDecompressEnd ( 
---
>    ( 
86c86
<   BZ_APIBZ2_bzDecompressEnd ( 
---
>     
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>        *strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>        *strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>       bz_stream strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>       bz_stream strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>        strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>        strm 
86c86
<   BZ_APIBZ2_bzDecompressEnd ( 
---
>   BZ_APIBZ2_bzDecompressEnd  
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>        *strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>       bz_stream strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>        strm 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>       bz_stream * 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>        * 
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>       bz_stream  
86,87c86,87
<   BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>   BZ_APIBZ2_bzDecompressEnd  
>         
87c87
<       bz_stream *strm 
---
>        *strm 
87c87
<       bz_stream *strm 
---
>        strm 
87c87
<       bz_stream *strm 
---
>        * 
87c87
<       bz_stream *strm 
---
>         
87,88c87,88
<       bz_stream *strm 
<    );
---
>        *strm 
>    ;
87,88c87,88
<       bz_stream *strm 
<    );
---
>        strm 
>    ;
87,88c87,88
<       bz_stream *strm 
<    );
---
>        * 
>    ;
87,88c87,88
<       bz_stream *strm 
<    );
---
>         
>    ;
87c87
<       bz_stream *strm 
---
>       bz_stream strm 
87c87
<       bz_stream *strm 
---
>       bz_stream  
87,88c87,88
<       bz_stream *strm 
<    );
---
>       bz_stream strm 
>    ;
87,88c87,88
<       bz_stream *strm 
<    );
---
>       bz_stream  
>    ;
87,88c87,88
<       bz_stream *strm 
<    );
---
>       bz_stream strm 
>    )
87,88c87,88
<       bz_stream *strm 
<    );
---
>       bz_stream  
>    )
(84.8 %, 31165 bytes)
88c88
<    );
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
88c88
<    );
---
>    ;
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
88c88
<    );
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
88c88
<    );
---
>    ;
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
88c88
<    );
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
88c88
<    );
---
>    )
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
> define  0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
88c88
<    );
---
>    )
94c94
< #define BZ_MAX_UNUSED 0
---
>   0
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
> define  0
94c94
< #define BZ_MAX_UNUSED 0
---
>   0
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> define  
94c94
< #define BZ_MAX_UNUSED 0
---
>   
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> #  
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #  
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef void ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef  ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>   ;
96c96
< typedef void BZFILE;
---
>  void BZFILE;
96c96
< typedef void BZFILE;
---
>   BZFILE;
96c96
< typedef void BZFILE;
---
>  void ;
96c96
< typedef void BZFILE;
---
>   ;
96c96
< typedef void BZFILE;
---
>  void BZFILE
96c96
< typedef void BZFILE;
---
>   BZFILE
96c96
< typedef void BZFILE;
---
>  void 
96c96
< typedef void BZFILE;
---
>   
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
96c96
< typedef void BZFILE;
---
> typedef  ;
96c96
< typedef void BZFILE;
---
> typedef  BZFILE
96c96
< typedef void BZFILE;
---
> typedef  
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
(84.8 %, 31161 bytes)
96c96
< typedef  BZFILE;
---
> typedef  ;
96c96
< typedef  BZFILE;
---
> typedef  
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadOpen ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
(84.8 %, 31152 bytes)
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  *  ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>    ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen  
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen  
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  *   
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>     
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE BZ_APIBZ2_bzReadOpen ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE  ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE BZ_APIBZ2_bzReadOpen  
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE   
98,99c98,99
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  BZFILE BZ_APIBZ2_bzReadOpen ( 
>       *  bzerror,   
98,99c98,99
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  BZFILE  ( 
>       *  bzerror,   
98,99c98,99
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  BZFILE BZ_APIBZ2_bzReadOpen  
>       *  bzerror,   
98,99c98,99
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  BZFILE   
>       *  bzerror,   
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE*  ( 
98c98
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE*   
(84.8 %, 31146 bytes)
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>    ( 
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen  
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>     
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>   BZ_APIBZ2_bzReadOpen ( 
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>    ( 
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>   BZ_APIBZ2_bzReadOpen  
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>     
>       *  bzerror,   
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  *  ( 
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  *   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       int  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       int  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>         bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>         bzerror,   
98c98
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen  
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       *  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int  bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>         bzerror,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int*  ,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       *  ,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int  ,   
98,99c98,99
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>         ,   
99c99
<       int*  bzerror,   
---
>       *  bzerror,   
99c99
<       int*  bzerror,   
---
>         bzerror,   
99c99
<       int*  bzerror,   
---
>       *  ,   
99c99
<       int*  bzerror,   
---
>         ,   
99c99
<       int*  bzerror,   
---
>       *  bzerror   
99c99
<       int*  bzerror,   
---
>         bzerror   
99c99
<       int*  bzerror,   
---
>       *     
99c99
<       int*  bzerror,   
---
>            
99c99
<       int*  bzerror,   
---
>       int  bzerror,   
99c99
<       int*  bzerror,   
---
>       int  ,   
99c99
<       int*  bzerror,   
---
>       int  bzerror   
99c99
<       int*  bzerror,   
---
>       int     
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  ,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int     
>       * f, 
99c99
<       int*  bzerror,   
---
>       int*  ,   
99c99
<       int*  bzerror,   
---
>       int*     
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>        f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>        f, 
99c99
<       int*  bzerror,   
---
>       int*  bzerror   
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>        f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE* , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       * , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>        , 
(84.8 %, 31139 bytes)
99c99
<       int*  ,   
---
>       int*     
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE* , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        , 
100c100
<       FILE* f, 
---
>       * f, 
100c100
<       FILE* f, 
---
>        f, 
100c100
<       FILE* f, 
---
>       * , 
100c100
<       FILE* f, 
---
>        , 
100c100
<       FILE* f, 
---
>       * f 
100c100
<       FILE* f, 
---
>        f 
100c100
<       FILE* f, 
---
>       *  
100c100
<       FILE* f, 
---
>         
100c100
<       FILE* f, 
---
>       FILE f, 
100c100
<       FILE* f, 
---
>       FILE , 
100c100
<       FILE* f, 
---
>       FILE f 
100c100
<       FILE* f, 
---
>       FILE  
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f, 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE , 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE  
>          verbosity, 
100c100
<       FILE* f, 
---
>       FILE* , 
100c100
<       FILE* f, 
---
>       FILE*  
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>       int   , 
(84.8 %, 31138 bytes)
100c100
<       FILE* , 
---
>       FILE*  
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   , 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          , 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   verbosity 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int    
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>           
101c101
<       int   verbosity, 
---
>          verbosity, 
101c101
<       int   verbosity, 
---
>          , 
101c101
<       int   verbosity, 
---
>          verbosity 
101c101
<       int   verbosity, 
---
>           
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          verbosity, 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          , 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          verbosity 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>           
>          small,
101c101
<       int   verbosity, 
---
>       int   , 
101c101
<       int   verbosity, 
---
>       int    
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int   , 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int    
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int   , 
>       int   ,
(84.8 %, 31129 bytes)
101c101
<       int   , 
---
>       int    
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          small,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   ,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          ,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   small
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          small
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          
102c102
<       int   small,
---
>          small,
102c102
<       int   small,
---
>          ,
102c102
<       int   small,
---
>          small
102c102
<       int   small,
---
>          
102,103c102,103
<       int   small,
<       void* unused,    
---
>          small,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          ,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          small
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          
>       * unused,    
102c102
<       int   small,
---
>       int   ,
102c102
<       int   small,
---
>       int   
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>        unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>        unused,    
102c102
<       int   small,
---
>       int   small
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>        unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void* ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       * ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>        ,    
(84.8 %, 31124 bytes)
102c102
<       int   ,
---
>       int   
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       * unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>        unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void* ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       * ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>        ,    
103c103
<       void* unused,    
---
>       * unused,    
103c103
<       void* unused,    
---
>        unused,    
103c103
<       void* unused,    
---
>       * ,    
103c103
<       void* unused,    
---
>        ,    
103c103
<       void* unused,    
---
>       * unused    
103c103
<       void* unused,    
---
>        unused    
103c103
<       void* unused,    
---
>       *     
103c103
<       void* unused,    
---
>            
103c103
<       void* unused,    
---
>       void unused,    
103c103
<       void* unused,    
---
>       void ,    
103c103
<       void* unused,    
---
>       void unused    
103c103
<       void* unused,    
---
>       void     
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void unused,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void ,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void unused    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void     
>          nUnused 
103c103
<       void* unused,    
---
>       void* ,    
103c103
<       void* unused,    
---
>       void*     
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void*     
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>       int    
(84.8 %, 31118 bytes)
103c103
<       void* ,    
---
>       void*     
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>          nUnused 
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>       int    
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>           
103c103
<       void* ,    
---
>       void*     
105c105
<    );
---
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>          nUnused 
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>       int    
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>           
>    ;
104c104
<       int   nUnused 
---
>          nUnused 
104c104
<       int   nUnused 
---
>           
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    
104c104
<       int   nUnused 
---
>       int    
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    
104c104
<       int   nUnused 
---
>       int    
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose ( 
(84.8 %, 31111 bytes)
105c105
<    );
---
>    ;
105c105
<    );
---
>    
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    )
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void  ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void  ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN   ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>    ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void  ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>    ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose  
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose  
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>  void   
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>     
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN   ( 
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose  
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN    
107,108c107,108
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose ( 
>       *    bzerror, 
107,108c107,108
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
> BZ_EXTERN   ( 
>       *    bzerror, 
107,108c107,108
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose  
>       *    bzerror, 
107,108c107,108
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
> BZ_EXTERN    
>       *    bzerror, 
(84.8 %, 31102 bytes)
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose ( 
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>    ( 
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>   BZ_APIBZ2_bzReadClose  
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>     
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadClose ( 
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadClose  
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>  void  ( 
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>  void   
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
107c107
<  void BZ_APIBZ2_bzReadClose ( 
---
>  void BZ_APIBZ2_bzReadClose  
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>       *    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>       int    bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>           bzerror, 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>       int*    , 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>       *    , 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>       int    , 
107,108c107,108
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadClose  
>           , 
108c108
<       int*    bzerror, 
---
>       *    bzerror, 
108c108
<       int*    bzerror, 
---
>           bzerror, 
108c108
<       int*    bzerror, 
---
>       *    , 
108c108
<       int*    bzerror, 
---
>           , 
108c108
<       int*    bzerror, 
---
>       *    bzerror 
108c108
<       int*    bzerror, 
---
>           bzerror 
108c108
<       int*    bzerror, 
---
>       *     
108c108
<       int*    bzerror, 
---
>            
108c108
<       int*    bzerror, 
---
>       int    bzerror, 
108c108
<       int*    bzerror, 
---
>       int    , 
108c108
<       int*    bzerror, 
---
>       int    bzerror 
108c108
<       int*    bzerror, 
---
>       int     
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    bzerror, 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    , 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    bzerror 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int     
>       * b 
108c108
<       int*    bzerror, 
---
>       int*    , 
108c108
<       int*    bzerror, 
---
>       int*     
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>        b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>        b 
108c108
<       int*    bzerror, 
---
>       int*    bzerror 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>        b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE*  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       *  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>         
109c109
<       BZFILE* b 
---
>       * b 
109c109
<       BZFILE* b 
---
>        b 
(84.8 %, 31095 bytes)
108c108
<       int*    , 
---
>       int*     
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       * b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>        b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE*  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       *  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>         
109c109
<       BZFILE* b 
---
>       * b 
109c109
<       BZFILE* b 
---
>        b 
109c109
<       BZFILE* b 
---
>       *  
109c109
<       BZFILE* b 
---
>         
109,110c109,110
<       BZFILE* b 
<    );
---
>       * b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>        b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       *  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>         
>    ;
109c109
<       BZFILE* b 
---
>       BZFILE b 
109c109
<       BZFILE* b 
---
>       BZFILE  
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    
109c109
<       BZFILE* b 
---
>       BZFILE*  
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    
109c109
<       BZFILE* b 
---
>       BZFILE*  
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    ;
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    ;
(84.8 %, 31094 bytes)
110c110
<    );
---
>    ;
110c110
<    );
---
>    
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    )
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void  ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void  ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN   ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void  ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused  
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused  
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void   
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>     
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN   ( 
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused  
(84.8 %, 31085 bytes)
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused  
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>     
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadGetUnused  
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void  ( 
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void   
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
112c112
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused  
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       *    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int    bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>           bzerror, 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int*    , 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       *    , 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int    , 
112,113c112,113
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>           , 
113c113
<       int*    bzerror, 
---
>       *    bzerror, 
113c113
<       int*    bzerror, 
---
>           bzerror, 
113c113
<       int*    bzerror, 
---
>       *    , 
113c113
<       int*    bzerror, 
---
>           , 
113c113
<       int*    bzerror, 
---
>       *    bzerror 
113c113
<       int*    bzerror, 
---
>           bzerror 
113c113
<       int*    bzerror, 
---
>       *     
113c113
<       int*    bzerror, 
---
>            
113c113
<       int*    bzerror, 
---
>       int    bzerror, 
113c113
<       int*    bzerror, 
---
>       int    , 
113c113
<       int*    bzerror, 
---
>       int    bzerror 
113c113
<       int*    bzerror, 
---
>       int     
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
113c113
<       int*    bzerror, 
---
>       int*    , 
113c113
<       int*    bzerror, 
---
>       int*     
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
113c113
<       int*    bzerror, 
---
>       int*    bzerror 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * , 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE , 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        , 
(84.8 %, 31078 bytes)
113c113
<       int*    , 
---
>       int*     
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
114c114
<       BZFILE* b, 
---
>       * b, 
114c114
<       BZFILE* b, 
---
>        b, 
114c114
<       BZFILE* b, 
---
>       * , 
114c114
<       BZFILE* b, 
---
>        , 
114c114
<       BZFILE* b, 
---
>       * b 
114c114
<       BZFILE* b, 
---
>        b 
114c114
<       BZFILE* b, 
---
>       *  
114c114
<       BZFILE* b, 
---
>         
114c114
<       BZFILE* b, 
---
>       BZFILE b, 
114c114
<       BZFILE* b, 
---
>       BZFILE , 
114c114
<       BZFILE* b, 
---
>       BZFILE b 
114c114
<       BZFILE* b, 
---
>       BZFILE  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b, 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE , 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE  
>       **  unused,  
114c114
<       BZFILE* b, 
---
>       BZFILE* , 
114c114
<       BZFILE* b, 
---
>       BZFILE*  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114c114
<       BZFILE* b, 
---
>       BZFILE* b 
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void  unused,  
(84.8 %, 31077 bytes)
114c114
<       BZFILE* , 
---
>       BZFILE*  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>         unused,  
115c115
<       void**  unused,  
---
>       **  unused,  
115c115
<       void**  unused,  
---
>       *  unused,  
115c115
<       void**  unused,  
---
>       *  unused,  
115c115
<       void**  unused,  
---
>         unused,  
115c115
<       void**  unused,  
---
>       **  ,  
115c115
<       void**  unused,  
---
>       *  ,  
115c115
<       void**  unused,  
---
>       *  ,  
115c115
<       void**  unused,  
---
>         ,  
115c115
<       void**  unused,  
---
>       void*  unused,  
115c115
<       void**  unused,  
---
>       void  unused,  
115c115
<       void**  unused,  
---
>       void*  ,  
115c115
<       void**  unused,  
---
>       void  ,  
115c115
<       void**  unused,  
---
>       void*  unused  
115c115
<       void**  unused,  
---
>       void  unused  
115c115
<       void**  unused,  
---
>       void*    
115c115
<       void**  unused,  
---
>       void    
115c115
<       void**  unused,  
---
>       void*  unused,  
115c115
<       void**  unused,  
---
>       void*  ,  
115c115
<       void**  unused,  
---
>       void*  unused  
115c115
<       void**  unused,  
---
>       void*    
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  ,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*    
>       *    nUnused 
115c115
<       void**  unused,  
---
>       void**  ,  
115c115
<       void**  unused,  
---
>       void**    
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>           nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
115c115
<       void**  unused,  
---
>       void**  unused  
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>           nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int*     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       *     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>            
116c116
<       int*    nUnused 
---
>       *    nUnused 
(84.8 %, 31071 bytes)
115c115
<       void**  ,  
---
>       void**    
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int*     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>            
116c116
<       int*    nUnused 
---
>       *    nUnused 
116c116
<       int*    nUnused 
---
>           nUnused 
116c116
<       int*    nUnused 
---
>       *     
116c116
<       int*    nUnused 
---
>            
116,117c116,117
<       int*    nUnused 
<    );
---
>       *    nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>           nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       *     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>            
>    ;
116c116
<       int*    nUnused 
---
>       int    nUnused 
116c116
<       int*    nUnused 
---
>       int     
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    
116c116
<       int*    nUnused 
---
>       int*     
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    
116c116
<       int*    nUnused 
---
>       int*     
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
(84.8 %, 31064 bytes)
117c117
<    );
---
>    ;
117c117
<    );
---
>    
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    )
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int  ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int  ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN   ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>    ( 
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
(84.8 %, 31055 bytes)
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>    ( 
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead  
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>     
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead ( 
>       *    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>  int  ( 
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>  int   
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int  ( 
>       *    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int   
>       *    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int  ( 
>       int    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int   
>       int    bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int  ( 
>           bzerror, 
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int   
>           bzerror, 
119c119
<  int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead  
119,120c119,120
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>  int BZ_APIBZ2_bzRead  
>       *    bzerror, 
(84.8 %, 31052 bytes)
119c119
<   BZ_APIBZ2_bzRead ( 
---
>    ( 
119c119
<   BZ_APIBZ2_bzRead ( 
---
>     
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       int    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       int    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>           bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>           bzerror, 
119c119
<   BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead  
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int    bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>           bzerror, 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int*    , 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    , 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int    , 
119,120c119,120
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>           , 
120c120
<       int*    bzerror, 
---
>       *    bzerror, 
120c120
<       int*    bzerror, 
---
>           bzerror, 
120c120
<       int*    bzerror, 
---
>       *    , 
120c120
<       int*    bzerror, 
---
>           , 
120c120
<       int*    bzerror, 
---
>       *    bzerror 
120c120
<       int*    bzerror, 
---
>           bzerror 
120c120
<       int*    bzerror, 
---
>       *     
120c120
<       int*    bzerror, 
---
>            
120c120
<       int*    bzerror, 
---
>       int    bzerror, 
120c120
<       int*    bzerror, 
---
>       int    , 
120c120
<       int*    bzerror, 
---
>       int    bzerror 
120c120
<       int*    bzerror, 
---
>       int     
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
120c120
<       int*    bzerror, 
---
>       int*    , 
120c120
<       int*    bzerror, 
---
>       int*     
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
120c120
<       int*    bzerror, 
---
>       int*    bzerror 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * , 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE , 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        , 
121c121
<       BZFILE* b, 
---
>       * b, 
(84.9 %, 31045 bytes)
120c120
<       int*    , 
---
>       int*     
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
121c121
<       BZFILE* b, 
---
>       * b, 
121c121
<       BZFILE* b, 
---
>        b, 
121c121
<       BZFILE* b, 
---
>       * , 
121c121
<       BZFILE* b, 
---
>        , 
121c121
<       BZFILE* b, 
---
>       * b 
121c121
<       BZFILE* b, 
---
>        b 
121c121
<       BZFILE* b, 
---
>       *  
121c121
<       BZFILE* b, 
---
>         
121c121
<       BZFILE* b, 
---
>       BZFILE b, 
121c121
<       BZFILE* b, 
---
>       BZFILE , 
121c121
<       BZFILE* b, 
---
>       BZFILE b 
121c121
<       BZFILE* b, 
---
>       BZFILE  
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
121c121
<       BZFILE* b, 
---
>       BZFILE* , 
121c121
<       BZFILE* b, 
---
>       BZFILE*  
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
121c121
<       BZFILE* b, 
---
>       BZFILE* b 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void*   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          , 
122c122
<       void*   buf, 
---
>       *   buf, 
122c122
<       void*   buf, 
---
>          buf, 
(84.9 %, 31044 bytes)
121c121
<       BZFILE* , 
---
>       BZFILE*  
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
122c122
<       void*   buf, 
---
>       *   buf, 
122c122
<       void*   buf, 
---
>          buf, 
122c122
<       void*   buf, 
---
>       *   , 
122c122
<       void*   buf, 
---
>          , 
122c122
<       void*   buf, 
---
>       *   buf 
122c122
<       void*   buf, 
---
>          buf 
122c122
<       void*   buf, 
---
>       *    
122c122
<       void*   buf, 
---
>           
122c122
<       void*   buf, 
---
>       void   buf, 
122c122
<       void*   buf, 
---
>       void   , 
122c122
<       void*   buf, 
---
>       void   buf 
122c122
<       void*   buf, 
---
>       void    
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
122c122
<       void*   buf, 
---
>       void*   , 
122c122
<       void*   buf, 
---
>       void*    
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*    
>       int      
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*   , 
>             
(84.9 %, 31041 bytes)
122c122
<       void*   , 
---
>       void*    
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>            len 
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>       int      
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>             
122c122
<       void*   , 
---
>       void*    
124c124
<    );
---
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
123c123
<       int     len 
---
>            len 
123c123
<       int     len 
---
>             
123,124c123,124
<       int     len 
<    );
---
>            len 
>    ;
123,124c123,124
<       int     len 
<    );
---
>             
>    ;
123,124c123,124
<       int     len 
<    );
---
>            len 
>    )
123,124c123,124
<       int     len 
<    );
---
>             
>    )
123,124c123,124
<       int     len 
<    );
---
>            len 
>    
123,124c123,124
<       int     len 
<    );
---
>             
>    
123c123
<       int     len 
---
>       int      
123,124c123,124
<       int     len 
<    );
---
>       int      
>    ;
123,124c123,124
<       int     len 
<    );
---
>       int      
>    )
123,124c123,124
<       int     len 
<    );
---
>       int      
>    
123c123
<       int     len 
---
>       int      
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(84.9 %, 31038 bytes)
124c124
<    );
---
>    ;
124c124
<    );
---
>    
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
(84.9 %, 31029 bytes)
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  *  ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>    ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen  
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen  
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  *   
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>     
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE BZ_APIBZ2_bzWriteOpen ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE  ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE BZ_APIBZ2_bzWriteOpen  
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE   
126,127c126,127
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  BZFILE BZ_APIBZ2_bzWriteOpen ( 
>       *  bzerror,      
126,127c126,127
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  BZFILE  ( 
>       *  bzerror,      
126,127c126,127
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  BZFILE BZ_APIBZ2_bzWriteOpen  
>       *  bzerror,      
126,127c126,127
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  BZFILE   
>       *  bzerror,      
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE*  ( 
126c126
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE*   
(84.9 %, 31023 bytes)
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>    ( 
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen  
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>     
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>   BZ_APIBZ2_bzWriteOpen ( 
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    ( 
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>   BZ_APIBZ2_bzWriteOpen  
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>     
>       *  bzerror,      
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  *  ( 
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  *   
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       int  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       int  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>         bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>         bzerror,      
126c126
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen  
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       *  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int  bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>         bzerror,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int*  ,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       *  ,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int  ,      
126,127c126,127
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>         ,      
127c127
<       int*  bzerror,      
---
>       *  bzerror,      
127c127
<       int*  bzerror,      
---
>         bzerror,      
127c127
<       int*  bzerror,      
---
>       *  ,      
127c127
<       int*  bzerror,      
---
>         ,      
127c127
<       int*  bzerror,      
---
>       *  bzerror      
127c127
<       int*  bzerror,      
---
>         bzerror      
127c127
<       int*  bzerror,      
---
>       *        
127c127
<       int*  bzerror,      
---
>               
127c127
<       int*  bzerror,      
---
>       int  bzerror,      
127c127
<       int*  bzerror,      
---
>       int  ,      
127c127
<       int*  bzerror,      
---
>       int  bzerror      
127c127
<       int*  bzerror,      
---
>       int        
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
127c127
<       int*  bzerror,      
---
>       int*  ,      
127c127
<       int*  bzerror,      
---
>       int*        
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>        f, 
127c127
<       int*  bzerror,      
---
>       int*  bzerror      
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>        f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE* , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       * , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>        , 
128c128
<       FILE* f, 
---
>       * f, 
(84.9 %, 31016 bytes)
127c127
<       int*  ,      
---
>       int*        
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
128c128
<       FILE* f, 
---
>       * f, 
128c128
<       FILE* f, 
---
>        f, 
128c128
<       FILE* f, 
---
>       * , 
128c128
<       FILE* f, 
---
>        , 
128c128
<       FILE* f, 
---
>       * f 
128c128
<       FILE* f, 
---
>        f 
128c128
<       FILE* f, 
---
>       *  
128c128
<       FILE* f, 
---
>         
128c128
<       FILE* f, 
---
>       FILE f, 
128c128
<       FILE* f, 
---
>       FILE , 
128c128
<       FILE* f, 
---
>       FILE f 
128c128
<       FILE* f, 
---
>       FILE  
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
128c128
<       FILE* f, 
---
>       FILE* , 
128c128
<       FILE* f, 
---
>       FILE*  
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(84.9 %, 31015 bytes)
128c128
<       FILE* , 
---
>       FILE*  
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
129c129
<       int   blockSize100k, 
---
>          blockSize100k, 
129c129
<       int   blockSize100k, 
---
>          , 
129c129
<       int   blockSize100k, 
---
>          blockSize100k 
129c129
<       int   blockSize100k, 
---
>           
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
129c129
<       int   blockSize100k, 
---
>       int   , 
129c129
<       int   blockSize100k, 
---
>       int    
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>       int   , 
(84.9 %, 31002 bytes)
129c129
<       int   , 
---
>       int    
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
128a129
>       int    
130d130
<       int   verbosity, 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>           
130c130
<       int   verbosity, 
---
>          verbosity, 
130c130
<       int   verbosity, 
---
>          , 
130c130
<       int   verbosity, 
---
>          verbosity 
130c130
<       int   verbosity, 
---
>           
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity, 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          , 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>           
>          workFactor 
130c130
<       int   verbosity, 
---
>       int   , 
130c130
<       int   verbosity, 
---
>       int    
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int    
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>       int    
(84.9 %, 30993 bytes)
130c130
<       int   , 
---
>       int    
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>          workFactor 
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>       int    
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>           
130c130
<       int   , 
---
>       int    
132c132
<    );
---
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>          workFactor 
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>       int    
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>           
>    ;
131c131
<       int   workFactor 
---
>          workFactor 
131c131
<       int   workFactor 
---
>           
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    
131c131
<       int   workFactor 
---
>       int    
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    
131c131
<       int   workFactor 
---
>       int    
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
(84.9 %, 30983 bytes)
132c132
<    );
---
>    ;
132c132
<    );
---
>    
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    )
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void  ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN   ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>    ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>    ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite  
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite  
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void   
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>     
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN   ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite  
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN    
134,135c134,135
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
>       *    bzerror, 
134,135c134,135
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
> BZ_EXTERN   ( 
>       *    bzerror, 
134,135c134,135
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite  
>       *    bzerror, 
134,135c134,135
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
> BZ_EXTERN    
>       *    bzerror, 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void  ( 
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void   
(84.9 %, 30974 bytes)
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>    ( 
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite  
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>     
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzWrite ( 
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzWrite  
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>  void   
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
134c134
<  void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite  
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       *    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int    bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>           bzerror, 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int*    , 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       *    , 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int    , 
134,135c134,135
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>           , 
135c135
<       int*    bzerror, 
---
>       *    bzerror, 
135c135
<       int*    bzerror, 
---
>           bzerror, 
135c135
<       int*    bzerror, 
---
>       *    , 
135c135
<       int*    bzerror, 
---
>           , 
135c135
<       int*    bzerror, 
---
>       *    bzerror 
135c135
<       int*    bzerror, 
---
>           bzerror 
135c135
<       int*    bzerror, 
---
>       *     
135c135
<       int*    bzerror, 
---
>            
135c135
<       int*    bzerror, 
---
>       int    bzerror, 
135c135
<       int*    bzerror, 
---
>       int    , 
135c135
<       int*    bzerror, 
---
>       int    bzerror 
135c135
<       int*    bzerror, 
---
>       int     
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
135c135
<       int*    bzerror, 
---
>       int*    , 
135c135
<       int*    bzerror, 
---
>       int*     
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
135c135
<       int*    bzerror, 
---
>       int*    bzerror 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        , 
136c136
<       BZFILE* b, 
---
>       * b, 
136c136
<       BZFILE* b, 
---
>        b, 
(84.9 %, 30967 bytes)
135c135
<       int*    , 
---
>       int*     
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
136c136
<       BZFILE* b, 
---
>       * b, 
136c136
<       BZFILE* b, 
---
>        b, 
136c136
<       BZFILE* b, 
---
>       * , 
136c136
<       BZFILE* b, 
---
>        , 
136c136
<       BZFILE* b, 
---
>       * b 
136c136
<       BZFILE* b, 
---
>        b 
136c136
<       BZFILE* b, 
---
>       *  
136c136
<       BZFILE* b, 
---
>         
136c136
<       BZFILE* b, 
---
>       BZFILE b, 
136c136
<       BZFILE* b, 
---
>       BZFILE , 
136c136
<       BZFILE* b, 
---
>       BZFILE b 
136c136
<       BZFILE* b, 
---
>       BZFILE  
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
136c136
<       BZFILE* b, 
---
>       BZFILE* , 
136c136
<       BZFILE* b, 
---
>       BZFILE*  
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
136c136
<       BZFILE* b, 
---
>       BZFILE* b 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void*   , 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   , 
(84.9 %, 30966 bytes)
136c136
<       BZFILE* , 
---
>       BZFILE*  
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
137c137
<       void*   buf, 
---
>       *   buf, 
137c137
<       void*   buf, 
---
>          buf, 
137c137
<       void*   buf, 
---
>       *   , 
137c137
<       void*   buf, 
---
>          , 
137c137
<       void*   buf, 
---
>       *   buf 
137c137
<       void*   buf, 
---
>          buf 
137c137
<       void*   buf, 
---
>       *    
137c137
<       void*   buf, 
---
>           
137c137
<       void*   buf, 
---
>       void   buf, 
137c137
<       void*   buf, 
---
>       void   , 
137c137
<       void*   buf, 
---
>       void   buf 
137c137
<       void*   buf, 
---
>       void    
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
137c137
<       void*   buf, 
---
>       void*   , 
137c137
<       void*   buf, 
---
>       void*    
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(84.9 %, 30963 bytes)
137c137
<       void*   , 
---
>       void*    
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>            len 
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>       int      
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>             
137c137
<       void*   , 
---
>       void*    
139c139
<    );
---
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
138c138
<       int     len 
---
>            len 
138c138
<       int     len 
---
>             
138,139c138,139
<       int     len 
<    );
---
>            len 
>    ;
138,139c138,139
<       int     len 
<    );
---
>             
>    ;
138,139c138,139
<       int     len 
<    );
---
>            len 
>    )
138,139c138,139
<       int     len 
<    );
---
>             
>    )
138,139c138,139
<       int     len 
<    );
---
>            len 
>    
138,139c138,139
<       int     len 
<    );
---
>             
>    
138c138
<       int     len 
---
>       int      
138,139c138,139
<       int     len 
<    );
---
>       int      
>    ;
138,139c138,139
<       int     len 
<    );
---
>       int      
>    )
138,139c138,139
<       int     len 
<    );
---
>       int      
>    
138c138
<       int     len 
---
>       int      
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
138,139c138,139
<       int     len 
<    );
---
>       int      
>    ;
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
138,139c138,139
<       int     len 
<    );
---
>       int      
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
138,139c138,139
<       int     len 
<    );
---
>       int      
>    
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
(84.9 %, 30960 bytes)
139c139
<    );
---
>    ;
139c139
<    );
---
>    
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    )
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void  ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN   ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose  
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose  
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void   
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>     
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN   ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose  
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN    
141,142c141,142
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
>       *          bzerror, 
141,142c141,142
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN   ( 
>       *          bzerror, 
141,142c141,142
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose  
>       *          bzerror, 
141,142c141,142
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN    
>       *          bzerror, 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void  ( 
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void   
(84.9 %, 30951 bytes)
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose  
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>     
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose ( 
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    ( 
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose  
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>     
>       *          bzerror, 
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void   
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
141c141
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose  
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       *          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int          bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>                 bzerror, 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int*          , 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       *          , 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int          , 
141,142c141,142
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>                 , 
142c142
<       int*          bzerror, 
---
>       *          bzerror, 
142c142
<       int*          bzerror, 
---
>                 bzerror, 
142c142
<       int*          bzerror, 
---
>       *          , 
142c142
<       int*          bzerror, 
---
>                 , 
142c142
<       int*          bzerror, 
---
>       *          bzerror 
142c142
<       int*          bzerror, 
---
>                 bzerror 
142c142
<       int*          bzerror, 
---
>       *           
142c142
<       int*          bzerror, 
---
>                  
142c142
<       int*          bzerror, 
---
>       int          bzerror, 
142c142
<       int*          bzerror, 
---
>       int          , 
142c142
<       int*          bzerror, 
---
>       int          bzerror 
142c142
<       int*          bzerror, 
---
>       int           
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
142c142
<       int*          bzerror, 
---
>       int*          , 
142c142
<       int*          bzerror, 
---
>       int*           
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>              b, 
142c142
<       int*          bzerror, 
---
>       int*          bzerror 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>              b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE*       , 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       , 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE       , 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>              , 
143c143
<       BZFILE*       b, 
---
>       *       b, 
143c143
<       BZFILE*       b, 
---
>              b, 
(84.9 %, 30944 bytes)
142c142
<       int*          , 
---
>       int*           
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
143c143
<       BZFILE*       b, 
---
>       *       b, 
143c143
<       BZFILE*       b, 
---
>              b, 
143c143
<       BZFILE*       b, 
---
>       *       , 
143c143
<       BZFILE*       b, 
---
>              , 
143c143
<       BZFILE*       b, 
---
>       *       b 
143c143
<       BZFILE*       b, 
---
>              b 
143c143
<       BZFILE*       b, 
---
>       *        
143c143
<       BZFILE*       b, 
---
>               
143c143
<       BZFILE*       b, 
---
>       BZFILE       b, 
143c143
<       BZFILE*       b, 
---
>       BZFILE       , 
143c143
<       BZFILE*       b, 
---
>       BZFILE       b 
143c143
<       BZFILE*       b, 
---
>       BZFILE        
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
143c143
<       BZFILE*       b, 
---
>       BZFILE*       , 
143c143
<       BZFILE*       b, 
---
>       BZFILE*        
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(84.9 %, 30943 bytes)
143c143
<       BZFILE*       , 
---
>       BZFILE*        
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
144c144
<       int           abandon, 
---
>                  abandon, 
144c144
<       int           abandon, 
---
>                  , 
144c144
<       int           abandon, 
---
>                  abandon 
144c144
<       int           abandon, 
---
>                   
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon, 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  , 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                   
>        int* nbytes_in, 
144c144
<       int           abandon, 
---
>       int           , 
144c144
<       int           abandon, 
---
>       int            
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>       unsigned * nbytes_in, 
(84.9 %, 30936 bytes)
144c144
<       int           , 
---
>       int            
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned * nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        * nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned int nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned  nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>         nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int* nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        * nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>         nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int* , 
145c145
<       unsigned int* nbytes_in, 
---
>        * , 
145c145
<       unsigned int* nbytes_in, 
---
>        int , 
145c145
<       unsigned int* nbytes_in, 
---
>         , 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned  nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned * , 
(84.9 %, 30933 bytes)
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in, 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  , 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned   
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in, 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  , 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned   
>        int* nbytes_out 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned * , 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned *  
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>       unsigned * nbytes_out 
(84.9 %, 30924 bytes)
145c145
<       unsigned * , 
---
>       unsigned *  
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned * nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        * nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned int nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned  nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>         nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int* nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        * nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>         nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int*  
146c146
<       unsigned int* nbytes_out 
---
>        *  
146c146
<       unsigned int* nbytes_out 
---
>        int  
146c146
<       unsigned int* nbytes_out 
---
>          
146c146
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>       unsigned *  
(84.9 %, 30921 bytes)
146c146
<       unsigned * nbytes_out 
---
>       unsigned  nbytes_out 
146c146
<       unsigned * nbytes_out 
---
>       unsigned   
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    
146c146
<       unsigned * nbytes_out 
---
>       unsigned *  
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    
146c146
<       unsigned * nbytes_out 
---
>       unsigned *  
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
(84.9 %, 30911 bytes)
147c147
<    );
---
>    ;
147c147
<    );
---
>    
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
(84.9 %, 30902 bytes)
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_APIBZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
(84.9 %, 30898 bytes)
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   () ( 
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   ) ( 
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64 ( 
149c149
<   BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64 ( 
(84.9 %, 30892 bytes)
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   ) ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64 ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>    ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64)  
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   )  
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64  
149c149
<   (BZ2_bzWriteClose64) ( 
---
>     
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   () ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   ( ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   ()  
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   (  
149,150c149,150
<   (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>   () ( 
>       *          bzerror, 
149,150c149,150
<   (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>   ( ( 
>       *          bzerror, 
149,150c149,150
<   (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>   ()  
>       *          bzerror, 
149,150c149,150
<   (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>   (  
>       *          bzerror, 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64 ( 
149c149
<   (BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64  
(84.9 %, 30890 bytes)
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    ( 
>       *          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>     
>       *          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    ( 
>       int          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>     
>       int          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    ( 
>                 bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>     
>                 bzerror, 
149c149
<   BZ2_bzWriteClose64 ( 
---
>   BZ2_bzWriteClose64  
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>       *          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>       int          bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>                 bzerror, 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>       int*          , 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>       *          , 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>       int          , 
149,150c149,150
<   BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ2_bzWriteClose64  
>                 , 
150c150
<       int*          bzerror, 
---
>       *          bzerror, 
150c150
<       int*          bzerror, 
---
>                 bzerror, 
150c150
<       int*          bzerror, 
---
>       *          , 
150c150
<       int*          bzerror, 
---
>                 , 
150c150
<       int*          bzerror, 
---
>       *          bzerror 
150c150
<       int*          bzerror, 
---
>                 bzerror 
150c150
<       int*          bzerror, 
---
>       *           
150c150
<       int*          bzerror, 
---
>                  
150c150
<       int*          bzerror, 
---
>       int          bzerror, 
150c150
<       int*          bzerror, 
---
>       int          , 
(84.9 %, 30889 bytes)
150c150
<       int          bzerror, 
---
>       int          , 
150c150
<       int          bzerror, 
---
>       int           
150,151c150,151
<       int          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
150,151c150,151
<       int          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
150,151c150,151
<       int          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       BZFILE       b, 
(84.9 %, 30882 bytes)
150c150
<       int          , 
---
>       int           
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>       BZFILE       b, 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>              b, 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>       BZFILE*       , 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>       *       , 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>       BZFILE       , 
150,151c150,151
<       int          , 
<       BZFILE*       b, 
---
>       int           
>              , 
151c151
<       BZFILE*       b, 
---
>       *       b, 
151c151
<       BZFILE*       b, 
---
>              b, 
151c151
<       BZFILE*       b, 
---
>       *       , 
151c151
<       BZFILE*       b, 
---
>              , 
151c151
<       BZFILE*       b, 
---
>       *       b 
151c151
<       BZFILE*       b, 
---
>              b 
151c151
<       BZFILE*       b, 
---
>       *        
151c151
<       BZFILE*       b, 
---
>               
151c151
<       BZFILE*       b, 
---
>       BZFILE       b, 
151c151
<       BZFILE*       b, 
---
>       BZFILE       , 
(84.9 %, 30881 bytes)
151c151
<       BZFILE       b, 
---
>       BZFILE       , 
151c151
<       BZFILE       b, 
---
>       BZFILE        
151,152c151,152
<       BZFILE       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
151,152c151,152
<       BZFILE       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
151,152c151,152
<       BZFILE       b, 
<       int           abandon, 
---
>       BZFILE       , 
>       int           , 
(84.9 %, 30880 bytes)
151c151
<       BZFILE       , 
---
>       BZFILE        
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>       int           , 
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>                  , 
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>       int           abandon 
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>                  abandon 
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>       int            
151,152c151,152
<       BZFILE       , 
<       int           abandon, 
---
>       BZFILE        
>                   
152c152
<       int           abandon, 
---
>                  abandon, 
152c152
<       int           abandon, 
---
>                  , 
152c152
<       int           abandon, 
---
>                  abandon 
152c152
<       int           abandon, 
---
>                   
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon, 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  , 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                   
>        int* nbytes_in_lo32, 
152c152
<       int           abandon, 
---
>       int           , 
152c152
<       int           abandon, 
---
>       int            
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>        int* nbytes_in_lo32, 
(84.9 %, 30873 bytes)
152c152
<       int           , 
---
>       int            
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned * nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        * nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned int nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned  nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>         nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int* nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int* , 
(84.9 %, 30865 bytes)
153c153
<        int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
153c153
<        int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
153c153
<        int* nbytes_in_lo32, 
---
>        * , 
153c153
<        int* nbytes_in_lo32, 
---
>         , 
153c153
<        int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32 
153c153
<        int* nbytes_in_lo32, 
---
>         nbytes_in_lo32 
153c153
<        int* nbytes_in_lo32, 
---
>        *  
153c153
<        int* nbytes_in_lo32, 
---
>          
153c153
<        int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
153c153
<        int* nbytes_in_lo32, 
---
>        int , 
(84.9 %, 30864 bytes)
153c153
<        int nbytes_in_lo32, 
---
>        int , 
153c153
<        int nbytes_in_lo32, 
---
>        int  
153,154c153,154
<        int nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>        int , 
>        int* nbytes_in_hi32, 
(84.9 %, 30850 bytes)
153c153
<        int , 
---
>        int  
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>        int* nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>       unsigned * nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>        * nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>       unsigned int nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>        int nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>       unsigned  nbytes_in_hi32, 
153,154c153,154
<        int , 
<       unsigned int* nbytes_in_hi32, 
---
>        int  
>         nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int* nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
(85.0 %, 30842 bytes)
154c154
<        int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
154c154
<        int* nbytes_in_hi32, 
---
>         nbytes_in_hi32, 
154c154
<        int* nbytes_in_hi32, 
---
>        * , 
154c154
<        int* nbytes_in_hi32, 
---
>         , 
154c154
<        int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32 
154c154
<        int* nbytes_in_hi32, 
---
>         nbytes_in_hi32 
154c154
<        int* nbytes_in_hi32, 
---
>        *  
154c154
<        int* nbytes_in_hi32, 
---
>          
154c154
<        int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
154c154
<        int* nbytes_in_hi32, 
---
>        int , 
(85.0 %, 30841 bytes)
154c154
<        int nbytes_in_hi32, 
---
>        int , 
154c154
<        int nbytes_in_hi32, 
---
>        int  
154,155c154,155
<        int nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>        int , 
>        int* nbytes_out_lo32, 
(85.0 %, 30827 bytes)
154c154
<        int , 
---
>        int  
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>        int* nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>       unsigned * nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>        * nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>       unsigned int nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>        int nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>       unsigned  nbytes_out_lo32, 
154,155c154,155
<        int , 
<       unsigned int* nbytes_out_lo32, 
---
>        int  
>         nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int* nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
(85.0 %, 30819 bytes)
155c155
<        int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
155c155
<        int* nbytes_out_lo32, 
---
>         nbytes_out_lo32, 
155c155
<        int* nbytes_out_lo32, 
---
>        * , 
155c155
<        int* nbytes_out_lo32, 
---
>         , 
155c155
<        int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32 
155c155
<        int* nbytes_out_lo32, 
---
>         nbytes_out_lo32 
155c155
<        int* nbytes_out_lo32, 
---
>        *  
155c155
<        int* nbytes_out_lo32, 
---
>          
155c155
<        int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
155c155
<        int* nbytes_out_lo32, 
---
>        int , 
(85.0 %, 30818 bytes)
155c155
<        int nbytes_out_lo32, 
---
>        int , 
155c155
<        int nbytes_out_lo32, 
---
>        int  
155,156c155,156
<        int nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>        int , 
>        int* nbytes_out_hi32
(85.0 %, 30803 bytes)
155c155
<        int , 
---
>        int  
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>        int* nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>       unsigned * nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>        * nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>       unsigned int nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>        int nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>       unsigned  nbytes_out_hi32
155,156c155,156
<        int , 
<       unsigned int* nbytes_out_hi32
---
>        int  
>         nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        int* nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        * nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        int nbytes_out_hi32
(85.0 %, 30795 bytes)
156c156
<        int* nbytes_out_hi32
---
>        * nbytes_out_hi32
156c156
<        int* nbytes_out_hi32
---
>         nbytes_out_hi32
156c156
<        int* nbytes_out_hi32
---
>        * 
156c156
<        int* nbytes_out_hi32
---
>         
156,157c156,157
<        int* nbytes_out_hi32
<    );
---
>        * nbytes_out_hi32
>    ;
156,157c156,157
<        int* nbytes_out_hi32
<    );
---
>         nbytes_out_hi32
>    ;
156,157c156,157
<        int* nbytes_out_hi32
<    );
---
>        * 
>    ;
156,157c156,157
<        int* nbytes_out_hi32
<    );
---
>         
>    ;
156c156
<        int* nbytes_out_hi32
---
>        int nbytes_out_hi32
156c156
<        int* nbytes_out_hi32
---
>        int 
(85.0 %, 30794 bytes)
156c156
<        int nbytes_out_hi32
---
>        int 
156,157c156,157
<        int nbytes_out_hi32
<    );
---
>        int 
>    ;
156,157c156,157
<        int nbytes_out_hi32
<    );
---
>        int 
>    )
156,157c156,157
<        int nbytes_out_hi32
<    );
---
>        int 
>    
156c156
<        int nbytes_out_hi32
---
>        int 
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
(85.0 %, 30779 bytes)
157c157
<    );
---
>    ;
157c157
<    );
---
>    
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    )
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int  ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int  ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN   ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
(85.0 %, 30770 bytes)
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>     
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
>       *         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int  ( 
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int   
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int  ( 
>       *         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int   
>       *         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int  ( 
>       char         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int   
>       char         dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int  ( 
>                dest, 
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int   
>                dest, 
162c162
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress  
162,163c162,163
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress  
>       *         dest, 
(85.0 %, 30767 bytes)
162c162
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
162c162
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>     
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>                dest, 
162c162
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char         dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>                dest, 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char*         , 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         , 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char         , 
162,163c162,163
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>                , 
163c163
<       char*         dest, 
---
>       *         dest, 
163c163
<       char*         dest, 
---
>                dest, 
163c163
<       char*         dest, 
---
>       *         , 
163c163
<       char*         dest, 
---
>                , 
163c163
<       char*         dest, 
---
>       *         dest 
163c163
<       char*         dest, 
---
>                dest 
163c163
<       char*         dest, 
---
>       *          
163c163
<       char*         dest, 
---
>                 
163c163
<       char*         dest, 
---
>       char         dest, 
163c163
<       char*         dest, 
---
>       char         , 
163c163
<       char*         dest, 
---
>       char         dest 
163c163
<       char*         dest, 
---
>       char          
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
163c163
<       char*         dest, 
---
>       char*         , 
163c163
<       char*         dest, 
---
>       char*          
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(85.0 %, 30763 bytes)
163c163
<       char*         , 
---
>       char*          
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
164c164
<       unsigned int* destLen,
---
>        int* destLen,
164c164
<       unsigned int* destLen,
---
>        * destLen,
164c164
<       unsigned int* destLen,
---
>        int destLen,
164c164
<       unsigned int* destLen,
---
>         destLen,
164c164
<       unsigned int* destLen,
---
>        int* ,
164c164
<       unsigned int* destLen,
---
>        * ,
164c164
<       unsigned int* destLen,
---
>        int ,
164c164
<       unsigned int* destLen,
---
>         ,
164c164
<       unsigned int* destLen,
---
>       unsigned * destLen,
164c164
<       unsigned int* destLen,
---
>       unsigned  destLen,
164c164
<       unsigned int* destLen,
---
>       unsigned * ,
(85.0 %, 30760 bytes)
164c164
<       unsigned * destLen,
---
>       unsigned  destLen,
164c164
<       unsigned * destLen,
---
>       unsigned  ,
164c164
<       unsigned * destLen,
---
>       unsigned  destLen
164c164
<       unsigned * destLen,
---
>       unsigned  
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
164c164
<       unsigned * destLen,
---
>       unsigned * ,
164c164
<       unsigned * destLen,
---
>       unsigned * 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
164c164
<       unsigned * destLen,
---
>       unsigned * destLen
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char*         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                , 
165c165
<       char*         source, 
---
>       *         source, 
165c165
<       char*         source, 
---
>                source, 
(85.0 %, 30753 bytes)
164c164
<       unsigned * ,
---
>       unsigned * 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
165c165
<       char*         source, 
---
>       *         source, 
165c165
<       char*         source, 
---
>                source, 
165c165
<       char*         source, 
---
>       *         , 
165c165
<       char*         source, 
---
>                , 
165c165
<       char*         source, 
---
>       *         source 
165c165
<       char*         source, 
---
>                source 
165c165
<       char*         source, 
---
>       *          
165c165
<       char*         source, 
---
>                 
165c165
<       char*         source, 
---
>       char         source, 
165c165
<       char*         source, 
---
>       char         , 
165c165
<       char*         source, 
---
>       char         source 
165c165
<       char*         source, 
---
>       char          
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
165c165
<       char*         source, 
---
>       char*         , 
165c165
<       char*         source, 
---
>       char*          
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(85.0 %, 30747 bytes)
165c165
<       char*         , 
---
>       char*          
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
166c166
<       unsigned int  sourceLen,
---
>        int  sourceLen,
166c166
<       unsigned int  sourceLen,
---
>          sourceLen,
166c166
<       unsigned int  sourceLen,
---
>        int  ,
166c166
<       unsigned int  sourceLen,
---
>          ,
166c166
<       unsigned int  sourceLen,
---
>        int  sourceLen
166c166
<       unsigned int  sourceLen,
---
>          sourceLen
166c166
<       unsigned int  sourceLen,
---
>        int  
166c166
<       unsigned int  sourceLen,
---
>          
166c166
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
166c166
<       unsigned int  sourceLen,
---
>       unsigned   ,
166c166
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen
(85.0 %, 30744 bytes)
166c166
<       unsigned   sourceLen,
---
>       unsigned   ,
166c166
<       unsigned   sourceLen,
---
>       unsigned   
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>                  blockSize100k, 
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>       int           , 
(85.0 %, 30735 bytes)
166c166
<       unsigned   ,
---
>       unsigned   
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           , 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  , 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           blockSize100k 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int            
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                   
167c167
<       int           blockSize100k, 
---
>                  blockSize100k, 
167c167
<       int           blockSize100k, 
---
>                  , 
167c167
<       int           blockSize100k, 
---
>                  blockSize100k 
167c167
<       int           blockSize100k, 
---
>                   
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k, 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  , 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                   
>                  verbosity, 
167c167
<       int           blockSize100k, 
---
>       int           , 
167c167
<       int           blockSize100k, 
---
>       int            
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>       int           , 
(85.0 %, 30722 bytes)
167c167
<       int           , 
---
>       int            
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
166a167
>       int            
168d168
<       int           verbosity, 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  , 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>       int           verbosity 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>       int            
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                   
168c168
<       int           verbosity, 
---
>                  verbosity, 
168c168
<       int           verbosity, 
---
>                  , 
168c168
<       int           verbosity, 
---
>                  verbosity 
168c168
<       int           verbosity, 
---
>                   
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity, 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  , 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                   
>                  workFactor 
168c168
<       int           verbosity, 
---
>       int           , 
168c168
<       int           verbosity, 
---
>       int            
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int            
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>       int            
(85.0 %, 30713 bytes)
168c168
<       int           , 
---
>       int            
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>                  workFactor 
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>       int            
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>                   
168c168
<       int           , 
---
>       int            
170c170
<    );
---
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                  workFactor 
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>       int            
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                   
>    ;
169c169
<       int           workFactor 
---
>                  workFactor 
169c169
<       int           workFactor 
---
>                   
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    
169c169
<       int           workFactor 
---
>       int            
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    
169c169
<       int           workFactor 
---
>       int            
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(85.0 %, 30703 bytes)
170c170
<    );
---
>    ;
170c170
<    );
---
>    
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    )
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int  ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int  ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN   ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
(85.0 %, 30694 bytes)
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>     
172,173c172,173
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
>       *         dest, 
172,173c172,173
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
172,173c172,173
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         dest, 
172,173c172,173
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int  ( 
172c172
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int   
172,173c172,173
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  int  ( 
>       *         dest, 
(85.0 %, 30691 bytes)
172c172
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
172c172
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>     
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>                dest, 
172c172
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char         dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>                dest, 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char*         , 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         , 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char         , 
172,173c172,173
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>                , 
173c173
<       char*         dest, 
---
>       *         dest, 
173c173
<       char*         dest, 
---
>                dest, 
173c173
<       char*         dest, 
---
>       *         , 
173c173
<       char*         dest, 
---
>                , 
173c173
<       char*         dest, 
---
>       *         dest 
173c173
<       char*         dest, 
---
>                dest 
173c173
<       char*         dest, 
---
>       *          
173c173
<       char*         dest, 
---
>                 
173c173
<       char*         dest, 
---
>       char         dest, 
173c173
<       char*         dest, 
---
>       char         , 
173c173
<       char*         dest, 
---
>       char         dest 
173c173
<       char*         dest, 
---
>       char          
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
173c173
<       char*         dest, 
---
>       char*         , 
173c173
<       char*         dest, 
---
>       char*          
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(85.0 %, 30687 bytes)
173c173
<       char*         , 
---
>       char*          
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
174c174
<       unsigned int* destLen,
---
>        int* destLen,
174c174
<       unsigned int* destLen,
---
>        * destLen,
174c174
<       unsigned int* destLen,
---
>        int destLen,
174c174
<       unsigned int* destLen,
---
>         destLen,
174c174
<       unsigned int* destLen,
---
>        int* ,
174c174
<       unsigned int* destLen,
---
>        * ,
174c174
<       unsigned int* destLen,
---
>        int ,
174c174
<       unsigned int* destLen,
---
>         ,
174c174
<       unsigned int* destLen,
---
>       unsigned * destLen,
174c174
<       unsigned int* destLen,
---
>       unsigned  destLen,
174c174
<       unsigned int* destLen,
---
>       unsigned * ,
(85.0 %, 30684 bytes)
174c174
<       unsigned * destLen,
---
>       unsigned  destLen,
174c174
<       unsigned * destLen,
---
>       unsigned  ,
174c174
<       unsigned * destLen,
---
>       unsigned  destLen
174c174
<       unsigned * destLen,
---
>       unsigned  
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
174c174
<       unsigned * destLen,
---
>       unsigned * ,
174c174
<       unsigned * destLen,
---
>       unsigned * 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
174c174
<       unsigned * destLen,
---
>       unsigned * destLen
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char*         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                , 
175c175
<       char*         source, 
---
>       *         source, 
(85.0 %, 30677 bytes)
174c174
<       unsigned * ,
---
>       unsigned * 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
175c175
<       char*         source, 
---
>       *         source, 
175c175
<       char*         source, 
---
>                source, 
175c175
<       char*         source, 
---
>       *         , 
175c175
<       char*         source, 
---
>                , 
175c175
<       char*         source, 
---
>       *         source 
175c175
<       char*         source, 
---
>                source 
175c175
<       char*         source, 
---
>       *          
175c175
<       char*         source, 
---
>                 
175c175
<       char*         source, 
---
>       char         source, 
175c175
<       char*         source, 
---
>       char         , 
175c175
<       char*         source, 
---
>       char         source 
175c175
<       char*         source, 
---
>       char          
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
175c175
<       char*         source, 
---
>       char*         , 
175c175
<       char*         source, 
---
>       char*          
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
(85.0 %, 30671 bytes)
175c175
<       char*         , 
---
>       char*          
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
176c176
<       unsigned int  sourceLen,
---
>        int  sourceLen,
176c176
<       unsigned int  sourceLen,
---
>          sourceLen,
176c176
<       unsigned int  sourceLen,
---
>        int  ,
176c176
<       unsigned int  sourceLen,
---
>          ,
176c176
<       unsigned int  sourceLen,
---
>        int  sourceLen
176c176
<       unsigned int  sourceLen,
---
>          sourceLen
176c176
<       unsigned int  sourceLen,
---
>        int  
176c176
<       unsigned int  sourceLen,
---
>          
176c176
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
176c176
<       unsigned int  sourceLen,
---
>       unsigned   ,
176c176
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen
(85.0 %, 30668 bytes)
176c176
<       unsigned   sourceLen,
---
>       unsigned   ,
176c176
<       unsigned   sourceLen,
---
>       unsigned   
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>                  small, 
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   
>                  small, 
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>       int           , 
(85.0 %, 30659 bytes)
176c176
<       unsigned   ,
---
>       unsigned   
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small, 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           , 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  , 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           small 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int            
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                   
177c177
<       int           small, 
---
>                  small, 
177c177
<       int           small, 
---
>                  , 
177c177
<       int           small, 
---
>                  small 
177c177
<       int           small, 
---
>                   
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  small, 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  , 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  small 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                   
>                  verbosity 
177c177
<       int           small, 
---
>       int           , 
177c177
<       int           small, 
---
>       int            
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int           , 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int            
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int           , 
>       int            
(85.0 %, 30654 bytes)
177c177
<       int           , 
---
>       int            
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>                  verbosity 
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>       int            
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>                   
177c177
<       int           , 
---
>       int            
179c179
<    );
---
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>                  verbosity 
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>       int            
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>                   
>    ;
178c178
<       int           verbosity 
---
>                  verbosity 
178c178
<       int           verbosity 
---
>                   
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    
178c178
<       int           verbosity 
---
>       int            
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    
178c178
<       int           verbosity 
---
>       int            
180c180
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
(85.0 %, 30645 bytes)
179c179
<    );
---
>    ;
179c179
<    );
---
>    
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    ;
>  BZ_APIBZ2_bzBuffToBuffDecompress 
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    
>  BZ_APIBZ2_bzBuffToBuffDecompress 
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    ;
> int  
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    
> int  
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    ;
>   
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    
>   
179c179
<    );
---
>    )
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    )
>  BZ_APIBZ2_bzBuffToBuffDecompress 
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    )
> int  
179,180c179,180
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>    )
>   
179c179
<    );
---
>    )
181c181
<                            ( char*         dest, 
---
>                             char*         dest, 
179,181c179,181
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>    )
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
179,181c179,181
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>    )
> int  
>                             char*         dest, 
179,181c179,181
<    );
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>    )
>   
>                             char*         dest, 
180c180
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
180c180
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>   
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char*         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                            ( *         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( *         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             *         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             *         dest, 
180c180
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> int  
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                             char*         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                            ( *         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                             *         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                            ( char         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                             char         dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                            (          dest, 
180,181c180,181
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> int  
>                                      dest, 
(85.0 %, 30642 bytes)
180c180
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>   
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char*         dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( *         dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             *         dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( char         dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char         dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            (          dest, 
180,181c180,181
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                                      dest, 
181c181
<                            ( char*         dest, 
---
>                             char*         dest, 
181c181
<                            ( char*         dest, 
---
>                             *         dest, 
181c181
<                            ( char*         dest, 
---
>                             char         dest, 
181c181
<                            ( char*         dest, 
---
>                                      dest, 
181c181
<                            ( char*         dest, 
---
>                             char*         , 
181c181
<                            ( char*         dest, 
---
>                             *         , 
181c181
<                            ( char*         dest, 
---
>                             char         , 
181c181
<                            ( char*         dest, 
---
>                                      , 
181c181
<                            ( char*         dest, 
---
>                            ( *         dest, 
181c181
<                            ( char*         dest, 
---
>                            (          dest, 
181c181
<                            ( char*         dest, 
---
>                            ( *         , 
181c181
<                            ( char*         dest, 
---
>                            (          , 
181c181
<                            ( char*         dest, 
---
>                            ( *         dest 
181c181
<                            ( char*         dest, 
---
>                            (          dest 
181c181
<                            ( char*         dest, 
---
>                            ( *          
181c181
<                            ( char*         dest, 
---
>                            (           
181c181
<                            ( char*         dest, 
---
>                            ( char         dest, 
181c181
<                            ( char*         dest, 
---
>                            ( char         , 
181c181
<                            ( char*         dest, 
---
>                            ( char         dest 
181c181
<                            ( char*         dest, 
---
>                            ( char          
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest, 
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         , 
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest 
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char          
>                               int* destLen,
181c181
<                            ( char*         dest, 
---
>                            ( char*         , 
181c181
<                            ( char*         dest, 
---
>                            ( char*          
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                              unsigned * destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned * destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               * destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               * destLen,
181c181
<                            ( char*         dest, 
---
>                            ( char*         dest 
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int* destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned * destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               * destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned int destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned  destLen,
181,182c181,182
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                                destLen,
182c182
<                              unsigned int* destLen,
---
>                               int* destLen,
182c182
<                              unsigned int* destLen,
---
>                               * destLen,
182c182
<                              unsigned int* destLen,
---
>                               int destLen,
182c182
<                              unsigned int* destLen,
---
>                                destLen,
182c182
<                              unsigned int* destLen,
---
>                               int* ,
182c182
<                              unsigned int* destLen,
---
>                               * ,
182c182
<                              unsigned int* destLen,
---
>                               int ,
182c182
<                              unsigned int* destLen,
---
>                                ,
182c182
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
182c182
<                              unsigned int* destLen,
---
>                              unsigned  destLen,
182c182
<                              unsigned int* destLen,
---
>                              unsigned * ,
182c182
<                              unsigned int* destLen,
---
>                              unsigned  ,
182c182
<                              unsigned int* destLen,
---
>                              unsigned * destLen
182c182
<                              unsigned int* destLen,
---
>                              unsigned  destLen
182c182
<                              unsigned int* destLen,
---
>                              unsigned * 
182c182
<                              unsigned int* destLen,
---
>                              unsigned  
182c182
<                              unsigned int* destLen,
---
>                              unsigned int destLen,
182c182
<                              unsigned int* destLen,
---
>                              unsigned int ,
182c182
<                              unsigned int* destLen,
---
>                              unsigned int destLen
182c182
<                              unsigned int* destLen,
---
>                              unsigned int 
182,183c182,183
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int destLen,
>                              *         source, 
182,183c182,183
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int ,
>                              *         source, 
182,183c182,183
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int destLen
>                              *         source, 
182,183c182,183
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int 
>                              *         source, 
182c182
<                              unsigned int* destLen,
---
>                              unsigned int* ,
182c182
<                              unsigned int* destLen,
---
>                              unsigned int* 
(85.0 %, 30639 bytes)
182c182
<                              unsigned * destLen,
---
>                              unsigned  destLen,
182c182
<                              unsigned * destLen,
---
>                              unsigned  ,
182c182
<                              unsigned * destLen,
---
>                              unsigned  destLen
182c182
<                              unsigned * destLen,
---
>                              unsigned  
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
182c182
<                              unsigned * destLen,
---
>                              unsigned * ,
182c182
<                              unsigned * destLen,
---
>                              unsigned * 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
182c182
<                              unsigned * destLen,
---
>                              unsigned * destLen
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       source, 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char*         , 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         , 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         , 
182,183c182,183
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       , 
183c183
<                              char*         source, 
---
>                              *         source, 
183c183
<                              char*         source, 
---
>                                       source, 
183c183
<                              char*         source, 
---
>                              *         , 
183c183
<                              char*         source, 
---
>                                       , 
183c183
<                              char*         source, 
---
>                              *         source 
183c183
<                              char*         source, 
---
>                                       source 
183c183
<                              char*         source, 
---
>                              *          
183c183
<                              char*         source, 
---
>                                        
183c183
<                              char*         source, 
---
>                              char         source, 
183c183
<                              char*         source, 
---
>                              char         , 
183c183
<                              char*         source, 
---
>                              char         source 
183c183
<                              char*         source, 
---
>                              char          
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source, 
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         , 
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source 
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char          
>                               int  sourceLen,
183c183
<                              char*         source, 
---
>                              char*         , 
183c183
<                              char*         source, 
---
>                              char*          
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                              unsigned   sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned   sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                                 sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                                 sourceLen,
183c183
<                              char*         source, 
---
>                              char*         source 
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 sourceLen,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned int  ,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  ,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   ,
183,184c183,184
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 ,
184c184
<                              unsigned int  sourceLen,
---
>                               int  sourceLen,
184c184
<                              unsigned int  sourceLen,
---
>                                 sourceLen,
184c184
<                              unsigned int  sourceLen,
---
>                               int  ,
184c184
<                              unsigned int  sourceLen,
---
>                                 ,
184c184
<                              unsigned int  sourceLen,
---
>                               int  sourceLen
184c184
<                              unsigned int  sourceLen,
---
>                                 sourceLen
184c184
<                              unsigned int  sourceLen,
---
>                               int  
184c184
<                              unsigned int  sourceLen,
---
>                                 
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen,
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned   ,
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned   
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen,
>                                         small,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned int  ,
184c184
<                              unsigned int  sourceLen,
---
>                              unsigned int  
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  ,
>                                         small,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  
>                                         small,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  ,
>                              int           ,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  
>                              int           ,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  ,
>                                         ,
184,185c184,185
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  
>                                         ,
(85.1 %, 30636 bytes)
184c184
<                              unsigned   sourceLen,
---
>                              unsigned   ,
184c184
<                              unsigned   sourceLen,
---
>                              unsigned   
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                              int           ,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                              int           ,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         ,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         ,
184c184
<                              unsigned   sourceLen,
---
>                              unsigned   sourceLen
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           ,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         ,
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           small
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           
184,185c184,185
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         
185c185
<                              int           small,
---
>                                         small,
185c185
<                              int           small,
---
>                                         ,
185c185
<                              int           small,
---
>                                         small
185c185
<                              int           small,
---
>                                         
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
185c185
<                              int           small,
---
>                              int           ,
185c185
<                              int           small,
---
>                              int           
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                              int            )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                          )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                          )
185c185
<                              int           small,
---
>                              int           small
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          )
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int           verbosity 
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity 
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            
185,186c185,186
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          
186c186
<                              int           verbosity )
---
>                                         verbosity )
186c186
<                              int           verbosity )
---
>                                          )
186c186
<                              int           verbosity )
---
>                                         verbosity 
186c186
<                              int           verbosity )
---
>                                          
186,187c186,187
<                              int           verbosity )
< {
---
>                                         verbosity )
> 
186,187c186,187
<                              int           verbosity )
< {
---
>                                          )
> 
186,187c186,187
<                              int           verbosity )
< {
---
>                                         verbosity 
> 
186,187c186,187
<                              int           verbosity )
< {
---
>                                          
> 
186c186
<                              int           verbosity )
---
>                              int            )
186c186
<                              int           verbosity )
---
>                              int            
186,187c186,187
<                              int           verbosity )
< {
---
>                              int            )
> 
186,187c186,187
<                              int           verbosity )
< {
---
>                              int            
> 
186c186
<                              int           verbosity )
---
>                              int            )
188c188
<    bz_stream strm;
---
>     strm;
186c186
<                              int           verbosity )
---
>                              int            
188c188
<    bz_stream strm;
---
>     strm;
186,188c186,188
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int            )
> 
>     strm;
186,188c186,188
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int            
> 
>     strm;
186c186
<                              int           verbosity )
---
>                              int           verbosity 
186,187c186,187
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
186c186
<                              int           verbosity )
---
>                              int           verbosity 
188c188
<    bz_stream strm;
---
>     strm;
186,188c186,188
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           verbosity 
> 
>     strm;
186c186
<                              int           verbosity )
---
>                              int           verbosity 
188c188
<    bz_stream strm;
---
>    bz_stream ;
186,188c186,188
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           verbosity 
> 
>    bz_stream ;
186c186
<                              int           verbosity )
---
>                              int           verbosity 
188c188
<    bz_stream strm;
---
>     ;
186,188c186,188
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           verbosity 
> 
>     ;
187c187
< {
---
> 
187,188c187,188
< {
<    bz_stream strm;
---
> 
>     strm;
187,188c187,188
< {
<    bz_stream strm;
---
> 
>    bz_stream ;
187,188c187,188
< {
<    bz_stream strm;
---
> 
>     ;
187,188c187,188
< {
<    bz_stream strm;
---
> 
>    bz_stream strm
187,188c187,188
< {
<    bz_stream strm;
---
> 
>     strm
187,188c187,188
< {
<    bz_stream strm;
---
> 
>    bz_stream 
187,188c187,188
< {
<    bz_stream strm;
---
> 
>     
188c188
<    bz_stream strm;
---
>     strm;
188c188
<    bz_stream strm;
---
>     ;
188c188
<    bz_stream strm;
---
>     strm
188c188
<    bz_stream strm;
---
>     
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>     strm;
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>     ;
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>     strm
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>     
>     int strm_5;
188c188
<    bz_stream strm;
---
>    bz_stream ;
188c188
<    bz_stream strm;
---
>    bz_stream 
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>    unsigned  strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>    unsigned  strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>      strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>      strm_5;
188c188
<    bz_stream strm;
---
>    bz_stream strm
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>     int strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned  strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>      strm_5;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned int ;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>     int ;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned  ;
188,189c188,189
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>      ;
189c189
<    unsigned int strm_5;
---
>     int strm_5;
189c189
<    unsigned int strm_5;
---
>      strm_5;
189c189
<    unsigned int strm_5;
---
>     int ;
189c189
<    unsigned int strm_5;
---
>      ;
189c189
<    unsigned int strm_5;
---
>     int strm_5
189c189
<    unsigned int strm_5;
---
>      strm_5
189c189
<    unsigned int strm_5;
---
>     int 
189c189
<    unsigned int strm_5;
---
>      
189c189
<    unsigned int strm_5;
---
>    unsigned  strm_5;
(85.1 %, 30628 bytes)
189c189
<     int strm_5;
---
>      strm_5;
189c189
<     int strm_5;
---
>      ;
189c189
<     int strm_5;
---
>      strm_5
189c189
<     int strm_5;
---
>      
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>      strm_5;
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>      ;
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>      strm_5
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>      
>     int strm_1;
189c189
<     int strm_5;
---
>     int ;
189c189
<     int strm_5;
---
>     int 
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>    unsigned  strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>    unsigned  strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>      strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>      strm_1;
189c189
<     int strm_5;
---
>     int strm_5
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>     int strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned  strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>      strm_1;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned int ;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>     int ;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned  ;
189,190c189,190
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>      ;
190c190
<    unsigned int strm_1;
---
>     int strm_1;
190c190
<    unsigned int strm_1;
---
>      strm_1;
190c190
<    unsigned int strm_1;
---
>     int ;
190c190
<    unsigned int strm_1;
---
>      ;
190c190
<    unsigned int strm_1;
---
>     int strm_1
190c190
<    unsigned int strm_1;
---
>      strm_1
190c190
<    unsigned int strm_1;
---
>     int 
190c190
<    unsigned int strm_1;
---
>      
190c190
<    unsigned int strm_1;
---
>    unsigned  strm_1;
(85.1 %, 30620 bytes)
190c190
<     int strm_1;
---
>      strm_1;
190c190
<     int strm_1;
---
>      ;
190c190
<     int strm_1;
---
>      strm_1
190c190
<     int strm_1;
---
>      
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>      strm_1;
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>      ;
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>      strm_1
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>      
>     *strm_4;
190c190
<     int strm_1;
---
>     int ;
190c190
<     int strm_1;
---
>     int 
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int ;
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int 
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int ;
>    char strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int 
>    char strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int ;
>     strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int 
>     strm_4;
190c190
<     int strm_1;
---
>     int strm_1
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     *strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     strm_4;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char *;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     *;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char ;
190,191c190,191
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     ;
191c191
<    char *strm_4;
---
>     *strm_4;
191c191
<    char *strm_4;
---
>     strm_4;
191c191
<    char *strm_4;
---
>     *;
191c191
<    char *strm_4;
---
>     ;
191c191
<    char *strm_4;
---
>     *strm_4
191c191
<    char *strm_4;
---
>     strm_4
191c191
<    char *strm_4;
---
>     *
191c191
<    char *strm_4;
---
>     
191c191
<    char *strm_4;
---
>    char strm_4;
191c191
<    char *strm_4;
---
>    char ;
191c191
<    char *strm_4;
---
>    char strm_4
191c191
<    char *strm_4;
---
>    char 
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char strm_4;
>     *strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char ;
>     *strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char strm_4
>     *strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char 
>     *strm_0;
191c191
<    char *strm_4;
---
>    char *;
191c191
<    char *strm_4;
---
>    char *
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *;
>     *strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *
>     *strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *;
>    char strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *
>    char strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *;
>     strm_0;
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *
>     strm_0;
191c191
<    char *strm_4;
---
>    char *strm_4
191,192c191,192
<    char *strm_4;
<    char *strm_0;
---
>    char *strm_4
>     *strm_0;
(85.1 %, 30619 bytes)
191c191
<    char strm_4;
---
>    char ;
191c191
<    char strm_4;
---
>    char 
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char ;
>     *strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char 
>     *strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char ;
>    char strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char 
>    char strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char ;
>     strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char 
>     strm_0;
191c191
<    char strm_4;
---
>    char strm_4
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     *strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     strm_0;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char *;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     *;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char ;
191,192c191,192
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     ;
192c192
<    char *strm_0;
---
>     *strm_0;
192c192
<    char *strm_0;
---
>     strm_0;
192c192
<    char *strm_0;
---
>     *;
192c192
<    char *strm_0;
---
>     ;
192c192
<    char *strm_0;
---
>     *strm_0
192c192
<    char *strm_0;
---
>     strm_0
192c192
<    char *strm_0;
---
>     *
192c192
<    char *strm_0;
---
>     
192c192
<    char *strm_0;
---
>    char strm_0;
192c192
<    char *strm_0;
---
>    char ;
192c192
<    char *strm_0;
---
>    char strm_0
192c192
<    char *strm_0;
---
>    char 
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char strm_0;
>     ret;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char ;
>     ret;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char strm_0
>     ret;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char 
>     ret;
192c192
<    char *strm_0;
---
>    char *;
192c192
<    char *strm_0;
---
>    char *
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *;
>     ret;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *
>     ret;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *;
>    int ;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *
>    int ;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *;
>     ;
192,193c192,193
<    char *strm_0;
<    int ret;
---
>    char *
>     ;
192c192
<    char *strm_0;
---
>    char *strm_0
(85.1 %, 30618 bytes)
192c192
<    char strm_0;
---
>    char ;
192c192
<    char strm_0;
---
>    char 
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char ;
>     ret;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char 
>     ret;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char ;
>    int ;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char 
>    int ;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char ;
>     ;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char 
>     ;
192c192
<    char strm_0;
---
>    char strm_0
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ret;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int ;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ;
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int ret
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ret
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int 
192,193c192,193
<    char strm_0;
<    int ret;
---
>    char strm_0
>     
193c193
<    int ret;
---
>     ret;
193c193
<    int ret;
---
>     ;
193c193
<    int ret;
---
>     ret
193c193
<    int ret;
---
>     
193c193
<    int ret;
---
>     ret;
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>     ;
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>     ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>     
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ;
193c193
<    int ret;
---
>    int 
193c193
<    int ret;
---
>    int ;
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ;
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ;
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     ( == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if  == NULL || destLen == NULL || 
193c193
<    int ret;
---
>    int ret
195c195
<    if (dest == NULL || destLen == NULL || 
---
>      == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     ( == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>      == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (dest  NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     dest  NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>     (  NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>       NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if  == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest  NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if   NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest ==  || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if  ==  || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if dest   || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if    || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if (  NULL || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if ( ==  || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if (   || destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL  destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if (  NULL  destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if ( ==   destLen == NULL || 
195c195
<    if (dest == NULL || destLen == NULL || 
---
>    if (    destLen == NULL || 
(85.1 %, 30612 bytes)
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (    destLen == NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (   ||  == NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (     == NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (   || destLen  NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (    destLen  NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (   ||   NULL || 
195c195
<    if (  NULL || destLen == NULL || 
---
>    if (      NULL || 
(85.1 %, 30606 bytes)
195c195
<    if (    destLen == NULL || 
---
>    if (      NULL || 
195c195
<    if (    destLen == NULL || 
---
>    if (     ==  || 
195c195
<    if (    destLen == NULL || 
---
>    if (       || 
195c195
<    if (    destLen == NULL || 
---
>    if (     == NULL  
195c195
<    if (    destLen == NULL || 
---
>    if (      NULL  
195c195
<    if (    destLen == NULL || 
---
>    if (     ==   
195c195
<    if (    destLen == NULL || 
---
>    if (        
(85.1 %, 30597 bytes)
195c195
<    if (      NULL || 
---
>    if (        
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>         == NULL ||
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>         == NULL ||
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>        source  NULL ||
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>        source  NULL ||
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>          NULL ||
195,196c195,196
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>          NULL ||
(85.1 %, 30591 bytes)
196c196
<        source == NULL ||
---
>          NULL ||
196c196
<        source == NULL ||
---
>         ==  ||
196c196
<        source == NULL ||
---
>           ||
196c196
<        source == NULL ||
---
>         == NULL 
196c196
<        source == NULL ||
---
>          NULL 
196c196
<        source == NULL ||
---
>         ==  
196c196
<        source == NULL ||
---
>           
(85.1 %, 30583 bytes)
196c196
<          NULL ||
---
>           
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           ||
>         != 0 && small != 1 ||
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           
>         != 0 && small != 1 ||
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           ||
>        small  0 && small != 1 ||
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           
>        small  0 && small != 1 ||
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           ||
>          0 && small != 1 ||
196,197c196,197
<          NULL ||
<        small != 0 && small != 1 ||
---
>           
>          0 && small != 1 ||
(85.1 %, 30577 bytes)
197c197
<        small != 0 && small != 1 ||
---
>          0 && small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>         !=  && small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>           && small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>         != 0  small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>          0  small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>         !=   small != 1 ||
197c197
<        small != 0 && small != 1 ||
---
>            small != 1 ||
(85.1 %, 30570 bytes)
197c197
<          0 && small != 1 ||
---
>            small != 1 ||
197c197
<          0 && small != 1 ||
---
>           &&  != 1 ||
197c197
<          0 && small != 1 ||
---
>             != 1 ||
197c197
<          0 && small != 1 ||
---
>           && small  1 ||
197c197
<          0 && small != 1 ||
---
>            small  1 ||
197c197
<          0 && small != 1 ||
---
>           &&   1 ||
197c197
<          0 && small != 1 ||
---
>              1 ||
(85.1 %, 30567 bytes)
197c197
<            small != 1 ||
---
>              1 ||
197c197
<            small != 1 ||
---
>             !=  ||
197c197
<            small != 1 ||
---
>               ||
197c197
<            small != 1 ||
---
>             != 1 
197c197
<            small != 1 ||
---
>              1 
197c197
<            small != 1 ||
---
>             !=  
197c197
<            small != 1 ||
---
>               
(85.1 %, 30560 bytes)
197c197
<              1 ||
---
>               
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               ||
>         < 0 || verbosity > 4) 
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               
>         < 0 || verbosity > 4) 
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               ||
>        verbosity  0 || verbosity > 4) 
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               
>        verbosity  0 || verbosity > 4) 
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               ||
>          0 || verbosity > 4) 
197,198c197,198
<              1 ||
<        verbosity < 0 || verbosity > 4) 
---
>               
>          0 || verbosity > 4) 
(85.1 %, 30557 bytes)
198c198
<        verbosity < 0 || verbosity > 4) 
---
>          0 || verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>         <  || verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>           || verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>         < 0  verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>          0  verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>         <   verbosity > 4) 
198c198
<        verbosity < 0 || verbosity > 4) 
---
>            verbosity > 4) 
(85.1 %, 30547 bytes)
198c198
<          0 || verbosity > 4) 
---
>            verbosity > 4) 
198c198
<          0 || verbosity > 4) 
---
>           ||  > 4) 
198c198
<          0 || verbosity > 4) 
---
>             > 4) 
198c198
<          0 || verbosity > 4) 
---
>           || verbosity  4) 
198c198
<          0 || verbosity > 4) 
---
>            verbosity  4) 
198c198
<          0 || verbosity > 4) 
---
>           ||   4) 
198c198
<          0 || verbosity > 4) 
---
>              4) 
(85.1 %, 30544 bytes)
198c198
<            verbosity > 4) 
---
>              4) 
198c198
<            verbosity > 4) 
---
>             > ) 
198c198
<            verbosity > 4) 
---
>              ) 
198c198
<            verbosity > 4) 
---
>             > 4 
198c198
<            verbosity > 4) 
---
>              4 
198c198
<            verbosity > 4) 
---
>             >  
198c198
<            verbosity > 4) 
---
>               
198c198
<            verbosity > 4) 
---
>            verbosity  4) 
198c198
<            verbosity > 4) 
---
>            verbosity  ) 
(85.1 %, 30534 bytes)
198c198
<              4) 
---
>               
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              ) 
>            BZ_PARAM_ERROR;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>               
>            BZ_PARAM_ERROR;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              ) 
>           return ;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>               
>           return ;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              ) 
>            ;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>               
>            ;
198c198
<              4) 
---
>              4 
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>            BZ_PARAM_ERROR;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>           return ;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>            ;
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>           return BZ_PARAM_ERROR
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>            BZ_PARAM_ERROR
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>           return 
198,199c198,199
<              4) 
<           return BZ_PARAM_ERROR;
---
>              4 
>            
199c199
<           return BZ_PARAM_ERROR;
---
>            BZ_PARAM_ERROR;
199c199
<           return BZ_PARAM_ERROR;
---
>            ;
199c199
<           return BZ_PARAM_ERROR;
---
>            BZ_PARAM_ERROR
(85.1 %, 30528 bytes)
199c199
<            BZ_PARAM_ERROR;
---
>            ;
199c199
<            BZ_PARAM_ERROR;
---
>            
199c199
<            BZ_PARAM_ERROR;
---
>            ;
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc = NULL;
(85.1 %, 30514 bytes)
199c199
<            ;
---
>            
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    strmbzalloc = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    bzalloc = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    strm. = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    . = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>    strm = NULL;
199c199
<            ;
---
>            
201c201
<    strm.bzalloc = NULL;
---
>     = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    bzalloc = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    . = NULL;
201c201
<    strm.bzalloc = NULL;
---
>     = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc  NULL;
201c201
<    strm.bzalloc = NULL;
---
>    bzalloc  NULL;
(85.1 %, 30513 bytes)
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    bzalloc = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    . = NULL;
201c201
<    strm.bzalloc = NULL;
---
>     = NULL;
201c201
<    strm.bzalloc = NULL;
---
>    .bzalloc  NULL;
201c201
<    strm.bzalloc = NULL;
---
>    bzalloc  NULL;
201c201
<    strm.bzalloc = NULL;
---
>    .  NULL;
201c201
<    strm.bzalloc = NULL;
---
>      NULL;
(85.1 %, 30507 bytes)
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      ;
>    .bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      NULL
>    .bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      
>    .bzfree = NULL;
201c201
<    bzalloc  NULL;
---
>    bzalloc  ;
201c201
<    bzalloc  NULL;
---
>    bzalloc  
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    .bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    .bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    strmbzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    strmbzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    bzfree = NULL;
201c201
<    bzalloc  NULL;
---
>    bzalloc  NULL
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    .bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strmbzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    bzfree = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strm. = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    . = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strm = NULL;
201,202c201,202
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>     = NULL;
202c202
<    strm.bzfree = NULL;
---
>    .bzfree = NULL;
202c202
<    strm.bzfree = NULL;
---
>    bzfree = NULL;
202c202
<    strm.bzfree = NULL;
---
>    . = NULL;
202c202
<    strm.bzfree = NULL;
---
>     = NULL;
202c202
<    strm.bzfree = NULL;
---
>    .bzfree  NULL;
202c202
<    strm.bzfree = NULL;
---
>    bzfree  NULL;
202c202
<    strm.bzfree = NULL;
---
>    .  NULL;
202c202
<    strm.bzfree = NULL;
---
>      NULL;
(85.1 %, 30501 bytes)
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      ;
>    .opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      NULL
>    .opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      
>    .opaque = NULL;
202c202
<    bzfree  NULL;
---
>    bzfree  ;
202c202
<    bzfree  NULL;
---
>    bzfree  
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    .opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    .opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    strmopaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    strmopaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    opaque = NULL;
202c202
<    bzfree  NULL;
---
>    bzfree  NULL
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    .opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strmopaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    opaque = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strm. = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    . = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strm = NULL;
202,203c202,203
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>     = NULL;
203c203
<    strm.opaque = NULL;
---
>    .opaque = NULL;
203c203
<    strm.opaque = NULL;
---
>    opaque = NULL;
203c203
<    strm.opaque = NULL;
---
>    . = NULL;
203c203
<    strm.opaque = NULL;
---
>     = NULL;
203c203
<    strm.opaque = NULL;
---
>    .opaque  NULL;
203c203
<    strm.opaque = NULL;
---
>    opaque  NULL;
203c203
<    strm.opaque = NULL;
---
>    .  NULL;
203c203
<    strm.opaque = NULL;
---
>      NULL;
(85.1 %, 30495 bytes)
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>      ;
>     = 0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>      NULL
>     = 0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>      
>     = 0;
203c203
<    opaque  NULL;
---
>    opaque  ;
203c203
<    opaque  NULL;
---
>    opaque  
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>     = 0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>     = 0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>    ret  0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>    ret  0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>      0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>      0;
203c203
<    opaque  NULL;
---
>    opaque  NULL
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>     = 0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret  0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>      0;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret = ;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>     = ;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret  ;
203,204c203,204
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>      ;
204c204
<    ret = 0;
---
>     = 0;
204c204
<    ret = 0;
---
>      0;
(85.1 %, 30489 bytes)
204,205c204,205
<      ;
<    if (ret != BZ_OK) return ret;
---
>      
>      != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     (ret != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     ret != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     ( != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>      != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     (ret  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     ret  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>     (  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>       BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if  != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ret  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if   BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ret != ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if  != ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ret  ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if   ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ( != BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ( != ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (  ) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ( != BZ_OK return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (  BZ_OK return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if ( !=  return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (   return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (ret  BZ_OK) return ret;
205c205
<    if (ret != BZ_OK) return ret;
---
>    if (ret  ) return ret;
(85.1 %, 30484 bytes)
205c205
<    if (  BZ_OK) return ret;
---
>    if (   return ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  )  ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (    ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  ) return ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (   return ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  )  ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (    ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ret
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ret
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return 
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK)  ret;
205c205
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK)  ;
(85.1 %, 30478 bytes)
205c205
<    if (  BZ_OK)  ret;
---
>    if (  BZ_OK)  ;
205c205
<    if (  BZ_OK)  ret;
---
>    if (  BZ_OK)  
205c205
<    if (  BZ_OK)  ret;
---
>    if (  BZ_OK)  ;
207c207
<    strm_0 = source;
---
>     = source;
(85.1 %, 30475 bytes)
205c205
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
205c205
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
207c207
<    strm_0 = source;
---
>     = source;
205c205
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
207c207
<    strm_0 = source;
---
>    strm_0  source;
205c205
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
207c207
<    strm_0 = source;
---
>      source;
205c205
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
207c207
<    strm_0 = source;
---
>    strm_0 = ;
(85.1 %, 30474 bytes)
207c207
<    strm_0 = source;
---
>     = source;
207c207
<    strm_0 = source;
---
>      source;
207c207
<    strm_0 = source;
---
>     = ;
207c207
<    strm_0 = source;
---
>      ;
(85.1 %, 30467 bytes)
207c207
<      source;
---
>      
207,208c207,208
<      source;
<    strm_4 = dest;
---
>      ;
>     = dest;
207,208c207,208
<      source;
<    strm_4 = dest;
---
>      
>     = dest;
207,208c207,208
<      source;
<    strm_4 = dest;
---
>      ;
>    strm_4  dest;
207,208c207,208
<      source;
<    strm_4 = dest;
---
>      
>    strm_4  dest;
207,208c207,208
<      source;
<    strm_4 = dest;
---
>      ;
>      dest;
(85.1 %, 30460 bytes)
208c208
<    strm_4 = dest;
---
>      dest;
208c208
<    strm_4 = dest;
---
>     = ;
208c208
<    strm_4 = dest;
---
>      ;
(85.1 %, 30453 bytes)
208c208
<      dest;
---
>      
208,209c208,209
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>     = sourceLen;
208,209c208,209
<      dest;
<    strm_1 = sourceLen;
---
>      
>     = sourceLen;
208,209c208,209
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>    strm_1  sourceLen;
208,209c208,209
<      dest;
<    strm_1 = sourceLen;
---
>      
>    strm_1  sourceLen;
208,209c208,209
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>      sourceLen;
(85.1 %, 30448 bytes)
209c209
<    strm_1 = sourceLen;
---
>      sourceLen;
209c209
<    strm_1 = sourceLen;
---
>     = ;
209c209
<    strm_1 = sourceLen;
---
>      ;
(85.1 %, 30441 bytes)
209c209
<      sourceLen;
---
>      
209,210c209,210
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>     = *destLen;
209,210c209,210
<      sourceLen;
<    strm_5 = *destLen;
---
>      
>     = *destLen;
209,210c209,210
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>    strm_5  *destLen;
209,210c209,210
<      sourceLen;
<    strm_5 = *destLen;
---
>      
>    strm_5  *destLen;
209,210c209,210
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>      *destLen;
(85.2 %, 30431 bytes)
210c210
<    strm_5 = *destLen;
---
>      *destLen;
210c210
<    strm_5 = *destLen;
---
>     = destLen;
210c210
<    strm_5 = *destLen;
---
>      destLen;
(85.2 %, 30424 bytes)
210c210
<      *destLen;
---
>      ;
210c210
<      *destLen;
---
>      destLen
210c210
<      *destLen;
---
>      
210c210
<      *destLen;
---
>      destLen;
212c212
<    ret = 0;
---
>     = 0;
(85.2 %, 30416 bytes)
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>     = 0;
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>    ret  0;
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>      0;
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>    ret = ;
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>     = ;
210c210
<      ;
---
>      
212c212
<    ret = 0;
---
>    ret  ;
(85.2 %, 30411 bytes)
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      
>     (ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      ;
>    if ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      
>    if ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      ;
>     ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      
>     ret == BZ_OK) goto output_overflow_or_eof;
212c212
<      0;
---
>      0
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>     (ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>    if ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>     ret == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>    if ( == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>     ( == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>    if  == BZ_OK) goto output_overflow_or_eof;
212,213c212,213
<      0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      0
>      == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     (ret == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     ret == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     ( == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>      == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     (ret  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     ret  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>     (  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>       BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if  == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if   BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if  == ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret  ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if   ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ( == BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ( == ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (  ) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ( == BZ_OK goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ( ==  goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (   goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (ret  BZ_OK) goto output_overflow_or_eof;
213c213
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if (ret  ) goto output_overflow_or_eof;
(85.2 %, 30406 bytes)
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (   goto output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  )  output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (    output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  ) goto ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (   goto ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  )  ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (    ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK goto output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK  output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK goto ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK  ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK goto output_overflow_or_eof
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK  output_overflow_or_eof
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK goto 
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK  
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK)  output_overflow_or_eof;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK)  ;
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK)  output_overflow_or_eof
213c213
<    if (  BZ_OK) goto output_overflow_or_eof;
---
>    if (  BZ_OK)  
(85.2 %, 30380 bytes)
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>     (ret != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>    if ret != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>     ret != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>    if ( != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>     ( != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>    if  != BZ_STREAM_END) goto errhandler;
213,214c213,214
<    if (  BZ_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_OK)  
>      != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (ret != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ret != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ( != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>      != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (ret  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ret  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>       BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if   BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  != ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret  ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if   ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  ) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != BZ_STREAM_END goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( !=  goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (   goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (ret  BZ_STREAM_END) goto errhandler;
214c214
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (ret  ) goto errhandler;
(85.2 %, 30375 bytes)
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (   goto errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  )  errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (    errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  ) goto ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (   goto ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  )  ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (    ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  errhandler
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto 
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  errhandler;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  ;
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  errhandler
214c214
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  
(85.2 %, 30361 bytes)
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>    destLen -= strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>    * -= strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>     -= strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>    *destLen  strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>    destLen  strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>    *  strm_5;
214c214
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
217c217
<    *destLen -= strm_5;
---
>      strm_5;
(85.2 %, 30359 bytes)
217c217
<    destLen -= strm_5;
---
>      strm_5;
217c217
<    destLen -= strm_5;
---
>     -= ;
217c217
<    destLen -= strm_5;
---
>      ;
(85.2 %, 30350 bytes)
217c217
<      strm_5;
---
>      
217,218c217,218
<      strm_5;
<    0;
---
>      ;
>    ;
217,218c217,218
<      strm_5;
<    0;
---
>      
>    ;
(85.2 %, 30343 bytes)
218c218
<    0;
---
>    
218,219c218,219
<    0;
<    return BZ_OK;
---
>    ;
>     BZ_OK;
(85.2 %, 30341 bytes)
219c219
<    return BZ_OK;
---
>     ;
219c219
<    return BZ_OK;
---
>     BZ_OK
219c219
<    return BZ_OK;
---
>     
(85.2 %, 30330 bytes)
219c219
<     ;
---
>     
221c221
<    output_overflow_or_eof:
---
>    :
219c219
<     ;
---
>     
221c221
<    output_overflow_or_eof:
---
>    output_overflow_or_eof
219c219
<     ;
---
>     
221c221
<    output_overflow_or_eof:
---
>    
219c219
<     ;
---
>     
222c222
<    if (strm_5 > 0) {
---
>     (strm_5 > 0) {
219c219
<     ;
---
>     
221,222c221,222
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
---
>    :
>     (strm_5 > 0) {
219c219
<     ;
---
>     
221,222c221,222
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
---
>    output_overflow_or_eof
>     (strm_5 > 0) {
219c219
<     ;
---
>     
221,222c221,222
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
---
>    
>     (strm_5 > 0) {
221c221
<    output_overflow_or_eof:
---
>    :
221c221
<    output_overflow_or_eof:
---
>    
(85.2 %, 30306 bytes)
222c222
<    if (strm_5 > 0) {
---
>      > 0) {
222c222
<    if (strm_5 > 0) {
---
>     (strm_5  0) {
222c222
<    if (strm_5 > 0) {
---
>     strm_5  0) {
222c222
<    if (strm_5 > 0) {
---
>     (  0) {
222c222
<    if (strm_5 > 0) {
---
>       0) {
222c222
<    if (strm_5 > 0) {
---
>    if strm_5 > 0) {
222c222
<    if (strm_5 > 0) {
---
>    if  > 0) {
222c222
<    if (strm_5 > 0) {
---
>    if strm_5  0) {
222c222
<    if (strm_5 > 0) {
---
>    if   0) {
222c222
<    if (strm_5 > 0) {
---
>    if strm_5 > ) {
222c222
<    if (strm_5 > 0) {
---
>    if  > ) {
222c222
<    if (strm_5 > 0) {
---
>    if strm_5  ) {
222c222
<    if (strm_5 > 0) {
---
>    if   ) {
222c222
<    if (strm_5 > 0) {
---
>    if ( > 0) {
222c222
<    if (strm_5 > 0) {
---
>    if (  0) {
222c222
<    if (strm_5 > 0) {
---
>    if ( > ) {
222c222
<    if (strm_5 > 0) {
---
>    if (  ) {
222c222
<    if (strm_5 > 0) {
---
>    if ( > 0 {
222c222
<    if (strm_5 > 0) {
---
>    if (  0 {
222c222
<    if (strm_5 > 0) {
---
>    if ( >  {
222c222
<    if (strm_5 > 0) {
---
>    if (   {
222c222
<    if (strm_5 > 0) {
---
>    if (strm_5  0) {
222c222
<    if (strm_5 > 0) {
---
>    if (strm_5  ) {
(85.2 %, 30299 bytes)
222c222
<    if (  0) {
---
>    if (   {
222c222
<    if (  0) {
---
>    if (  ) 
222c222
<    if (  0) {
---
>    if (   
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  ) {
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (   {
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  ) 
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (   
>       ;
222c222
<    if (  0) {
---
>    if (  0 {
222c222
<    if (  0) {
---
>    if (  0 
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 {
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 {
>       0
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 
>       0
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 {
>       
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0 
>       
222c222
<    if (  0) {
---
>    if (  0) 
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0) 
>       ;
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0) 
>       0
222,223c222,223
<    if (  0) {
<       0;
---
>    if (  0) 
>       
222c222
<    if (  0) {
---
>    if (  0) 
224c224
<       return BZ_UNEXPECTED_EOF;
---
>        BZ_UNEXPECTED_EOF;
222,224c222,224
<    if (  0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    if (  0) 
>       ;
>        BZ_UNEXPECTED_EOF;
222,224c222,224
<    if (  0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    if (  0) 
>       0
>        BZ_UNEXPECTED_EOF;
222,224c222,224
<    if (  0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    if (  0) 
>       
>        BZ_UNEXPECTED_EOF;
223c223
<       0;
---
>       ;
223c223
<       0;
---
>       
(85.2 %, 30298 bytes)
223c223
<       ;
---
>       
223,224c223,224
<       ;
<       return BZ_UNEXPECTED_EOF;
---
>       
>        BZ_UNEXPECTED_EOF;
(85.2 %, 30297 bytes)
224c224
<       return BZ_UNEXPECTED_EOF;
---
>        BZ_UNEXPECTED_EOF;
224c224
<       return BZ_UNEXPECTED_EOF;
---
>        ;
224c224
<       return BZ_UNEXPECTED_EOF;
---
>        BZ_UNEXPECTED_EOF
(85.2 %, 30291 bytes)
224c224
<        BZ_UNEXPECTED_EOF;
---
>        ;
224c224
<        BZ_UNEXPECTED_EOF;
---
>        
(85.2 %, 30274 bytes)
224c224
<        ;
---
>        
224,225c224,225
<        ;
<    } else ;      
---
>        
>     else ;      
224,225c224,225
<        ;
<    } else ;      
---
>        
>    }  ;      
(85.2 %, 30273 bytes)
225c225
<    } else ;      
---
>     else ;      
225c225
<    } else ;      
---
>      ;      
225c225
<    } else ;      
---
>     else       
225c225
<    } else ;      
---
>            
225c225
<    } else ;      
---
>     else ;      
227c227
<    errhandler:
---
>    :
225c225
<    } else ;      
---
>      ;      
227c227
<    errhandler:
---
>    :
225c225
<    } else ;      
---
>     else       
227c227
<    errhandler:
---
>    :
225c225
<    } else ;      
---
>            
227c227
<    errhandler:
---
>    :
225c225
<    } else ;      
---
>    }  ;      
225c225
<    } else ;      
---
>    }        
(85.2 %, 30269 bytes)
225c225
<    }  ;      
---
>    }        
225c225
<    }  ;      
---
>    }        
227c227
<    errhandler:
---
>    :
225c225
<    }  ;      
---
>    }        
227c227
<    errhandler:
---
>    errhandler
225c225
<    }  ;      
---
>    }        
227c227
<    errhandler:
---
>    
(85.2 %, 30268 bytes)
227c227
<    errhandler:
---
>    :
227c227
<    errhandler:
---
>    
227,228c227,228
<    errhandler:
<    0;
---
>    :
>    ;
227,228c227,228
<    errhandler:
<    0;
---
>    
>    ;
(85.2 %, 30257 bytes)
228c228
<    0;
---
>    
228,229c228,229
<    0;
<    return ret; 
---
>    ;
>     ret; 
(85.2 %, 30255 bytes)
229c229
<    return ret; 
---
>     ; 
229c229
<    return ret; 
---
>     ret 
229c229
<    return ret; 
---
>      
(85.2 %, 30246 bytes)
229,230c229,230
<     ; 
< }
---
>      
> 
229c229
<     ; 
---
>      
235c235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion (
229,230c229
<     ; 
< }
---
>      
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const char * BZ_APIBZ2_bzlibVersion (
229c229
<     ; 
---
>      
235c235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN  char * BZ_APIBZ2_bzlibVersion (
229,230c229
<     ; 
< }
---
>      
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
> BZ_EXTERN  char * BZ_APIBZ2_bzlibVersion (
229c229
<     ; 
---
>      
235c235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>   char * BZ_APIBZ2_bzlibVersion (
229,230c229
<     ; 
< }
---
>      
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>   char * BZ_APIBZ2_bzlibVersion (
230c230
< }
---
> 
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const char * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
> BZ_EXTERN  char * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>   char * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
> BZ_EXTERN const  * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const  * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
> BZ_EXTERN   * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> 
>    * BZ_APIBZ2_bzlibVersion (
235c235
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion (
(85.2 %, 30236 bytes)
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const  * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>    * BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const char  BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>   char  BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>  const   BZ_APIBZ2_bzlibVersion (
230d229
< }
235c234,235
<  const char * BZ_APIBZ2_bzlibVersion (
---
> 
>     BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>   char * BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>    * BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>   char  BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>     BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>   char *  (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>    *  (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>   char   (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>      (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const  * BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const   BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const  *  (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const    (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const  * BZ_APIBZ2_bzlibVersion 
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const   BZ_APIBZ2_bzlibVersion 
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const  *  
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const    
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char  BZ_APIBZ2_bzlibVersion (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char   (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char  BZ_APIBZ2_bzlibVersion 
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char   
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char  BZ_APIBZ2_bzlibVersion (
>       
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char   (
>       
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char  BZ_APIBZ2_bzlibVersion 
>       
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char   
>       
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char *  (
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char *  
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char *  (
>       
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char *  
>       
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char *  (
237c237
<    );
---
>    ;
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char *  
237c237
<    );
---
>    ;
235,237c235,237
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>  const char *  (
>       
>    ;
235,237c235,237
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>  const char *  
>       
>    ;
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion 
235,236c235,236
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>  const char * BZ_APIBZ2_bzlibVersion 
>       
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion 
237c237
<    );
---
>    ;
235,237c235,237
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ_APIBZ2_bzlibVersion 
>       
>    ;
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion 
237c237
<    );
---
>    )
235,237c235,237
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ_APIBZ2_bzlibVersion 
>       
>    )
235c235
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * BZ_APIBZ2_bzlibVersion 
237c237
<    );
---
>    
235,237c235,237
<  const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ_APIBZ2_bzlibVersion 
>       
>    
236c236
<       void
---
>       
236,237c236,237
<       void
<    );
---
>       
>    ;
236,237c236,237
<       void
<    );
---
>       
>    )
236,237c236,237
<       void
<    );
---
>       
>    
236c236
<       void
---
>       
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE * BZ_APIBZ2_bzopen (
(85.2 %, 30232 bytes)
237c237
<    );
---
>    ;
237c237
<    );
---
>    
237c237
<    );
---
>    ;
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    ;
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN  * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN  * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    ;
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN  * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE  BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE  BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN   BZ_APIBZ2_bzopen (
237c237
<    );
---
>    )
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>    BZ_APIBZ2_bzopen (
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE * BZ_APIBZ2_bzopen (
239c239
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen (
(85.3 %, 30223 bytes)
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>    BZ_APIBZ2_bzopen (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>   *  (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>     (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen 
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>    BZ_APIBZ2_bzopen 
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>   *  
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>     
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE  BZ_APIBZ2_bzopen (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE   (
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE  BZ_APIBZ2_bzopen 
239c239
<  BZFILE * BZ_APIBZ2_bzopen (
---
>  BZFILE   
239,240c239,240
<  BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>  BZFILE  BZ_APIBZ2_bzopen (
>        char *path,
239,240c239,240
<  BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>  BZFILE   (
>        char *path,
239,240c239,240
<  BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>  BZFILE  BZ_APIBZ2_bzopen 
>        char *path,
239,240c239,240
<  BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>  BZFILE   
>        char *path,
(85.3 %, 30217 bytes)
239c239
<   * BZ_APIBZ2_bzopen (
---
>    BZ_APIBZ2_bzopen (
239c239
<   * BZ_APIBZ2_bzopen (
---
>     (
239c239
<   * BZ_APIBZ2_bzopen (
---
>    BZ_APIBZ2_bzopen 
239c239
<   * BZ_APIBZ2_bzopen (
---
>     
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>    BZ_APIBZ2_bzopen (
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>     (
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>    BZ_APIBZ2_bzopen 
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>     
>        char *path,
239c239
<   * BZ_APIBZ2_bzopen (
---
>   *  (
239c239
<   * BZ_APIBZ2_bzopen (
---
>   *  
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  (
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  (
>       const  *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  
>       const  *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  (
>         *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   *  
>         *path,
239c239
<   * BZ_APIBZ2_bzopen (
---
>   * BZ_APIBZ2_bzopen 
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>        char *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>       const  *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>         *path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>       const char path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>        char path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>       const  path,
239,240c239,240
<   * BZ_APIBZ2_bzopen (
<       const char *path,
---
>   * BZ_APIBZ2_bzopen 
>         path,
240c240
<       const char *path,
---
>        char *path,
240c240
<       const char *path,
---
>         *path,
240c240
<       const char *path,
---
>        char path,
240c240
<       const char *path,
---
>         path,
240c240
<       const char *path,
---
>        char *,
240c240
<       const char *path,
---
>         *,
240c240
<       const char *path,
---
>        char ,
240c240
<       const char *path,
---
>         ,
240c240
<       const char *path,
---
>       const  *path,
240c240
<       const char *path,
---
>       const  path,
240c240
<       const char *path,
---
>       const  *,
240c240
<       const char *path,
---
>       const  ,
240c240
<       const char *path,
---
>       const  *path
240c240
<       const char *path,
---
>       const  path
240c240
<       const char *path,
---
>       const  *
240c240
<       const char *path,
---
>       const  
240c240
<       const char *path,
---
>       const char path,
240c240
<       const char *path,
---
>       const char ,
240c240
<       const char *path,
---
>       const char path
240c240
<       const char *path,
---
>       const char 
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char path,
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char ,
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char path
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char 
>        char *mode
240c240
<       const char *path,
---
>       const char *,
240c240
<       const char *path,
---
>       const char *
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *,
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *,
>       const  *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *
>       const  *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *,
>         *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *
>         *mode
240c240
<       const char *path,
---
>       const char *path
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>        char *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>       const  *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>         *mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>       const char mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>        char mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>       const  mode
240,241c240,241
<       const char *path,
<       const char *mode
---
>       const char *path
>         mode
(85.3 %, 30213 bytes)
240c240
<       const char *,
---
>       const char *
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>        char *mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>       const  *mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>         *mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>       const char mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>        char mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>       const  mode
240,241c240,241
<       const char *,
<       const char *mode
---
>       const char *
>         mode
241c241
<       const char *mode
---
>        char *mode
241c241
<       const char *mode
---
>         *mode
241c241
<       const char *mode
---
>        char mode
241c241
<       const char *mode
---
>         mode
241c241
<       const char *mode
---
>        char *
241c241
<       const char *mode
---
>         *
241c241
<       const char *mode
---
>        char 
241c241
<       const char *mode
---
>         
241c241
<       const char *mode
---
>       const  *mode
241c241
<       const char *mode
---
>       const  mode
241c241
<       const char *mode
---
>       const  *
241c241
<       const char *mode
---
>       const  
241,242c241,242
<       const char *mode
<    );
---
>       const  *mode
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const  mode
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const  *
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const  
>    ;
241c241
<       const char *mode
---
>       const char mode
241c241
<       const char *mode
---
>       const char 
241,242c241,242
<       const char *mode
<    );
---
>       const char mode
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const char 
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const char mode
>    )
241,242c241,242
<       const char *mode
<    );
---
>       const char 
>    )
241,242c241,242
<       const char *mode
<    );
---
>       const char mode
>    
241,242c241,242
<       const char *mode
<    );
---
>       const char 
>    
241c241
<       const char *mode
---
>       const char *
241,242c241,242
<       const char *mode
<    );
---
>       const char *
>    ;
241,242c241,242
<       const char *mode
<    );
---
>       const char *
>    )
241,242c241,242
<       const char *mode
<    );
---
>       const char *
>    
241c241
<       const char *mode
---
>       const char *
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
>  * BZ_APIBZ2_bzopen
(85.3 %, 30209 bytes)
242c242
<    );
---
>    ;
242c242
<    );
---
>    
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    ;
>  * BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    
>  * BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    ;
> BZFILE  BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    
> BZFILE  BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    ;
>   BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    
>   BZ_APIBZ2_bzopen
242c242
<    );
---
>    )
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
>  * BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
> BZFILE  BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
>   BZ_APIBZ2_bzopen
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
> BZFILE * 
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
>  * 
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
> BZFILE  
242,243c242,243
<    );
< BZFILE * BZ_APIBZ2_bzopen
---
>    )
>   
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
>  * BZ_APIBZ2_bzopen
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
>   BZ_APIBZ2_bzopen
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
>  * 
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
>   
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * BZ_APIBZ2_bzopen
>                 const char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   BZ_APIBZ2_bzopen
>                 const char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                 const char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   
>                 const char *path,
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
> BZFILE  BZ_APIBZ2_bzopen
243c243
< BZFILE * BZ_APIBZ2_bzopen
---
> BZFILE  
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
> BZFILE  BZ_APIBZ2_bzopen
>                 const char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
> BZFILE  
>                 const char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
> BZFILE  BZ_APIBZ2_bzopen
>                (  char *path,
243,244c243,244
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
> BZFILE  
>                (  char *path,
(85.3 %, 30203 bytes)
243c243
<  * BZ_APIBZ2_bzopen
---
>   BZ_APIBZ2_bzopen
243c243
<  * BZ_APIBZ2_bzopen
---
>   
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   BZ_APIBZ2_bzopen
>                 const char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   
>                 const char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   BZ_APIBZ2_bzopen
>                (  char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   
>                (  char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   BZ_APIBZ2_bzopen
>                  char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>   
>                  char *path,
243c243
<  * BZ_APIBZ2_bzopen
---
>  * 
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                 const char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                (  char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                  char *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                ( const  *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                 const  *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                (   *path,
243,244c243,244
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  * 
>                   *path,
244c244
<                ( const char *path,
---
>                 const char *path,
244c244
<                ( const char *path,
---
>                  char *path,
244c244
<                ( const char *path,
---
>                 const  *path,
244c244
<                ( const char *path,
---
>                   *path,
244c244
<                ( const char *path,
---
>                 const char path,
244c244
<                ( const char *path,
---
>                  char path,
244c244
<                ( const char *path,
---
>                 const  path,
244c244
<                ( const char *path,
---
>                   path,
244c244
<                ( const char *path,
---
>                (  char *path,
244c244
<                ( const char *path,
---
>                (   *path,
244c244
<                ( const char *path,
---
>                (  char path,
244c244
<                ( const char *path,
---
>                (   path,
244c244
<                ( const char *path,
---
>                (  char *,
244c244
<                ( const char *path,
---
>                (   *,
244c244
<                ( const char *path,
---
>                (  char ,
244c244
<                ( const char *path,
---
>                (   ,
244c244
<                ( const char *path,
---
>                ( const  *path,
244c244
<                ( const char *path,
---
>                ( const  path,
244c244
<                ( const char *path,
---
>                ( const  *,
244c244
<                ( const char *path,
---
>                ( const  ,
244c244
<                ( const char *path,
---
>                ( const  *path
244c244
<                ( const char *path,
---
>                ( const  path
244c244
<                ( const char *path,
---
>                ( const  *
244c244
<                ( const char *path,
---
>                ( const  
244c244
<                ( const char *path,
---
>                ( const char path,
244c244
<                ( const char *path,
---
>                ( const char ,
244c244
<                ( const char *path,
---
>                ( const char path
244c244
<                ( const char *path,
---
>                ( const char 
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char path,
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char ,
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char path
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char 
>                   char *mode )
244c244
<                ( const char *path,
---
>                ( const char *,
244c244
<                ( const char *path,
---
>                ( const char *
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                  const  *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                  const  *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                    *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                    *mode )
244c244
<                ( const char *path,
---
>                ( const char *path
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                   char *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const  *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                    *mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const char mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                   char mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const  mode )
244,245c244,245
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                    mode )
245c245
<                  const char *mode )
---
>                   char *mode )
245c245
<                  const char *mode )
---
>                    *mode )
245c245
<                  const char *mode )
---
>                   char mode )
245c245
<                  const char *mode )
---
>                    mode )
245c245
<                  const char *mode )
---
>                   char * )
245c245
<                  const char *mode )
---
>                    * )
245c245
<                  const char *mode )
---
>                   char  )
245c245
<                  const char *mode )
---
>                     )
245c245
<                  const char *mode )
---
>                  const  *mode )
245c245
<                  const char *mode )
---
>                  const  mode )
245c245
<                  const char *mode )
---
>                  const  * )
245c245
<                  const char *mode )
---
>                  const   )
245c245
<                  const char *mode )
---
>                  const  *mode 
245c245
<                  const char *mode )
---
>                  const  mode 
245c245
<                  const char *mode )
---
>                  const  * 
245c245
<                  const char *mode )
---
>                  const   
245c245
<                  const char *mode )
---
>                  const char mode )
245c245
<                  const char *mode )
---
>                  const char  )
245c245
<                  const char *mode )
---
>                  const char mode 
245c245
<                  const char *mode )
---
>                  const char  
245,246c245,246
<                  const char *mode )
< {
---
>                  const char mode )
> 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char  )
> 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char mode 
> 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char  
> 
245c245
<                  const char *mode )
---
>                  const char * )
245c245
<                  const char *mode )
---
>                  const char * 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char * )
> 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char * 
> 
245c245
<                  const char *mode )
---
>                  const char * )
247c247
<    return 0;
---
>     0;
245c245
<                  const char *mode )
---
>                  const char * 
247c247
<    return 0;
---
>     0;
245,247c245,247
<                  const char *mode )
< {
<    return 0;
---
>                  const char * )
> 
>     0;
245,247c245,247
<                  const char *mode )
< {
<    return 0;
---
>                  const char * 
> 
>     0;
245c245
<                  const char *mode )
---
>                  const char *mode 
245,246c245,246
<                  const char *mode )
< {
---
>                  const char *mode 
> 
245c245
<                  const char *mode )
---
>                  const char *mode 
247c247
<    return 0;
---
>     0;
245,247c245,247
<                  const char *mode )
< {
<    return 0;
---
>                  const char *mode 
> 
>     0;
245c245
<                  const char *mode )
---
>                  const char *mode 
247c247
<    return 0;
---
>    return ;
245,247c245,247
<                  const char *mode )
< {
<    return 0;
---
>                  const char *mode 
> 
>    return ;
245c245
<                  const char *mode )
---
>                  const char *mode 
247c247
<    return 0;
---
>     ;
245,247c245,247
<                  const char *mode )
< {
<    return 0;
---
>                  const char *mode 
> 
>     ;
246c246
< {
---
> 
246,247c246,247
< {
<    return 0;
---
> 
>     0;
246,247c246,247
< {
<    return 0;
---
> 
>    return ;
246,247c246,247
< {
<    return 0;
---
> 
>     ;
246,247c246,247
< {
<    return 0;
---
> 
>    return 0
246,247c246,247
< {
<    return 0;
---
> 
>     0
246,247c246,247
< {
<    return 0;
---
> 
>    return 
246,247c246,247
< {
<    return 0;
---
> 
>     
247c247
<    return 0;
---
>     0;
247c247
<    return 0;
---
>     ;
247c247
<    return 0;
---
>     0
247c247
<    return 0;
---
>     
(85.3 %, 30197 bytes)
247c247
<     0;
---
>     ;
247c247
<     0;
---
>     
(85.3 %, 30196 bytes)
247c247
<     ;
---
>     
247,248c247,248
<     ;
< }
---
>     
> 
247c247
<     ;
---
>     
250c250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE * BZ_APIBZ2_bzdopen (
(85.3 %, 30195 bytes)
248c248
< }
---
> 
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
>  BZFILE * BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
> BZ_EXTERN  * BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
>   * BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
> BZ_EXTERN BZFILE  BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
>  BZFILE  BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
> BZ_EXTERN   BZ_APIBZ2_bzdopen (
248d247
< }
250c249,250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> 
>    BZ_APIBZ2_bzdopen (
250c250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE * BZ_APIBZ2_bzdopen (
250c250
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
>   * BZ_APIBZ2_bzdopen (
(85.3 %, 30186 bytes)
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>   * BZ_APIBZ2_bzdopen (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>    BZ_APIBZ2_bzdopen (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>   *  (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>     (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>   * BZ_APIBZ2_bzdopen 
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>    BZ_APIBZ2_bzdopen 
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>   *  
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>     
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE  BZ_APIBZ2_bzdopen (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE   (
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE  BZ_APIBZ2_bzdopen 
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE   
250,251c250,251
<  BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
---
>  BZFILE  BZ_APIBZ2_bzdopen (
>               d,
250,251c250,251
<  BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
---
>  BZFILE   (
>               d,
250,251c250,251
<  BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
---
>  BZFILE  BZ_APIBZ2_bzdopen 
>               d,
250,251c250,251
<  BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
---
>  BZFILE   
>               d,
250c250
<  BZFILE * BZ_APIBZ2_bzdopen (
---
>  BZFILE *  (
(85.3 %, 30180 bytes)
250c250
<   * BZ_APIBZ2_bzdopen (
---
>    BZ_APIBZ2_bzdopen (
250c250
<   * BZ_APIBZ2_bzdopen (
---
>     (
250c250
<   * BZ_APIBZ2_bzdopen (
---
>    BZ_APIBZ2_bzdopen 
250c250
<   * BZ_APIBZ2_bzdopen (
---
>     
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>    BZ_APIBZ2_bzdopen (
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>     (
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>    BZ_APIBZ2_bzdopen 
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>     
>               d,
250c250
<   * BZ_APIBZ2_bzdopen (
---
>   *  (
250c250
<   * BZ_APIBZ2_bzdopen (
---
>   *  
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  (
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  (
>       int        ,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  
>       int        ,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  (
>               ,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   *  
>               ,
250c250
<   * BZ_APIBZ2_bzdopen (
---
>   * BZ_APIBZ2_bzdopen 
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>               d,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>       int        ,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>               ,
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>       int        d
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>               d
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>       int        
250,251c250,251
<   * BZ_APIBZ2_bzdopen (
<       int        d,
---
>   * BZ_APIBZ2_bzdopen 
>               
251c251
<       int        d,
---
>               d,
251c251
<       int        d,
---
>               ,
251c251
<       int        d,
---
>               d
251c251
<       int        d,
---
>               
251,252c251,252
<       int        d,
<       const char *mode
---
>               d,
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>               ,
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>               d
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>               
>        char *mode
251c251
<       int        d,
---
>       int        ,
251c251
<       int        d,
---
>       int        
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        ,
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        ,
>       const  *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        
>       const  *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        ,
>         *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        
>         *mode
251c251
<       int        d,
---
>       int        d
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>        char *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>       const  *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>         *mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>       const char mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>        char mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>       const  mode
251,252c251,252
<       int        d,
<       const char *mode
---
>       int        d
>         mode
252c252
<       const char *mode
---
>        char *mode
(85.3 %, 30179 bytes)
251c251
<       int        ,
---
>       int        
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>        char *mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>       const  *mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>         *mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>       const char mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>        char mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>       const  mode
251,252c251,252
<       int        ,
<       const char *mode
---
>       int        
>         mode
252c252
<       const char *mode
---
>        char *mode
252c252
<       const char *mode
---
>         *mode
252c252
<       const char *mode
---
>        char mode
252c252
<       const char *mode
---
>         mode
252c252
<       const char *mode
---
>        char *
252c252
<       const char *mode
---
>         *
252c252
<       const char *mode
---
>        char 
252c252
<       const char *mode
---
>         
252c252
<       const char *mode
---
>       const  *mode
252c252
<       const char *mode
---
>       const  mode
252c252
<       const char *mode
---
>       const  *
252c252
<       const char *mode
---
>       const  
252,253c252,253
<       const char *mode
<    );
---
>       const  *mode
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const  mode
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const  *
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const  
>    ;
252c252
<       const char *mode
---
>       const char mode
252c252
<       const char *mode
---
>       const char 
252,253c252,253
<       const char *mode
<    );
---
>       const char mode
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const char 
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const char mode
>    )
252,253c252,253
<       const char *mode
<    );
---
>       const char 
>    )
252,253c252,253
<       const char *mode
<    );
---
>       const char mode
>    
252,253c252,253
<       const char *mode
<    );
---
>       const char 
>    
252c252
<       const char *mode
---
>       const char *
252,253c252,253
<       const char *mode
<    );
---
>       const char *
>    ;
252,253c252,253
<       const char *mode
<    );
---
>       const char *
>    )
252,253c252,253
<       const char *mode
<    );
---
>       const char *
>    
252c252
<       const char *mode
---
>       const char *
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int BZ_APIBZ2_bzread (
(85.3 %, 30175 bytes)
253c253
<    );
---
>    ;
253c253
<    );
---
>    
253c253
<    );
---
>    ;
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int BZ_APIBZ2_bzread (
253c253
<    );
---
>    
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int BZ_APIBZ2_bzread (
253c253
<    );
---
>    ;
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN  BZ_APIBZ2_bzread (
253c253
<    );
---
>    
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN  BZ_APIBZ2_bzread (
253c253
<    );
---
>    ;
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread (
253c253
<    );
---
>    
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread (
253c253
<    );
---
>    )
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int BZ_APIBZ2_bzread (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN  BZ_APIBZ2_bzread (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int  (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int  (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN   (
253c253
<    );
---
>    )
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>    (
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int BZ_APIBZ2_bzread (
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread (
255c255
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
>  int  (
(85.3 %, 30166 bytes)
255c255
<  int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread (
255c255
<  int BZ_APIBZ2_bzread (
---
>    (
255c255
<  int BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread 
255c255
<  int BZ_APIBZ2_bzread (
---
>    
255,256c255,256
<  int BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread (
>       * b, 
255,256c255,256
<  int BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    (
>       * b, 
255,256c255,256
<  int BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       * b, 
255,256c255,256
<  int BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    
>       * b, 
255c255
<  int BZ_APIBZ2_bzread (
---
>  int  (
(85.3 %, 30163 bytes)
255c255
<   BZ_APIBZ2_bzread (
---
>    (
255c255
<   BZ_APIBZ2_bzread (
---
>    
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    (
>       * b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    
>       * b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    (
>       BZFILE b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    
>       BZFILE b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    (
>        b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>    
>        b, 
255c255
<   BZ_APIBZ2_bzread (
---
>   BZ_APIBZ2_bzread 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       * b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       BZFILE b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>        b, 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       BZFILE* , 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       * , 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>       BZFILE , 
255,256c255,256
<   BZ_APIBZ2_bzread (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzread 
>        , 
256c256
<       BZFILE* b, 
---
>       * b, 
256c256
<       BZFILE* b, 
---
>        b, 
256c256
<       BZFILE* b, 
---
>       * , 
256c256
<       BZFILE* b, 
---
>        , 
256c256
<       BZFILE* b, 
---
>       * b 
256c256
<       BZFILE* b, 
---
>        b 
256c256
<       BZFILE* b, 
---
>       *  
256c256
<       BZFILE* b, 
---
>         
256c256
<       BZFILE* b, 
---
>       BZFILE b, 
256c256
<       BZFILE* b, 
---
>       BZFILE , 
256c256
<       BZFILE* b, 
---
>       BZFILE b 
256c256
<       BZFILE* b, 
---
>       BZFILE  
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE b, 
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE , 
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE b 
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE  
>       * buf, 
256c256
<       BZFILE* b, 
---
>       BZFILE* , 
256c256
<       BZFILE* b, 
---
>       BZFILE*  
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>       void buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>       void buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>        buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>        buf, 
256c256
<       BZFILE* b, 
---
>       BZFILE* b 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       * buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       void buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>        buf, 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       void* , 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       * , 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       void , 
256,257c256,257
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>        , 
257c257
<       void* buf, 
---
>       * buf, 
(85.3 %, 30162 bytes)
256c256
<       BZFILE* , 
---
>       BZFILE*  
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       * buf, 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void buf, 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>        buf, 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void* , 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       * , 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void , 
256,257c256,257
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>        , 
257c257
<       void* buf, 
---
>       * buf, 
257c257
<       void* buf, 
---
>        buf, 
257c257
<       void* buf, 
---
>       * , 
257c257
<       void* buf, 
---
>        , 
257c257
<       void* buf, 
---
>       * buf 
257c257
<       void* buf, 
---
>        buf 
257c257
<       void* buf, 
---
>       *  
257c257
<       void* buf, 
---
>         
257c257
<       void* buf, 
---
>       void buf, 
257c257
<       void* buf, 
---
>       void , 
257c257
<       void* buf, 
---
>       void buf 
257c257
<       void* buf, 
---
>       void  
257,258c257,258
<       void* buf, 
<       int len 
---
>       void buf, 
>        len 
257,258c257,258
<       void* buf, 
<       int len 
---
>       void , 
>        len 
257,258c257,258
<       void* buf, 
<       int len 
---
>       void buf 
>        len 
257,258c257,258
<       void* buf, 
<       int len 
---
>       void  
>        len 
257c257
<       void* buf, 
---
>       void* , 
257c257
<       void* buf, 
---
>       void*  
257,258c257,258
<       void* buf, 
<       int len 
---
>       void* , 
>        len 
257,258c257,258
<       void* buf, 
<       int len 
---
>       void*  
>        len 
257,258c257,258
<       void* buf, 
<       int len 
---
>       void* , 
>       int  
(85.3 %, 30159 bytes)
257c257
<       void* , 
---
>       void*  
257,258c257,258
<       void* , 
<       int len 
---
>       void*  
>        len 
257,258c257,258
<       void* , 
<       int len 
---
>       void*  
>       int  
257,258c257,258
<       void* , 
<       int len 
---
>       void*  
>         
257c257
<       void* , 
---
>       void*  
259c259
<    );
---
>    ;
257,259c257,259
<       void* , 
<       int len 
<    );
---
>       void*  
>        len 
>    ;
257,259c257,259
<       void* , 
<       int len 
<    );
---
>       void*  
>       int  
>    ;
257,259c257,259
<       void* , 
<       int len 
<    );
---
>       void*  
>         
>    ;
258c258
<       int len 
---
>        len 
258c258
<       int len 
---
>         
258,259c258,259
<       int len 
<    );
---
>        len 
>    ;
258,259c258,259
<       int len 
<    );
---
>         
>    ;
258,259c258,259
<       int len 
<    );
---
>        len 
>    )
258,259c258,259
<       int len 
<    );
---
>         
>    )
258,259c258,259
<       int len 
<    );
---
>        len 
>    
258,259c258,259
<       int len 
<    );
---
>         
>    
258c258
<       int len 
---
>       int  
258,259c258,259
<       int len 
<    );
---
>       int  
>    ;
258,259c258,259
<       int len 
<    );
---
>       int  
>    )
258,259c258,259
<       int len 
<    );
---
>       int  
>    
258c258
<       int len 
---
>       int  
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite (
(85.3 %, 30156 bytes)
259c259
<    );
---
>    ;
259c259
<    );
---
>    
259c259
<    );
---
>    ;
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    ;
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN  BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN  BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    ;
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    )
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN  BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int  (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int  (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN   (
259c259
<    );
---
>    )
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>    (
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite (
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite (
261c261
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>  int  (
(85.3 %, 30147 bytes)
261c261
<  int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite (
261c261
<  int BZ_APIBZ2_bzwrite (
---
>    (
261c261
<  int BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite 
261c261
<  int BZ_APIBZ2_bzwrite (
---
>    
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite (
>       * b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>       * b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       * b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    
>       * b, 
261c261
<  int BZ_APIBZ2_bzwrite (
---
>  int  (
261c261
<  int BZ_APIBZ2_bzwrite (
---
>  int  
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  (
>       * b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  
>       * b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  (
>       BZFILE b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  
>       BZFILE b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  (
>        b, 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int  
>        b, 
261c261
<  int BZ_APIBZ2_bzwrite (
---
>  int BZ_APIBZ2_bzwrite 
261,262c261,262
<  int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>  int BZ_APIBZ2_bzwrite 
>       * b, 
(85.3 %, 30144 bytes)
261c261
<   BZ_APIBZ2_bzwrite (
---
>    (
261c261
<   BZ_APIBZ2_bzwrite (
---
>    
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>       * b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    
>       * b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>       BZFILE b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    
>       BZFILE b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>        b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>    
>        b, 
261c261
<   BZ_APIBZ2_bzwrite (
---
>   BZ_APIBZ2_bzwrite 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       * b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       BZFILE b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>        b, 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       BZFILE* , 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       * , 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>       BZFILE , 
261,262c261,262
<   BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ_APIBZ2_bzwrite 
>        , 
262c262
<       BZFILE* b, 
---
>       * b, 
262c262
<       BZFILE* b, 
---
>        b, 
262c262
<       BZFILE* b, 
---
>       * , 
262c262
<       BZFILE* b, 
---
>        , 
262c262
<       BZFILE* b, 
---
>       * b 
262c262
<       BZFILE* b, 
---
>        b 
262c262
<       BZFILE* b, 
---
>       *  
262c262
<       BZFILE* b, 
---
>         
262c262
<       BZFILE* b, 
---
>       BZFILE b, 
262c262
<       BZFILE* b, 
---
>       BZFILE , 
262c262
<       BZFILE* b, 
---
>       BZFILE b 
262c262
<       BZFILE* b, 
---
>       BZFILE  
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
262c262
<       BZFILE* b, 
---
>       BZFILE* , 
262c262
<       BZFILE* b, 
---
>       BZFILE*  
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
262c262
<       BZFILE* b, 
---
>       BZFILE* b 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          buf, 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void*   , 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   , 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   , 
262,263c262,263
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          , 
(85.3 %, 30143 bytes)
262c262
<       BZFILE* , 
---
>       BZFILE*  
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
262,263c262,263
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
263c263
<       void*   buf, 
---
>       *   buf, 
263c263
<       void*   buf, 
---
>          buf, 
263c263
<       void*   buf, 
---
>       *   , 
263c263
<       void*   buf, 
---
>          , 
263c263
<       void*   buf, 
---
>       *   buf 
263c263
<       void*   buf, 
---
>          buf 
263c263
<       void*   buf, 
---
>       *    
263c263
<       void*   buf, 
---
>           
263c263
<       void*   buf, 
---
>       void   buf, 
263c263
<       void*   buf, 
---
>       void   , 
263c263
<       void*   buf, 
---
>       void   buf 
263c263
<       void*   buf, 
---
>       void    
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
263c263
<       void*   buf, 
---
>       void*   , 
263c263
<       void*   buf, 
---
>       void*    
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
263,264c263,264
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(85.3 %, 30140 bytes)
263c263
<       void*   , 
---
>       void*    
263,264c263,264
<       void*   , 
<       int     len 
---
>       void*    
>            len 
263,264c263,264
<       void*   , 
<       int     len 
---
>       void*    
>       int      
263,264c263,264
<       void*   , 
<       int     len 
---
>       void*    
>             
263c263
<       void*   , 
---
>       void*    
265c265
<    );
---
>    ;
263,265c263,265
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
263,265c263,265
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
263,265c263,265
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
264c264
<       int     len 
---
>            len 
264c264
<       int     len 
---
>             
264,265c264,265
<       int     len 
<    );
---
>            len 
>    ;
264,265c264,265
<       int     len 
<    );
---
>             
>    ;
264,265c264,265
<       int     len 
<    );
---
>            len 
>    )
264,265c264,265
<       int     len 
<    );
---
>             
>    )
264,265c264,265
<       int     len 
<    );
---
>            len 
>    
264,265c264,265
<       int     len 
<    );
---
>             
>    
264c264
<       int     len 
---
>       int      
264,265c264,265
<       int     len 
<    );
---
>       int      
>    ;
264,265c264,265
<       int     len 
<    );
---
>       int      
>    )
264,265c264,265
<       int     len 
<    );
---
>       int      
>    
264c264
<       int     len 
---
>       int      
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(85.3 %, 30137 bytes)
265c265
<    );
---
>    ;
265c265
<    );
---
>    
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    ;
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    ;
> int  (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    
> int  (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    ;
>   (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    
>   (BZFILE* b, void* buf, int len )
265c265
<    );
---
>    )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
> int  (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
>   (BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
>  BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
> int  BZFILE* b, void* buf, int len )
265,266c265,266
<    );
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    )
>   BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   (BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   (* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite * b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   * b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  (BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  BZFILE* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  (* b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  * b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  (BZFILE b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  BZFILE b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int  ( b, void* buf, int len )
266c266
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int   b, void* buf, int len )
(85.3 %, 30134 bytes)
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   (BZFILE* b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   BZFILE* b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   (* b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   * b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   (BZFILE b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   BZFILE b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>   ( b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite * b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite BZFILE b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite  b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite BZFILE* , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite * , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite BZFILE , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite  , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (* b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite ( b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (* , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite ( , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (* b void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite ( b void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (*  void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (  void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE b, void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE b void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE  void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE b, * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE , * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE b * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE  * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* , void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE*  void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* , * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE*  * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* , void buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE*  void buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* ,  buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE*   buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b void* buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b void buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b  buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b void* , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b * , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b void , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b  , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, * buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b,  buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, * , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b,  , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, * buf int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b,  buf int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, *  int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b,   int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void buf, int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void buf int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void  int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void buf,  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void ,  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void buf  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void   len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* , int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void*  int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* ,  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void*   len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* , int  )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void*  int  )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* ,   )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void*    )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf int len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf int  )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf   )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf int len 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf  len 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf int  
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf   
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,  len )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,   )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,  len 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,   
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,  len )
> 
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,   )
> 
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,  len 
> 
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf,   
> 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  )
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  )
> 
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  
> 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  )
268c268
<    int bzerr;
---
>     bzerr;
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  
268c268
<    int bzerr;
---
>     bzerr;
266,268c266,268
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  )
> 
>     bzerr;
266,268c266,268
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int  
> 
>     bzerr;
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
266,267c266,267
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
> 
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
268c268
<    int bzerr;
---
>     bzerr;
266,268c266,268
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
> 
>     bzerr;
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
268c268
<    int bzerr;
---
>    int ;
266,268c266,268
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
> 
>    int ;
266c266
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
268c268
<    int bzerr;
---
>     ;
266,268c266,268
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len 
> 
>     ;
267c267
< {
---
> 
267,268c267,268
< {
<    int bzerr;
---
> 
>     bzerr;
267,268c267,268
< {
<    int bzerr;
---
> 
>    int ;
267,268c267,268
< {
<    int bzerr;
---
> 
>     ;
267,268c267,268
< {
<    int bzerr;
---
> 
>    int bzerr
267,268c267,268
< {
<    int bzerr;
---
> 
>     bzerr
267,268c267,268
< {
<    int bzerr;
---
> 
>    int 
267,268c267,268
< {
<    int bzerr;
---
> 
>     
268c268
<    int bzerr;
---
>     bzerr;
268c268
<    int bzerr;
---
>     ;
268c268
<    int bzerr;
---
>     bzerr
268c268
<    int bzerr;
---
>     
268c268
<    int bzerr;
---
>     bzerr;
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>     ;
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>     bzerr
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>     
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>    int ;
268c268
<    int bzerr;
---
>    int 
268c268
<    int bzerr;
---
>    int ;
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>    int 
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>    int ;
271c271
<    if(bzerr == BZ_OK){
---
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int 
271c271
<    if(bzerr == BZ_OK){
---
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int ;
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int 
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
268c268
<    int bzerr;
---
>    int bzerr
270c270
<    ;
---
>    
268c268
<    int bzerr;
---
>    int bzerr
271c271
<    if(bzerr == BZ_OK){
---
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    (bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
271c271
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    ifbzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
271c271
<    if(bzerr == BZ_OK){
---
>    bzerr == BZ_OK){
268c268
<    int bzerr;
---
>    int bzerr
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    bzerr == BZ_OK){
270c270
<    ;
---
>    
(85.3 %, 30133 bytes)
270c270
<    ;
---
>    
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    (bzerr == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    ifbzerr == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    bzerr == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    if( == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    ( == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>    if == BZ_OK){
270,271c270,271
<    ;
<    if(bzerr == BZ_OK){
---
>    
>     == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    (bzerr == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    bzerr == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    ( == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>     == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    (bzerr  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    bzerr  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    (  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>      BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    if == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    ifbzerr  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    if  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    ifbzerr == ){
271c271
<    if(bzerr == BZ_OK){
---
>    if == ){
271c271
<    if(bzerr == BZ_OK){
---
>    ifbzerr  ){
271c271
<    if(bzerr == BZ_OK){
---
>    if  ){
271c271
<    if(bzerr == BZ_OK){
---
>    if( == BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    if(  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    if( == ){
271c271
<    if(bzerr == BZ_OK){
---
>    if(  ){
271c271
<    if(bzerr == BZ_OK){
---
>    if( == BZ_OK{
271c271
<    if(bzerr == BZ_OK){
---
>    if(  BZ_OK{
271c271
<    if(bzerr == BZ_OK){
---
>    if( == {
271c271
<    if(bzerr == BZ_OK){
---
>    if(  {
271c271
<    if(bzerr == BZ_OK){
---
>    if(bzerr  BZ_OK){
271c271
<    if(bzerr == BZ_OK){
---
>    if(bzerr  ){
(85.3 %, 30126 bytes)
271c271
<    if(  BZ_OK){
---
>    if(  {
271c271
<    if(  BZ_OK){
---
>    if(  )
271c271
<    if(  BZ_OK){
---
>    if(  
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  ){
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  {
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  )
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  
>        len;
271c271
<    if(  BZ_OK){
---
>    if(  BZ_OK{
271c271
<    if(  BZ_OK){
---
>    if(  BZ_OK
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK{
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK{
>       return ;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK
>       return ;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK{
>        ;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK
>        ;
271c271
<    if(  BZ_OK){
---
>    if(  BZ_OK)
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>        len;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>       return ;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>        ;
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>       return len
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>        len
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>       return 
271,272c271,272
<    if(  BZ_OK){
<       return len;
---
>    if(  BZ_OK)
>        
272c272
<       return len;
---
>        len;
272c272
<       return len;
---
>        ;
(85.3 %, 30120 bytes)
272c272
<        len;
---
>        ;
272c272
<        len;
---
>        
(85.3 %, 30117 bytes)
272c272
<        ;
---
>        
272,273c272,273
<        ;
<    }else{
---
>        
>    else{
272,273c272,273
<        ;
<    }else{
---
>        
>    }{
(85.3 %, 30116 bytes)
273c273
<    }else{
---
>    else{
273c273
<    }else{
---
>    {
273c273
<    }else{
---
>    else
273c273
<    }else{
---
>    
273,274c273,274
<    }else{
<       return -1;
---
>    else{
>        -1;
273,274c273,274
<    }else{
<       return -1;
---
>    {
>        -1;
273,274c273,274
<    }else{
<       return -1;
---
>    else
>        -1;
273,274c273,274
<    }else{
<       return -1;
---
>    
>        -1;
(85.3 %, 30110 bytes)
274c274
<       return -1;
---
>        ;
274c274
<       return -1;
---
>        -1
274c274
<       return -1;
---
>        1
274c274
<       return -1;
---
>        -
274c274
<       return -1;
---
>        
(85.3 %, 30102 bytes)
274,276c274,276
<        ;
<    }
< }
---
>        
>    
> 
274c274
<        ;
---
>        
278c278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>  int BZ_APIBZ2_bzflush (
274,275c274,275
<        ;
<    }
---
>        
>    
278c278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>  int BZ_APIBZ2_bzflush (
274c274
<        ;
---
>        
276d275
< }
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
>  int BZ_APIBZ2_bzflush (
274,276c274,275
<        ;
<    }
< }
---
>        
>    
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
>  int BZ_APIBZ2_bzflush (
275c275
<    }
---
>    
275,276c275,276
<    }
< }
---
>    
> 
275c275
<    }
---
>    
278c278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>  int BZ_APIBZ2_bzflush (
275,276c275
<    }
< }
---
>    
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
>  int BZ_APIBZ2_bzflush (
275c275
<    }
---
>    
278c278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN  BZ_APIBZ2_bzflush (
275,276c275
<    }
< }
---
>    
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
> BZ_EXTERN  BZ_APIBZ2_bzflush (
275c275
<    }
---
>    
278c278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>   BZ_APIBZ2_bzflush (
275,276c275
<    }
< }
---
>    
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
>   BZ_APIBZ2_bzflush (
276c276
< }
---
> 
276d275
< }
278c277,278
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> 
>  int BZ_APIBZ2_bzflush (
(85.3 %, 30092 bytes)
275c275
<    }
---
>    
278c278
<  int BZ_APIBZ2_bzflush (
---
>  int  (
275,276c275
<    }
< }
---
>    
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>  int  (
275c275
<    }
---
>    
278c278
<  int BZ_APIBZ2_bzflush (
---
>    (
275,276c275
<    }
< }
---
>    
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>    (
276c276
< }
---
> 
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>   BZ_APIBZ2_bzflush (
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>  int  (
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>    (
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>  int BZ_APIBZ2_bzflush 
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>   BZ_APIBZ2_bzflush 
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>  int  
276d275
< }
278c277,278
<  int BZ_APIBZ2_bzflush (
---
> 
>    
278c278
<  int BZ_APIBZ2_bzflush (
---
>   BZ_APIBZ2_bzflush (
278c278
<  int BZ_APIBZ2_bzflush (
---
>    (
278c278
<  int BZ_APIBZ2_bzflush (
---
>   BZ_APIBZ2_bzflush 
278c278
<  int BZ_APIBZ2_bzflush (
---
>    
278,279c278,279
<  int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>   BZ_APIBZ2_bzflush (
>       * b
278,279c278,279
<  int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    (
>       * b
(85.3 %, 30089 bytes)
278c278
<   BZ_APIBZ2_bzflush (
---
>    (
278c278
<   BZ_APIBZ2_bzflush (
---
>    
278,279c278,279
<   BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    (
>       * b
278,279c278,279
<   BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    
>       * b
278,279c278,279
<   BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    (
>       BZFILE b
278,279c278,279
<   BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    
>       BZFILE b
278,279c278,279
<   BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>    (
>        b
(85.3 %, 30066 bytes)
278,279c278,279
<    (
<       * b
---
>    
>       * 
278,279c278,279
<    (
<       * b
---
>    
>        
278c278
<    (
---
>    
280c280
<    );
---
>    ;
278,280c278,280
<    (
<       * b
<    );
---
>    
>        b
>    ;
(85.3 %, 30064 bytes)
279c279
<       * b
---
>        b
281c281
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
>  BZ_APIBZ2_bzflush (BZFILE *b)
279c279
<       * b
---
>        
281c281
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
>  BZ_APIBZ2_bzflush (BZFILE *b)
(85.3 %, 30060 bytes)
279c279
<        b
---
>        
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>  BZ_APIBZ2_bzflush BZFILE *b)
279,281c279,281
<        b
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>        
>    
>  BZ_APIBZ2_bzflush BZFILE *b)
279c279
<        b
---
>        
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   BZFILE *b)
279,281c279,281
<        b
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>        
>    
>   BZFILE *b)
280c280
<    ;
---
>    
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>   (BZFILE *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>  BZ_APIBZ2_bzflush BZFILE *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>   BZFILE *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>  BZ_APIBZ2_bzflush ( *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>   ( *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>  BZ_APIBZ2_bzflush  *b)
280,281c280,281
<    ;
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    
>    *b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   (BZFILE *b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   BZFILE *b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   ( *b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    *b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   (BZFILE b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   BZFILE b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>   ( b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>    b)
281c281
<  BZ_APIBZ2_bzflush (BZFILE *b)
---
>  BZ_APIBZ2_bzflush BZFILE *b)
(85.3 %, 30042 bytes)
281c281
<   (BZFILE *b)
---
>    *b)
281c281
<   (BZFILE *b)
---
>   BZFILE b)
281c281
<   (BZFILE *b)
---
>    b)
281c281
<   (BZFILE *b)
---
>   BZFILE *)
281c281
<   (BZFILE *b)
---
>    *)
281c281
<   (BZFILE *b)
---
>   BZFILE )
281c281
<   (BZFILE *b)
---
>    )
281c281
<   (BZFILE *b)
---
>   ( *b)
281c281
<   (BZFILE *b)
---
>   ( b)
281c281
<   (BZFILE *b)
---
>   ( *)
281c281
<   (BZFILE *b)
---
>   ( )
(85.3 %, 30035 bytes)
281c281
<   ( b)
---
>   ( 
281,282c281,282
<   ( b)
< {
---
>   ( )
> 
281,282c281,282
<   ( b)
< {
---
>   ( 
> 
281c281
<   ( b)
---
>   ( )
284c284
<    return 0;
---
>     0;
281c281
<   ( b)
---
>   ( 
284c284
<    return 0;
---
>     0;
281,282c281,282
<   ( b)
< {
---
>   ( )
> 
284c284
<    return 0;
---
>     0;
281,282c281,282
<   ( b)
< {
---
>   ( 
> 
284c284
<    return 0;
---
>     0;
281c281
<   ( b)
---
>   ( b
281,282c281,282
<   ( b)
< {
---
>   ( b
> 
281c281
<   ( b)
---
>   ( b
284c284
<    return 0;
---
>     0;
281,282c281,282
<   ( b)
< {
---
>   ( b
> 
284c284
<    return 0;
---
>     0;
281c281
<   ( b)
---
>   ( b
284c284
<    return 0;
---
>    return ;
281,282c281,282
<   ( b)
< {
---
>   ( b
> 
284c284
<    return 0;
---
>    return ;
281c281
<   ( b)
---
>   ( b
284c284
<    return 0;
---
>     ;
281,282c281,282
<   ( b)
< {
---
>   ( b
> 
284c284
<    return 0;
---
>     ;
282c282
< {
---
> 
282c282
< {
---
> 
284c284
<    return 0;
---
>     0;
282c282
< {
---
> 
284c284
<    return 0;
---
>    return ;
(85.3 %, 30028 bytes)
281c281
<   ( )
---
>   ( 
284c284
<     0;
---
>     0
281,282c281,282
<   ( )
< {
---
>   ( 
> 
284c284
<     0;
---
>     0
281c281
<   ( )
---
>   ( 
284c284
<     0;
---
>     
281,282c281,282
<   ( )
< {
---
>   ( 
> 
284c284
<     0;
---
>     
282c282
< {
---
> 
282c282
< {
---
> 
284c284
<     0;
---
>     ;
282c282
< {
---
> 
284c284
<     0;
---
>     0
282c282
< {
---
> 
284c284
<     0;
---
>     
282c282
< {
---
> 
285c285
< }
---
> 
282c282
< {
---
> 
284,285c284,285
<     0;
< }
---
>     ;
> 
282c282
< {
---
> 
284,285c284,285
<     0;
< }
---
>     0
> 
282c282
< {
---
> 
284,285c284,285
<     0;
< }
---
>     
> 
284c284
<     0;
---
>     ;
(85.3 %, 30025 bytes)
284c284
<     ;
---
>     
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>  void  (
284c284
<     ;
---
>     
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN   (
284c284
<     ;
---
>     
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>    (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>  void BZ_APIBZ2_bzclose (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>   BZ_APIBZ2_bzclose (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>  void  (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>    (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>  void BZ_APIBZ2_bzclose 
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>   BZ_APIBZ2_bzclose 
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>  void  
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
>    
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN  BZ_APIBZ2_bzclose (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN   (
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN  BZ_APIBZ2_bzclose 
287c287
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN   
287,288c287,288
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> BZ_EXTERN  BZ_APIBZ2_bzclose (
>       * b
287,288c287,288
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> BZ_EXTERN   (
>       * b
(85.4 %, 30016 bytes)
287c287
<  void BZ_APIBZ2_bzclose (
---
>   BZ_APIBZ2_bzclose (
287c287
<  void BZ_APIBZ2_bzclose (
---
>    (
287c287
<  void BZ_APIBZ2_bzclose (
---
>   BZ_APIBZ2_bzclose 
287c287
<  void BZ_APIBZ2_bzclose (
---
>    
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>   BZ_APIBZ2_bzclose (
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>    (
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>   BZ_APIBZ2_bzclose 
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>    
>       * b
287c287
<  void BZ_APIBZ2_bzclose (
---
>  void  (
287c287
<  void BZ_APIBZ2_bzclose (
---
>  void  
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  (
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  (
>       BZFILE b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  
>       BZFILE b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  (
>        b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void  
>        b
287c287
<  void BZ_APIBZ2_bzclose (
---
>  void BZ_APIBZ2_bzclose 
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>       * b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>       BZFILE b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>        b
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>       BZFILE* 
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>       * 
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>       BZFILE 
287,288c287,288
<  void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
>  void BZ_APIBZ2_bzclose 
>        
288c288
<       BZFILE* b
---
>       * b
288c288
<       BZFILE* b
---
>        b
288c288
<       BZFILE* b
---
>       * 
288c288
<       BZFILE* b
---
>        
288,289c288,289
<       BZFILE* b
<    );
---
>       * b
>    ;
288,289c288,289
<       BZFILE* b
<    );
---
>        b
>    ;
288,289c288,289
<       BZFILE* b
<    );
---
>       * 
>    ;
288,289c288,289
<       BZFILE* b
<    );
---
>        
>    ;
288c288
<       BZFILE* b
---
>       BZFILE b
288c288
<       BZFILE* b
---
>       BZFILE 
288,289c288,289
<       BZFILE* b
<    );
---
>       BZFILE b
>    ;
288,289c288,289
<       BZFILE* b
<    );
---
>       BZFILE 
>    ;
288,289c288,289
<       BZFILE* b
<    );
---
>       BZFILE b
>    )
288,289c288,289
<       BZFILE* b
<    );
---
>       BZFILE 
>    )
288,289c288,289
<       BZFILE* b
<    );
---
>       BZFILE b
>    
(85.4 %, 30008 bytes)
289c289
<    );
---
>    
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    ;
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    ;
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>   char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>   char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>   char * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const  * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const  * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN   * BZ_APIBZ2_bzerror (
289c289
<    );
---
>    )
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const char * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>   char * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const  * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const char  BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>   char  BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>  const   BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>     BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN   * BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char  BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN    BZ_APIBZ2_bzerror (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char *  (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN   *  (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN  char   (
291c291
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN     (
(85.4 %, 29999 bytes)
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>   char * BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>    * BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>   char  BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>     BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>   char *  (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>    *  (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>   char   (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>      (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const  * BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const   BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const  *  (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const    (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const  * BZ_APIBZ2_bzerror 
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const   BZ_APIBZ2_bzerror 
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const  *  
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const    
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char  BZ_APIBZ2_bzerror (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char   (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char  BZ_APIBZ2_bzerror 
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char   
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char  BZ_APIBZ2_bzerror (
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char   (
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char  BZ_APIBZ2_bzerror 
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char   
>        *b, 
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char *  (
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char *  
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>       BZFILE b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>       BZFILE b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>        b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>        b, 
291c291
<  const char * BZ_APIBZ2_bzerror (
---
>  const char * BZ_APIBZ2_bzerror 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>        *b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>       BZFILE b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>        b, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>       BZFILE *, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>        *, 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>       BZFILE , 
291,292c291,292
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ_APIBZ2_bzerror 
>        , 
292c292
<       BZFILE *b, 
---
>        *b, 
292c292
<       BZFILE *b, 
---
>        b, 
292c292
<       BZFILE *b, 
---
>        *, 
292c292
<       BZFILE *b, 
---
>        , 
292c292
<       BZFILE *b, 
---
>        *b 
292c292
<       BZFILE *b, 
---
>        b 
292c292
<       BZFILE *b, 
---
>        * 
292c292
<       BZFILE *b, 
---
>         
292c292
<       BZFILE *b, 
---
>       BZFILE b, 
292c292
<       BZFILE *b, 
---
>       BZFILE , 
292c292
<       BZFILE *b, 
---
>       BZFILE b 
292c292
<       BZFILE *b, 
---
>       BZFILE  
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE b, 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE , 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE b 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE  
>           *errnum
292c292
<       BZFILE *b, 
---
>       BZFILE *, 
292c292
<       BZFILE *b, 
---
>       BZFILE * 
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>       int    errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>       int    errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>           errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>           errnum
292c292
<       BZFILE *b, 
---
>       BZFILE *b 
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           *errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           errnum
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    *
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           *
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    
292,293c292,293
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           
293c293
<       int    *errnum
---
>           *errnum
(85.4 %, 29998 bytes)
292c292
<       BZFILE *, 
---
>       BZFILE * 
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           *errnum
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    errnum
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           errnum
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    *
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           *
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    
292,293c292,293
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           
293c293
<       int    *errnum
---
>           *errnum
293c293
<       int    *errnum
---
>           errnum
293c293
<       int    *errnum
---
>           *
293c293
<       int    *errnum
---
>           
293,294c293,294
<       int    *errnum
<    );
---
>           *errnum
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>           errnum
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>           *
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>           
>    ;
293c293
<       int    *errnum
---
>       int    errnum
293c293
<       int    *errnum
---
>       int    
293,294c293,294
<       int    *errnum
<    );
---
>       int    errnum
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>       int    
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>       int    errnum
>    )
293,294c293,294
<       int    *errnum
<    );
---
>       int    
>    )
293,294c293,294
<       int    *errnum
<    );
---
>       int    errnum
>    
293,294c293,294
<       int    *errnum
<    );
---
>       int    
>    
293c293
<       int    *errnum
---
>       int    *
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    ;
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    )
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    
293c293
<       int    *errnum
---
>       int    *
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
293,294c293,294
<       int    *errnum
<    );
---
>       int    *
>    
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    ;
294c294
<    );
---
>    
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
(85.4 %, 29992 bytes)
294c294
<    );
---
>    ;
294c294
<    );
---
>    
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
294c294
<    );
---
>    ;
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
294c294
<    );
---
>    
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
294c294
<    );
---
>    )
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> #define 
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> define 
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
> # 
294c294
<    );
---
>    )
304c304
< #define _BZLIB_PRIVATE_H
---
>  
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
304c304
< #define _BZLIB_PRIVATE_H
---
> define 
304c304
< #define _BZLIB_PRIVATE_H
---
>  
304c304
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
306c306
< #include <stdlib.h>
---
> include <stdlib.h>
304c304
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
306c306
< #include <stdlib.h>
---
> include <stdlib.h>
304c304
< #define _BZLIB_PRIVATE_H
---
> define 
306c306
< #include <stdlib.h>
---
> include <stdlib.h>
304c304
< #define _BZLIB_PRIVATE_H
---
>  
306c306
< #include <stdlib.h>
---
> include <stdlib.h>
304c304
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
304c304
< #define _BZLIB_PRIVATE_H
---
> # 
(85.4 %, 29969 bytes)
306c306
< #include <stdlib.h>
---
>  stdlib.h>
306c306
< #include <stdlib.h>
---
> include <.h>
306c306
< #include <stdlib.h>
---
>  <.h>
306c306
< #include <stdlib.h>
---
> include .h>
306c306
< #include <stdlib.h>
---
>  .h>
306c306
< #include <stdlib.h>
---
> # <stdlib.h>
306c306
< #include <stdlib.h>
---
> # stdlib.h>
306c306
< #include <stdlib.h>
---
> # <.h>
306c306
< #include <stdlib.h>
---
> # .h>
306c306
< #include <stdlib.h>
---
> # <stdlibh>
306c306
< #include <stdlib.h>
---
> # stdlibh>
306c306
< #include <stdlib.h>
---
> # <h>
306c306
< #include <stdlib.h>
---
> # h>
306c306
< #include <stdlib.h>
---
> #include stdlib.h>
306c306
< #include <stdlib.h>
---
> #include .h>
306c306
< #include <stdlib.h>
---
> #include stdlibh>
306c306
< #include <stdlib.h>
---
> #include h>
306c306
< #include <stdlib.h>
---
> #include stdlib.>
306c306
< #include <stdlib.h>
---
> #include .>
306c306
< #include <stdlib.h>
---
> #include stdlib>
306c306
< #include <stdlib.h>
---
> #include >
306c306
< #include <stdlib.h>
---
> #include <.h>
306c306
< #include <stdlib.h>
---
> #include <h>
306c306
< #include <stdlib.h>
---
> #include <.>
306c306
< #include <stdlib.h>
---
> #include <>
306c306
< #include <stdlib.h>
---
> #include <.h
306c306
< #include <stdlib.h>
---
> #include <h
306c306
< #include <stdlib.h>
---
> #include <.
306c306
< #include <stdlib.h>
---
> #include <
306c306
< #include <stdlib.h>
---
> #include <stdlibh>
306c306
< #include <stdlib.h>
---
> #include <stdlib>
306c306
< #include <stdlib.h>
---
> #include <stdlibh
306c306
< #include <stdlib.h>
---
> #include <stdlib
306c306
< #include <stdlib.h>
---
> #include <stdlibh>
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib>
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlibh
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.>
306c306
< #include <stdlib.h>
---
> #include <stdlib.
306c306
< #include <stdlib.h>
---
> #include <stdlib.>
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.>
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.>
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
306c306
< #include <stdlib.h>
---
> #include <stdlib.h
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
314c314
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
314c314
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
314c314
< typedef unsigned char   Bool;
---
>   char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
314c314
< typedef unsigned char   Bool;
---
>   char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
>   char   Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
> typedef unsigned    Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
>  unsigned    Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
> typedef     Bool;
311c311
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
314c314
< typedef unsigned char   Bool;
---
>      Bool;
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
314c314
< typedef unsigned char   Bool;
---
>   char   Bool;
314c314
< typedef unsigned char   Bool;
---
>  unsigned    Bool;
314c314
< typedef unsigned char   Bool;
---
>      Bool;
314c314
< typedef unsigned char   Bool;
---
>  unsigned char   ;
314c314
< typedef unsigned char   Bool;
---
>   char   ;
314c314
< typedef unsigned char   Bool;
---
>  unsigned    ;
314c314
< typedef unsigned char   Bool;
---
>      ;
314c314
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
314c314
< typedef unsigned char   Bool;
---
> typedef     Bool;
(85.4 %, 29961 bytes)
314c314
< typedef  char   Bool;
---
> typedef     Bool;
314c314
< typedef  char   Bool;
---
> typedef     ;
314c314
< typedef  char   Bool;
---
> typedef     Bool
314c314
< typedef  char   Bool;
---
> typedef     
314c314
< typedef  char   Bool;
---
> typedef     Bool;
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef  char   Bool;
---
> typedef     ;
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef  char   Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef  char   Bool;
---
> typedef     
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef  char   Bool;
---
> typedef  char   ;
314c314
< typedef  char   Bool;
---
> typedef  char   
(85.4 %, 29957 bytes)
314c314
< typedef     Bool;
---
> typedef     ;
314c314
< typedef     Bool;
---
> typedef     
314c314
< typedef     Bool;
---
> typedef     ;
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef     Bool;
---
> typedef     
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef     Bool;
---
> typedef     ;
316c316
< typedef int             Int32;
---
> typedef              Int32;
314c314
< typedef     Bool;
---
> typedef     
316c316
< typedef int             Int32;
---
> typedef              Int32;
314c314
< typedef     Bool;
---
> typedef     ;
316c316
< typedef int             Int32;
---
>               Int32;
314c314
< typedef     Bool;
---
> typedef     
316c316
< typedef int             Int32;
---
>               Int32;
314c314
< typedef     Bool;
---
> typedef     Bool
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
>  int             Int32;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
> typedef              Int32;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
>               Int32;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
> typedef int             ;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
>  int             ;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
> typedef              ;
314c314
< typedef     Bool;
---
> typedef     Bool
316c316
< typedef int             Int32;
---
>               ;
316c316
< typedef int             Int32;
---
>  int             Int32;
316c316
< typedef int             Int32;
---
>               Int32;
316c316
< typedef int             Int32;
---
>  int             ;
316c316
< typedef int             Int32;
---
>               ;
316c316
< typedef int             Int32;
---
>  int             Int32
316c316
< typedef int             Int32;
---
>               Int32
316c316
< typedef int             Int32;
---
>  int             
316c316
< typedef int             Int32;
---
>               
316c316
< typedef int             Int32;
---
> typedef              Int32;
316c316
< typedef int             Int32;
---
> typedef              ;
316c316
< typedef int             Int32;
---
> typedef              Int32
316c316
< typedef int             Int32;
---
> typedef              
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32;
>  unsigned int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
316c316
< typedef int             Int32;
---
> typedef int             ;
316c316
< typedef int             Int32;
---
> typedef int             
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
>  unsigned int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             
>  unsigned int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
> typedef  int    UInt32;
316,317c316,317
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             
> typedef  int    UInt32;
(85.4 %, 29954 bytes)
316c316
< typedef              Int32;
---
> typedef              ;
316c316
< typedef              Int32;
---
> typedef              
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
> typedef  int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
> typedef  int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>   int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>   int    UInt32;
316c316
< typedef              Int32;
---
> typedef              Int32
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef  int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>   int    UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef unsigned     UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned     UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef      UInt32;
316,317c316,317
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>       UInt32;
317c317
< typedef unsigned int    UInt32;
---
>  unsigned int    UInt32;
317c317
< typedef unsigned int    UInt32;
---
>   int    UInt32;
317c317
< typedef unsigned int    UInt32;
---
>  unsigned     UInt32;
317c317
< typedef unsigned int    UInt32;
---
>       UInt32;
317c317
< typedef unsigned int    UInt32;
---
>  unsigned int    ;
317c317
< typedef unsigned int    UInt32;
---
>   int    ;
317c317
< typedef unsigned int    UInt32;
---
>  unsigned     ;
317c317
< typedef unsigned int    UInt32;
---
>       ;
317c317
< typedef unsigned int    UInt32;
---
> typedef  int    UInt32;
317c317
< typedef unsigned int    UInt32;
---
> typedef      UInt32;
(85.4 %, 29946 bytes)
317c317
< typedef  int    UInt32;
---
> typedef      UInt32;
317c317
< typedef  int    UInt32;
---
> typedef      ;
317c317
< typedef  int    UInt32;
---
> typedef      UInt32
317c317
< typedef  int    UInt32;
---
> typedef      
317c317
< typedef  int    UInt32;
---
> typedef      UInt32;
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef      ;
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef      
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef  int    ;
317c317
< typedef  int    UInt32;
---
> typedef  int    
317c317
< typedef  int    UInt32;
---
> typedef  int    ;
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef  int    
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef  int    ;
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef  int    
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
317c317
< typedef  int    UInt32;
---
> typedef  int    ;
321c321
< #define True  (Bool)1
---
>  True  (Bool)1
(85.4 %, 29943 bytes)
317c317
< typedef      UInt32;
---
> typedef      ;
317c317
< typedef      UInt32;
---
> typedef      
317c317
< typedef      UInt32;
---
> typedef      ;
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      ;
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      ;
321c321
< #define True  (Bool)1
---
>  True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      
321c321
< #define True  (Bool)1
---
>  True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
>  True  (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> #define   (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> define   (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
> #   (Bool)1
317c317
< typedef      UInt32;
---
> typedef      UInt32
321c321
< #define True  (Bool)1
---
>    (Bool)1
321c321
< #define True  (Bool)1
---
> define True  (Bool)1
321c321
< #define True  (Bool)1
---
>  True  (Bool)1
321c321
< #define True  (Bool)1
---
> define   (Bool)1
321c321
< #define True  (Bool)1
---
>    (Bool)1
321c321
< #define True  (Bool)1
---
> define True  Bool)1
321c321
< #define True  (Bool)1
---
>  True  Bool)1
321c321
< #define True  (Bool)1
---
> define   Bool)1
321c321
< #define True  (Bool)1
---
>    Bool)1
321c321
< #define True  (Bool)1
---
> # True  (Bool)1
321c321
< #define True  (Bool)1
---
> #   (Bool)1
321c321
< #define True  (Bool)1
---
> # True  Bool)1
321c321
< #define True  (Bool)1
---
> #   Bool)1
321c321
< #define True  (Bool)1
---
> # True  ()1
321c321
< #define True  (Bool)1
---
> #   ()1
321c321
< #define True  (Bool)1
---
> # True  )1
321c321
< #define True  (Bool)1
---
> #   )1
321c321
< #define True  (Bool)1
---
> #define   (Bool)1
321c321
< #define True  (Bool)1
---
> #define   Bool)1
321c321
< #define True  (Bool)1
---
> #define   ()1
321c321
< #define True  (Bool)1
---
> #define   )1
321c321
< #define True  (Bool)1
---
> #define   (Bool1
321c321
< #define True  (Bool)1
---
> #define   Bool1
321c321
< #define True  (Bool)1
---
> #define   (1
321c321
< #define True  (Bool)1
---
> #define   1
321c321
< #define True  (Bool)1
---
> #define True  Bool)1
321c321
< #define True  (Bool)1
---
> #define True  )1
321c321
< #define True  (Bool)1
---
> #define True  Bool1
321c321
< #define True  (Bool)1
---
> #define True  1
321c321
< #define True  (Bool)1
---
> #define True  Bool)
321c321
< #define True  (Bool)1
---
> #define True  )
321c321
< #define True  (Bool)1
---
> #define True  Bool
321c321
< #define True  (Bool)1
---
> #define True  
321c321
< #define True  (Bool)1
---
> #define True  ()1
321c321
< #define True  (Bool)1
---
> #define True  (1
321c321
< #define True  (Bool)1
---
> #define True  ()
321c321
< #define True  (Bool)1
---
> #define True  (
321,322c321,322
< #define True  (Bool)1
< #define False (Bool)0
---
> #define True  ()1
> define False (Bool)0
321,322c321,322
< #define True  (Bool)1
< #define False (Bool)0
---
> #define True  (1
> define False (Bool)0
321,322c321,322
< #define True  (Bool)1
< #define False (Bool)0
---
> #define True  ()
> define False (Bool)0
321,322c321,322
< #define True  (Bool)1
< #define False (Bool)0
---
> #define True  (
> define False (Bool)0
321c321
< #define True  (Bool)1
---
> #define True  (Bool1
321c321
< #define True  (Bool)1
---
> #define True  (Bool
321,322c321,322
< #define True  (Bool)1
< #define False (Bool)0
---
> #define True  (Bool1
> define False (Bool)0
(85.4 %, 29937 bytes)
321,322c321,322
< #define True  1
< #define False (Bool)0
---
> #define True  
>  False (Bool)0
321,322c321,322
< #define True  1
< #define False (Bool)0
---
> #define True  
> #define  (Bool)0
321,322c321,322
< #define True  1
< #define False (Bool)0
---
> #define True  
> define  (Bool)0
321,322c321,322
< #define True  1
< #define False (Bool)0
---
> #define True  
> #  (Bool)0
321,322c321,322
< #define True  1
< #define False (Bool)0
---
> #define True  
>   (Bool)0
322c322
< #define False (Bool)0
---
> define False (Bool)0
322c322
< #define False (Bool)0
---
>  False (Bool)0
322c322
< #define False (Bool)0
---
> define  (Bool)0
322c322
< #define False (Bool)0
---
>   (Bool)0
322c322
< #define False (Bool)0
---
> define False Bool)0
322c322
< #define False (Bool)0
---
>  False Bool)0
322c322
< #define False (Bool)0
---
> define  Bool)0
322c322
< #define False (Bool)0
---
>   Bool)0
322c322
< #define False (Bool)0
---
> # False (Bool)0
322c322
< #define False (Bool)0
---
> #  (Bool)0
322c322
< #define False (Bool)0
---
> # False Bool)0
322c322
< #define False (Bool)0
---
> #  Bool)0
322c322
< #define False (Bool)0
---
> # False ()0
322c322
< #define False (Bool)0
---
> #  ()0
322c322
< #define False (Bool)0
---
> # False )0
322c322
< #define False (Bool)0
---
> #  )0
322c322
< #define False (Bool)0
---
> #define  (Bool)0
322c322
< #define False (Bool)0
---
> #define  Bool)0
322c322
< #define False (Bool)0
---
> #define  ()0
322c322
< #define False (Bool)0
---
> #define  )0
322c322
< #define False (Bool)0
---
> #define  (Bool0
322c322
< #define False (Bool)0
---
> #define  Bool0
322c322
< #define False (Bool)0
---
> #define  (0
322c322
< #define False (Bool)0
---
> #define  0
322c322
< #define False (Bool)0
---
> #define False Bool)0
322c322
< #define False (Bool)0
---
> #define False )0
322c322
< #define False (Bool)0
---
> #define False Bool0
322c322
< #define False (Bool)0
---
> #define False 0
322c322
< #define False (Bool)0
---
> #define False Bool)
322c322
< #define False (Bool)0
---
> #define False )
322c322
< #define False (Bool)0
---
> #define False Bool
322c322
< #define False (Bool)0
---
> #define False 
322c322
< #define False (Bool)0
---
> #define False ()0
322c322
< #define False (Bool)0
---
> #define False (0
322c322
< #define False (Bool)0
---
> #define False ()
322c322
< #define False (Bool)0
---
> #define False (
322c322
< #define False (Bool)0
---
> #define False ()0
324c324
< #define __inline__  
---
> define __inline__  
322c322
< #define False (Bool)0
---
> #define False (0
324c324
< #define __inline__  
---
> define __inline__  
322c322
< #define False (Bool)0
---
> #define False ()
324c324
< #define __inline__  
---
> define __inline__  
322c322
< #define False (Bool)0
---
> #define False (
324c324
< #define __inline__  
---
> define __inline__  
322c322
< #define False (Bool)0
---
> #define False (Bool0
322c322
< #define False (Bool)0
---
> #define False (Bool
322c322
< #define False (Bool)0
---
> #define False (Bool0
324c324
< #define __inline__  
---
> define __inline__  
(85.4 %, 29931 bytes)
322c322
< #define False 0
---
> #define False 
324c324
< #define __inline__  
---
>  __inline__  
322c322
< #define False 0
---
> #define False 
324c324
< #define __inline__  
---
> #define   
322c322
< #define False 0
---
> #define False 
324c324
< #define __inline__  
---
> define   
322c322
< #define False 0
---
> #define False 
324c324
< #define __inline__  
---
> #   
322c322
< #define False 0
---
> #define False 
324c324
< #define __inline__  
---
>    
324c324
< #define __inline__  
---
> define __inline__  
324c324
< #define __inline__  
---
>  __inline__  
324c324
< #define __inline__  
---
> define   
324c324
< #define __inline__  
---
>    
324c324
< #define __inline__  
---
> define __inline__  
327c327
< #define AssertHcond,errcode \
---
> define AssertHcond,errcode \
324c324
< #define __inline__  
---
>  __inline__  
327c327
< #define AssertHcond,errcode \
---
> define AssertHcond,errcode \
324c324
< #define __inline__  
---
> define   
327c327
< #define AssertHcond,errcode \
---
> define AssertHcond,errcode \
324c324
< #define __inline__  
---
>    
327c327
< #define AssertHcond,errcode \
---
> define AssertHcond,errcode \
324c324
< #define __inline__  
---
> # __inline__  
324c324
< #define __inline__  
---
> #   
(85.4 %, 29914 bytes)
327c327
< #define AssertHcond,errcode \
---
>  ,errcode \
327c327
< #define AssertHcond,errcode \
---
> define AssertHconderrcode \
327c327
< #define AssertHcond,errcode \
---
>  AssertHconderrcode \
327c327
< #define AssertHcond,errcode \
---
> define errcode \
327c327
< #define AssertHcond,errcode \
---
>  errcode \
327c327
< #define AssertHcond,errcode \
---
> # AssertHcond,errcode \
327c327
< #define AssertHcond,errcode \
---
> # ,errcode \
327c327
< #define AssertHcond,errcode \
---
> # AssertHconderrcode \
327c327
< #define AssertHcond,errcode \
---
> # errcode \
327c327
< #define AssertHcond,errcode \
---
> # AssertHcond, \
327c327
< #define AssertHcond,errcode \
---
> # , \
327c327
< #define AssertHcond,errcode \
---
> # AssertHcond \
327c327
< #define AssertHcond,errcode \
---
> #  \
327c327
< #define AssertHcond,errcode \
---
> #define ,errcode \
327c327
< #define AssertHcond,errcode \
---
> #define errcode \
(85.4 %, 29889 bytes)
327c327
< #  \
---
> #  
329c329
< #define AssertDcond,msg \
---
>  ,msg \
329c329
< #define AssertDcond,msg \
---
> define AssertDcond,msg \
329c329
< #define AssertDcond,msg \
---
>  AssertDcond,msg \
329c329
< #define AssertDcond,msg \
---
> define ,msg \
329c329
< #define AssertDcond,msg \
---
>  ,msg \
329c329
< #define AssertDcond,msg \
---
> define AssertDcondmsg \
329c329
< #define AssertDcond,msg \
---
>  AssertDcondmsg \
329c329
< #define AssertDcond,msg \
---
> define msg \
329c329
< #define AssertDcond,msg \
---
>  msg \
329c329
< #define AssertDcond,msg \
---
> # AssertDcond,msg \
329c329
< #define AssertDcond,msg \
---
> # ,msg \
329c329
< #define AssertDcond,msg \
---
> # AssertDcondmsg \
329c329
< #define AssertDcond,msg \
---
> # msg \
329c329
< #define AssertDcond,msg \
---
> # AssertDcond, \
329c329
< #define AssertDcond,msg \
---
> # , \
329c329
< #define AssertDcond,msg \
---
> # AssertDcond \
329c329
< #define AssertDcond,msg \
---
> #  \
329c329
< #define AssertDcond,msg \
---
> #define ,msg \
329c329
< #define AssertDcond,msg \
---
> #define msg \
(85.4 %, 29868 bytes)
329c329
< #  \
---
> #  
331c331
< #define VPrintf0zf \
---
>   \
331c331
< #define VPrintf0zf \
---
> define VPrintf0zf \
331c331
< #define VPrintf0zf \
---
>  VPrintf0zf \
331c331
< #define VPrintf0zf \
---
> define  \
331c331
< #define VPrintf0zf \
---
>   \
331c331
< #define VPrintf0zf \
---
> define VPrintf0zf 
331c331
< #define VPrintf0zf \
---
>  VPrintf0zf 
331c331
< #define VPrintf0zf \
---
> define  
331c331
< #define VPrintf0zf \
---
>   
331c331
< #define VPrintf0zf \
---
> # VPrintf0zf \
331c331
< #define VPrintf0zf \
---
> #  \
331c331
< #define VPrintf0zf \
---
> # VPrintf0zf 
331c331
< #define VPrintf0zf \
---
> #  
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> # VPrintf0zf \
>    ,zf
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #  \
>    ,zf
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> # VPrintf0zf 
>    ,zf
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #  
>    ,zf
331c331
< #define VPrintf0zf \
---
> #define  \
331c331
< #define VPrintf0zf \
---
> #define  
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define  \
>    ,zf
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define  
>    ,zf
331,332c331,332
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define  \
>    fprintfstderrzf
(85.4 %, 29858 bytes)
331c331
< #define  \
---
> #define  
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    ,zf
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    fprintfstderrzf
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    zf
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    fprintfstderr,
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    ,
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    fprintfstderr
331,332c331,332
< #define  \
<    fprintfstderr,zf
---
> #define  
>    
332c332
<    fprintfstderr,zf
---
>    ,zf
332c332
<    fprintfstderr,zf
---
>    zf
332c332
<    fprintfstderr,zf
---
>    ,
332c332
<    fprintfstderr,zf
---
>    
332,333c332,333
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
>    ,zf
> define VPrintf1zf,za1 \
332,333c332,333
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
>    zf
> define VPrintf1zf,za1 \
332,333c332,333
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
>    ,
> define VPrintf1zf,za1 \
332,333c332,333
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
>    
> define VPrintf1zf,za1 \
332c332
<    fprintfstderr,zf
---
>    fprintfstderrzf
(85.4 %, 29844 bytes)
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
> define VPrintf1zf,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
> # VPrintf1zf,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
>  VPrintf1zf,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
> #define ,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
> define ,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
> # ,za1 \
332,333c332,333
<    zf
< #define VPrintf1zf,za1 \
---
>    
>  ,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> define VPrintf1zf,za1 \
333c333
< #define VPrintf1zf,za1 \
---
>  VPrintf1zf,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> define ,za1 \
333c333
< #define VPrintf1zf,za1 \
---
>  ,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> define VPrintf1zfza1 \
333c333
< #define VPrintf1zf,za1 \
---
>  VPrintf1zfza1 \
333c333
< #define VPrintf1zf,za1 \
---
> define za1 \
333c333
< #define VPrintf1zf,za1 \
---
>  za1 \
333c333
< #define VPrintf1zf,za1 \
---
> # VPrintf1zf,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> # ,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> # VPrintf1zfza1 \
333c333
< #define VPrintf1zf,za1 \
---
> # za1 \
333c333
< #define VPrintf1zf,za1 \
---
> # VPrintf1zf, \
333c333
< #define VPrintf1zf,za1 \
---
> # , \
333c333
< #define VPrintf1zf,za1 \
---
> # VPrintf1zf \
333c333
< #define VPrintf1zf,za1 \
---
> #  \
333c333
< #define VPrintf1zf,za1 \
---
> #define ,za1 \
333c333
< #define VPrintf1zf,za1 \
---
> #define za1 \
333c333
< #define VPrintf1zf,za1 \
---
> #define , \
333c333
< #define VPrintf1zf,za1 \
---
> #define  \
(85.4 %, 29833 bytes)
333c333
< #define za1 \
---
> #define  
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  \
>    ,zf,za1
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  
>    ,zf,za1
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  \
>    fprintfstderrzf,za1
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  
>    fprintfstderrzf,za1
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  \
>    zf,za1
333,334c333,334
< #define za1 \
<    fprintfstderr,zf,za1
---
> #define  
>    zf,za1
(85.4 %, 29829 bytes)
333,334c333,334
< #define  \
<    fprintfstderrzf,za1
---
> #define  
>    fprintfstderrzf,
333,334c333,334
< #define  \
<    fprintfstderrzf,za1
---
> #define  
>    ,
333,334c333,334
< #define  \
<    fprintfstderrzf,za1
---
> #define  
>    fprintfstderrzf
333,334c333,334
< #define  \
<    fprintfstderrzf,za1
---
> #define  
>    
334c334
<    fprintfstderrzf,za1
---
>    ,za1
334c334
<    fprintfstderrzf,za1
---
>    za1
334c334
<    fprintfstderrzf,za1
---
>    ,
334c334
<    fprintfstderrzf,za1
---
>    
334,335c334,335
<    fprintfstderrzf,za1
< #define VPrintf2zf,za1,za2 \
---
>    ,za1
> define VPrintf2zf,za1,za2 \
334,335c334,335
<    fprintfstderrzf,za1
< #define VPrintf2zf,za1,za2 \
---
>    za1
> define VPrintf2zf,za1,za2 \
334,335c334,335
<    fprintfstderrzf,za1
< #define VPrintf2zf,za1,za2 \
---
>    ,
> define VPrintf2zf,za1,za2 \
334,335c334,335
<    fprintfstderrzf,za1
< #define VPrintf2zf,za1,za2 \
---
>    
> define VPrintf2zf,za1,za2 \
334c334
<    fprintfstderrzf,za1
---
>    fprintfstderrzfza1
(85.5 %, 29813 bytes)
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
> define VPrintf2zf,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
> # VPrintf2zf,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
>  VPrintf2zf,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
> #define ,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
> define ,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
> # ,za1,za2 \
334,335c334,335
<    za1
< #define VPrintf2zf,za1,za2 \
---
>    
>  ,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> define VPrintf2zf,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
>  VPrintf2zf,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> define ,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
>  ,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> define VPrintf2zfza1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
>  VPrintf2zfza1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> define za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
>  za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # VPrintf2zf,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # ,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # VPrintf2zfza1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # VPrintf2zf,,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # ,,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # VPrintf2zf,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> # ,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define ,za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define za1,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define ,,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define ,za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define ,za1za2 \
335c335
< #define VPrintf2zf,za1,za2 \
---
> #define za1za2 \
(85.5 %, 29802 bytes)
335c335
< #define za1,za2 \
---
> #define za2 \
335c335
< #define za1,za2 \
---
> #define , \
335c335
< #define za1,za2 \
---
> #define  \
(85.5 %, 29798 bytes)
335c335
< #define za2 \
---
> #define  
335,336c335,336
< #define za2 \
<    fprintfstderr,zf,za1,za2
---
> #define  \
>    ,zf,za1,za2
335,336c335,336
< #define za2 \
<    fprintfstderr,zf,za1,za2
---
> #define  
>    ,zf,za1,za2
335,336c335,336
< #define za2 \
<    fprintfstderr,zf,za1,za2
---
> #define  \
>    fprintfstderrzf,za1,za2
335,336c335,336
< #define za2 \
<    fprintfstderr,zf,za1,za2
---
> #define  
>    fprintfstderrzf,za1,za2
335,336c335,336
< #define za2 \
<    fprintfstderr,zf,za1,za2
---
> #define  \
>    zf,za1,za2
(85.5 %, 29794 bytes)
335,336c335,336
< #define  \
<    fprintfstderrzf,za1,za2
---
> #define  
>    fprintfstderrzf,,za2
335,336c335,336
< #define  \
<    fprintfstderrzf,za1,za2
---
> #define  
>    ,,za2
335,336c335,336
< #define  \
<    fprintfstderrzf,za1,za2
---
> #define  
>    fprintfstderrzf,za2
335,336c335,336
< #define  \
<    fprintfstderrzf,za1,za2
---
> #define  
>    ,za2
336c336
<    fprintfstderrzf,za1,za2
---
>    ,za1,za2
336c336
<    fprintfstderrzf,za1,za2
---
>    za1,za2
336c336
<    fprintfstderrzf,za1,za2
---
>    ,,za2
336c336
<    fprintfstderrzf,za1,za2
---
>    ,za2
336c336
<    fprintfstderrzf,za1,za2
---
>    ,za1za2
336c336
<    fprintfstderrzf,za1,za2
---
>    za1za2
(85.5 %, 29778 bytes)
336c336
<    za1,za2
---
>    za2
336c336
<    za1,za2
---
>    ,
336c336
<    za1,za2
---
>    
336,337c336,337
<    za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    ,za2
> define VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    za2
> define VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    ,
> define VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> define VPrintf3zf,za1,za2,za3 \
336c336
<    za1,za2
---
>    za1za2
(85.5 %, 29774 bytes)
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> define VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> # VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
>  VPrintf3zf,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> #define ,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> define ,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
> # ,za1,za2,za3 \
336,337c336,337
<    za2
< #define VPrintf3zf,za1,za2,za3 \
---
>    
>  ,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> define VPrintf3zf,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
>  VPrintf3zf,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> define ,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
>  ,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> define VPrintf3zfza1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
>  VPrintf3zfza1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> define za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
>  za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # VPrintf3zf,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # ,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # VPrintf3zfza1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # VPrintf3zf,,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # ,,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # VPrintf3zf,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> # ,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define ,za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za1,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define ,,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define ,za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define ,za1za2,za3 \
337c337
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za1za2,za3 \
(85.5 %, 29763 bytes)
337c337
< #define za1,za2,za3 \
---
> #define za2,za3 \
337c337
< #define za1,za2,za3 \
---
> #define ,,za3 \
337c337
< #define za1,za2,za3 \
---
> #define ,za3 \
337c337
< #define za1,za2,za3 \
---
> #define ,za2za3 \
337c337
< #define za1,za2,za3 \
---
> #define za2za3 \
(85.5 %, 29759 bytes)
337c337
< #define za2,za3 \
---
> #define za3 \
337c337
< #define za2,za3 \
---
> #define , \
337c337
< #define za2,za3 \
---
> #define  \
(85.5 %, 29755 bytes)
337c337
< #define za3 \
---
> #define  
337,338c337,338
< #define za3 \
<    fprintfstderr,zf,za1,za2,za3
---
> #define  \
>    ,zf,za1,za2,za3
337,338c337,338
< #define za3 \
<    fprintfstderr,zf,za1,za2,za3
---
> #define  
>    ,zf,za1,za2,za3
337,338c337,338
< #define za3 \
<    fprintfstderr,zf,za1,za2,za3
---
> #define  \
>    fprintfstderrzf,za1,za2,za3
337,338c337,338
< #define za3 \
<    fprintfstderr,zf,za1,za2,za3
---
> #define  
>    fprintfstderrzf,za1,za2,za3
337,338c337,338
< #define za3 \
<    fprintfstderr,zf,za1,za2,za3
---
> #define  \
>    zf,za1,za2,za3
(85.5 %, 29751 bytes)
337,338c337,338
< #define  \
<    fprintfstderrzf,za1,za2,za3
---
> #define  
>    fprintfstderrzf,,za2,za3
337,338c337,338
< #define  \
<    fprintfstderrzf,za1,za2,za3
---
> #define  
>    ,,za2,za3
337,338c337,338
< #define  \
<    fprintfstderrzf,za1,za2,za3
---
> #define  
>    fprintfstderrzf,za2,za3
337,338c337,338
< #define  \
<    fprintfstderrzf,za1,za2,za3
---
> #define  
>    ,za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    ,za1,za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    za1,za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    ,,za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    ,za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    ,za1za2,za3
338c338
<    fprintfstderrzf,za1,za2,za3
---
>    za1za2,za3
(85.5 %, 29735 bytes)
338c338
<    za1,za2,za3
---
>    za2,za3
338c338
<    za1,za2,za3
---
>    ,,za3
338c338
<    za1,za2,za3
---
>    ,za3
338c338
<    za1,za2,za3
---
>    ,za2za3
338c338
<    za1,za2,za3
---
>    za2za3
(85.5 %, 29731 bytes)
338c338
<    za2,za3
---
>    za3
338c338
<    za2,za3
---
>    ,
338c338
<    za2,za3
---
>    
338,339c338,339
<    za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    ,za3
> define VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    za3
> define VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    ,
> define VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> define VPrintf4zf,za1,za2,za3,za4 \
338c338
<    za2,za3
---
>    za2za3
(85.5 %, 29727 bytes)
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> define VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> # VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
>  VPrintf4zf,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> #define ,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> define ,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
> # ,za1,za2,za3,za4 \
338,339c338,339
<    za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>    
>  ,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> define VPrintf4zf,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>  VPrintf4zf,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> define ,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>  ,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> define VPrintf4zfza1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>  VPrintf4zfza1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> define za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
>  za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # VPrintf4zf,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # ,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # VPrintf4zfza1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # VPrintf4zf,,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # ,,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # VPrintf4zf,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> # ,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define ,za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za1,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define ,,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define ,za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define ,za1za2,za3,za4 \
339c339
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za1za2,za3,za4 \
(85.5 %, 29716 bytes)
339c339
< #define za1,za2,za3,za4 \
---
> #define za2,za3,za4 \
339c339
< #define za1,za2,za3,za4 \
---
> #define ,,za3,za4 \
339c339
< #define za1,za2,za3,za4 \
---
> #define ,za3,za4 \
339c339
< #define za1,za2,za3,za4 \
---
> #define ,za2za3,za4 \
339c339
< #define za1,za2,za3,za4 \
---
> #define za2za3,za4 \
(85.5 %, 29712 bytes)
339c339
< #define za2,za3,za4 \
---
> #define za3,za4 \
339c339
< #define za2,za3,za4 \
---
> #define ,,za4 \
339c339
< #define za2,za3,za4 \
---
> #define ,za4 \
339c339
< #define za2,za3,za4 \
---
> #define ,za3za4 \
339c339
< #define za2,za3,za4 \
---
> #define za3za4 \
(85.5 %, 29708 bytes)
339c339
< #define za3,za4 \
---
> #define za4 \
339c339
< #define za3,za4 \
---
> #define , \
339c339
< #define za3,za4 \
---
> #define  \
(85.5 %, 29704 bytes)
339c339
< #define za4 \
---
> #define  
339,340c339,340
< #define za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define  \
>    ,zf,za1,za2,za3,za4
339,340c339,340
< #define za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define  
>    ,zf,za1,za2,za3,za4
339,340c339,340
< #define za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define  \
>    fprintfstderrzf,za1,za2,za3,za4
339,340c339,340
< #define za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define  
>    fprintfstderrzf,za1,za2,za3,za4
339,340c339,340
< #define za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define  \
>    zf,za1,za2,za3,za4
(85.5 %, 29700 bytes)
339,340c339,340
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4
---
> #define  
>    fprintfstderrzf,,za2,za3,za4
339,340c339,340
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4
---
> #define  
>    ,,za2,za3,za4
339,340c339,340
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4
---
> #define  
>    fprintfstderrzf,za2,za3,za4
339,340c339,340
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4
---
> #define  
>    ,za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    ,za1,za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    za1,za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    ,,za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    ,za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    ,za1za2,za3,za4
340c340
<    fprintfstderrzf,za1,za2,za3,za4
---
>    za1za2,za3,za4
(85.5 %, 29684 bytes)
340c340
<    za1,za2,za3,za4
---
>    za2,za3,za4
340c340
<    za1,za2,za3,za4
---
>    ,,za3,za4
340c340
<    za1,za2,za3,za4
---
>    ,za3,za4
340c340
<    za1,za2,za3,za4
---
>    ,za2za3,za4
340c340
<    za1,za2,za3,za4
---
>    za2za3,za4
(85.5 %, 29680 bytes)
340c340
<    za2,za3,za4
---
>    za3,za4
340c340
<    za2,za3,za4
---
>    ,,za4
340c340
<    za2,za3,za4
---
>    ,za4
340c340
<    za2,za3,za4
---
>    ,za3za4
340c340
<    za2,za3,za4
---
>    za3za4
(85.5 %, 29676 bytes)
340c340
<    za3,za4
---
>    za4
340c340
<    za3,za4
---
>    ,
340c340
<    za3,za4
---
>    
340,341c340,341
<    za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    ,za4
> define VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    za4
> define VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    ,
> define VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> define VPrintf5zf,za1,za2,za3,za4,za5 \
340c340
<    za3,za4
---
>    za3za4
(85.5 %, 29672 bytes)
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> define VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> # VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
>  VPrintf5zf,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> #define ,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> define ,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
> # ,za1,za2,za3,za4,za5 \
340,341c340,341
<    za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>    
>  ,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> define VPrintf5zf,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>  VPrintf5zf,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> define ,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>  ,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> define VPrintf5zfza1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>  VPrintf5zfza1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> define za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
>  za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # VPrintf5zf,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # ,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # VPrintf5zfza1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # VPrintf5zf,,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # ,,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # VPrintf5zf,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> # ,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define ,za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define za1,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define ,,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define ,za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define ,za1za2,za3,za4,za5 \
341c341
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define za1za2,za3,za4,za5 \
(85.5 %, 29661 bytes)
341c341
< #define za1,za2,za3,za4,za5 \
---
> #define za2,za3,za4,za5 \
341c341
< #define za1,za2,za3,za4,za5 \
---
> #define ,,za3,za4,za5 \
341c341
< #define za1,za2,za3,za4,za5 \
---
> #define ,za3,za4,za5 \
341c341
< #define za1,za2,za3,za4,za5 \
---
> #define ,za2za3,za4,za5 \
341c341
< #define za1,za2,za3,za4,za5 \
---
> #define za2za3,za4,za5 \
(85.5 %, 29657 bytes)
341c341
< #define za2,za3,za4,za5 \
---
> #define za3,za4,za5 \
341c341
< #define za2,za3,za4,za5 \
---
> #define ,,za4,za5 \
341c341
< #define za2,za3,za4,za5 \
---
> #define ,za4,za5 \
341c341
< #define za2,za3,za4,za5 \
---
> #define ,za3za4,za5 \
341c341
< #define za2,za3,za4,za5 \
---
> #define za3za4,za5 \
(85.5 %, 29653 bytes)
341c341
< #define za3,za4,za5 \
---
> #define za4,za5 \
341c341
< #define za3,za4,za5 \
---
> #define ,,za5 \
341c341
< #define za3,za4,za5 \
---
> #define ,za5 \
341c341
< #define za3,za4,za5 \
---
> #define ,za4za5 \
341c341
< #define za3,za4,za5 \
---
> #define za4za5 \
(85.5 %, 29649 bytes)
341c341
< #define za4,za5 \
---
> #define za5 \
341c341
< #define za4,za5 \
---
> #define , \
341c341
< #define za4,za5 \
---
> #define  \
(85.5 %, 29645 bytes)
341c341
< #define za5 \
---
> #define  
341,342c341,342
< #define za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define  \
>    ,zf,za1,za2,za3,za4,za5
341,342c341,342
< #define za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define  
>    ,zf,za1,za2,za3,za4,za5
341,342c341,342
< #define za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define  \
>    fprintfstderrzf,za1,za2,za3,za4,za5
341,342c341,342
< #define za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define  
>    fprintfstderrzf,za1,za2,za3,za4,za5
341,342c341,342
< #define za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define  \
>    zf,za1,za2,za3,za4,za5
(85.5 %, 29641 bytes)
341,342c341,342
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
> #define  
>    fprintfstderrzf,,za2,za3,za4,za5
341,342c341,342
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
> #define  
>    ,,za2,za3,za4,za5
341,342c341,342
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
> #define  
>    fprintfstderrzf,za2,za3,za4,za5
341,342c341,342
< #define  \
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
> #define  
>    ,za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    ,za1,za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    za1,za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    ,,za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    ,za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    ,za1za2,za3,za4,za5
342c342
<    fprintfstderrzf,za1,za2,za3,za4,za5
---
>    za1za2,za3,za4,za5
(85.5 %, 29625 bytes)
342c342
<    za1,za2,za3,za4,za5
---
>    za2,za3,za4,za5
342c342
<    za1,za2,za3,za4,za5
---
>    ,,za3,za4,za5
342c342
<    za1,za2,za3,za4,za5
---
>    ,za3,za4,za5
342c342
<    za1,za2,za3,za4,za5
---
>    ,za2za3,za4,za5
342c342
<    za1,za2,za3,za4,za5
---
>    za2za3,za4,za5
(85.5 %, 29621 bytes)
342c342
<    za2,za3,za4,za5
---
>    za3,za4,za5
342c342
<    za2,za3,za4,za5
---
>    ,,za4,za5
342c342
<    za2,za3,za4,za5
---
>    ,za4,za5
342c342
<    za2,za3,za4,za5
---
>    ,za3za4,za5
342c342
<    za2,za3,za4,za5
---
>    za3za4,za5
(85.5 %, 29617 bytes)
342c342
<    za3,za4,za5
---
>    za4,za5
342c342
<    za3,za4,za5
---
>    ,,za5
342c342
<    za3,za4,za5
---
>    ,za5
342c342
<    za3,za4,za5
---
>    ,za4za5
342c342
<    za3,za4,za5
---
>    za4za5
(85.6 %, 29613 bytes)
342c342
<    za4,za5
---
>    za5
342c342
<    za4,za5
---
>    ,
342c342
<    za4,za5
---
>    
342c342
<    za4,za5
---
>    ,za5
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za4,za5
---
>    za5
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za4,za5
---
>    ,
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za4,za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za4,za5
---
>    za4za5
(85.6 %, 29609 bytes)
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> # BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>  BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define  strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #  strm->bzallocstrm->opaque,nnn,1
342c342
<    za5
---
>    
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>   strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>  BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define  strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>   strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define BZALLOCnnn ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>  BZALLOCnnn ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> define  ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
>   ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> # BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #  strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> # BZALLOCnnn ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #  ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> # BZALLOCnnn strmbzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #  strmbzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> # BZALLOCnnn bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #  bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  strm->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  ->bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  strmbzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  bzallocstrm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  strm->->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  ->->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  strm->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define  ->opaque,nnn,1
345c345
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define BZALLOCnnn ->bzallocstrm->opaque,nnn,1
(85.6 %, 29597 bytes)
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  ->,nnn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  ,nnn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  ->opaquennn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  opaquennn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  ->nnn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  nnn,1
345c345
< #define  strmbzallocstrm->opaque,nnn,1
---
> #define  strmbzallocstrmopaque,nnn,1
(85.6 %, 29579 bytes)
345,346c345,346
< #define  opaquennn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define  1
> define BZFREEppp  strm->bzfreestrm->opaque,ppp
345,346c345,346
< #define  opaquennn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define  ,
> define BZFREEppp  strm->bzfreestrm->opaque,ppp
345,346c345,346
< #define  opaquennn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define  
> define BZFREEppp  strm->bzfreestrm->opaque,ppp
345c345
< #define  opaquennn,1
---
> #define  opaquennn1
345c345
< #define  opaquennn,1
---
> #define  opaquennn
(85.6 %, 29578 bytes)
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> define BZFREEppp  strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
>  BZFREEppp  strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> define   strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
>    strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> define BZFREEppp  ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
>  BZFREEppp  ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> define   ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
>    ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> # BZFREEppp  strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #   strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> # BZFREEppp  ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #   ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> # BZFREEppp  strmbzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #   strmbzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> # BZFREEppp  bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #   bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define   strm->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define   ->bzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define   strmbzfreestrm->opaque,ppp
346c346
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define   bzfreestrm->opaque,ppp
(85.6 %, 29567 bytes)
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   ->,ppp
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   ,ppp
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   ->opaqueppp
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   opaqueppp
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   ->ppp
346c346
< #define   strmbzfreestrm->opaque,ppp
---
> #define   ppp
(85.6 %, 29550 bytes)
346c346
< #define   opaqueppp
---
> #define   
351c351
< #define BZ_HDR_B 0x2   
---
> define  0x2   
346c346
< #define   opaqueppp
---
> #define   
351c351
< #define BZ_HDR_B 0x2   
---
> #  0x2   
346c346
< #define   opaqueppp
---
> #define   
351c351
< #define BZ_HDR_B 0x2   
---
>   0x2   
351c351
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B 0x2   
351c351
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B 0x2   
351c351
< #define BZ_HDR_B 0x2   
---
> define  0x2   
351c351
< #define BZ_HDR_B 0x2   
---
>   0x2   
351c351
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B    
351c351
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B    
351c351
< #define BZ_HDR_B 0x2   
---
> define     
351c351
< #define BZ_HDR_B 0x2   
---
>      
351c351
< #define BZ_HDR_B 0x2   
---
> # BZ_HDR_B 0x2   
351c351
< #define BZ_HDR_B 0x2   
---
> #  0x2   
351c351
< #define BZ_HDR_B 0x2   
---
> # BZ_HDR_B    
351c351
< #define BZ_HDR_B 0x2   
---
> #     
(85.6 %, 29532 bytes)
352c352
< #define BZ_HDR_Z 0xa   
---
>      
352c352
< #define BZ_HDR_Z 0xa   
---
> # BZ_HDR_Z 0xa   
352c352
< #define BZ_HDR_Z 0xa   
---
> #  0xa   
352c352
< #define BZ_HDR_Z 0xa   
---
> # BZ_HDR_Z    
352c352
< #define BZ_HDR_Z 0xa   
---
> #     
(85.6 %, 29514 bytes)
353c353
< #define BZ_HDR_h 0x8   
---
>      
353c353
< #define BZ_HDR_h 0x8   
---
> # BZ_HDR_h 0x8   
353c353
< #define BZ_HDR_h 0x8   
---
> #  0x8   
353c353
< #define BZ_HDR_h 0x8   
---
> # BZ_HDR_h    
353c353
< #define BZ_HDR_h 0x8   
---
> #     
(85.6 %, 29496 bytes)
354c354
< #define BZ_HDR_0 0x0   
---
>      
354c354
< #define BZ_HDR_0 0x0   
---
> # BZ_HDR_0 0x0   
354c354
< #define BZ_HDR_0 0x0   
---
> #  0x0   
354c354
< #define BZ_HDR_0 0x0   
---
> # BZ_HDR_0    
354c354
< #define BZ_HDR_0 0x0   
---
> #     
(85.6 %, 29478 bytes)
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
>   
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 8
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  8
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_ALPHA_SIZE 8
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #  8
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #  
> define BZ_MAX_CODE_LEN    3
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  8
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
> # BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
> # BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
>  BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
>  BZ_MAX_CODE_LEN    3
358c358
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define BZ_MAX_ALPHA_SIZE 
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> # BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
>  BZ_MAX_CODE_LEN    3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> #define     3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> define     3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> #     3
358,359c358,359
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
>      3
359c359
< #define BZ_MAX_CODE_LEN    3
---
> define BZ_MAX_CODE_LEN    3
359c359
< #define BZ_MAX_CODE_LEN    3
---
>  BZ_MAX_CODE_LEN    3
359c359
< #define BZ_MAX_CODE_LEN    3
---
> define     3
359c359
< #define BZ_MAX_CODE_LEN    3
---
>      3
359c359
< #define BZ_MAX_CODE_LEN    3
---
> define BZ_MAX_CODE_LEN    
359c359
< #define BZ_MAX_CODE_LEN    3
---
>  BZ_MAX_CODE_LEN    
359c359
< #define BZ_MAX_CODE_LEN    3
---
> define     
359c359
< #define BZ_MAX_CODE_LEN    3
---
>      
359c359
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_CODE_LEN    3
359c359
< #define BZ_MAX_CODE_LEN    3
---
> #     3
(85.6 %, 29455 bytes)
361c361
< #define BZ_RUNA 0
---
>   
361c361
< #define BZ_RUNA 0
---
> # BZ_RUNA 0
361c361
< #define BZ_RUNA 0
---
> #  0
(85.6 %, 29440 bytes)
362c362
< #define BZ_RUNB 1
---
>   
362c362
< #define BZ_RUNB 1
---
> # BZ_RUNB 1
362c362
< #define BZ_RUNB 1
---
> #  1
(85.6 %, 29425 bytes)
364c364
< #define BZ_N_GROUPS 6
---
>   
364c364
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 6
364c364
< #define BZ_N_GROUPS 6
---
> #  6
364c364
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 
364c364
< #define BZ_N_GROUPS 6
---
> #  
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> # BZ_N_GROUPS 6
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #  6
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> # BZ_N_GROUPS 
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #  
> define BZ_G_SIZE   50
364c364
< #define BZ_N_GROUPS 6
---
> #define  6
364c364
< #define BZ_N_GROUPS 6
---
> #define  
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
> # BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
> # BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
>  BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
>  BZ_G_SIZE   50
364c364
< #define BZ_N_GROUPS 6
---
> #define BZ_N_GROUPS 
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> define BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> # BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
>  BZ_G_SIZE   50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> #define    50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> define    50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> #    50
364,365c364,365
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
>     50
365c365
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
365c365
< #define BZ_G_SIZE   50
---
>  BZ_G_SIZE   50
365c365
< #define BZ_G_SIZE   50
---
> define    50
365c365
< #define BZ_G_SIZE   50
---
>     50
365c365
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   
365c365
< #define BZ_G_SIZE   50
---
>  BZ_G_SIZE   
365c365
< #define BZ_G_SIZE   50
---
> define    
365c365
< #define BZ_G_SIZE   50
---
>     
365c365
< #define BZ_G_SIZE   50
---
> # BZ_G_SIZE   50
365c365
< #define BZ_G_SIZE   50
---
> #    50
365c365
< #define BZ_G_SIZE   50
---
> # BZ_G_SIZE   
365c365
< #define BZ_G_SIZE   50
---
> #    
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> # BZ_G_SIZE   50
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #    50
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> # BZ_G_SIZE   
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #    
> define BZ_N_ITERS  4
365c365
< #define BZ_G_SIZE   50
---
> #define    50
365c365
< #define BZ_G_SIZE   50
---
> #define    
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
> # BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
> # BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
>  BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
>  BZ_N_ITERS  4
365c365
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> define BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> # BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
>  BZ_N_ITERS  4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> #define   4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> define   4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> #   4
365,366c365,366
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
>    4
366c366
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  4
366c366
< #define BZ_N_ITERS  4
---
>  BZ_N_ITERS  4
366c366
< #define BZ_N_ITERS  4
---
> define   4
366c366
< #define BZ_N_ITERS  4
---
>    4
366c366
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  
366c366
< #define BZ_N_ITERS  4
---
>  BZ_N_ITERS  
366c366
< #define BZ_N_ITERS  4
---
> define   
366c366
< #define BZ_N_ITERS  4
---
>    
366c366
< #define BZ_N_ITERS  4
---
> # BZ_N_ITERS  4
366c366
< #define BZ_N_ITERS  4
---
> #   4
(85.7 %, 29407 bytes)
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
>    + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #  2 + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #   + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS 2  0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #  2  0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS   0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #    0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2 + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define   + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2  0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define    0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2 +  / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define   +  / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2   / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define     / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS  +  / BZ_G_SIZE
(85.7 %, 29406 bytes)
368c368
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
(85.7 %, 29405 bytes)
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / 
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / 
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  BZ_G_SIZE
368c368
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  
(85.7 %, 29403 bytes)
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> #define                           \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> define                           \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
> #                           \
368c368
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
376c376
< #define BZ_RAND_DECLS                          \
---
>                            \
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
376c376
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
376c376
< #define BZ_RAND_DECLS                          \
---
> define                           \
376c376
< #define BZ_RAND_DECLS                          \
---
>                            \
376c376
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          
376c376
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          
376c376
< #define BZ_RAND_DECLS                          \
---
> define                           
376c376
< #define BZ_RAND_DECLS                          \
---
>                            
376c376
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
376c376
< #define BZ_RAND_DECLS                          \
---
> #                           \
376c376
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          
376c376
< #define BZ_RAND_DECLS                          \
---
> #                           
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> # BZ_RAND_DECLS                          \
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #                           \
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> # BZ_RAND_DECLS                          
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #                           
>     rNToGo;                               \
376c376
< #define BZ_RAND_DECLS                          \
---
> #define                           \
376c376
< #define BZ_RAND_DECLS                          \
---
> #define                           
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>    Int32 ;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>    Int32 ;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>     ;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>     ;                               \
376c376
< #define BZ_RAND_DECLS                          \
---
> #define BZ_RAND_DECLS                          
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     rNToGo;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32 ;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     ;                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32 rNToGo                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     rNToGo                               \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32                                \
376,377c376,377
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>                                    \
377c377
<    Int32 rNToGo;                               \
---
>     rNToGo;                               \
377c377
<    Int32 rNToGo;                               \
---
>     ;                               \
377c377
<    Int32 rNToGo;                               \
---
>     rNToGo                               \
377c377
<    Int32 rNToGo;                               \
---
>                                    \
(85.7 %, 29392 bytes)
377c377
<     ;                               \
---
>                                    
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>     rTPos                                 \
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    
>     rTPos                                 \
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>    Int32                                  \
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    
>    Int32                                  \
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>                                      \
377,378c377,378
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    
>                                      \
(85.7 %, 29386 bytes)
377c377
<                                    \
---
>                                    
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
377,378c377,378
<                                    \
<    Int32                                  \
---
>                                    
>                                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
377,378c377,378
<                                    \
<    Int32                                  \
---
>                                    
>    Int32                                  
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
377,378c377,378
<                                    \
<    Int32                                  \
---
>                                    
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
378c378
<    Int32                                  \
---
>                                      \
378c378
<    Int32                                  \
---
>                                      
378c378
<    Int32                                  \
---
>                                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
(85.7 %, 29381 bytes)
378c378
<                                      \
---
>                                      
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #                       \
378c378
<                                      \
---
>                                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define                       
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>                        
(85.7 %, 29380 bytes)
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> define                       
380c380
< #define BZ_RAND_INIT_MASK                      \
---
>                        
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #                       \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #                       
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> # BZ_RAND_INIT_MASK                      \
>    ->rNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #                       \
>    ->rNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> # BZ_RAND_INIT_MASK                      
>    ->rNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #                       
>    ->rNToGo = 0;                              \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       \
380c380
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    ->rNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       
>    ->rNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    srNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       
>    srNToGo = 0;                              \
380,381c380,381
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    rNToGo = 0;                              \
(85.7 %, 29361 bytes)
380,381c380,381
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>    srNToGo = ;                              \
380,381c380,381
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>     = ;                              \
380,381c380,381
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>    srNToGo  ;                              \
380,381c380,381
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>      ;                              \
381c381
<    srNToGo = 0;                              \
---
>     = 0;                              \
381c381
<    srNToGo = 0;                              \
---
>      0;                              \
381c381
<    srNToGo = 0;                              \
---
>     = ;                              \
381c381
<    srNToGo = 0;                              \
---
>      ;                              \
381c381
<    srNToGo = 0;                              \
---
>     = 0                              \
381c381
<    srNToGo = 0;                              \
---
>      0                              \
381c381
<    srNToGo = 0;                              \
---
>     =                               \
381c381
<    srNToGo = 0;                              \
---
>                                    \
381c381
<    srNToGo = 0;                              \
---
>    srNToGo  0;                              \
381c381
<    srNToGo = 0;                              \
---
>    srNToGo  ;                              \
(85.7 %, 29360 bytes)
381c381
<    srNToGo  0;                              \
---
>    srNToGo  ;                              \
381c381
<    srNToGo  0;                              \
---
>    srNToGo                                \
(85.7 %, 29359 bytes)
381c381
<    srNToGo  ;                              \
---
>    srNToGo                                \
381c381
<    srNToGo  ;                              \
---
>    srNToGo                                
381,382c381,382
<    srNToGo  ;                              \
<    s->rTPos  = 0                               \
---
>    srNToGo                                \
>    ->rTPos  = 0                               \
(85.7 %, 29358 bytes)
381c381
<    srNToGo                                \
---
>    srNToGo                                
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    ->rTPos  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    srTPos  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    rTPos  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    s->  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    ->  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    s  = 0                               \
381,382c381,382
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>      = 0                               \
382c382
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
382c382
<    s->rTPos  = 0                               \
---
>    rTPos  = 0                               \
382c382
<    s->rTPos  = 0                               \
---
>    ->  = 0                               \
(85.7 %, 29357 bytes)
382c382
<    ->rTPos  = 0                               \
---
>    rTPos  = 0                               \
382c382
<    ->rTPos  = 0                               \
---
>      = 0                               \
382c382
<    ->rTPos  = 0                               \
---
>    rTPos   0                               \
(85.7 %, 29355 bytes)
382c382
<    rTPos  = 0                               \
---
>      = 0                               \
382c382
<    rTPos  = 0                               \
---
>       0                               \
(85.7 %, 29350 bytes)
382c382
<      = 0                               \
---
>       0                               \
382c382
<      = 0                               \
---
>                                      \
382c382
<      = 0                               \
---
>       0                               
(85.7 %, 29349 bytes)
382c382
<       0                               \
---
>                                      \
382c382
<       0                               \
---
>                                      
382c382
<       0                               \
---
>                                      \
384c384
< #define BZ_RAND_MASK 0
---
> define BZ_RAND_MASK 0
(85.7 %, 29348 bytes)
382c382
<                                      \
---
>                                      
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
> define BZ_RAND_MASK 0
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
> # BZ_RAND_MASK 0
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
>  BZ_RAND_MASK 0
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
> #define  0
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
> define  0
382c382
<                                      \
---
>                                      
384c384
< #define BZ_RAND_MASK 0
---
> #  0
(85.7 %, 29347 bytes)
384c384
< #define BZ_RAND_MASK 0
---
> define BZ_RAND_MASK 0
384c384
< #define BZ_RAND_MASK 0
---
>  BZ_RAND_MASK 0
384c384
< #define BZ_RAND_MASK 0
---
> define  0
384c384
< #define BZ_RAND_MASK 0
---
>   0
384c384
< #define BZ_RAND_MASK 0
---
> define BZ_RAND_MASK 
384c384
< #define BZ_RAND_MASK 0
---
>  BZ_RAND_MASK 
384c384
< #define BZ_RAND_MASK 0
---
> define  
384c384
< #define BZ_RAND_MASK 0
---
>   
384c384
< #define BZ_RAND_MASK 0
---
> # BZ_RAND_MASK 0
384c384
< #define BZ_RAND_MASK 0
---
> #  0
(85.7 %, 29327 bytes)
386c386
< #define BZ_RAND_UPD_MASK                       \
---
>                         
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       \
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> #                        \
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> #                        
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> # BZ_RAND_UPD_MASK                       \
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #                        \
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> # BZ_RAND_UPD_MASK                       
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #                        
>     s->rNToGo == 0                                            \
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> #define                        \
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> #define                        
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        \
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        \
>    if ->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        
>    if ->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        \
>     ->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define                        
>     ->rNToGo == 0                                            \
386c386
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_UPD_MASK                       
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     s->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if ->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     ->rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if srNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     srNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if rNToGo == 0                                            \
386,387c386,387
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     rNToGo == 0                                            \
387c387
<    if s->rNToGo == 0                                            \
---
>     s->rNToGo == 0                                            \
387c387
<    if s->rNToGo == 0                                            \
---
>     ->rNToGo == 0                                            \
387c387
<    if s->rNToGo == 0                                            \
---
>     srNToGo == 0                                            \
(85.7 %, 29325 bytes)
387c387
<     s->rNToGo == 0                                            \
---
>     ->rNToGo == 0                                            \
387c387
<     s->rNToGo == 0                                            \
---
>     rNToGo == 0                                            \
(85.7 %, 29324 bytes)
387c387
<     ->rNToGo == 0                                            \
---
>     rNToGo == 0                                            \
387c387
<     ->rNToGo == 0                                            \
---
>      == 0                                            \
387c387
<     ->rNToGo == 0                                            \
---
>     rNToGo  0                                            \
(85.7 %, 29322 bytes)
387c387
<     rNToGo == 0                                            \
---
>      == 0                                            \
387c387
<     rNToGo == 0                                            \
---
>       0                                            \
(85.7 %, 29316 bytes)
387c387
<      == 0                                            \
---
>       0                                            \
387c387
<      == 0                                            \
---
>                                                   \
(85.7 %, 29314 bytes)
387c387
<       0                                            \
---
>                                                   \
387c387
<       0                                            \
---
>                                                   
387,388c387,388
<       0                                            \
<    s->rNToGo--;
---
>                                                   \
>    ->rNToGo--;
387,388c387,388
<       0                                            \
<    s->rNToGo--;
---
>                                                   
>    ->rNToGo--;
(85.7 %, 29313 bytes)
387c387
<                                                   \
---
>                                                   
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    ->rNToGo--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    srNToGo--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    rNToGo--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    s->--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    ->--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    s--;
387,388c387,388
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    --;
388c388
<    s->rNToGo--;
---
>    ->rNToGo--;
388c388
<    s->rNToGo--;
---
>    rNToGo--;
388c388
<    s->rNToGo--;
---
>    ->--;
(85.7 %, 29312 bytes)
388c388
<    ->rNToGo--;
---
>    rNToGo--;
388c388
<    ->rNToGo--;
---
>    --;
388c388
<    ->rNToGo--;
---
>    rNToGo;
(85.7 %, 29310 bytes)
388c388
<    rNToGo--;
---
>    --;
388c388
<    rNToGo--;
---
>    ;
(85.7 %, 29304 bytes)
388c388
<    --;
---
>    ;
388c388
<    --;
---
>    
(85.7 %, 29302 bytes)
388c388
<    ;
---
>    
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define BZ_INITIALISE_CRCcrcVar              \
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> # BZ_INITIALISE_CRCcrcVar              \
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
>  BZ_INITIALISE_CRCcrcVar              \
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> #define               \
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define               \
388c388
<    ;
---
>    
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> #               \
(85.7 %, 29301 bytes)
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define BZ_INITIALISE_CRCcrcVar              \
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
>  BZ_INITIALISE_CRCcrcVar              \
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define               \
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
>                \
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define BZ_INITIALISE_CRCcrcVar              
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
>  BZ_INITIALISE_CRCcrcVar              
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
> define               
396c396
< #define BZ_INITIALISE_CRCcrcVar              \
---
>                
(85.7 %, 29271 bytes)
396c396
<                \
---
>                
399c399
< #define BZ_FINALISE_CRCcrcVar                \
---
>  BZ_FINALISE_CRCcrcVar                \
396c396
<                \
---
>                
399c399
< #define BZ_FINALISE_CRCcrcVar                \
---
> #define                 \
396c396
<                \
---
>                
399c399
< #define BZ_FINALISE_CRCcrcVar                \
---
> define                 \
396c396
<                \
---
>                
399c399
< #define BZ_FINALISE_CRCcrcVar                \
---
> #                 \
396c396
<                \
---
>                
399c399
< #define BZ_FINALISE_CRCcrcVar                \
---
>                  \
(85.7 %, 29243 bytes)
399c399
< #                 \
---
>                  \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVar,cha              \
399c399
< #                 \
---
>                  
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVar,cha              \
399c399
< #                 \
---
> #                 
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define BZ_UPDATE_CRCcrcVar,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # BZ_UPDATE_CRCcrcVar,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVar,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define ,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define ,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # ,cha              \
399c399
< #                 \
---
> #                 
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define BZ_UPDATE_CRCcrcVar,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVar,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define BZ_UPDATE_CRCcrcVarcha              \
(85.7 %, 29242 bytes)
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define BZ_UPDATE_CRCcrcVar,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVar,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define BZ_UPDATE_CRCcrcVarcha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  BZ_UPDATE_CRCcrcVarcha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> define cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
>  cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # BZ_UPDATE_CRCcrcVar,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # BZ_UPDATE_CRCcrcVarcha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # BZ_UPDATE_CRCcrcVar,              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # ,              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> # BZ_UPDATE_CRCcrcVar              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #               \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define ,cha              \
402c402
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define cha              \
(85.7 %, 29213 bytes)
402c402
< #               \
---
> #               
409c409
< #define BZ_M_IDLE      1
---
>        1
409c409
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
409c409
< #define BZ_M_IDLE      1
---
>  BZ_M_IDLE      1
409c409
< #define BZ_M_IDLE      1
---
> define       1
409c409
< #define BZ_M_IDLE      1
---
>        1
409c409
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      
409c409
< #define BZ_M_IDLE      1
---
>  BZ_M_IDLE      
409c409
< #define BZ_M_IDLE      1
---
> define       
409c409
< #define BZ_M_IDLE      1
---
>        
409c409
< #define BZ_M_IDLE      1
---
> # BZ_M_IDLE      1
409c409
< #define BZ_M_IDLE      1
---
> #       1
(85.8 %, 29196 bytes)
410c410
< #define BZ_M_RUNNING   2
---
>     
410c410
< #define BZ_M_RUNNING   2
---
> # BZ_M_RUNNING   2
410c410
< #define BZ_M_RUNNING   2
---
> #    2
410c410
< #define BZ_M_RUNNING   2
---
> # BZ_M_RUNNING   
410c410
< #define BZ_M_RUNNING   2
---
> #    
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> # BZ_M_RUNNING   2
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #    2
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> # BZ_M_RUNNING   
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #    
> define BZ_M_FLUSHING  3
410c410
< #define BZ_M_RUNNING   2
---
> #define    2
410c410
< #define BZ_M_RUNNING   2
---
> #define    
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
> # BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
> # BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
>  BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
>  BZ_M_FLUSHING  3
410c410
< #define BZ_M_RUNNING   2
---
> #define BZ_M_RUNNING   
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> define BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> # BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
>  BZ_M_FLUSHING  3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> #define   3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> define   3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> #   3
410,411c410,411
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
>    3
411c411
< #define BZ_M_FLUSHING  3
---
> define BZ_M_FLUSHING  3
411c411
< #define BZ_M_FLUSHING  3
---
>  BZ_M_FLUSHING  3
411c411
< #define BZ_M_FLUSHING  3
---
> define   3
411c411
< #define BZ_M_FLUSHING  3
---
>    3
411c411
< #define BZ_M_FLUSHING  3
---
> define BZ_M_FLUSHING  
411c411
< #define BZ_M_FLUSHING  3
---
>  BZ_M_FLUSHING  
411c411
< #define BZ_M_FLUSHING  3
---
> define   
411c411
< #define BZ_M_FLUSHING  3
---
>    
411c411
< #define BZ_M_FLUSHING  3
---
> # BZ_M_FLUSHING  3
411c411
< #define BZ_M_FLUSHING  3
---
> #   3
(85.8 %, 29175 bytes)
412c412
< #define BZ_M_FINISHING 4
---
>   
412c412
< #define BZ_M_FINISHING 4
---
> # BZ_M_FINISHING 4
412c412
< #define BZ_M_FINISHING 4
---
> #  4
(85.8 %, 29153 bytes)
414c414
< #define BZ_S_OUTPUT    1
---
>      
414c414
< #define BZ_S_OUTPUT    1
---
> # BZ_S_OUTPUT    1
414c414
< #define BZ_S_OUTPUT    1
---
> #     1
(85.8 %, 29134 bytes)
415c415
< #define BZ_S_INPUT     2
---
>       
415c415
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     2
415c415
< #define BZ_S_INPUT     2
---
> #      2
415c415
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     
415c415
< #define BZ_S_INPUT     2
---
> #      
415c415
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     2
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #      2
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #      
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      2
415c415
< #define BZ_S_INPUT     2
---
> #define      
415c415
< #define BZ_S_INPUT     2
---
> #define      2
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      2
417c417
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      
417c417
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      2
417c417
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define      
417c417
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> #define  2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> define  2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
> #  2
415c415
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
417c417
< #define BZ_N_RADIX 2
---
>   2
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
417c417
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
417c417
< #define BZ_N_RADIX 2
---
> define  2
417c417
< #define BZ_N_RADIX 2
---
>   2
417c417
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
417c417
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
417c417
< #define BZ_N_RADIX 2
---
> define  
417c417
< #define BZ_N_RADIX 2
---
>   
417c417
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
417c417
< #define BZ_N_RADIX 2
---
> #  2
417c417
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 
417c417
< #define BZ_N_RADIX 2
---
> #  
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> # BZ_N_RADIX 2
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #  2
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> # BZ_N_RADIX 
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #  
> define BZ_N_QSORT 2
417c417
< #define BZ_N_RADIX 2
---
> #define  2
417c417
< #define BZ_N_RADIX 2
---
> #define  
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
> # BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
> # BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
>  BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
>  BZ_N_QSORT 2
417c417
< #define BZ_N_RADIX 2
---
> #define BZ_N_RADIX 
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> define BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> # BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
>  BZ_N_QSORT 2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> #define  2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> define  2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> #  2
417,418c417,418
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
>   2
418c418
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
418c418
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 2
418c418
< #define BZ_N_QSORT 2
---
> define  2
418c418
< #define BZ_N_QSORT 2
---
>   2
418c418
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 
418c418
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 
418c418
< #define BZ_N_QSORT 2
---
> define  
(85.8 %, 29133 bytes)
418c418
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
418c418
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 2
418c418
< #define BZ_N_QSORT 2
---
> define  2
418c418
< #define BZ_N_QSORT 2
---
>   2
418c418
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 
418c418
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 
418c418
< #define BZ_N_QSORT 2
---
> define  
418c418
< #define BZ_N_QSORT 2
---
>   
418c418
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 2
418c418
< #define BZ_N_QSORT 2
---
> #  2
418c418
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 
418c418
< #define BZ_N_QSORT 2
---
> #  
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> # BZ_N_QSORT 2
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #  2
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> # BZ_N_QSORT 
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #  
> define BZ_N_SHELL 8
418c418
< #define BZ_N_QSORT 2
---
> #define  2
418c418
< #define BZ_N_QSORT 2
---
> #define  
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
> # BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
> # BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
>  BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
>  BZ_N_SHELL 8
418c418
< #define BZ_N_QSORT 2
---
> #define BZ_N_QSORT 
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> define BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> # BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
>  BZ_N_SHELL 8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> #define  8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> define  8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> #  8
418,419c418,419
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
>   8
419c419
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 8
419c419
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 8
419c419
< #define BZ_N_SHELL 8
---
> define  8
419c419
< #define BZ_N_SHELL 8
---
>   8
419c419
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 
419c419
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 
419c419
< #define BZ_N_SHELL 8
---
> define  
(85.8 %, 29132 bytes)
419c419
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 8
419c419
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 8
419c419
< #define BZ_N_SHELL 8
---
> define  8
419c419
< #define BZ_N_SHELL 8
---
>   8
419c419
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 
419c419
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 
419c419
< #define BZ_N_SHELL 8
---
> define  
419c419
< #define BZ_N_SHELL 8
---
>   
419c419
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 8
419c419
< #define BZ_N_SHELL 8
---
> #  8
419c419
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 
419c419
< #define BZ_N_SHELL 8
---
> #  
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_SHELL 8
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  8
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_SHELL 
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419c419
< #define BZ_N_SHELL 8
---
> #define  8
419c419
< #define BZ_N_SHELL 8
---
> #define  
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  8
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  8
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  8
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419c419
< #define BZ_N_SHELL 8
---
> #define BZ_N_SHELL 
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
> #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
> #  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
419,420c419,420
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_SHELL 
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>  BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define   + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>    + BZ_N_QSORT + BZ_N_SHELL + 2
(85.8 %, 29131 bytes)
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>  BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> define   + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>    + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #   + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #    BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define    BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX +  + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   +  + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX   + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define     + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
(85.8 %, 29121 bytes)
420c420
< #define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2
(85.8 %, 29120 bytes)
420c420
< #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT     BZ_N_SHELL + 2
(85.8 %, 29110 bytes)
420c420
< #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT     BZ_N_SHELL + 2
420c420
< #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT      + 2
(85.8 %, 29109 bytes)
420c420
< #define BZ_N_OVERSHOOT     BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT      + 2
420c420
< #define BZ_N_OVERSHOOT     BZ_N_SHELL + 2
---
> #define BZ_N_OVERSHOOT       2
(85.8 %, 29099 bytes)
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       2
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       
420c420,421
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       2
> 
427d427
< typedef
420c420,421
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       
> 
427d427
< typedef
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       2
428c428
<    struct {
---
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       
428c428
<    struct {
---
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       2
427,428c427,428
< typedef
<    struct {
---
> 
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT       
427,428c427,428
< typedef
<    struct {
---
> 
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
420c420,421
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
> 
427d427
< typedef
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
428c428
<    struct {
---
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
427,428c427,428
< typedef
<    struct {
---
> 
>     {
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
428c428
<    struct {
---
>    struct 
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
427,428c427,428
< typedef
<    struct {
---
> 
>    struct 
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
428c428
<    struct {
---
>     
420c420
< #define BZ_N_OVERSHOOT      + 2
---
> #define BZ_N_OVERSHOOT      + 
427,428c427,428
< typedef
<    struct {
---
> 
>     
427c427
< typedef
---
> 
(85.8 %, 29098 bytes)
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
420c420,421
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
> 
427d427
< typedef
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
428c428
<    struct {
---
>     {
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
427,428c427,428
< typedef
<    struct {
---
> 
>     {
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
428c428
<    struct {
---
>    struct 
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
427,428c427,428
< typedef
<    struct {
---
> 
>    struct 
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
428c428
<    struct {
---
>     
420c420
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT       
427,428c427,428
< typedef
<    struct {
---
> 
>     
427c427
< typedef
---
> 
427,428c427,428
< typedef
<    struct {
---
> 
>     {
427,428c427,428
< typedef
<    struct {
---
> 
>    struct 
427,428c427,428
< typedef
<    struct {
---
> 
>     
427c427
< typedef
---
> 
430c430
<       bz_stream* strm;
---
>       * strm;
427,428c427,428
< typedef
<    struct {
---
> 
>     {
430c430
<       bz_stream* strm;
---
>       * strm;
427,428c427,428
< typedef
<    struct {
---
> 
>    struct 
430c430
<       bz_stream* strm;
---
>       * strm;
427,428c427,428
< typedef
<    struct {
---
> 
>     
430c430
<       bz_stream* strm;
---
>       * strm;
428c428
<    struct {
---
>     {
428c428
<    struct {
---
>     
428c428
<    struct {
---
>     {
430c430
<       bz_stream* strm;
---
>       * strm;
428c428
<    struct {
---
>     
430c430
<       bz_stream* strm;
---
>       * strm;
428c428
<    struct {
---
>     {
430c430
<       bz_stream* strm;
---
>       bz_stream strm;
428c428
<    struct {
---
>     
430c430
<       bz_stream* strm;
---
>       bz_stream strm;
428c428
<    struct {
---
>     {
430c430
<       bz_stream* strm;
---
>        strm;
428c428
<    struct {
---
>     
430c430
<       bz_stream* strm;
---
>        strm;
428c428
<    struct {
---
>    struct 
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>       * strm;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>       bz_stream strm;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>        strm;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>       bz_stream* ;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>       * ;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>       bz_stream ;
428c428
<    struct {
---
>    struct 
430c430
<       bz_stream* strm;
---
>        ;
430c430
<       bz_stream* strm;
---
>       * strm;
430c430
<       bz_stream* strm;
---
>        strm;
430c430
<       bz_stream* strm;
---
>       * ;
430c430
<       bz_stream* strm;
---
>        ;
430c430
<       bz_stream* strm;
---
>       * strm
430c430
<       bz_stream* strm;
---
>        strm
430c430
<       bz_stream* strm;
---
>       * 
430c430
<       bz_stream* strm;
---
>        
(85.8 %, 29084 bytes)
430c430
<        ;
---
>        
434c434
<       Int32    mode;
---
>           ;
430c430
<        ;
---
>        
434c434
<       Int32    mode;
---
>       Int32    mode
430c430
<        ;
---
>        
434c434
<       Int32    mode;
---
>           mode
430c430
<        ;
---
>        
434c434
<       Int32    mode;
---
>       Int32    
430c430
<        ;
---
>        
434c434
<       Int32    mode;
---
>           
(85.8 %, 29074 bytes)
433a434
>           
435d435
<       Int32    state;
434,435c434,435
<           ;
<       Int32    state;
---
>           
>       Int32    state
434,435c434,435
<           ;
<       Int32    state;
---
>           
>           state
434,435c434,435
<           ;
<       Int32    state;
---
>           
>       Int32    
434,435c434,435
<           ;
<       Int32    state;
---
>           
>           
435c435
<       Int32    state;
---
>           state;
435c435
<       Int32    state;
---
>           ;
(85.8 %, 29063 bytes)
435c435
<           ;
---
>           
438c438
<       UInt32   avail_in_expect;
---
>          ;
435c435
<           ;
---
>           
438c438
<       UInt32   avail_in_expect;
---
>       UInt32   avail_in_expect
435c435
<           ;
---
>           
438c438
<       UInt32   avail_in_expect;
---
>          avail_in_expect
435c435
<           ;
---
>           
438c438
<       UInt32   avail_in_expect;
---
>       UInt32   
435c435
<           ;
---
>           
438c438
<       UInt32   avail_in_expect;
---
>          
(85.8 %, 29041 bytes)
438c438
<          ;
---
>          
441c441
<       UInt32*  arr1;
---
>         arr1;
438c438
<          ;
---
>          
441c441
<       UInt32*  arr1;
---
>       UInt32*  ;
438c438
<          ;
---
>          
441c441
<       UInt32*  arr1;
---
>       *  ;
438c438
<          ;
---
>          
441c441
<       UInt32*  arr1;
---
>       UInt32  ;
438c438
<          ;
---
>          
441c441
<       UInt32*  arr1;
---
>         ;
441c441
<       UInt32*  arr1;
---
>       *  arr1;
441c441
<       UInt32*  arr1;
---
>         arr1;
441c441
<       UInt32*  arr1;
---
>       *  ;
441c441
<       UInt32*  arr1;
---
>         ;
441c441
<       UInt32*  arr1;
---
>       *  arr1
441c441
<       UInt32*  arr1;
---
>         arr1
441c441
<       UInt32*  arr1;
---
>       *  
441c441
<       UInt32*  arr1;
---
>         
441c441
<       UInt32*  arr1;
---
>       UInt32  arr1;
441c441
<       UInt32*  arr1;
---
>       UInt32  ;
441c441
<       UInt32*  arr1;
---
>       UInt32  arr1
441c441
<       UInt32*  arr1;
---
>       UInt32  
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1;
>       *  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32  ;
>       *  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       *  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32  
>       *  arr2;
441c441
<       UInt32*  arr1;
---
>       UInt32*  ;
441c441
<       UInt32*  arr1;
---
>       UInt32*  
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  ;
>       *  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  
>       *  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  ;
>       UInt32  arr2;
441,442c441,442
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  
>       UInt32  arr2;
(85.8 %, 29040 bytes)
441c441
<       UInt32  arr1;
---
>       UInt32  ;
441c441
<       UInt32  arr1;
---
>       UInt32  
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  ;
>       *  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  
>       *  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  ;
>       UInt32  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  
>       UInt32  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  ;
>         arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  
>         arr2;
441c441
<       UInt32  arr1;
---
>       UInt32  arr1
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       *  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       UInt32  arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>         arr2;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       UInt32*  ;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       *  ;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>       UInt32  ;
441,442c441,442
<       UInt32  arr1;
<       UInt32*  arr2;
---
>       UInt32  arr1
>         ;
442c442
<       UInt32*  arr2;
---
>       *  arr2;
442c442
<       UInt32*  arr2;
---
>         arr2;
442c442
<       UInt32*  arr2;
---
>       *  ;
442c442
<       UInt32*  arr2;
---
>         ;
442c442
<       UInt32*  arr2;
---
>       *  arr2
442c442
<       UInt32*  arr2;
---
>         arr2
442c442
<       UInt32*  arr2;
---
>       *  
442c442
<       UInt32*  arr2;
---
>         
442c442
<       UInt32*  arr2;
---
>       UInt32  arr2;
442c442
<       UInt32*  arr2;
---
>       UInt32  ;
442c442
<       UInt32*  arr2;
---
>       UInt32  arr2
442c442
<       UInt32*  arr2;
---
>       UInt32  
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2;
>       *  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>       *  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       *  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>       *  ftab;
442c442
<       UInt32*  arr2;
---
>       UInt32*  ;
442c442
<       UInt32*  arr2;
---
>       UInt32*  
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  ;
>       *  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  
>       *  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  ;
>       UInt32  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  
>       UInt32  ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  ;
>         ftab;
442,443c442,443
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  
>         ftab;
(85.8 %, 29039 bytes)
442c442
<       UInt32  arr2;
---
>       UInt32  ;
442c442
<       UInt32  arr2;
---
>       UInt32  
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>       *  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>       *  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>       UInt32  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>       UInt32  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>         ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>         ftab;
442c442
<       UInt32  arr2;
---
>       UInt32  arr2
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       *  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32  ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>         ftab;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32*  ;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       *  ;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32  ;
442,443c442,443
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>         ;
443c443
<       UInt32*  ftab;
---
>       *  ftab;
443c443
<       UInt32*  ftab;
---
>         ftab;
443c443
<       UInt32*  ftab;
---
>       *  ;
443c443
<       UInt32*  ftab;
---
>         ;
443c443
<       UInt32*  ftab;
---
>       *  ftab
443c443
<       UInt32*  ftab;
---
>         ftab
443c443
<       UInt32*  ftab;
---
>       *  
443c443
<       UInt32*  ftab;
---
>         
443c443
<       UInt32*  ftab;
---
>       UInt32  ftab;
443c443
<       UInt32*  ftab;
---
>       UInt32  ;
443c443
<       UInt32*  ftab;
---
>       UInt32  ftab
443c443
<       UInt32*  ftab;
---
>       UInt32  
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab;
>           origPtr;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           origPtr;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           origPtr;
443c443
<       UInt32*  ftab;
---
>       UInt32*  ;
443c443
<       UInt32*  ftab;
---
>       UInt32*  
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>           origPtr;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>           origPtr;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>       Int32    ;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>       Int32    ;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>           ;
443,444c443,444
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>           ;
443c443
<       UInt32*  ftab;
---
>       UInt32*  ftab
(85.8 %, 29038 bytes)
443c443
<       UInt32  ftab;
---
>       UInt32  ;
443c443
<       UInt32  ftab;
---
>       UInt32  
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           origPtr;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           origPtr;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>       Int32    ;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>       Int32    ;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           ;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           ;
443c443
<       UInt32  ftab;
---
>       UInt32  ftab
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    ;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           ;
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    origPtr
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    
443,444c443,444
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           
444c444
<       Int32    origPtr;
---
>           origPtr;
444c444
<       Int32    origPtr;
---
>           ;
(85.8 %, 29025 bytes)
444c444
<           ;
---
>           
447c447
<       UInt32*  ptr;
---
>         ptr;
444c444
<           ;
---
>           
447c447
<       UInt32*  ptr;
---
>       UInt32*  ;
444c444
<           ;
---
>           
447c447
<       UInt32*  ptr;
---
>       *  ;
444c444
<           ;
---
>           
447c447
<       UInt32*  ptr;
---
>       UInt32  ;
444c444
<           ;
---
>           
447c447
<       UInt32*  ptr;
---
>         ;
447c447
<       UInt32*  ptr;
---
>       *  ptr;
447c447
<       UInt32*  ptr;
---
>         ptr;
447c447
<       UInt32*  ptr;
---
>       *  ;
447c447
<       UInt32*  ptr;
---
>         ;
447c447
<       UInt32*  ptr;
---
>       *  ptr
447c447
<       UInt32*  ptr;
---
>         ptr
447c447
<       UInt32*  ptr;
---
>       *  
447c447
<       UInt32*  ptr;
---
>         
447c447
<       UInt32*  ptr;
---
>       UInt32  ptr;
447c447
<       UInt32*  ptr;
---
>       UInt32  ;
447c447
<       UInt32*  ptr;
---
>       UInt32  ptr
447c447
<       UInt32*  ptr;
---
>       UInt32  
447,448c447,448
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr;
>        char*   block;
(85.8 %, 29024 bytes)
447c447
<       UInt32  ptr;
---
>       UInt32  ;
447c447
<       UInt32  ptr;
---
>       UInt32  
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>        char*   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>        char*   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>       unsigned *   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>       unsigned *   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>        *   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>        *   block;
447c447
<       UInt32  ptr;
---
>       UInt32  ptr
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        char*   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned *   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        *   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned char   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        char   block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned    block;
447,448c447,448
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>           block;
448c448
<       unsigned char*   block;
---
>        char*   block;
448c448
<       unsigned char*   block;
---
>        *   block;
448c448
<       unsigned char*   block;
---
>        char   block;
448c448
<       unsigned char*   block;
---
>           block;
448c448
<       unsigned char*   block;
---
>        char*   ;
448c448
<       unsigned char*   block;
---
>        *   ;
448c448
<       unsigned char*   block;
---
>        char   ;
448c448
<       unsigned char*   block;
---
>           ;
(85.8 %, 29016 bytes)
448c448
<        char*   block;
---
>        *   block;
448c448
<        char*   block;
---
>           block;
448c448
<        char*   block;
---
>        *   ;
448c448
<        char*   block;
---
>           ;
448c448
<        char*   block;
---
>        *   block
448c448
<        char*   block;
---
>           block
448c448
<        char*   block;
---
>        *   
448c448
<        char*   block;
---
>           
448c448
<        char*   block;
---
>        char   block;
448c448
<        char*   block;
---
>        char   ;
448c448
<        char*   block;
---
>        char   block
448c448
<        char*   block;
---
>        char   
448,449c448,449
<        char*   block;
<       unsigned short*  mtfv;
---
>        char   block;
>        short*  mtfv;
(85.8 %, 29015 bytes)
448c448
<        char   block;
---
>        char   ;
448c448
<        char   block;
---
>        char   
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   ;
>        short*  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   
>        short*  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   ;
>       unsigned *  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   
>       unsigned *  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   ;
>        *  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   
>        *  mtfv;
448c448
<        char   block;
---
>        char   block
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>        short*  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>       unsigned *  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>        *  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>       unsigned short  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>        short  mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>       unsigned   mtfv;
448,449c448,449
<        char   block;
<       unsigned short*  mtfv;
---
>        char   block
>          mtfv;
449c449
<       unsigned short*  mtfv;
---
>        short*  mtfv;
449c449
<       unsigned short*  mtfv;
---
>        *  mtfv;
449c449
<       unsigned short*  mtfv;
---
>        short  mtfv;
(85.8 %, 29007 bytes)
449c449
<        short*  mtfv;
---
>        *  mtfv;
449c449
<        short*  mtfv;
---
>          mtfv;
449c449
<        short*  mtfv;
---
>        *  ;
449c449
<        short*  mtfv;
---
>          ;
449c449
<        short*  mtfv;
---
>        *  mtfv
449c449
<        short*  mtfv;
---
>          mtfv
449c449
<        short*  mtfv;
---
>        *  
449c449
<        short*  mtfv;
---
>          
449c449
<        short*  mtfv;
---
>        short  mtfv;
449c449
<        short*  mtfv;
---
>        short  ;
449c449
<        short*  mtfv;
---
>        short  mtfv
449c449
<        short*  mtfv;
---
>        short  
449,450c449,450
<        short*  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv;
>        char*   zbits;
(85.8 %, 29006 bytes)
449c449
<        short  mtfv;
---
>        short  ;
449c449
<        short  mtfv;
---
>        short  
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  ;
>        char*   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  
>        char*   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  ;
>       unsigned *   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  
>       unsigned *   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  ;
>        *   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  
>        *   zbits;
449c449
<        short  mtfv;
---
>        short  mtfv
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>        char*   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>       unsigned *   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>        *   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>       unsigned char   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>        char   zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>       unsigned    zbits;
449,450c449,450
<        short  mtfv;
<       unsigned char*   zbits;
---
>        short  mtfv
>           zbits;
450c450
<       unsigned char*   zbits;
---
>        char*   zbits;
450c450
<       unsigned char*   zbits;
---
>        *   zbits;
450c450
<       unsigned char*   zbits;
---
>        char   zbits;
(85.9 %, 28998 bytes)
450c450
<        char*   zbits;
---
>        *   zbits;
450c450
<        char*   zbits;
---
>           zbits;
450c450
<        char*   zbits;
---
>        *   ;
450c450
<        char*   zbits;
---
>           ;
450c450
<        char*   zbits;
---
>        *   zbits
450c450
<        char*   zbits;
---
>           zbits
450c450
<        char*   zbits;
---
>        *   
450c450
<        char*   zbits;
---
>           
450c450
<        char*   zbits;
---
>        char   zbits;
450c450
<        char*   zbits;
---
>        char   ;
450c450
<        char*   zbits;
---
>        char   zbits
450c450
<        char*   zbits;
---
>        char   
450c450
<        char*   zbits;
---
>        char   zbits;
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char   ;
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char   
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char*   ;
450c450
<        char*   zbits;
---
>        char*   
450c450
<        char*   zbits;
---
>        char*   ;
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char*   
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char*   zbits;
---
>        char*   ;
453c453
<       Int32    workFactor;
---
>       Int32    ;
450c450
<        char*   zbits;
---
>        char*   
453c453
<       Int32    workFactor;
---
>       Int32    ;
450c450
<        char*   zbits;
---
>        char*   ;
453c453
<       Int32    workFactor;
---
>           ;
450c450
<        char*   zbits;
---
>        char*   
453c453
<       Int32    workFactor;
---
>           ;
(85.9 %, 28997 bytes)
450c450
<        char   zbits;
---
>        char   ;
450c450
<        char   zbits;
---
>        char   
450c450
<        char   zbits;
---
>        char   ;
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char   zbits;
---
>        char   
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char   zbits;
---
>        char   ;
453c453
<       Int32    workFactor;
---
>       Int32    ;
450c450
<        char   zbits;
---
>        char   
453c453
<       Int32    workFactor;
---
>       Int32    ;
450c450
<        char   zbits;
---
>        char   ;
453c453
<       Int32    workFactor;
---
>           ;
450c450
<        char   zbits;
---
>        char   
453c453
<       Int32    workFactor;
---
>           ;
450c450
<        char   zbits;
---
>        char   zbits
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>           workFactor;
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>       Int32    ;
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>           ;
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>       Int32    workFactor
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>           workFactor
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>       Int32    
450c450
<        char   zbits;
---
>        char   zbits
453c453
<       Int32    workFactor;
---
>           
453c453
<       Int32    workFactor;
---
>           workFactor;
453c453
<       Int32    workFactor;
---
>           ;
(85.9 %, 28981 bytes)
453c453
<           ;
---
>           
456c456
<       UInt32   state_in_ch;
---
>          ;
453c453
<           ;
---
>           
456c456
<       UInt32   state_in_ch;
---
>       UInt32   state_in_ch
453c453
<           ;
---
>           
456c456
<       UInt32   state_in_ch;
---
>          state_in_ch
453c453
<           ;
---
>           
456c456
<       UInt32   state_in_ch;
---
>       UInt32   
453c453
<           ;
---
>           
456c456
<       UInt32   state_in_ch;
---
>          
456c456
<       UInt32   state_in_ch;
---
>          state_in_ch;
456c456
<       UInt32   state_in_ch;
---
>          ;
(85.9 %, 28963 bytes)
456,457c456,457
<          ;
<       Int32    state_in_len;
---
>          
>           ;
456,457c456,457
<          ;
<       Int32    state_in_len;
---
>          
>       Int32    state_in_len
456,457c456,457
<          ;
<       Int32    state_in_len;
---
>          
>           state_in_len
456,457c456,457
<          ;
<       Int32    state_in_len;
---
>          
>       Int32    
456,457c456,457
<          ;
<       Int32    state_in_len;
---
>          
>           
(85.9 %, 28945 bytes)
457,458c457,458
<           ;
<       BZ_RAND_DECLS;
---
>           
>       
457c457
<           ;
---
>           
461c461
<       Int32    nblock;
---
>           nblock;
457,458c457,458
<           ;
<       BZ_RAND_DECLS;
---
>           
>       ;
461c461
<       Int32    nblock;
---
>           nblock;
457,458c457,458
<           ;
<       BZ_RAND_DECLS;
---
>           
>       BZ_RAND_DECLS
461c461
<       Int32    nblock;
---
>           nblock;
457,458c457,458
<           ;
<       BZ_RAND_DECLS;
---
>           
>       
461c461
<       Int32    nblock;
---
>           nblock;
458c458
<       BZ_RAND_DECLS;
---
>       ;
458c458
<       BZ_RAND_DECLS;
---
>       
458c458
<       BZ_RAND_DECLS;
---
>       ;
461c461
<       Int32    nblock;
---
>           nblock;
458c458
<       BZ_RAND_DECLS;
---
>       
461c461
<       Int32    nblock;
---
>           nblock;
458c458
<       BZ_RAND_DECLS;
---
>       ;
461c461
<       Int32    nblock;
---
>       Int32    ;
458c458
<       BZ_RAND_DECLS;
---
>       
461c461
<       Int32    nblock;
---
>       Int32    ;
(85.9 %, 28932 bytes)
458c458
<       ;
---
>       
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>           nblock;
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>       Int32    ;
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>           ;
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>       Int32    nblock
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>           nblock
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>       Int32    
458c458
<       ;
---
>       
461c461
<       Int32    nblock;
---
>           
461c461
<       Int32    nblock;
---
>           nblock;
461c461
<       Int32    nblock;
---
>           ;
461c461
<       Int32    nblock;
---
>           nblock
461c461
<       Int32    nblock;
---
>           
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock;
>           nblockMAX;
(85.9 %, 28931 bytes)
461c461
<       Int32    nblock;
---
>           nblock;
461c461
<       Int32    nblock;
---
>           ;
461c461
<       Int32    nblock;
---
>           nblock
461c461
<       Int32    nblock;
---
>           
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock;
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           ;
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           
>           nblockMAX;
461c461
<       Int32    nblock;
---
>       Int32    ;
461c461
<       Int32    nblock;
---
>       Int32    
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>       Int32    ;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>       Int32    ;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>           ;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>           ;
461c461
<       Int32    nblock;
---
>       Int32    nblock
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           nblockMAX;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    ;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           ;
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    nblockMAX
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           nblockMAX
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    
461,462c461,462
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           
462c462
<       Int32    nblockMAX;
---
>           nblockMAX;
462c462
<       Int32    nblockMAX;
---
>           ;
(85.9 %, 28916 bytes)
461a462
>           
463d463
<       Int32    numZ;
462,463c462,463
<           ;
<       Int32    numZ;
---
>           
>       Int32    numZ
462,463c462,463
<           ;
<       Int32    numZ;
---
>           
>           numZ
462,463c462,463
<           ;
<       Int32    numZ;
---
>           
>       Int32    
462,463c462,463
<           ;
<       Int32    numZ;
---
>           
>           
463c463
<       Int32    numZ;
---
>           numZ;
463c463
<       Int32    numZ;
---
>           ;
(85.9 %, 28906 bytes)
462a463
>           
464d464
<       Int32    state_out_pos;
463,464c463,464
<           ;
<       Int32    state_out_pos;
---
>           
>       Int32    state_out_pos
463,464c463,464
<           ;
<       Int32    state_out_pos;
---
>           
>           state_out_pos
463,464c463,464
<           ;
<       Int32    state_out_pos;
---
>           
>       Int32    
463,464c463,464
<           ;
<       Int32    state_out_pos;
---
>           
>           
464c464
<       Int32    state_out_pos;
---
>           state_out_pos;
464c464
<       Int32    state_out_pos;
---
>           ;
(85.9 %, 28887 bytes)
464c464
<           ;
---
>           
467c467
<       Int32    nInUse;
---
>           ;
464c464
<           ;
---
>           
467c467
<       Int32    nInUse;
---
>       Int32    nInUse
464c464
<           ;
---
>           
467c467
<       Int32    nInUse;
---
>           nInUse
464c464
<           ;
---
>           
467c467
<       Int32    nInUse;
---
>       Int32    
464c464
<           ;
---
>           
467c467
<       Int32    nInUse;
---
>           
467c467
<       Int32    nInUse;
---
>           nInUse;
467c467
<       Int32    nInUse;
---
>           ;
467c467
<       Int32    nInUse;
---
>           nInUse
467c467
<       Int32    nInUse;
---
>           
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           nInUse;
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           ;
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           nInUse
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           
>            inUse[6];
467c467
<       Int32    nInUse;
---
>       Int32    ;
467c467
<       Int32    nInUse;
---
>       Int32    
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>       Bool     [6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>       Bool     [6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>            [6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>            [6];
467c467
<       Int32    nInUse;
---
>       Int32    nInUse
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            inUse[6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     [6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            [6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     inUse6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            inUse6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     6];
467,468c467,468
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            6];
468c468
<       Bool     inUse[6];
---
>            inUse[6];
468c468
<       Bool     inUse[6];
---
>            [6];
468c468
<       Bool     inUse[6];
---
>            inUse6];
468c468
<       Bool     inUse[6];
---
>            6];
468c468
<       Bool     inUse[6];
---
>            inUse[];
468c468
<       Bool     inUse[6];
---
>            [];
468c468
<       Bool     inUse[6];
---
>            inUse];
468c468
<       Bool     inUse[6];
---
>            ];
468c468
<       Bool     inUse[6];
---
>       Bool     [6];
468c468
<       Bool     inUse[6];
---
>       Bool     6];
468c468
<       Bool     inUse[6];
---
>       Bool     [];
468c468
<       Bool     inUse[6];
---
>       Bool     ];
468c468
<       Bool     inUse[6];
---
>       Bool     [6;
468c468
<       Bool     inUse[6];
---
>       Bool     6;
468c468
<       Bool     inUse[6];
---
>       Bool     [;
468c468
<       Bool     inUse[6];
---
>       Bool     ;
468c468
<       Bool     inUse[6];
---
>       Bool     inUse6];
468c468
<       Bool     inUse[6];
---
>       Bool     inUse];
468c468
<       Bool     inUse[6];
---
>       Bool     inUse6;
468c468
<       Bool     inUse[6];
---
>       Bool     inUse;
468c468
<       Bool     inUse[6];
---
>       Bool     inUse6]
468c468
<       Bool     inUse[6];
---
>       Bool     inUse]
468c468
<       Bool     inUse[6];
---
>       Bool     inUse6
468c468
<       Bool     inUse[6];
---
>       Bool     inUse
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[];
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[;
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[]
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[];
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[;
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[]
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[
>        char    unseqToSeq[6];
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[6;
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[6
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6;
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6;
>       unsigned     unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6
>       unsigned     unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6;
>            unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6
>            unseqToSeq[6];
468c468
<       Bool     inUse[6];
---
>       Bool     inUse[6]
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>        char    unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>       unsigned     unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>            unseqToSeq[6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>       unsigned char    [6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>        char    [6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>       unsigned     [6];
468,469c468,469
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6]
>            [6];
469c469
<       unsigned char    unseqToSeq[6];
---
>        char    unseqToSeq[6];
469c469
<       unsigned char    unseqToSeq[6];
---
>            unseqToSeq[6];
469c469
<       unsigned char    unseqToSeq[6];
---
>        char    [6];
469c469
<       unsigned char    unseqToSeq[6];
---
>            [6];
469c469
<       unsigned char    unseqToSeq[6];
---
>        char    unseqToSeq6];
469c469
<       unsigned char    unseqToSeq[6];
---
>            unseqToSeq6];
469c469
<       unsigned char    unseqToSeq[6];
---
>        char    6];
469c469
<       unsigned char    unseqToSeq[6];
---
>            6];
469c469
<       unsigned char    unseqToSeq[6];
---
>       unsigned     unseqToSeq[6];
(85.9 %, 28879 bytes)
469c469
<        char    unseqToSeq[6];
---
>            unseqToSeq[6];
469c469
<        char    unseqToSeq[6];
---
>            [6];
469c469
<        char    unseqToSeq[6];
---
>            unseqToSeq6];
469c469
<        char    unseqToSeq[6];
---
>            6];
469c469
<        char    unseqToSeq[6];
---
>            unseqToSeq[];
469c469
<        char    unseqToSeq[6];
---
>            [];
469c469
<        char    unseqToSeq[6];
---
>            unseqToSeq];
469c469
<        char    unseqToSeq[6];
---
>            ];
469c469
<        char    unseqToSeq[6];
---
>        char    [6];
469c469
<        char    unseqToSeq[6];
---
>        char    6];
469c469
<        char    unseqToSeq[6];
---
>        char    [];
469c469
<        char    unseqToSeq[6];
---
>        char    ];
469c469
<        char    unseqToSeq[6];
---
>        char    [6;
469c469
<        char    unseqToSeq[6];
---
>        char    6;
469c469
<        char    unseqToSeq[6];
---
>        char    [;
469c469
<        char    unseqToSeq[6];
---
>        char    ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6];
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq];
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6]
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq]
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[];
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[]
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[];
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[;
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[]
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6;
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6;
472c472
<       UInt32   bsBuff;
---
>       UInt32   ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6
472c472
<       UInt32   bsBuff;
---
>       UInt32   ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6;
472c472
<       UInt32   bsBuff;
---
>          ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6
472c472
<       UInt32   bsBuff;
---
>          ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>       UInt32   ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>          ;
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>       UInt32   bsBuff
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>          bsBuff
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>       UInt32   
469c469
<        char    unseqToSeq[6];
---
>        char    unseqToSeq[6]
472c472
<       UInt32   bsBuff;
---
>          
472c472
<       UInt32   bsBuff;
---
>          bsBuff;
472c472
<       UInt32   bsBuff;
---
>          ;
(85.9 %, 28866 bytes)
472,473c472,473
<          ;
<       Int32    bsLive;
---
>          
>           ;
472,473c472,473
<          ;
<       Int32    bsLive;
---
>          
>       Int32    bsLive
472,473c472,473
<          ;
<       Int32    bsLive;
---
>          
>           bsLive
472,473c472,473
<          ;
<       Int32    bsLive;
---
>          
>       Int32    
472,473c472,473
<          ;
<       Int32    bsLive;
---
>          
>           
473c473
<       Int32    bsLive;
---
>           bsLive;
473c473
<       Int32    bsLive;
---
>           ;
(85.9 %, 28854 bytes)
473c473
<           ;
---
>           
476c476
<       UInt32   blockCRC;
---
>          ;
473c473
<           ;
---
>           
476c476
<       UInt32   blockCRC;
---
>       UInt32   blockCRC
473c473
<           ;
---
>           
476c476
<       UInt32   blockCRC;
---
>          blockCRC
473c473
<           ;
---
>           
476c476
<       UInt32   blockCRC;
---
>       UInt32   
473c473
<           ;
---
>           
476c476
<       UInt32   blockCRC;
---
>          
476c476
<       UInt32   blockCRC;
---
>          blockCRC;
476c476
<       UInt32   blockCRC;
---
>          ;
(85.9 %, 28839 bytes)
475a476
>          
477d477
<       UInt32   combinedCRC;
476,477c476,477
<          ;
<       UInt32   combinedCRC;
---
>          
>       UInt32   combinedCRC
476,477c476,477
<          ;
<       UInt32   combinedCRC;
---
>          
>          combinedCRC
476,477c476,477
<          ;
<       UInt32   combinedCRC;
---
>          
>       UInt32   
476,477c476,477
<          ;
<       UInt32   combinedCRC;
---
>          
>          
477c477
<       UInt32   combinedCRC;
---
>          combinedCRC;
477c477
<       UInt32   combinedCRC;
---
>          ;
(85.9 %, 28821 bytes)
477c477
<          ;
---
>          
480c480
<       Int32    verbosity;
---
>           ;
477c477
<          ;
---
>          
480c480
<       Int32    verbosity;
---
>       Int32    verbosity
477c477
<          ;
---
>          
480c480
<       Int32    verbosity;
---
>           verbosity
477c477
<          ;
---
>          
480c480
<       Int32    verbosity;
---
>       Int32    
477c477
<          ;
---
>          
480c480
<       Int32    verbosity;
---
>           
480c480
<       Int32    verbosity;
---
>           verbosity;
480c480
<       Int32    verbosity;
---
>           ;
(85.9 %, 28806 bytes)
479a480
>           
481d481
<       Int32    blockNo;
480,481c480,481
<           ;
<       Int32    blockNo;
---
>           
>       Int32    blockNo
480,481c480,481
<           ;
<       Int32    blockNo;
---
>           
>           blockNo
480,481c480,481
<           ;
<       Int32    blockNo;
---
>           
>       Int32    
480,481c480,481
<           ;
<       Int32    blockNo;
---
>           
>           
481c481
<       Int32    blockNo;
---
>           blockNo;
481c481
<       Int32    blockNo;
---
>           ;
481c481
<       Int32    blockNo;
---
>           blockNo
481c481
<       Int32    blockNo;
---
>           
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>           blockNo;
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>           ;
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>           
>           blockSize100k;
481c481
<       Int32    blockNo;
---
>       Int32    ;
481c481
<       Int32    blockNo;
---
>       Int32    
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    ;
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    ;
>       Int32    ;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    
>       Int32    ;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    ;
>           ;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    
>           ;
481c481
<       Int32    blockNo;
---
>       Int32    blockNo
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>           blockSize100k;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>       Int32    ;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>           ;
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>       Int32    blockSize100k
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>           blockSize100k
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>       Int32    
481,482c481,482
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    blockNo
>           
482c482
<       Int32    blockSize100k;
---
>           blockSize100k;
482c482
<       Int32    blockSize100k;
---
>           ;
(86.0 %, 28787 bytes)
482c482
<           ;
---
>           
485c485
<       Int32    nMTF;
---
>           ;
482c482
<           ;
---
>           
485c485
<       Int32    nMTF;
---
>       Int32    nMTF
482c482
<           ;
---
>           
485c485
<       Int32    nMTF;
---
>           nMTF
482c482
<           ;
---
>           
485c485
<       Int32    nMTF;
---
>       Int32    
482c482
<           ;
---
>           
485c485
<       Int32    nMTF;
---
>           
485c485
<       Int32    nMTF;
---
>           nMTF;
485c485
<       Int32    nMTF;
---
>           ;
485c485
<       Int32    nMTF;
---
>           nMTF
485c485
<       Int32    nMTF;
---
>           
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           nMTF;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           ;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           nMTF
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485c485
<       Int32    nMTF;
---
>       Int32    ;
485c485
<       Int32    nMTF;
---
>       Int32    
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>       Int32        [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>       Int32        [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>               [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>               [BZ_MAX_ALPHA_SIZE];
485c485
<       Int32    nMTF;
---
>       Int32    nMTF
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32        [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>               [BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>           mtfFreq    BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32        BZ_MAX_ALPHA_SIZE];
485,486c485,486
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>               BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    [];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               [];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    ];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               ];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        ];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [BZ_MAX_ALPHA_SIZE;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        BZ_MAX_ALPHA_SIZE;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        ;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE]
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ]
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    []
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [];
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [;
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    []
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [
>        char    selector   [BZ_MAX_SELECTORS];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>       unsigned     selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>       unsigned     selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>            selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>            selector   [BZ_MAX_SELECTORS];
486c486
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>        char    selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned     selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>            selector   [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned char       [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>        char       [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned        [BZ_MAX_SELECTORS];
486,487c486,487
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>               [BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   [BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>               BZ_MAX_SELECTORS];
487c487
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       unsigned     selector   [BZ_MAX_SELECTORS];
(86.0 %, 28779 bytes)
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>               BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>               [];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   ];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>               ];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       ];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS;
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS;
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [;
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       ;
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   ];
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS;
487c487
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   ;
(86.0 %, 28753 bytes)
487,488c487,488
<        char       ;
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char       
>            [BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf[BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtfBZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            BZ_MAX_SELECTORS];
488c488
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
(86.0 %, 28745 bytes)
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[BZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtfBZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            BZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            ];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    ];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS;
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS;
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [;
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    ;
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf];
488c488
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS;
(86.0 %, 28716 bytes)
488c488
<        char    ;
---
>        char    
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned     len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.0 %, 28708 bytes)
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     ][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 ][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         ][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [[BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     ][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     ]BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [][BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [[BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     []BZ_MAX_ALPHA_SIZE];
490c490
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE];
(86.0 %, 28695 bytes)
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     ;
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE]
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     ]
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [];
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [;
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     []
490c490
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [
490,491c490,491
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [];
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [;
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     []
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.0 %, 28676 bytes)
490,491c490,491
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>       Int32    code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>           code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>       Int32        BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
490,491c490,491
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>               BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491c491
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491c491
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491c491
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491c491
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.0 %, 28666 bytes)
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               ]BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [][BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [[BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               []BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
(86.0 %, 28653 bytes)
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               ;
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE]
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               ]
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               [];
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               [;
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               []
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               [
491,492c491,492
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [];
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [;
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               []
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE;
491c491
<               [BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE
491,492c491,492
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE;
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.0 %, 28634 bytes)
491,492c491,492
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>       Int32    rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>           rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
491,492c491,492
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   [][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   ][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
492c492
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.0 %, 28623 bytes)
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
492c492
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(86.0 %, 28610 bytes)
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
492c492
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
(86.0 %, 28591 bytes)
492c492
<              ;
---
>              
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [BZ_MAX_ALPHA_SIZE][4];
492c492
<              ;
---
>              
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   len_packBZ_MAX_ALPHA_SIZE][4];
492c492
<              ;
---
>              
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_packBZ_MAX_ALPHA_SIZE][4];
492c492
<              ;
---
>              
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   BZ_MAX_ALPHA_SIZE][4];
492c492
<              ;
---
>              
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [BZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_packBZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          ][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   [BZ_MAX_ALPHA_SIZE][4];
494c494
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   BZ_MAX_ALPHA_SIZE][4];
(86.1 %, 28576 bytes)
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          [4];
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE]4];
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          ]4];
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE4];
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          4];
494c494
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          [][4];
(86.1 %, 28557 bytes)
494c494
<          [4];
---
>          ;
494c494
<          [4];
---
>          4]
494c494
<          [4];
---
>          ]
494c494
<          [4];
---
>          4
494c494
<          [4];
---
>          
(86.1 %, 28554 bytes)
494c494
<          ;
---
>          
496,497c496,497
<    }
<    EState;
---
>    
>    ;
494c494
<          ;
---
>          
497c497
<    EState;
---
>    EState
494c494
<          ;
---
>          
496,497c496,497
<    }
<    EState;
---
>    
>    EState
494c494
<          ;
---
>          
497c497
<    EState;
---
>    
494c494
<          ;
---
>          
496,497c496,497
<    }
<    EState;
---
>    
>    
496c496
<    }
---
>    
496,497c496,497
<    }
<    EState;
---
>    
>    ;
496,497c496,497
<    }
<    EState;
---
>    
>    EState
496,497c496,497
<    }
<    EState;
---
>    
>    
496c496
<    }
---
>    
505c505
< ;
---
> 
496,497c496,498
<    }
<    EState;
---
>    
>    ;
> 
505d505
< ;
496,497c496,498
<    }
<    EState;
---
>    
>    EState
> 
505d505
< ;
496,497c496,498
<    }
<    EState;
---
>    
>    
> 
505d505
< ;
497c497
<    EState;
---
>    ;
497c497
<    EState;
---
>    
497c497,498
<    EState;
---
>    ;
> 
505d505
< ;
497c497,498
<    EState;
---
>    
> 
505d505
< ;
497c497
<    EState;
---
>    ;
507c507
< ;
---
> 
(86.1 %, 28552 bytes)
496c496
<    }
---
>    
507c507
< ;
---
> 
496,497c496,497
<    }
<    EState
---
>    
>    
507c507
< ;
---
> 
496c496
<    }
---
>    
505d504
< ;
507c506,507
< ;
---
> 
> 
496,497c496,499
<    }
<    EState
---
>    
>    
> 
> 
505d506
< ;
507d507
< ;
497c497
<    EState
---
>    
497c497,498
<    EState
---
>    
> 
505d505
< ;
497c497
<    EState
---
>    
507c507
< ;
---
> 
497c497,499
<    EState
---
>    
> 
> 
505d506
< ;
507d507
< ;
497c497
<    EState
---
>    
517c517
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
497c497,498
<    EState
---
>    
> 
505d505
< ;
517c517
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
497c497
<    EState
---
>    
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> define BZ_X_IDLE        1
497c497
<    EState
---
>    
505d504
< ;
507d505
< ;
517c515,517
< #define BZ_X_IDLE        1
---
> 
> 
> define BZ_X_IDLE        1
505c505
< ;
---
> 
505d504
< ;
507c506,507
< ;
---
> 
> 
505c505
< ;
---
> 
517c517
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
505d504
< ;
507d505
< ;
517c515,517
< #define BZ_X_IDLE        1
---
> 
> 
> define BZ_X_IDLE        1
505c505
< ;
---
> 
517c517
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        1
505d504
< ;
507d505
< ;
517c515,517
< #define BZ_X_IDLE        1
---
> 
> 
> # BZ_X_IDLE        1
505c505
< ;
---
> 
517c517
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        1
505d504
< ;
507d505
< ;
517c515,517
< #define BZ_X_IDLE        1
---
> 
> 
>  BZ_X_IDLE        1
507c507
< ;
---
> 
(86.1 %, 28551 bytes)
507c507
< ;
---
> 
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> define BZ_X_IDLE        1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> # BZ_X_IDLE        1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
>  BZ_X_IDLE        1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> #define         1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> define         1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
> #         1
507d506
< ;
517c516,517
< #define BZ_X_IDLE        1
---
> 
>          1
517c517
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
517c517
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        1
517c517
< #define BZ_X_IDLE        1
---
> define         1
517c517
< #define BZ_X_IDLE        1
---
>          1
517c517
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        
517c517
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        
517c517
< #define BZ_X_IDLE        1
---
> define         
517c517
< #define BZ_X_IDLE        1
---
>          
517c517
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        1
517c517
< #define BZ_X_IDLE        1
---
> #         1
517c517
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        
(86.1 %, 28534 bytes)
518c518
< #define BZ_X_OUTPUT      2
---
>        
518c518
< #define BZ_X_OUTPUT      2
---
> # BZ_X_OUTPUT      2
518c518
< #define BZ_X_OUTPUT      2
---
> #       2
(86.1 %, 28515 bytes)
520c520
< #define BZ_X_MAGIC_1     0
---
>       
520c520
< #define BZ_X_MAGIC_1     0
---
> # BZ_X_MAGIC_1     0
520c520
< #define BZ_X_MAGIC_1     0
---
> #      0
520c520
< #define BZ_X_MAGIC_1     0
---
> # BZ_X_MAGIC_1     
520c520
< #define BZ_X_MAGIC_1     0
---
> #      
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_1     0
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #      0
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_1     
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #      
> define BZ_X_MAGIC_2     1
520c520
< #define BZ_X_MAGIC_1     0
---
> #define      0
520c520
< #define BZ_X_MAGIC_1     0
---
> #define      
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
> # BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
> # BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
>  BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
>  BZ_X_MAGIC_2     1
520c520
< #define BZ_X_MAGIC_1     0
---
> #define BZ_X_MAGIC_1     
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> define BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> # BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
>  BZ_X_MAGIC_2     1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> #define      1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> define      1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> #      1
520,521c520,521
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
>       1
521c521
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     1
521c521
< #define BZ_X_MAGIC_2     1
---
>  BZ_X_MAGIC_2     1
521c521
< #define BZ_X_MAGIC_2     1
---
> define      1
521c521
< #define BZ_X_MAGIC_2     1
---
>       1
521c521
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     
521c521
< #define BZ_X_MAGIC_2     1
---
>  BZ_X_MAGIC_2     
521c521
< #define BZ_X_MAGIC_2     1
---
> define      
521c521
< #define BZ_X_MAGIC_2     1
---
>       
521c521
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_2     1
521c521
< #define BZ_X_MAGIC_2     1
---
> #      1
521c521
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_2     
(86.1 %, 28495 bytes)
522c522
< #define BZ_X_MAGIC_3     2
---
>       
522c522
< #define BZ_X_MAGIC_3     2
---
> # BZ_X_MAGIC_3     2
522c522
< #define BZ_X_MAGIC_3     2
---
> #      2
(86.1 %, 28475 bytes)
523c523
< #define BZ_X_MAGIC_4     3
---
>       
523c523
< #define BZ_X_MAGIC_4     3
---
> # BZ_X_MAGIC_4     3
523c523
< #define BZ_X_MAGIC_4     3
---
> #      3
(86.1 %, 28455 bytes)
524c524
< #define BZ_X_BLKHDR_1    4
---
>      
524c524
< #define BZ_X_BLKHDR_1    4
---
> # BZ_X_BLKHDR_1    4
524c524
< #define BZ_X_BLKHDR_1    4
---
> #     4
(86.1 %, 28434 bytes)
525c525
< #define BZ_X_BLKHDR_2    5
---
>      
525c525
< #define BZ_X_BLKHDR_2    5
---
> # BZ_X_BLKHDR_2    5
525c525
< #define BZ_X_BLKHDR_2    5
---
> #     5
(86.1 %, 28413 bytes)
526c526
< #define BZ_X_BLKHDR_3    6
---
>      
526c526
< #define BZ_X_BLKHDR_3    6
---
> # BZ_X_BLKHDR_3    6
526c526
< #define BZ_X_BLKHDR_3    6
---
> #     6
(86.1 %, 28392 bytes)
527c527
< #define BZ_X_BLKHDR_4    7
---
>      
527c527
< #define BZ_X_BLKHDR_4    7
---
> # BZ_X_BLKHDR_4    7
527c527
< #define BZ_X_BLKHDR_4    7
---
> #     7
(86.2 %, 28371 bytes)
528c528
< #define BZ_X_BLKHDR_5    8
---
>      
528c528
< #define BZ_X_BLKHDR_5    8
---
> # BZ_X_BLKHDR_5    8
528c528
< #define BZ_X_BLKHDR_5    8
---
> #     8
(86.2 %, 28350 bytes)
529c529
< #define BZ_X_BLKHDR_6    9
---
>      
529c529
< #define BZ_X_BLKHDR_6    9
---
> # BZ_X_BLKHDR_6    9
529c529
< #define BZ_X_BLKHDR_6    9
---
> #     9
(86.2 %, 28329 bytes)
530c530
< #define BZ_X_BCRC_1      0
---
>        
530c530
< #define BZ_X_BCRC_1      0
---
> # BZ_X_BCRC_1      0
530c530
< #define BZ_X_BCRC_1      0
---
> #       0
(86.2 %, 28310 bytes)
531c531
< #define BZ_X_BCRC_2      1
---
>        
531c531
< #define BZ_X_BCRC_2      1
---
> # BZ_X_BCRC_2      1
531c531
< #define BZ_X_BCRC_2      1
---
> #       1
(86.2 %, 28291 bytes)
532c532
< #define BZ_X_BCRC_3      2
---
>        
532c532
< #define BZ_X_BCRC_3      2
---
> # BZ_X_BCRC_3      2
532c532
< #define BZ_X_BCRC_3      2
---
> #       2
(86.2 %, 28272 bytes)
533c533
< #define BZ_X_BCRC_4      3
---
>        
533c533
< #define BZ_X_BCRC_4      3
---
> # BZ_X_BCRC_4      3
533c533
< #define BZ_X_BCRC_4      3
---
> #       3
533c533
< #define BZ_X_BCRC_4      3
---
> # BZ_X_BCRC_4      
533c533
< #define BZ_X_BCRC_4      3
---
> #       
(86.2 %, 28253 bytes)
534c534
< #define BZ_X_RANDBIT     4
---
>       
534c534
< #define BZ_X_RANDBIT     4
---
> # BZ_X_RANDBIT     4
534c534
< #define BZ_X_RANDBIT     4
---
> #      4
(86.2 %, 28233 bytes)
535c535
< #define BZ_X_ORIGPTR_1   5
---
>     
535c535
< #define BZ_X_ORIGPTR_1   5
---
> # BZ_X_ORIGPTR_1   5
535c535
< #define BZ_X_ORIGPTR_1   5
---
> #    5
(86.2 %, 28211 bytes)
536c536
< #define BZ_X_ORIGPTR_2   6
---
>     
536c536
< #define BZ_X_ORIGPTR_2   6
---
> # BZ_X_ORIGPTR_2   6
536c536
< #define BZ_X_ORIGPTR_2   6
---
> #    6
(86.2 %, 28189 bytes)
537c537
< #define BZ_X_ORIGPTR_3   7
---
>     
537c537
< #define BZ_X_ORIGPTR_3   7
---
> # BZ_X_ORIGPTR_3   7
537c537
< #define BZ_X_ORIGPTR_3   7
---
> #    7
(86.3 %, 28167 bytes)
538c538
< #define BZ_X_MAPPING_1   8
---
>     
538c538
< #define BZ_X_MAPPING_1   8
---
> # BZ_X_MAPPING_1   8
538c538
< #define BZ_X_MAPPING_1   8
---
> #    8
(86.3 %, 28145 bytes)
539c539
< #define BZ_X_MAPPING_2   9
---
>     
539c539
< #define BZ_X_MAPPING_2   9
---
> # BZ_X_MAPPING_2   9
539c539
< #define BZ_X_MAPPING_2   9
---
> #    9
(86.3 %, 28123 bytes)
540c540
< #define BZ_X_SELECTOR_1  0
---
>    
540c540
< #define BZ_X_SELECTOR_1  0
---
> # BZ_X_SELECTOR_1  0
540c540
< #define BZ_X_SELECTOR_1  0
---
> #   0
(86.3 %, 28100 bytes)
541c541
< #define BZ_X_SELECTOR_2  1
---
>    
541c541
< #define BZ_X_SELECTOR_2  1
---
> # BZ_X_SELECTOR_2  1
541c541
< #define BZ_X_SELECTOR_2  1
---
> #   1
541c541
< #define BZ_X_SELECTOR_2  1
---
> # BZ_X_SELECTOR_2  
(86.3 %, 28077 bytes)
542c542
< #define BZ_X_SELECTOR_3  2
---
>    
542c542
< #define BZ_X_SELECTOR_3  2
---
> # BZ_X_SELECTOR_3  2
542c542
< #define BZ_X_SELECTOR_3  2
---
> #   2
(86.3 %, 28054 bytes)
543c543
< #define BZ_X_CODING_1    3
---
>      
543c543
< #define BZ_X_CODING_1    3
---
> # BZ_X_CODING_1    3
543c543
< #define BZ_X_CODING_1    3
---
> #     3
(86.3 %, 28033 bytes)
544c544
< #define BZ_X_CODING_2    4
---
>      
544c544
< #define BZ_X_CODING_2    4
---
> # BZ_X_CODING_2    4
544c544
< #define BZ_X_CODING_2    4
---
> #     4
(86.3 %, 28012 bytes)
545c545
< #define BZ_X_CODING_3    5
---
>      
545c545
< #define BZ_X_CODING_3    5
---
> # BZ_X_CODING_3    5
545c545
< #define BZ_X_CODING_3    5
---
> #     5
(86.3 %, 27991 bytes)
546c546
< #define BZ_X_MTF_1       6
---
>         
546c546
< #define BZ_X_MTF_1       6
---
> # BZ_X_MTF_1       6
546c546
< #define BZ_X_MTF_1       6
---
> #        6
546c546
< #define BZ_X_MTF_1       6
---
> # BZ_X_MTF_1       
(86.4 %, 27973 bytes)
547c547
< #define BZ_X_MTF_2       7
---
>         
547c547
< #define BZ_X_MTF_2       7
---
> # BZ_X_MTF_2       7
547c547
< #define BZ_X_MTF_2       7
---
> #        7
(86.4 %, 27955 bytes)
548c548
< #define BZ_X_MTF_3       8
---
>         
548c548
< #define BZ_X_MTF_3       8
---
> # BZ_X_MTF_3       8
548c548
< #define BZ_X_MTF_3       8
---
> #        8
(86.4 %, 27937 bytes)
549c549
< #define BZ_X_MTF_4       9
---
>         
549c549
< #define BZ_X_MTF_4       9
---
> # BZ_X_MTF_4       9
549c549
< #define BZ_X_MTF_4       9
---
> #        9
(86.4 %, 27919 bytes)
550c550
< #define BZ_X_MTF_5       0
---
>         
550c550
< #define BZ_X_MTF_5       0
---
> # BZ_X_MTF_5       0
550c550
< #define BZ_X_MTF_5       0
---
> #        0
(86.4 %, 27901 bytes)
551c551
< #define BZ_X_MTF_6       1
---
>         
551c551
< #define BZ_X_MTF_6       1
---
> # BZ_X_MTF_6       1
551c551
< #define BZ_X_MTF_6       1
---
> #        1
(86.4 %, 27883 bytes)
552c552
< #define BZ_X_ENDHDR_2    2
---
>      
552c552
< #define BZ_X_ENDHDR_2    2
---
> # BZ_X_ENDHDR_2    2
552c552
< #define BZ_X_ENDHDR_2    2
---
> #     2
(86.4 %, 27862 bytes)
553c553
< #define BZ_X_ENDHDR_3    3
---
>      
553c553
< #define BZ_X_ENDHDR_3    3
---
> # BZ_X_ENDHDR_3    3
553c553
< #define BZ_X_ENDHDR_3    3
---
> #     3
(86.4 %, 27841 bytes)
554c554
< #define BZ_X_ENDHDR_4    4
---
>      
554c554
< #define BZ_X_ENDHDR_4    4
---
> # BZ_X_ENDHDR_4    4
554c554
< #define BZ_X_ENDHDR_4    4
---
> #     4
(86.4 %, 27820 bytes)
555c555
< #define BZ_X_ENDHDR_5    5
---
>      
555c555
< #define BZ_X_ENDHDR_5    5
---
> # BZ_X_ENDHDR_5    5
555c555
< #define BZ_X_ENDHDR_5    5
---
> #     5
(86.4 %, 27799 bytes)
556c556
< #define BZ_X_ENDHDR_6    6
---
>      
556c556
< #define BZ_X_ENDHDR_6    6
---
> # BZ_X_ENDHDR_6    6
556c556
< #define BZ_X_ENDHDR_6    6
---
> #     6
(86.4 %, 27778 bytes)
557c557
< #define BZ_X_CCRC_1      7
---
>        
557c557
< #define BZ_X_CCRC_1      7
---
> # BZ_X_CCRC_1      7
557c557
< #define BZ_X_CCRC_1      7
---
> #       7
(86.5 %, 27759 bytes)
558c558
< #define BZ_X_CCRC_2      8
---
>        
558c558
< #define BZ_X_CCRC_2      8
---
> # BZ_X_CCRC_2      8
558c558
< #define BZ_X_CCRC_2      8
---
> #       8
(86.5 %, 27740 bytes)
559c559
< #define BZ_X_CCRC_3      9
---
>        
559c559
< #define BZ_X_CCRC_3      9
---
> # BZ_X_CCRC_3      9
559c559
< #define BZ_X_CCRC_3      9
---
> #       9
(86.5 %, 27721 bytes)
560c560
< #define BZ_X_CCRC_4      0
---
>        
560c560
< #define BZ_X_CCRC_4      0
---
> # BZ_X_CCRC_4      0
560c560
< #define BZ_X_CCRC_4      0
---
> #       0
(86.5 %, 27702 bytes)
566c566
< #define MTFA_SIZE 4096
---
>   
566c566
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 4096
566c566
< #define MTFA_SIZE 4096
---
> #  4096
566c566
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 
566c566
< #define MTFA_SIZE 4096
---
> #  
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 4096
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  4096
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  
> define MTFL_SIZE 6
566c566
< #define MTFA_SIZE 4096
---
> #define  4096
566c566
< #define MTFA_SIZE 4096
---
> #define  
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> # MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> # MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
>  MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
>  MTFL_SIZE 6
566c566
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> # MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>  MTFL_SIZE 6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #define  6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define  6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #  6
566,567c566,567
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>   6
567c567
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 6
567c567
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 6
567c567
< #define MTFL_SIZE 6
---
> define  6
567c567
< #define MTFL_SIZE 6
---
>   6
567c567
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 
567c567
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 
567c567
< #define MTFL_SIZE 6
---
> define  
567c567
< #define MTFL_SIZE 6
---
>   
567c567
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
567c567
< #define MTFL_SIZE 6
---
> #  6
567c567
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
567c567
< #define MTFL_SIZE 6
---
> #  
567c567,568
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
> 
573d573
< typedef
567c567,568
< #define MTFL_SIZE 6
---
> #  6
> 
573d573
< typedef
567c567,568
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
> 
573d573
< typedef
567c567,568
< #define MTFL_SIZE 6
---
> #  
> 
573d573
< typedef
567c567
< #define MTFL_SIZE 6
---
> #define  6
567c567
< #define MTFL_SIZE 6
---
> #define  
567c567,568
< #define MTFL_SIZE 6
---
> #define  6
> 
573d573
< typedef
567c567,568
< #define MTFL_SIZE 6
---
> #define  
> 
573d573
< typedef
567c567
< #define MTFL_SIZE 6
---
> #define  6
574c574
<    struct {
---
>     {
567c567
< #define MTFL_SIZE 6
---
> #define  
574c574
<    struct {
---
>     {
567c567
< #define MTFL_SIZE 6
---
> #define  6
573,574c573,574
< typedef
<    struct {
---
> 
>     {
567c567
< #define MTFL_SIZE 6
---
> #define  
573,574c573,574
< typedef
<    struct {
---
> 
>     {
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
567c567,568
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
> 
573d573
< typedef
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
574c574
<    struct {
---
>     {
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
573,574c573,574
< typedef
<    struct {
---
> 
>     {
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
574c574
<    struct {
---
>    struct 
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
573,574c573,574
< typedef
<    struct {
---
> 
>    struct 
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
574c574
<    struct {
---
>     
567c567
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
573,574c573,574
< typedef
<    struct {
---
> 
>     
573c573
< typedef
---
> 
573,574c573,574
< typedef
<    struct {
---
> 
>     {
573,574c573,574
< typedef
<    struct {
---
> 
>    struct 
573,574c573,574
< typedef
<    struct {
---
> 
>     
573c573
< typedef
---
> 
576c576
<       bz_stream* strm;
---
>       * strm;
573,574c573,574
< typedef
<    struct {
---
> 
>     {
576c576
<       bz_stream* strm;
---
>       * strm;
573,574c573,574
< typedef
<    struct {
---
> 
>    struct 
576c576
<       bz_stream* strm;
---
>       * strm;
573,574c573,574
< typedef
<    struct {
---
> 
>     
576c576
<       bz_stream* strm;
---
>       * strm;
574c574
<    struct {
---
>     {
574c574
<    struct {
---
>     
574c574
<    struct {
---
>     {
576c576
<       bz_stream* strm;
---
>       * strm;
574c574
<    struct {
---
>     
576c576
<       bz_stream* strm;
---
>       * strm;
574c574
<    struct {
---
>     {
576c576
<       bz_stream* strm;
---
>       bz_stream strm;
574c574
<    struct {
---
>     
576c576
<       bz_stream* strm;
---
>       bz_stream strm;
574c574
<    struct {
---
>     {
576c576
<       bz_stream* strm;
---
>        strm;
574c574
<    struct {
---
>     
576c576
<       bz_stream* strm;
---
>        strm;
574c574
<    struct {
---
>    struct 
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>       * strm;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>       bz_stream strm;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>        strm;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>       bz_stream* ;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>       * ;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>       bz_stream ;
574c574
<    struct {
---
>    struct 
576c576
<       bz_stream* strm;
---
>        ;
576c576
<       bz_stream* strm;
---
>       * strm;
576c576
<       bz_stream* strm;
---
>        strm;
576c576
<       bz_stream* strm;
---
>       * ;
576c576
<       bz_stream* strm;
---
>        ;
576c576
<       bz_stream* strm;
---
>       * strm
576c576
<       bz_stream* strm;
---
>        strm
576c576
<       bz_stream* strm;
---
>       * 
576c576
<       bz_stream* strm;
---
>        
(86.5 %, 27688 bytes)
576c576
<        ;
---
>        
579c579
<       Int32    state;
---
>           ;
576c576
<        ;
---
>        
579c579
<       Int32    state;
---
>       Int32    state
576c576
<        ;
---
>        
579c579
<       Int32    state;
---
>           state
576c576
<        ;
---
>        
579c579
<       Int32    state;
---
>       Int32    
576c576
<        ;
---
>        
579c579
<       Int32    state;
---
>           
(86.5 %, 27677 bytes)
579c579
<           ;
---
>           
582c582
<       unsigned char    state_out_ch;
---
>            state_out_ch;
579c579
<           ;
---
>           
582c582
<       unsigned char    state_out_ch;
---
>       unsigned char    ;
579c579
<           ;
---
>           
582c582
<       unsigned char    state_out_ch;
---
>        char    ;
(86.5 %, 27664 bytes)
582,583c582,583
<       unsigned char    ;
<       Int32    state_out_len;
---
>        char    ;
>           state_out_len;
582,583c582,583
<       unsigned char    ;
<       Int32    state_out_len;
---
>            ;
>           state_out_len;
582,583c582,583
<       unsigned char    ;
<       Int32    state_out_len;
---
>        char    
>           state_out_len;
582,583c582,583
<       unsigned char    ;
<       Int32    state_out_len;
---
>            
>           state_out_len;
582c582
<       unsigned char    ;
---
>       unsigned     ;
(86.5 %, 27650 bytes)
582,584c582,584
<        char    
<           state_out_len;
<       Bool     blockRandomised;
---
>            
>           state_out_len
>            blockRandomised;
582,584c582,584
<        char    
<           state_out_len;
<       Bool     blockRandomised;
---
>            
>           
>            blockRandomised;
583c583
<           state_out_len;
---
>           ;
583c583
<           state_out_len;
---
>           
583,584c583,584
<           state_out_len;
<       Bool     blockRandomised;
---
>           ;
>            blockRandomised;
583,584c583,584
<           state_out_len;
<       Bool     blockRandomised;
---
>           
>            blockRandomised;
(86.5 %, 27637 bytes)
583c583
<           ;
---
>           
583,584c583,584
<           ;
<       Bool     blockRandomised;
---
>           
>            blockRandomised;
583,584c583,584
<           ;
<       Bool     blockRandomised;
---
>           
>       Bool     ;
583,584c583,584
<           ;
<       Bool     blockRandomised;
---
>           
>            ;
(86.5 %, 27632 bytes)
584c584
<            blockRandomised;
---
>            
584,585c584,585
<            blockRandomised;
<       BZ_RAND_DECLS;
---
>            ;
>       ;
584,585c584,585
<            blockRandomised;
<       BZ_RAND_DECLS;
---
>            
>       ;
(86.5 %, 27616 bytes)
585c585
<       BZ_RAND_DECLS;
---
>       
585c585
<       BZ_RAND_DECLS;
---
>       ;
588c588
<       UInt32   bsBuff;
---
>          bsBuff;
585c585
<       BZ_RAND_DECLS;
---
>       
588c588
<       UInt32   bsBuff;
---
>          bsBuff;
585c585
<       BZ_RAND_DECLS;
---
>       ;
588c588
<       UInt32   bsBuff;
---
>       UInt32   ;
585c585
<       BZ_RAND_DECLS;
---
>       
588c588
<       UInt32   bsBuff;
---
>       UInt32   ;
(86.5 %, 27596 bytes)
588,589c588,589
<          bsBuff;
<       Int32    bsLive;
---
>          
>           bsLive;
588,589c588,589
<          bsBuff;
<       Int32    bsLive;
---
>          ;
>       Int32    ;
588,589c588,589
<          bsBuff;
<       Int32    bsLive;
---
>          
>       Int32    ;
(86.5 %, 27584 bytes)
589c589
<           bsLive;
---
>           
592c592
<       Int32    blockSize100k;
---
>           blockSize100k;
589c589
<           bsLive;
---
>           ;
592c592
<       Int32    blockSize100k;
---
>       Int32    ;
(86.5 %, 27572 bytes)
592,593c592,593
<           blockSize100k;
<       Bool     smallDecompress;
---
>           
>            smallDecompress;
592,593c592,593
<           blockSize100k;
<       Bool     smallDecompress;
---
>           ;
>       Bool     ;
(86.6 %, 27554 bytes)
593,594c593,594
<            smallDecompress;
<       Int32    currBlockNo;
---
>            
>           currBlockNo;
593,594c593,594
<            smallDecompress;
<       Int32    currBlockNo;
---
>            ;
>       Int32    ;
(86.6 %, 27533 bytes)
594,595c594,595
<           currBlockNo;
<       Int32    verbosity;
---
>           
>           verbosity;
594,595c594,595
<           currBlockNo;
<       Int32    verbosity;
---
>           ;
>       Int32    ;
(86.6 %, 27516 bytes)
595c595
<           verbosity;
---
>           
598c598
<       Int32    origPtr;
---
>           origPtr;
595c595
<           verbosity;
---
>           ;
598c598
<       Int32    origPtr;
---
>       Int32    ;
595c595
<           verbosity;
---
>           
598c598
<       Int32    origPtr;
---
>       Int32    ;
(86.6 %, 27501 bytes)
598,599c598,599
<           origPtr;
<       UInt32   tPos;
---
>           
>          tPos;
598,599c598,599
<           origPtr;
<       UInt32   tPos;
---
>           ;
>       UInt32   ;
(86.6 %, 27487 bytes)
599,600c599,600
<          tPos;
<       Int32    k0;
---
>          
>           k0;
599,600c599,600
<          tPos;
<       Int32    k0;
---
>          ;
>       Int32    ;
599,600c599,600
<          tPos;
<       Int32    k0;
---
>          
>       Int32    ;
(86.6 %, 27477 bytes)
600,601c600,601
<           k0;
<       Int32    unzftab[6];
---
>           
>           unzftab[6];
600,601c600,601
<           k0;
<       Int32    unzftab[6];
---
>           ;
>       Int32    [6];
600,601c600,601
<           k0;
<       Int32    unzftab[6];
---
>           
>       Int32    [6];
(86.6 %, 27469 bytes)
601c601
<           unzftab[6];
---
>           ];
601c601
<           unzftab[6];
---
>           [6;
601c601
<           unzftab[6];
---
>           6;
601c601
<           unzftab[6];
---
>           [;
601c601
<           unzftab[6];
---
>           ;
601c601
<           unzftab[6];
---
>           unzftab6];
601c601
<           unzftab[6];
---
>           unzftab];
601c601
<           unzftab[6];
---
>           unzftab6;
(86.6 %, 27459 bytes)
601,602c601,602
<           ;
<       Int32    nblock_used;
---
>           
>           
602c602
<       Int32    nblock_used;
---
>           nblock_used;
602c602
<       Int32    nblock_used;
---
>           ;
602c602
<       Int32    nblock_used;
---
>           nblock_used
602c602
<       Int32    nblock_used;
---
>           
(86.6 %, 27443 bytes)
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>           cftab[7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    [7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>           [7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    cftab7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>           cftab7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    7];
602,603c602,603
<           ;
<       Int32    cftab[7];
---
>           
>           7];
603c603
<       Int32    cftab[7];
---
>           cftab[7];
603c603
<       Int32    cftab[7];
---
>           [7];
603c603
<       Int32    cftab[7];
---
>           cftab7];
603c603
<       Int32    cftab[7];
---
>           7];
603c603
<       Int32    cftab[7];
---
>           cftab[];
603c603
<       Int32    cftab[7];
---
>           [];
603c603
<       Int32    cftab[7];
---
>           cftab];
603c603
<       Int32    cftab[7];
---
>           ];
603c603
<       Int32    cftab[7];
---
>       Int32    [7];
603c603
<       Int32    cftab[7];
---
>       Int32    7];
603c603
<       Int32    cftab[7];
---
>       Int32    [];
603c603
<       Int32    cftab[7];
---
>       Int32    ];
603c603
<       Int32    cftab[7];
---
>       Int32    [7;
603c603
<       Int32    cftab[7];
---
>       Int32    7;
603c603
<       Int32    cftab[7];
---
>       Int32    [;
603c603
<       Int32    cftab[7];
---
>       Int32    ;
603c603
<       Int32    cftab[7];
---
>       Int32    cftab7];
603c603
<       Int32    cftab[7];
---
>       Int32    cftab];
603c603
<       Int32    cftab[7];
---
>       Int32    cftab7;
(86.6 %, 27435 bytes)
603,604c603,604
<       Int32    ;
<       Int32    cftabCopy[7];
---
>       Int32    
>           7];
604c604
<       Int32    cftabCopy[7];
---
>           cftabCopy[7];
604c604
<       Int32    cftabCopy[7];
---
>           [7];
604c604
<       Int32    cftabCopy[7];
---
>           cftabCopy7];
604c604
<       Int32    cftabCopy[7];
---
>           7];
604c604
<       Int32    cftabCopy[7];
---
>           cftabCopy[];
604c604
<       Int32    cftabCopy[7];
---
>           [];
604c604
<       Int32    cftabCopy[7];
---
>           cftabCopy];
604c604
<       Int32    cftabCopy[7];
---
>           ];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    [7];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    7];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    [];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    ];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    [7;
604c604
<       Int32    cftabCopy[7];
---
>       Int32    7;
604c604
<       Int32    cftabCopy[7];
---
>       Int32    [;
604c604
<       Int32    cftabCopy[7];
---
>       Int32    ;
604c604
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy7];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy];
604c604
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy7;
(86.6 %, 27423 bytes)
604c604
<       Int32    ;
---
>       Int32    
607c607
<       UInt32   *tt;
---
>          ;
607c607
<       UInt32   *tt;
---
>          *tt;
607c607
<       UInt32   *tt;
---
>          tt;
607c607
<       UInt32   *tt;
---
>          *;
607c607
<       UInt32   *tt;
---
>          ;
607c607
<       UInt32   *tt;
---
>          *tt
607c607
<       UInt32   *tt;
---
>          tt
607c607
<       UInt32   *tt;
---
>          *
607c607
<       UInt32   *tt;
---
>          
607c607
<       UInt32   *tt;
---
>       UInt32   tt;
607c607
<       UInt32   *tt;
---
>       UInt32   ;
607c607
<       UInt32   *tt;
---
>       UInt32   tt
607c607
<       UInt32   *tt;
---
>       UInt32   
607c607
<       UInt32   *tt;
---
>       UInt32   tt;
610c610
<       unsigned short   *ll16;
---
>        short   *ll16;
(86.6 %, 27422 bytes)
607c607
<       UInt32   tt;
---
>       UInt32   ;
607c607
<       UInt32   tt;
---
>       UInt32   
607c607
<       UInt32   tt;
---
>       UInt32   ;
610c610
<       unsigned short   *ll16;
---
>        short   *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   
610c610
<       unsigned short   *ll16;
---
>        short   *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   ;
610c610
<       unsigned short   *ll16;
---
>       unsigned    *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   
610c610
<       unsigned short   *ll16;
---
>       unsigned    *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   ;
610c610
<       unsigned short   *ll16;
---
>           *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   
610c610
<       unsigned short   *ll16;
---
>           *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>        short   *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>       unsigned    *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>           *ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>       unsigned short   ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>        short   ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>       unsigned    ll16;
607c607
<       UInt32   tt;
---
>       UInt32   tt
610c610
<       unsigned short   *ll16;
---
>           ll16;
610c610
<       unsigned short   *ll16;
---
>        short   *ll16;
610c610
<       unsigned short   *ll16;
---
>           *ll16;
610c610
<       unsigned short   *ll16;
---
>        short   ll16;
(86.6 %, 27414 bytes)
610c610
<        short   *ll16;
---
>           *ll16;
610c610
<        short   *ll16;
---
>           ll16;
610c610
<        short   *ll16;
---
>           *;
610c610
<        short   *ll16;
---
>           ;
610c610
<        short   *ll16;
---
>           *ll16
610c610
<        short   *ll16;
---
>           ll16
610c610
<        short   *ll16;
---
>           *
610c610
<        short   *ll16;
---
>           
610c610
<        short   *ll16;
---
>        short   ll16;
610c610
<        short   *ll16;
---
>        short   ;
610c610
<        short   *ll16;
---
>        short   ll16
610c610
<        short   *ll16;
---
>        short   
610,611c610,611
<        short   *ll16;
<       unsigned char    *ll4;
---
>        short   ll16;
>        char    *ll4;
(86.6 %, 27413 bytes)
610c610
<        short   ll16;
---
>        short   ;
610c610
<        short   ll16;
---
>        short   
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>        char    *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>        char    *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>       unsigned     *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>       unsigned     *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>            *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>            *ll4;
610c610
<        short   ll16;
---
>        short   ll16
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>        char    *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned     *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>            *ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned char    ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>        char    ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned     ll4;
610,611c610,611
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>            ll4;
611c611
<       unsigned char    *ll4;
---
>        char    *ll4;
611c611
<       unsigned char    *ll4;
---
>            *ll4;
611c611
<       unsigned char    *ll4;
---
>        char    ll4;
(86.6 %, 27405 bytes)
611c611
<        char    *ll4;
---
>            *ll4;
611c611
<        char    *ll4;
---
>            ll4;
611c611
<        char    *ll4;
---
>            *;
611c611
<        char    *ll4;
---
>            ;
611c611
<        char    *ll4;
---
>            *ll4
611c611
<        char    *ll4;
---
>            ll4
611c611
<        char    *ll4;
---
>            *
611c611
<        char    *ll4;
---
>            
611c611
<        char    *ll4;
---
>        char    ll4;
611c611
<        char    *ll4;
---
>        char    ;
611c611
<        char    *ll4;
---
>        char    ll4
611c611
<        char    *ll4;
---
>        char    
611c611
<        char    *ll4;
---
>        char    ll4;
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    ;
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    *;
611c611
<        char    *ll4;
---
>        char    *
611c611
<        char    *ll4;
---
>        char    *;
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    *
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    *ll4;
---
>        char    *;
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
611c611
<        char    *ll4;
---
>        char    *
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
(86.6 %, 27404 bytes)
611c611
<        char    ll4;
---
>        char    ;
611c611
<        char    ll4;
---
>        char    
611c611
<        char    ll4;
---
>        char    ;
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    ll4;
---
>        char    
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    ll4;
---
>        char    ;
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
611c611
<        char    ll4;
---
>        char    
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
611c611
<        char    ll4;
---
>        char    ;
614c614
<       UInt32   storedBlockCRC;
---
>          ;
611c611
<        char    ll4;
---
>        char    
614c614
<       UInt32   storedBlockCRC;
---
>          ;
611c611
<        char    ll4;
---
>        char    ll4
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>          ;
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   storedBlockCRC
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>       UInt32   
611c611
<        char    ll4;
---
>        char    ll4
614c614
<       UInt32   storedBlockCRC;
---
>          
614c614
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
614c614
<       UInt32   storedBlockCRC;
---
>          ;
(86.6 %, 27383 bytes)
613a614
>          
615d615
<       UInt32   storedCombinedCRC;
614,615c614,615
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>       UInt32   storedCombinedCRC
614,615c614,615
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>          storedCombinedCRC
614,615c614,615
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>       UInt32   
614,615c614,615
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>          
615c615
<       UInt32   storedCombinedCRC;
---
>          storedCombinedCRC;
615c615
<       UInt32   storedCombinedCRC;
---
>          ;
(86.6 %, 27359 bytes)
614a615
>          
616d616
<       UInt32   calculatedBlockCRC;
615,616c615,616
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>       UInt32   calculatedBlockCRC
615,616c615,616
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>          calculatedBlockCRC
615,616c615,616
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>       UInt32   
615,616c615,616
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>          
616c616
<       UInt32   calculatedBlockCRC;
---
>          calculatedBlockCRC;
616c616
<       UInt32   calculatedBlockCRC;
---
>          ;
(86.7 %, 27334 bytes)
615a616
>          
617d617
<       UInt32   calculatedCombinedCRC;
616,617c616,617
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>       UInt32   calculatedCombinedCRC
616,617c616,617
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>          calculatedCombinedCRC
616,617c616,617
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>       UInt32   
616,617c616,617
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>          
617c617
<       UInt32   calculatedCombinedCRC;
---
>          calculatedCombinedCRC;
617c617
<       UInt32   calculatedCombinedCRC;
---
>          ;
(86.7 %, 27306 bytes)
617c617
<          ;
---
>          
620c620
<       Int32    nInUse;
---
>           ;
617c617
<          ;
---
>          
620c620
<       Int32    nInUse;
---
>       Int32    nInUse
617c617
<          ;
---
>          
620c620
<       Int32    nInUse;
---
>           nInUse
617c617
<          ;
---
>          
620c620
<       Int32    nInUse;
---
>       Int32    
617c617
<          ;
---
>          
620c620
<       Int32    nInUse;
---
>           
620c620
<       Int32    nInUse;
---
>           nInUse;
620c620
<       Int32    nInUse;
---
>           ;
(86.7 %, 27294 bytes)
620,621c620,621
<           ;
<       Bool     inUse[6];
---
>           
>            [6];
620,621c620,621
<           ;
<       Bool     inUse[6];
---
>           
>       Bool     inUse6];
620,621c620,621
<           ;
<       Bool     inUse[6];
---
>           
>            inUse6];
620,621c620,621
<           ;
<       Bool     inUse[6];
---
>           
>       Bool     6];
620,621c620,621
<           ;
<       Bool     inUse[6];
---
>           
>            6];
621c621
<       Bool     inUse[6];
---
>            inUse[6];
621c621
<       Bool     inUse[6];
---
>            [6];
621c621
<       Bool     inUse[6];
---
>            inUse6];
621c621
<       Bool     inUse[6];
---
>            6];
621c621
<       Bool     inUse[6];
---
>            inUse[];
621c621
<       Bool     inUse[6];
---
>            [];
621c621
<       Bool     inUse[6];
---
>            inUse];
621c621
<       Bool     inUse[6];
---
>            ];
621c621
<       Bool     inUse[6];
---
>       Bool     [6];
621c621
<       Bool     inUse[6];
---
>       Bool     6];
621c621
<       Bool     inUse[6];
---
>       Bool     [];
621c621
<       Bool     inUse[6];
---
>       Bool     ];
621c621
<       Bool     inUse[6];
---
>       Bool     [6;
621c621
<       Bool     inUse[6];
---
>       Bool     6;
621c621
<       Bool     inUse[6];
---
>       Bool     [;
621c621
<       Bool     inUse[6];
---
>       Bool     ;
621c621
<       Bool     inUse[6];
---
>       Bool     inUse6];
621c621
<       Bool     inUse[6];
---
>       Bool     inUse];
621c621
<       Bool     inUse[6];
---
>       Bool     inUse6;
(86.7 %, 27286 bytes)
621,622c621,622
<       Bool     ;
<       Bool     inUse16[6];
---
>       Bool     
>            6];
622c622
<       Bool     inUse16[6];
---
>            inUse16[6];
622c622
<       Bool     inUse16[6];
---
>            [6];
622c622
<       Bool     inUse16[6];
---
>            inUse166];
622c622
<       Bool     inUse16[6];
---
>            6];
622c622
<       Bool     inUse16[6];
---
>            inUse16[];
622c622
<       Bool     inUse16[6];
---
>            [];
622c622
<       Bool     inUse16[6];
---
>            inUse16];
622c622
<       Bool     inUse16[6];
---
>            ];
622c622
<       Bool     inUse16[6];
---
>       Bool     [6];
622c622
<       Bool     inUse16[6];
---
>       Bool     6];
622c622
<       Bool     inUse16[6];
---
>       Bool     [];
622c622
<       Bool     inUse16[6];
---
>       Bool     ];
622c622
<       Bool     inUse16[6];
---
>       Bool     [6;
622c622
<       Bool     inUse16[6];
---
>       Bool     6;
622c622
<       Bool     inUse16[6];
---
>       Bool     [;
622c622
<       Bool     inUse16[6];
---
>       Bool     ;
622c622
<       Bool     inUse16[6];
---
>       Bool     inUse166];
622c622
<       Bool     inUse16[6];
---
>       Bool     inUse16];
622c622
<       Bool     inUse16[6];
---
>       Bool     inUse166;
622c622
<       Bool     inUse16[6];
---
>       Bool     inUse16;
(86.7 %, 27276 bytes)
622,623c622,623
<       Bool     ;
<       unsigned char    seqToUnseq[6];
---
>       Bool     
>            [6];
623c623
<       unsigned char    seqToUnseq[6];
---
>        char    seqToUnseq[6];
623c623
<       unsigned char    seqToUnseq[6];
---
>            seqToUnseq[6];
623c623
<       unsigned char    seqToUnseq[6];
---
>        char    [6];
623c623
<       unsigned char    seqToUnseq[6];
---
>            [6];
623c623
<       unsigned char    seqToUnseq[6];
---
>        char    seqToUnseq6];
623c623
<       unsigned char    seqToUnseq[6];
---
>            seqToUnseq6];
623c623
<       unsigned char    seqToUnseq[6];
---
>        char    6];
623c623
<       unsigned char    seqToUnseq[6];
---
>            6];
623c623
<       unsigned char    seqToUnseq[6];
---
>       unsigned     seqToUnseq[6];
(86.7 %, 27268 bytes)
623c623
<        char    seqToUnseq[6];
---
>            seqToUnseq[6];
623c623
<        char    seqToUnseq[6];
---
>            [6];
623c623
<        char    seqToUnseq[6];
---
>            seqToUnseq6];
623c623
<        char    seqToUnseq[6];
---
>            6];
623c623
<        char    seqToUnseq[6];
---
>            seqToUnseq[];
623c623
<        char    seqToUnseq[6];
---
>            [];
623c623
<        char    seqToUnseq[6];
---
>            seqToUnseq];
623c623
<        char    seqToUnseq[6];
---
>            ];
623c623
<        char    seqToUnseq[6];
---
>        char    [6];
623c623
<        char    seqToUnseq[6];
---
>        char    6];
623c623
<        char    seqToUnseq[6];
---
>        char    [];
623c623
<        char    seqToUnseq[6];
---
>        char    ];
623c623
<        char    seqToUnseq[6];
---
>        char    [6;
623c623
<        char    seqToUnseq[6];
---
>        char    6;
623c623
<        char    seqToUnseq[6];
---
>        char    [;
623c623
<        char    seqToUnseq[6];
---
>        char    ;
623c623
<        char    seqToUnseq[6];
---
>        char    seqToUnseq6];
623c623
<        char    seqToUnseq[6];
---
>        char    seqToUnseq];
623c623
<        char    seqToUnseq[6];
---
>        char    seqToUnseq6;
(86.7 %, 27255 bytes)
623c623
<        char    ;
---
>        char    
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   [MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>            mtfa   [MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>            mtfa   MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               MTFA_SIZE];
626c626
<       unsigned char    mtfa   [MTFA_SIZE];
---
>       unsigned     mtfa   [MTFA_SIZE];
(86.7 %, 27247 bytes)
626c626
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   [MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>               MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   [];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>               [];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   ];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>               ];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       [];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       ];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE;
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE;
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       [;
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char       ;
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   ];
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE;
626c626
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   ;
(86.7 %, 27232 bytes)
626,627c626,627
<        char       ;
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>        char       
>           6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase[6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           [6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase[ / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           [ / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>            / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [ / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32     / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [6  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    6  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32      MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6 / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6 / ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase / ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6  ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase  ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  ];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / MTFL_SIZE;
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE;
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / ;
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  ;
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[6  MTFL_SIZE];
627c627
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[6  ];
(86.7 %, 27230 bytes)
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  ;
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  ]
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ];
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ;
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ]
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  
>        char    selector   [BZ_MAX_SELECTORS];
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE;
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>       unsigned     selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>       unsigned     selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>            selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>            selector   [BZ_MAX_SELECTORS];
627c627
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE]
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>        char    selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned     selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>            selector   [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned char       [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>        char       [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned        [BZ_MAX_SELECTORS];
627,628c627,628
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>               [BZ_MAX_SELECTORS];
628c628
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   [BZ_MAX_SELECTORS];
628c628
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
(86.7 %, 27209 bytes)
628c628
<               [BZ_MAX_SELECTORS];
---
>               
628c628
<               [BZ_MAX_SELECTORS];
---
>               [];
628c628
<               [BZ_MAX_SELECTORS];
---
>               [;
628c628
<               [BZ_MAX_SELECTORS];
---
>               []
628c628
<               [BZ_MAX_SELECTORS];
---
>               [
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [];
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [;
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               []
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [
>        char    selectorMtf[BZ_MAX_SELECTORS];
628c628
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
628c628
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>            selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>            selectorMtf[BZ_MAX_SELECTORS];
628c628
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>        char    selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>            selectorMtf[BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned char    [BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>        char    [BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned     [BZ_MAX_SELECTORS];
628,629c628,629
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>            [BZ_MAX_SELECTORS];
629c629
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf[BZ_MAX_SELECTORS];
(86.7 %, 27185 bytes)
629c629
<            [BZ_MAX_SELECTORS];
---
>            
629c629
<            [BZ_MAX_SELECTORS];
---
>            [];
629c629
<            [BZ_MAX_SELECTORS];
---
>            [;
629c629
<            [BZ_MAX_SELECTORS];
---
>            []
629c629
<            [BZ_MAX_SELECTORS];
---
>            [
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [];
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [;
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            []
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629c629
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS;
629c629
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629c629
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS]
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned char      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>        char      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
629,630c629,630
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.7 %, 27169 bytes)
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS[];
630c630
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS];
(86.7 %, 27156 bytes)
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
630c630
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  ][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             ][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.8 %, 27145 bytes)
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             ]BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [][BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [[BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             []BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE];
(86.8 %, 27132 bytes)
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             ;
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE]
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             ]
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             [];
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             [;
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             []
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             [
632,633c632,633
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [];
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [;
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             []
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE;
632c632
<             [BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE
(86.8 %, 27113 bytes)
632,633c632,633
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>       Int32    base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>           base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
632,633c632,633
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   [][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   ][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [][BZ_MAX_ALPHA_SIZE];
(86.8 %, 27103 bytes)
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(86.8 %, 27090 bytes)
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [];
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [;
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
633c633
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.8 %, 27071 bytes)
633,634c633,634
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>       Int32    perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>           perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
633,634c633,634
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   [][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   ][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
634c634
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [][BZ_MAX_ALPHA_SIZE];
(86.8 %, 27061 bytes)
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
634c634
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(86.8 %, 27048 bytes)
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
634,635c634,635
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [];
>           minLens[BZ_N_GROUPS];
634,635c634,635
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [;
>           minLens[BZ_N_GROUPS];
634,635c634,635
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              []
>           minLens[BZ_N_GROUPS];
634,635c634,635
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [
>           minLens[BZ_N_GROUPS];
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
634c634
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
634,635c634,635
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE;
>           minLens[BZ_N_GROUPS];
(86.8 %, 27029 bytes)
634,635c634,635
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           [BZ_N_GROUPS];
634,635c634,635
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>       Int32    minLensBZ_N_GROUPS];
634,635c634,635
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           minLensBZ_N_GROUPS];
634,635c634,635
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>       Int32    BZ_N_GROUPS];
634,635c634,635
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens[BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           [BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLensBZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens[];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           [];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>           ];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    [BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    BZ_N_GROUPS];
635c635
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    [];
(86.8 %, 27016 bytes)
635c635
<           [BZ_N_GROUPS];
---
>           ;
635c635
<           [BZ_N_GROUPS];
---
>           BZ_N_GROUPS]
635c635
<           [BZ_N_GROUPS];
---
>           ]
635c635
<           [BZ_N_GROUPS];
---
>           BZ_N_GROUPS
635c635
<           [BZ_N_GROUPS];
---
>           
635c635
<           [BZ_N_GROUPS];
---
>           [];
635c635
<           [BZ_N_GROUPS];
---
>           [;
635c635
<           [BZ_N_GROUPS];
---
>           []
635c635
<           [BZ_N_GROUPS];
---
>           [
635c635
<           [BZ_N_GROUPS];
---
>           [];
638c638
<       Int32    save_i;
---
>           save_i;
635c635
<           [BZ_N_GROUPS];
---
>           [;
638c638
<       Int32    save_i;
---
>           save_i;
635c635
<           [BZ_N_GROUPS];
---
>           []
638c638
<       Int32    save_i;
---
>           save_i;
635c635
<           [BZ_N_GROUPS];
---
>           [
638c638
<       Int32    save_i;
---
>           save_i;
635c635
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS;
635c635
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS
635c635
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS;
638c638
<       Int32    save_i;
---
>           save_i;
(86.8 %, 27003 bytes)
635c635
<           ;
---
>           
638c638
<       Int32    save_i;
---
>           ;
635c635
<           ;
---
>           
638c638
<       Int32    save_i;
---
>       Int32    save_i
635c635
<           ;
---
>           
638c638
<       Int32    save_i;
---
>           save_i
635c635
<           ;
---
>           
638c638
<       Int32    save_i;
---
>       Int32    
635c635
<           ;
---
>           
638c638
<       Int32    save_i;
---
>           
638c638
<       Int32    save_i;
---
>           save_i;
638c638
<       Int32    save_i;
---
>           ;
(86.8 %, 26991 bytes)
637a638
>           
639d639
<       Int32    save_j;
638,639c638,639
<           ;
<       Int32    save_j;
---
>           
>       Int32    save_j
638,639c638,639
<           ;
<       Int32    save_j;
---
>           
>           save_j
638,639c638,639
<           ;
<       Int32    save_j;
---
>           
>       Int32    
638,639c638,639
<           ;
<       Int32    save_j;
---
>           
>           
639c639
<       Int32    save_j;
---
>           save_j;
639c639
<       Int32    save_j;
---
>           ;
(86.8 %, 26979 bytes)
638a639
>           
640d640
<       Int32    save_t;
639,640c639,640
<           ;
<       Int32    save_t;
---
>           
>       Int32    save_t
639,640c639,640
<           ;
<       Int32    save_t;
---
>           
>           save_t
639,640c639,640
<           ;
<       Int32    save_t;
---
>           
>       Int32    
639,640c639,640
<           ;
<       Int32    save_t;
---
>           
>           
640c640
<       Int32    save_t;
---
>           save_t;
640c640
<       Int32    save_t;
---
>           ;
(86.8 %, 26967 bytes)
639a640
>           
641d641
<       Int32    save_alphaSize;
640,641c640,641
<           ;
<       Int32    save_alphaSize;
---
>           
>       Int32    save_alphaSize
640,641c640,641
<           ;
<       Int32    save_alphaSize;
---
>           
>           save_alphaSize
640,641c640,641
<           ;
<       Int32    save_alphaSize;
---
>           
>       Int32    
640,641c640,641
<           ;
<       Int32    save_alphaSize;
---
>           
>           
641c641
<       Int32    save_alphaSize;
---
>           save_alphaSize;
641c641
<       Int32    save_alphaSize;
---
>           ;
(86.9 %, 26947 bytes)
640a641
>           
642d642
<       Int32    save_nGroups;
641,642c641,642
<           ;
<       Int32    save_nGroups;
---
>           
>       Int32    save_nGroups
641,642c641,642
<           ;
<       Int32    save_nGroups;
---
>           
>           save_nGroups
641,642c641,642
<           ;
<       Int32    save_nGroups;
---
>           
>       Int32    
641,642c641,642
<           ;
<       Int32    save_nGroups;
---
>           
>           
642c642
<       Int32    save_nGroups;
---
>           save_nGroups;
642c642
<       Int32    save_nGroups;
---
>           ;
(86.9 %, 26929 bytes)
641a642
>           
643d643
<       Int32    save_nSelectors;
642,643c642,643
<           ;
<       Int32    save_nSelectors;
---
>           
>       Int32    save_nSelectors
642,643c642,643
<           ;
<       Int32    save_nSelectors;
---
>           
>           save_nSelectors
642,643c642,643
<           ;
<       Int32    save_nSelectors;
---
>           
>       Int32    
642,643c642,643
<           ;
<       Int32    save_nSelectors;
---
>           
>           
643c643
<       Int32    save_nSelectors;
---
>           save_nSelectors;
643c643
<       Int32    save_nSelectors;
---
>           ;
(86.9 %, 26908 bytes)
642a643
>           
644d644
<       Int32    save_EOB;
643,644c643,644
<           ;
<       Int32    save_EOB;
---
>           
>       Int32    save_EOB
643,644c643,644
<           ;
<       Int32    save_EOB;
---
>           
>           save_EOB
643,644c643,644
<           ;
<       Int32    save_EOB;
---
>           
>       Int32    
643,644c643,644
<           ;
<       Int32    save_EOB;
---
>           
>           
644c644
<       Int32    save_EOB;
---
>           save_EOB;
644c644
<       Int32    save_EOB;
---
>           ;
(86.9 %, 26894 bytes)
643a644
>           
645d645
<       Int32    save_groupNo;
644,645c644,645
<           ;
<       Int32    save_groupNo;
---
>           
>       Int32    save_groupNo
644,645c644,645
<           ;
<       Int32    save_groupNo;
---
>           
>           save_groupNo
644,645c644,645
<           ;
<       Int32    save_groupNo;
---
>           
>       Int32    
644,645c644,645
<           ;
<       Int32    save_groupNo;
---
>           
>           
645c645
<       Int32    save_groupNo;
---
>           save_groupNo;
645c645
<       Int32    save_groupNo;
---
>           ;
(86.9 %, 26876 bytes)
644a645
>           
646d646
<       Int32    save_groupPos;
645,646c645,646
<           ;
<       Int32    save_groupPos;
---
>           
>       Int32    save_groupPos
645,646c645,646
<           ;
<       Int32    save_groupPos;
---
>           
>           save_groupPos
645,646c645,646
<           ;
<       Int32    save_groupPos;
---
>           
>       Int32    
645,646c645,646
<           ;
<       Int32    save_groupPos;
---
>           
>           
646c646
<       Int32    save_groupPos;
---
>           save_groupPos;
646c646
<       Int32    save_groupPos;
---
>           ;
(86.9 %, 26857 bytes)
645a646
>           
647d647
<       Int32    save_nextSym;
646,647c646,647
<           ;
<       Int32    save_nextSym;
---
>           
>       Int32    save_nextSym
646,647c646,647
<           ;
<       Int32    save_nextSym;
---
>           
>           save_nextSym
646,647c646,647
<           ;
<       Int32    save_nextSym;
---
>           
>       Int32    
646,647c646,647
<           ;
<       Int32    save_nextSym;
---
>           
>           
647c647
<       Int32    save_nextSym;
---
>           save_nextSym;
647c647
<       Int32    save_nextSym;
---
>           ;
(86.9 %, 26839 bytes)
646a647
>           
648d648
<       Int32    save_nblockMAX;
647,648c647,648
<           ;
<       Int32    save_nblockMAX;
---
>           
>       Int32    save_nblockMAX
647,648c647,648
<           ;
<       Int32    save_nblockMAX;
---
>           
>           save_nblockMAX
647,648c647,648
<           ;
<       Int32    save_nblockMAX;
---
>           
>       Int32    
647,648c647,648
<           ;
<       Int32    save_nblockMAX;
---
>           
>           
648c648
<       Int32    save_nblockMAX;
---
>           save_nblockMAX;
648c648
<       Int32    save_nblockMAX;
---
>           ;
(86.9 %, 26819 bytes)
647a648
>           
649d649
<       Int32    save_nblock;
648,649c648,649
<           ;
<       Int32    save_nblock;
---
>           
>       Int32    save_nblock
648,649c648,649
<           ;
<       Int32    save_nblock;
---
>           
>           save_nblock
648,649c648,649
<           ;
<       Int32    save_nblock;
---
>           
>       Int32    
648,649c648,649
<           ;
<       Int32    save_nblock;
---
>           
>           
649c649
<       Int32    save_nblock;
---
>           save_nblock;
649c649
<       Int32    save_nblock;
---
>           ;
(86.9 %, 26802 bytes)
648a649
>           
650d650
<       Int32    save_es;
649,650c649,650
<           ;
<       Int32    save_es;
---
>           
>       Int32    save_es
649,650c649,650
<           ;
<       Int32    save_es;
---
>           
>           save_es
649,650c649,650
<           ;
<       Int32    save_es;
---
>           
>       Int32    
649,650c649,650
<           ;
<       Int32    save_es;
---
>           
>           
650c650
<       Int32    save_es;
---
>           save_es;
650c650
<       Int32    save_es;
---
>           ;
(86.9 %, 26789 bytes)
649a650
>           
651d651
<       Int32    save_N;
650,651c650,651
<           ;
<       Int32    save_N;
---
>           
>       Int32    save_N
650,651c650,651
<           ;
<       Int32    save_N;
---
>           
>           save_N
650,651c650,651
<           ;
<       Int32    save_N;
---
>           
>       Int32    
650,651c650,651
<           ;
<       Int32    save_N;
---
>           
>           
651c651
<       Int32    save_N;
---
>           save_N;
651c651
<       Int32    save_N;
---
>           ;
(86.9 %, 26777 bytes)
650a651
>           
652d652
<       Int32    save_curr;
651,652c651,652
<           ;
<       Int32    save_curr;
---
>           
>       Int32    save_curr
651,652c651,652
<           ;
<       Int32    save_curr;
---
>           
>           save_curr
651,652c651,652
<           ;
<       Int32    save_curr;
---
>           
>       Int32    
651,652c651,652
<           ;
<       Int32    save_curr;
---
>           
>           
652c652
<       Int32    save_curr;
---
>           save_curr;
652c652
<       Int32    save_curr;
---
>           ;
(86.9 %, 26762 bytes)
651a652
>           
653d653
<       Int32    save_zt;
652,653c652,653
<           ;
<       Int32    save_zt;
---
>           
>       Int32    save_zt
652,653c652,653
<           ;
<       Int32    save_zt;
---
>           
>           save_zt
652,653c652,653
<           ;
<       Int32    save_zt;
---
>           
>       Int32    
652,653c652,653
<           ;
<       Int32    save_zt;
---
>           
>           
653c653
<       Int32    save_zt;
---
>           save_zt;
653c653
<       Int32    save_zt;
---
>           ;
(86.9 %, 26749 bytes)
653,654c653,654
<           ;
<       Int32    save_zn; 
---
>           
>           ; 
653,654c653,654
<           ;
<       Int32    save_zn; 
---
>           
>       Int32    save_zn 
653,654c653,654
<           ;
<       Int32    save_zn; 
---
>           
>           save_zn 
653,654c653,654
<           ;
<       Int32    save_zn; 
---
>           
>       Int32     
653,654c653,654
<           ;
<       Int32    save_zn; 
---
>           
>            
654c654
<       Int32    save_zn; 
---
>           save_zn; 
654c654
<       Int32    save_zn; 
---
>           ; 
(87.0 %, 26736 bytes)
654,655c654,655
<           ; 
<       Int32    save_zvec;
---
>            
>           ;
654,655c654,655
<           ; 
<       Int32    save_zvec;
---
>            
>       Int32    save_zvec
654,655c654,655
<           ; 
<       Int32    save_zvec;
---
>            
>           save_zvec
654,655c654,655
<           ; 
<       Int32    save_zvec;
---
>            
>       Int32    
654,655c654,655
<           ; 
<       Int32    save_zvec;
---
>            
>           
655c655
<       Int32    save_zvec;
---
>           save_zvec;
655c655
<       Int32    save_zvec;
---
>           ;
(87.0 %, 26721 bytes)
654a655
>           
656d656
<       Int32    save_zj;
655,656c655,656
<           ;
<       Int32    save_zj;
---
>           
>       Int32    save_zj
655,656c655,656
<           ;
<       Int32    save_zj;
---
>           
>           save_zj
655,656c655,656
<           ;
<       Int32    save_zj;
---
>           
>       Int32    
655,656c655,656
<           ;
<       Int32    save_zj;
---
>           
>           
656c656
<       Int32    save_zj;
---
>           save_zj;
656c656
<       Int32    save_zj;
---
>           ;
(87.0 %, 26708 bytes)
655a656
>           
657d657
<       Int32    save_gSel;
656,657c656,657
<           ;
<       Int32    save_gSel;
---
>           
>       Int32    save_gSel
656,657c656,657
<           ;
<       Int32    save_gSel;
---
>           
>           save_gSel
656,657c656,657
<           ;
<       Int32    save_gSel;
---
>           
>       Int32    
656,657c656,657
<           ;
<       Int32    save_gSel;
---
>           
>           
657c657
<       Int32    save_gSel;
---
>           save_gSel;
657c657
<       Int32    save_gSel;
---
>           ;
(87.0 %, 26693 bytes)
656a657
>           
658d658
<       Int32    save_gMinlen;
657,658c657,658
<           ;
<       Int32    save_gMinlen;
---
>           
>       Int32    save_gMinlen
657,658c657,658
<           ;
<       Int32    save_gMinlen;
---
>           
>           save_gMinlen
657,658c657,658
<           ;
<       Int32    save_gMinlen;
---
>           
>       Int32    
657,658c657,658
<           ;
<       Int32    save_gMinlen;
---
>           
>           
658c658
<       Int32    save_gMinlen;
---
>           save_gMinlen;
658c658
<       Int32    save_gMinlen;
---
>           ;
(87.0 %, 26675 bytes)
658,659c658,659
<           ;
<       Int32*   save_gLimit;
---
>           
>          save_gLimit;
658,659c658,659
<           ;
<       Int32*   save_gLimit;
---
>           
>       Int32*   ;
658,659c658,659
<           ;
<       Int32*   save_gLimit;
---
>           
>       *   ;
658,659c658,659
<           ;
<       Int32*   save_gLimit;
---
>           
>       Int32   ;
658,659c658,659
<           ;
<       Int32*   save_gLimit;
---
>           
>          ;
659c659
<       Int32*   save_gLimit;
---
>       *   save_gLimit;
659c659
<       Int32*   save_gLimit;
---
>          save_gLimit;
659c659
<       Int32*   save_gLimit;
---
>       *   ;
659c659
<       Int32*   save_gLimit;
---
>          ;
(87.0 %, 26657 bytes)
658a659
>          
660d660
<       Int32*   save_gBase;
660c660
<       Int32*   save_gBase;
---
>       *   save_gBase;
660c660
<       Int32*   save_gBase;
---
>          save_gBase;
660c660
<       Int32*   save_gBase;
---
>       *   ;
660c660
<       Int32*   save_gBase;
---
>          ;
(87.0 %, 26640 bytes)
659a660
>          
661d661
<       Int32*   save_gPerm;
661c661
<       Int32*   save_gPerm;
---
>       *   save_gPerm;
661c661
<       Int32*   save_gPerm;
---
>          save_gPerm;
661c661
<       Int32*   save_gPerm;
---
>       *   ;
661c661
<       Int32*   save_gPerm;
---
>          ;
(87.0 %, 26623 bytes)
661c661
<          ;
---
>          
663,664c663,664
<    }
<    DState;
---
>    
>    
663c663
<    }
---
>    
663,664c663,664
<    }
<    DState;
---
>    
>    ;
663,664c663,664
<    }
<    DState;
---
>    
>    DState
663,664c663,664
<    }
<    DState;
---
>    
>    
663c663
<    }
---
>    
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
663,664c663,664
<    }
<    DState;
---
>    
>    ;
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
663,664c663,664
<    }
<    DState;
---
>    
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
663,664c663,664
<    }
<    DState;
---
>    
>    
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
664c664
<    DState;
---
>    ;
664c664
<    DState;
---
>    
664c664
<    DState;
---
>    ;
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
664c664
<    DState;
---
>    
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
664c664
<    DState;
---
>    ;
670c670
< #define BZ_GET_FASTc                     \
---
> # BZ_GET_FASTc                     \
664c664
<    DState;
---
>    
670c670
< #define BZ_GET_FASTc                     \
---
> # BZ_GET_FASTc                     \
664c664
<    DState;
---
>    ;
670c670
< #define BZ_GET_FASTc                     \
---
>  BZ_GET_FASTc                     \
664c664
<    DState;
---
>    
670c670
< #define BZ_GET_FASTc                     \
---
>  BZ_GET_FASTc                     \
664c664
<    DState;
---
>    DState
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> # BZ_GET_FASTc                     \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
>  BZ_GET_FASTc                     \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> #define                      \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> define                      \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
> #                      \
664c664
<    DState;
---
>    DState
670c670
< #define BZ_GET_FASTc                     \
---
>                       \
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     \
670c670
< #define BZ_GET_FASTc                     \
---
>  BZ_GET_FASTc                     \
670c670
< #define BZ_GET_FASTc                     \
---
> define                      \
670c670
< #define BZ_GET_FASTc                     \
---
>                       \
670c670
< #define BZ_GET_FASTc                     \
---
> define BZ_GET_FASTc                     
670c670
< #define BZ_GET_FASTc                     \
---
>  BZ_GET_FASTc                     
670c670
< #define BZ_GET_FASTc                     \
---
> define                      
670c670
< #define BZ_GET_FASTc                     \
---
>                       
670c670
< #define BZ_GET_FASTc                     \
---
> # BZ_GET_FASTc                     \
670c670
< #define BZ_GET_FASTc                     \
---
> #                      \
670c670
< #define BZ_GET_FASTc                     \
---
> # BZ_GET_FASTc                     
670c670
< #define BZ_GET_FASTc                     \
---
> #                      
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> # BZ_GET_FASTc                     \
>     ->tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #                      \
>     ->tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> # BZ_GET_FASTc                     
>     ->tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #                      
>     ->tPos = s->tt[s->tPos];                 \
670c670
< #define BZ_GET_FASTc                     \
---
> #define                      \
670c670
< #define BZ_GET_FASTc                     \
---
> #define                      
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      \
>     ->tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      
>     ->tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      \
>     stPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      
>     stPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      \
>     tPos = s->tt[s->tPos];                 \
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      
>     tPos = s->tt[s->tPos];                 \
670c670
< #define BZ_GET_FASTc                     \
---
> #define BZ_GET_FASTc                     
670,671c670,671
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FASTc                     
>     ->tPos = s->tt[s->tPos];                 \
(87.0 %, 26609 bytes)
670,671c670,671
< #define                      \
<     stPos = s->tt[s->tPos];                 \
---
> #define                      
>     stPos = ->tt[s->tPos];                 \
670,671c670,671
< #define                      \
<     stPos = s->tt[s->tPos];                 \
---
> #define                      
>      = ->tt[s->tPos];                 \
670,671c670,671
< #define                      \
<     stPos = s->tt[s->tPos];                 \
---
> #define                      
>     stPos  ->tt[s->tPos];                 \
670,671c670,671
< #define                      \
<     stPos = s->tt[s->tPos];                 \
---
> #define                      
>       ->tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>      = s->tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>       s->tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>      = ->tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>       ->tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>      = stt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>       stt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>      = tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>       tt[s->tPos];                 \
671c671
<     stPos = s->tt[s->tPos];                 \
---
>     stPos  s->tt[s->tPos];                 \
(87.0 %, 26601 bytes)
671c671
<       stt[s->tPos];                 \
---
>       stPos];                 \
671c671
<       stt[s->tPos];                 \
---
>       [tPos];                 \
671c671
<       stt[s->tPos];                 \
---
>       tPos];                 \
(87.0 %, 26595 bytes)
671c671
<       stPos];                 \
---
>       ;                 
671c671
<       stPos];                 \
---
>       ]                 
671c671
<       stPos];                 \
---
>                        
671c671
<       stPos];                 \
---
>       stPos;                 \
671c671
<       stPos];                 \
---
>       stPos                 \
(87.0 %, 26594 bytes)
671c671
<       stPos;                 \
---
>       stPos                 \
671c671
<       stPos;                 \
---
>       stPos                 
671,672c671,672
<       stPos;                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 \
>      = UChars->tPos & 0xf;           \
(87.0 %, 26593 bytes)
671c671
<       stPos                 \
---
>       stPos                 
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>      = UChars->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>     c  UChars->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>       UChars->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>     c = ->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>      = ->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>     c  ->tPos & 0xf;           \
671,672c671,672
<       stPos                 \
<     c = UChars->tPos & 0xf;           \
---
>       stPos                 
>       ->tPos & 0xf;           \
672c672
<     c = UChars->tPos & 0xf;           \
---
>      = UChars->tPos & 0xf;           \
672c672
<     c = UChars->tPos & 0xf;           \
---
>       UChars->tPos & 0xf;           \
672c672
<     c = UChars->tPos & 0xf;           \
---
>      = ->tPos & 0xf;           \
(87.0 %, 26592 bytes)
672c672
<      = UChars->tPos & 0xf;           \
---
>       UChars->tPos & 0xf;           \
672c672
<      = UChars->tPos & 0xf;           \
---
>       ->tPos & 0xf;           \
(87.0 %, 26591 bytes)
672c672
<       UChars->tPos & 0xf;           \
---
>       ->tPos & 0xf;           \
672c672
<       UChars->tPos & 0xf;           \
---
>       tPos & 0xf;           \
672c672
<       UChars->tPos & 0xf;           \
---
>       -> & 0xf;           \
(87.0 %, 26585 bytes)
672c672
<       ->tPos & 0xf;           \
---
>       tPos & 0xf;           \
672c672
<       ->tPos & 0xf;           \
---
>        & 0xf;           \
672c672
<       ->tPos & 0xf;           \
---
>       tPos  0xf;           \
(87.0 %, 26583 bytes)
672c672
<       tPos & 0xf;           \
---
>        & 0xf;           \
672c672
<       tPos & 0xf;           \
---
>         0xf;           \
(87.0 %, 26579 bytes)
672c672
<        & 0xf;           \
---
>         0xf;           \
672c672
<        & 0xf;           \
---
>         ;           \
(87.0 %, 26578 bytes)
672c672
<         0xf;           \
---
>         ;           \
672c672
<         0xf;           \
---
>                    \
672c672
<         0xf;           \
---
>         ;           
(87.0 %, 26575 bytes)
672c672
<         ;           \
---
>                    \
672c672
<         ;           \
---
>                    
672,673c672,673
<         ;           \
<     s->tPos >>= 8;
---
>                    \
>     ->tPos >>= 8;
(87.0 %, 26574 bytes)
672c672
<                    \
---
>                    
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     ->tPos >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     stPos >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     tPos >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     s-> >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     -> >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>     s >>= 8;
672,673c672,673
<                    \
<     s->tPos >>= 8;
---
>                    
>      >>= 8;
673c673
<     s->tPos >>= 8;
---
>     ->tPos >>= 8;
673c673
<     s->tPos >>= 8;
---
>     tPos >>= 8;
(87.0 %, 26573 bytes)
673c673
<     ->tPos >>= 8;
---
>     tPos >>= 8;
673c673
<     ->tPos >>= 8;
---
>      >>= 8;
(87.0 %, 26571 bytes)
673c673
<     tPos >>= 8;
---
>      >>= 8;
673c673
<     tPos >>= 8;
---
>       8;
673c673
<     tPos >>= 8;
---
>      >>= ;
(87.0 %, 26567 bytes)
673c673
<      >>= 8;
---
>       8;
673c673
<      >>= 8;
---
>       ;
673c673
<      >>= 8;
---
>       8
(87.0 %, 26564 bytes)
673c673
<       8;
---
>       ;
673c673
<       8;
---
>       
(87.0 %, 26563 bytes)
673c673
<       ;
---
>       
673c673
<       ;
---
>       
675c675
< #define BZ_GET_FAST_Cc                   \
---
> define BZ_GET_FAST_Cc                   \
673c673
<       ;
---
>       
675c675
< #define BZ_GET_FAST_Cc                   \
---
> # BZ_GET_FAST_Cc                   \
673c673
<       ;
---
>       
675c675
< #define BZ_GET_FAST_Cc                   \
---
>  BZ_GET_FAST_Cc                   \
673c673
<       ;
---
>       
675c675
< #define BZ_GET_FAST_Cc                   \
---
> #define                    \
(87.0 %, 26562 bytes)
675c675
< #define BZ_GET_FAST_Cc                   \
---
> define BZ_GET_FAST_Cc                   \
675c675
< #define BZ_GET_FAST_Cc                   \
---
>  BZ_GET_FAST_Cc                   \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> define                    \
675c675
< #define BZ_GET_FAST_Cc                   \
---
>                     \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> define BZ_GET_FAST_Cc                   
675c675
< #define BZ_GET_FAST_Cc                   \
---
>  BZ_GET_FAST_Cc                   
675c675
< #define BZ_GET_FAST_Cc                   \
---
> define                    
675c675
< #define BZ_GET_FAST_Cc                   \
---
>                     
675c675
< #define BZ_GET_FAST_Cc                   \
---
> # BZ_GET_FAST_Cc                   \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> #                    \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> # BZ_GET_FAST_Cc                   
675c675
< #define BZ_GET_FAST_Cc                   \
---
> #                    
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> # BZ_GET_FAST_Cc                   \
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #                    \
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> # BZ_GET_FAST_Cc                   
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #                    
>      = c_tt[c_tPos];                    \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> #define                    \
675c675
< #define BZ_GET_FAST_Cc                   \
---
> #define                    
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    \
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    \
>     c_tPos  c_tt[c_tPos];                    \
(87.0 %, 26548 bytes)
675c675
< #define                    \
---
> #define                    
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = c_tt[c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos  c_tt[c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>       c_tt[c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos = [c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = [c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos  [c_tPos];                    \
675,676c675,676
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>       [c_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>      = c_tt[c_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>       c_tt[c_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>      = [c_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>       [c_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>      = c_ttc_tPos];                    \
676c676
<     c_tPos = c_tt[c_tPos];                    \
---
>       c_ttc_tPos];                    \
(87.0 %, 26541 bytes)
676c676
<       c_tt[c_tPos];                    \
---
>       c_tPos];                    \
676c676
<       c_tt[c_tPos];                    \
---
>       [];                    \
676c676
<       c_tt[c_tPos];                    \
---
>       ];                    \
676c676
<       c_tt[c_tPos];                    \
---
>       [c_tPos;                    \
676c676
<       c_tt[c_tPos];                    \
---
>       c_tPos;                    \
(87.1 %, 26536 bytes)
676c676
<       c_tPos];                    \
---
>       ;                    \
676c676
<       c_tPos];                    \
---
>       ]                    \
676c676
<       c_tPos];                    \
---
>                           \
676c676
<       c_tPos];                    \
---
>       ];                    
676c676
<       c_tPos];                    \
---
>       ;                    
676c676
<       c_tPos];                    \
---
>       ]                    
676c676
<       c_tPos];                    \
---
>                           
676c676
<       c_tPos];                    \
---
>       c_tPos;                    \
(87.1 %, 26528 bytes)
676,677c676,677
<                           \
<     c = UCharc_tPos & 0xf;            \
---
>                           
>       UCharc_tPos & 0xf;            \
676,677c676,677
<                           \
<     c = UCharc_tPos & 0xf;            \
---
>                           
>     c =  & 0xf;            \
676,677c676,677
<                           \
<     c = UCharc_tPos & 0xf;            \
---
>                           
>      =  & 0xf;            \
676,677c676,677
<                           \
<     c = UCharc_tPos & 0xf;            \
---
>                           
>     c   & 0xf;            \
676,677c676,677
<                           \
<     c = UCharc_tPos & 0xf;            \
---
>                           
>        & 0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>      = UCharc_tPos & 0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>       UCharc_tPos & 0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>      =  & 0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>        & 0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>      = UCharc_tPos  0xf;            \
677c677
<     c = UCharc_tPos & 0xf;            \
---
>       UCharc_tPos  0xf;            \
(87.1 %, 26526 bytes)
677c677
<       UCharc_tPos & 0xf;            \
---
>         0xf;            \
677c677
<       UCharc_tPos & 0xf;            \
---
>        & ;            \
677c677
<       UCharc_tPos & 0xf;            \
---
>         ;            \
677c677
<       UCharc_tPos & 0xf;            \
---
>        & 0xf            \
677c677
<       UCharc_tPos & 0xf;            \
---
>         0xf            \
677c677
<       UCharc_tPos & 0xf;            \
---
>        &             \
677c677
<       UCharc_tPos & 0xf;            \
---
>                     \
677c677
<       UCharc_tPos & 0xf;            \
---
>       UCharc_tPos  0xf;            \
677c677
<       UCharc_tPos & 0xf;            \
---
>       UCharc_tPos  ;            \
(87.1 %, 26510 bytes)
677,678c677,678
<                     \
<     c_tPos >>= 8;
---
>                     
>       ;
678c678
<     c_tPos >>= 8;
---
>      >>= 8;
678c678
<     c_tPos >>= 8;
---
>       8;
678c678
<     c_tPos >>= 8;
---
>      >>= ;
678c678
<     c_tPos >>= 8;
---
>       ;
678c678
<     c_tPos >>= 8;
---
>      >>= 8
678c678
<     c_tPos >>= 8;
---
>       8
678c678
<     c_tPos >>= 8;
---
>      >>= 
678c678
<     c_tPos >>= 8;
---
>       
678c678
<     c_tPos >>= 8;
---
>     c_tPos  8;
678c678
<     c_tPos >>= 8;
---
>     c_tPos  ;
(87.1 %, 26507 bytes)
678c678
<     c_tPos  8;
---
>     c_tPos  ;
678c678
<     c_tPos  8;
---
>     c_tPos  
678c678
<     c_tPos  8;
---
>     c_tPos  ;
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4i,n                                          \
(87.1 %, 26506 bytes)
678c678
<     c_tPos  ;
---
>     c_tPos  
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4i,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
> # SET_LL4i,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
>  SET_LL4i,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
> #define ,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
> define ,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
> # ,n                                          \
678c678
<     c_tPos  ;
---
>     c_tPos  
680c680
< #define SET_LL4i,n                                          \
---
>  ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4i,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  SET_LL4i,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4in                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  SET_LL4in                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  n                                          \
(87.1 %, 26505 bytes)
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4i,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  SET_LL4i,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define SET_LL4in                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  SET_LL4in                                          \
680c680
< #define SET_LL4i,n                                          \
---
> define n                                          \
680c680
< #define SET_LL4i,n                                          \
---
>  n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # SET_LL4i,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # SET_LL4in                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # SET_LL4i,                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # ,                                          \
680c680
< #define SET_LL4i,n                                          \
---
> # SET_LL4i                                          \
680c680
< #define SET_LL4i,n                                          \
---
> #                                           \
680c680
< #define SET_LL4i,n                                          \
---
> #define ,n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> #define n                                          \
680c680
< #define SET_LL4i,n                                          \
---
> #define ,                                          \
680c680
< #define SET_LL4i,n                                          \
---
> #define                                           \
680c680
< #define SET_LL4i,n                                          \
---
> #define ,n                                          
680c680
< #define SET_LL4i,n                                          \
---
> #define n                                          
680c680
< #define SET_LL4i,n                                          \
---
> #define ,                                          
680c680
< #define SET_LL4i,n                                          \
---
> #define                                           
680c680
< #define SET_LL4i,n                                          \
---
> #define SET_LL4in                                          \
(87.1 %, 26489 bytes)
680c680
< #                                           \
---
> #                                           
683c683
< #define GET_LL4i                             \
---
>                               \
683c683
< #define GET_LL4i                             \
---
> define GET_LL4i                             \
683c683
< #define GET_LL4i                             \
---
>  GET_LL4i                             \
683c683
< #define GET_LL4i                             \
---
> define                              \
683c683
< #define GET_LL4i                             \
---
>                               \
683c683
< #define GET_LL4i                             \
---
> define GET_LL4i                             
683c683
< #define GET_LL4i                             \
---
>  GET_LL4i                             
683c683
< #define GET_LL4i                             \
---
> define                              
683c683
< #define GET_LL4i                             \
---
>                               
683c683
< #define GET_LL4i                             \
---
> # GET_LL4i                             \
683c683
< #define GET_LL4i                             \
---
> #                              \
683c683
< #define GET_LL4i                             \
---
> # GET_LL4i                             
683c683
< #define GET_LL4i                             \
---
> #                              
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> # GET_LL4i                             \
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #                              \
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> # GET_LL4i                             
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #                              
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683c683
< #define GET_LL4i                             \
---
> #define                              \
683c683
< #define GET_LL4i                             \
---
> #define                              
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              \
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              \
>    UInt32sll4[i >> 1] >> i  2 & 0x4 & 0xF
(87.1 %, 26481 bytes)
683c683
< #define                              \
---
> #define                              
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    UInt32sll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    ll4[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    UInt32s->[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    ->[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    UInt32s[i >> 1] >> i  2 & 0x4 & 0xF
683,684c683,684
< #define                              \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
> #define                              
>    [i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ->ll4[i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ll4[i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ->[i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    [i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ->ll4i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ll4i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    ->i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    i >> 1] >> i  2 & 0x4 & 0xF
684c684
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>    UInt32sll4[i >> 1] >> i  2 & 0x4 & 0xF
(87.1 %, 26471 bytes)
684c684
<    ll4i >> 1] >> i  2 & 0x4 & 0xF
---
>      1 >> i  2 & 0x4 & 0xF
684c684
<    ll4i >> 1] >> i  2 & 0x4 & 0xF
---
>     >>  >> i  2 & 0x4 & 0xF
684c684
<    ll4i >> 1] >> i  2 & 0x4 & 0xF
---
>       >> i  2 & 0x4 & 0xF
684c684
<    ll4i >> 1] >> i  2 & 0x4 & 0xF
---
>    ll4i  1] >> i  2 & 0x4 & 0xF
684c684
<    ll4i >> 1] >> i  2 & 0x4 & 0xF
---
>    ll4i  ] >> i  2 & 0x4 & 0xF
(87.1 %, 26469 bytes)
684c684
<    ll4i  1] >> i  2 & 0x4 & 0xF
---
>    ll4i  ] >> i  2 & 0x4 & 0xF
684c684
<    ll4i  1] >> i  2 & 0x4 & 0xF
---
>    ll4i   >> i  2 & 0x4 & 0xF
684c684
<    ll4i  1] >> i  2 & 0x4 & 0xF
---
>    ll4i  ]  i  2 & 0x4 & 0xF
(87.1 %, 26468 bytes)
684c684
<    ll4i  ] >> i  2 & 0x4 & 0xF
---
>    ll4i   >> i  2 & 0x4 & 0xF
684c684
<    ll4i  ] >> i  2 & 0x4 & 0xF
---
>    ll4i    i  2 & 0x4 & 0xF
(87.1 %, 26467 bytes)
684c684
<    ll4i   >> i  2 & 0x4 & 0xF
---
>    ll4i    i  2 & 0x4 & 0xF
684c684
<    ll4i   >> i  2 & 0x4 & 0xF
---
>    ll4i      2 & 0x4 & 0xF
684c684
<    ll4i   >> i  2 & 0x4 & 0xF
---
>    ll4i    i   & 0x4 & 0xF
(87.1 %, 26465 bytes)
684c684
<    ll4i    i  2 & 0x4 & 0xF
---
>    ll4i      2 & 0x4 & 0xF
684c684
<    ll4i    i  2 & 0x4 & 0xF
---
>    ll4i       & 0x4 & 0xF
(87.1 %, 26464 bytes)
684c684
<    ll4i      2 & 0x4 & 0xF
---
>    ll4i       & 0x4 & 0xF
684c684
<    ll4i      2 & 0x4 & 0xF
---
>    ll4i        0x4 & 0xF
(87.1 %, 26463 bytes)
684c684
<    ll4i       & 0x4 & 0xF
---
>    ll4i        0x4 & 0xF
684c684
<    ll4i       & 0x4 & 0xF
---
>    ll4i         & 0xF
(87.1 %, 26462 bytes)
684c684
<    ll4i        0x4 & 0xF
---
>    ll4i         & 0xF
684c684
<    ll4i        0x4 & 0xF
---
>    ll4i          0xF
684c684
<    ll4i        0x4 & 0xF
---
>    ll4i         & 
(87.1 %, 26459 bytes)
684c684
<    ll4i         & 0xF
---
>    ll4i          0xF
684c684
<    ll4i         & 0xF
---
>    ll4i          
(87.1 %, 26458 bytes)
684c684
<    ll4i          0xF
---
>    ll4i          
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
> define SET_LLi,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
> # SET_LLi,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
>  SET_LLi,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
> #define ,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
> define ,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
> # ,n                          \
684c684
<    ll4i          0xF
---
>    ll4i          
686c686
< #define SET_LLi,n                          \
---
>  ,n                          \
686c686
< #define SET_LLi,n                          \
---
> define SET_LLi,n                          \
686c686
< #define SET_LLi,n                          \
---
>  SET_LLi,n                          \
686c686
< #define SET_LLi,n                          \
---
> define ,n                          \
686c686
< #define SET_LLi,n                          \
---
>  ,n                          \
686c686
< #define SET_LLi,n                          \
---
> define SET_LLin                          \
686c686
< #define SET_LLi,n                          \
---
>  SET_LLin                          \
686c686
< #define SET_LLi,n                          \
---
> define n                          \
686c686
< #define SET_LLi,n                          \
---
>  n                          \
686c686
< #define SET_LLi,n                          \
---
> # SET_LLi,n                          \
(87.1 %, 26455 bytes)
686c686
< #define SET_LLi,n                          \
---
> define SET_LLi,n                          \
686c686
< #define SET_LLi,n                          \
---
>  SET_LLi,n                          \
686c686
< #define SET_LLi,n                          \
---
> define ,n                          \
686c686
< #define SET_LLi,n                          \
---
>  ,n                          \
686c686
< #define SET_LLi,n                          \
---
> define SET_LLin                          \
686c686
< #define SET_LLi,n                          \
---
>  SET_LLin                          \
686c686
< #define SET_LLi,n                          \
---
> define n                          \
686c686
< #define SET_LLi,n                          \
---
>  n                          \
686c686
< #define SET_LLi,n                          \
---
> # SET_LLi,n                          \
686c686
< #define SET_LLi,n                          \
---
> # ,n                          \
686c686
< #define SET_LLi,n                          \
---
> # SET_LLin                          \
686c686
< #define SET_LLi,n                          \
---
> # n                          \
686c686
< #define SET_LLi,n                          \
---
> # SET_LLi,                          \
686c686
< #define SET_LLi,n                          \
---
> # ,                          \
686c686
< #define SET_LLi,n                          \
---
> # SET_LLi                          \
686c686
< #define SET_LLi,n                          \
---
> #                           \
686c686
< #define SET_LLi,n                          \
---
> #define ,n                          \
686c686
< #define SET_LLi,n                          \
---
> #define n                          \
686c686
< #define SET_LLi,n                          \
---
> #define ,                          \
686c686
< #define SET_LLi,n                          \
---
> #define                           \
686c686
< #define SET_LLi,n                          \
---
> #define ,n                          
686c686
< #define SET_LLi,n                          \
---
> #define n                          
686c686
< #define SET_LLi,n                          \
---
> #define ,                          
686c686
< #define SET_LLi,n                          \
---
> #define                           
686c686
< #define SET_LLi,n                          \
---
> #define SET_LLin                          \
(87.1 %, 26440 bytes)
686c686
< #                           \
---
> #                           
689c689
< #define GET_LLi \
---
>   \
689c689
< #define GET_LLi \
---
> define GET_LLi \
689c689
< #define GET_LLi \
---
>  GET_LLi \
689c689
< #define GET_LLi \
---
> define  \
689c689
< #define GET_LLi \
---
>   \
689c689
< #define GET_LLi \
---
> define GET_LLi 
689c689
< #define GET_LLi \
---
>  GET_LLi 
689c689
< #define GET_LLi \
---
> define  
689c689
< #define GET_LLi \
---
>   
689c689
< #define GET_LLi \
---
> # GET_LLi \
689c689
< #define GET_LLi \
---
> #  \
689c689
< #define GET_LLi \
---
> # GET_LLi 
689c689
< #define GET_LLi \
---
> #  
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> # GET_LLi \
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #  \
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> # GET_LLi 
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #  
>    -ll16[i] | GET_LL4i  6
689c689
< #define GET_LLi \
---
> #define  \
689c689
< #define GET_LLi \
---
> #define  
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  \
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  \
>    UInt32sll16[i] | GET_LL4i  6
(87.1 %, 26433 bytes)
689c689
< #define  \
---
> #define  
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    -ll16[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    UInt32sll16[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    ll16[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    UInt32s-[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    -[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    UInt32s[i] | GET_LL4i  6
689,690c689,690
< #define  \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> #define  
>    [i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    -ll16[i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    ll16[i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    -[i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    [i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    -ll16i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    ll16i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    -i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    UInt32sll16[i] | GET_LL4i  6
690c690
<    UInt32s-ll16[i] | GET_LL4i  6
---
>    UInt32s[i] | GET_LL4i  6
(87.1 %, 26424 bytes)
690c690
<    ll16i] | GET_LL4i  6
---
>     |   6
690c690
<    ll16i] | GET_LL4i  6
---
>    ]    6
690c690
<    ll16i] | GET_LL4i  6
---
>        6
690c690
<    ll16i] | GET_LL4i  6
---
>    ll16i | GET_LL4i  6
690c690
<    ll16i] | GET_LL4i  6
---
>    ll16i  GET_LL4i  6
(87.1 %, 26423 bytes)
690c690
<    ll16i | GET_LL4i  6
---
>    ll16i  GET_LL4i  6
690c690
<    ll16i | GET_LL4i  6
---
>    ll16i    6
(87.1 %, 26422 bytes)
690c690
<    ll16i  GET_LL4i  6
---
>    ll16i    6
690c690
<    ll16i  GET_LL4i  6
---
>    ll16i    
(87.1 %, 26414 bytes)
690c690
<    ll16i    6
---
>    ll16i    
690c690
<    ll16i    6
---
>    ll16i    
692c692
< #define BZ_GET_SMALLc                            \
---
> define BZ_GET_SMALLc                            \
690c690
<    ll16i    6
---
>    ll16i    
692c692
< #define BZ_GET_SMALLc                            \
---
> # BZ_GET_SMALLc                            \
690c690
<    ll16i    6
---
>    ll16i    
692c692
< #define BZ_GET_SMALLc                            \
---
>  BZ_GET_SMALLc                            \
690c690
<    ll16i    6
---
>    ll16i    
692c692
< #define BZ_GET_SMALLc                            \
---
> #define                             \
(87.1 %, 26413 bytes)
692c692
< #define BZ_GET_SMALLc                            \
---
> define BZ_GET_SMALLc                            \
692c692
< #define BZ_GET_SMALLc                            \
---
>  BZ_GET_SMALLc                            \
692c692
< #define BZ_GET_SMALLc                            \
---
> define                             \
692c692
< #define BZ_GET_SMALLc                            \
---
>                              \
692c692
< #define BZ_GET_SMALLc                            \
---
> define BZ_GET_SMALLc                            
692c692
< #define BZ_GET_SMALLc                            \
---
>  BZ_GET_SMALLc                            
692c692
< #define BZ_GET_SMALLc                            \
---
> define                             
692c692
< #define BZ_GET_SMALLc                            \
---
>                              
692c692
< #define BZ_GET_SMALLc                            \
---
> # BZ_GET_SMALLc                            \
692c692
< #define BZ_GET_SMALLc                            \
---
> #                             \
692c692
< #define BZ_GET_SMALLc                            \
---
> # BZ_GET_SMALLc                            
692c692
< #define BZ_GET_SMALLc                            \
---
> #                             
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> # BZ_GET_SMALLc                            \
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #                             \
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> # BZ_GET_SMALLc                            
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #                             
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692c692
< #define BZ_GET_SMALLc                            \
---
> #define                             \
692c692
< #define BZ_GET_SMALLc                            \
---
> #define                             
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             \
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define BZ_GET_SMALLc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             \
>       c  BZ2_indexIntoF  s-tPos, s-cftab ;    \
(87.1 %, 26400 bytes)
692c692
< #define                             \
---
> #define                             
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>       c  BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>         BZ2_indexIntoF  s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>       c =   s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>        =   s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>       c    s-tPos, s-cftab ;    \
692,693c692,693
< #define                             \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
> #define                             
>           s-tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>        = BZ2_indexIntoF  s-tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>         BZ2_indexIntoF  s-tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>        =   s-tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>           s-tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>        = BZ2_indexIntoF  -tPos, s-cftab ;    \
693c693
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>         BZ2_indexIntoF  -tPos, s-cftab ;    \
(87.1 %, 26398 bytes)
693c693
<         BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>           -tPos, s-cftab ;    \
693c693
<         BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>           stPos, s-cftab ;    \
693c693
<         BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>           tPos, s-cftab ;    \
(87.1 %, 26383 bytes)
693c693
<           stPos, s-cftab ;    \
---
>           , -cftab ;    \
693c693
<           stPos, s-cftab ;    \
---
>            -cftab ;    \
693c693
<           stPos, s-cftab ;    \
---
>           , scftab ;    \
693c693
<           stPos, s-cftab ;    \
---
>            scftab ;    \
693c693
<           stPos, s-cftab ;    \
---
>           , cftab ;    \
693c693
<           stPos, s-cftab ;    \
---
>            cftab ;    \
(87.1 %, 26376 bytes)
693,694c693,694
<            scftab ;    \
<       s-tPos = GET_LLs->tPos;
---
>                 \
>       -tPos = GET_LLs->tPos;
693,694c693,694
<            scftab ;    \
<       s-tPos = GET_LLs->tPos;
---
>             ;    
>       -tPos = GET_LLs->tPos;
693,694c693,694
<            scftab ;    \
<       s-tPos = GET_LLs->tPos;
---
>                 
>       -tPos = GET_LLs->tPos;
693c693
<            scftab ;    \
---
>            scftab     \
693c693
<            scftab ;    \
---
>            scftab     
693,694c693,694
<            scftab ;    \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     \
>       -tPos = GET_LLs->tPos;
(87.1 %, 26375 bytes)
693c693
<            scftab     \
---
>            scftab     
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       -tPos = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       stPos = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       tPos = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       s- = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       - = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>       s = GET_LLs->tPos;
693,694c693,694
<            scftab     \
<       s-tPos = GET_LLs->tPos;
---
>            scftab     
>        = GET_LLs->tPos;
694c694
<       s-tPos = GET_LLs->tPos;
---
>       -tPos = GET_LLs->tPos;
694c694
<       s-tPos = GET_LLs->tPos;
---
>       tPos = GET_LLs->tPos;
(87.1 %, 26374 bytes)
694c694
<       -tPos = GET_LLs->tPos;
---
>       tPos = GET_LLs->tPos;
694c694
<       -tPos = GET_LLs->tPos;
---
>        = GET_LLs->tPos;
(87.1 %, 26373 bytes)
694c694
<       tPos = GET_LLs->tPos;
---
>        = GET_LLs->tPos;
694c694
<       tPos = GET_LLs->tPos;
---
>         GET_LLs->tPos;
694c694
<       tPos = GET_LLs->tPos;
---
>        = ->tPos;
(87.1 %, 26369 bytes)
694c694
<        = GET_LLs->tPos;
---
>         GET_LLs->tPos;
694c694
<        = GET_LLs->tPos;
---
>         ->tPos;
694c694
<        = GET_LLs->tPos;
---
>         GET_LLstPos;
(87.1 %, 26368 bytes)
694c694
<         GET_LLs->tPos;
---
>         ->tPos;
694c694
<         GET_LLs->tPos;
---
>         tPos;
(87.1 %, 26361 bytes)
694c694
<         ->tPos;
---
>         tPos;
694c694
<         ->tPos;
---
>         ;
694c694
<         ->tPos;
---
>         tPos
(87.1 %, 26359 bytes)
694c694
<         tPos;
---
>         ;
694c694
<         tPos;
---
>         
694c694
<         tPos;
---
>         ;
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1, zz2 \
694c694
<         tPos;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1, zz2 \
694c694
<         tPos;
---
>         ;
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1, zz2 \
694c694
<         tPos;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1, zz2 \
694c694
<         tPos;
---
>         ;
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1, zz2 \
694c694
<         tPos;
---
>         
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1, zz2 \
(87.1 %, 26355 bytes)
694c694
<         ;
---
>         
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1, zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1, zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1, zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> #define , zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> define , zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
> # , zz2 \
694c694
<         ;
---
>         
730c730
< #define fswapzz1, zz2 \
---
>  , zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1, zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1, zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define , zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  , zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1 zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1 zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define  zz2 \
730c730
< #define fswapzz1, zz2 \
---
>   zz2 \
(87.1 %, 26354 bytes)
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1, zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1, zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define , zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  , zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define fswapzz1 zz2 \
730c730
< #define fswapzz1, zz2 \
---
>  fswapzz1 zz2 \
730c730
< #define fswapzz1, zz2 \
---
> define  zz2 \
730c730
< #define fswapzz1, zz2 \
---
>   zz2 \
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1, zz2 \
730c730
< #define fswapzz1, zz2 \
---
> # , zz2 \
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1 zz2 \
730c730
< #define fswapzz1, zz2 \
---
> #  zz2 \
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1,  \
730c730
< #define fswapzz1, zz2 \
---
> # ,  \
730c730
< #define fswapzz1, zz2 \
---
> # fswapzz1  \
730c730
< #define fswapzz1, zz2 \
---
> #   \
730c730
< #define fswapzz1, zz2 \
---
> #define , zz2 \
730c730
< #define fswapzz1, zz2 \
---
> #define  zz2 \
(87.1 %, 26336 bytes)
730c730
< #   \
---
> #   
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
>  , zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> define fvswapzzp1, zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
>  fvswapzzp1, zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> define , zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
>  , zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> define fvswapzzp1 zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
>  fvswapzzp1 zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> define  zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
>   zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # fvswapzzp1, zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # , zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # fvswapzzp1 zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #  zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # fvswapzzp1, , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # , , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> # fvswapzzp1 , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #  , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define , zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define  zzp2, zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define , , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define  , zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define , zzp2 zzn       \
733c733
< #define fvswapzzp1, zzp2, zzn       \
---
> #define  zzp2 zzn       \
(87.2 %, 26325 bytes)
733c733
< #define  zzp2, zzn       \
---
> #define   zzn       \
733c733
< #define  zzp2, zzn       \
---
> #define  ,        \
733c733
< #define  zzp2, zzn       \
---
> #define          \
733c733
< #define  zzp2, zzn       \
---
> #define  , zzn       
733c733
< #define  zzp2, zzn       \
---
> #define   zzn       
(87.2 %, 26320 bytes)
733c733
< #define   zzn       \
---
> #define          
733c733
< #define   zzn       \
---
> #define          \
737c737
< #define fmina,b a  b ? a : b
---
> define fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define          
737c737
< #define fmina,b a  b ? a : b
---
> define fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define          \
737c737
< #define fmina,b a  b ? a : b
---
> # fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define          
737c737
< #define fmina,b a  b ? a : b
---
> # fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define          \
737c737
< #define fmina,b a  b ? a : b
---
>  fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define          
737c737
< #define fmina,b a  b ? a : b
---
>  fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
> define fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
> # fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
>  fmina,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
> #define ,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
> define ,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
> # ,b a  b ? a : b
733c733
< #define   zzn       \
---
> #define   zzn       
737c737
< #define fmina,b a  b ? a : b
---
>  ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> define fmina,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  fmina,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> define ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  ,b a  b ? a : b
(87.2 %, 26319 bytes)
737c737
< #define fmina,b a  b ? a : b
---
> define fmina,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  fmina,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> define ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> define fminab a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  fminab a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> define b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
>  b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # fmina,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # fminab a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # fmina, a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # , a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> # fmina a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #  a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define ,b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define b a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define , a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define  a  b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define ,b   b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define b   b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define ,   b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define    b ? a : b
737c737
< #define fmina,b a  b ? a : b
---
> #define fminab a  b ? a : b
(87.2 %, 26312 bytes)
737c737
< #define  a  b ? a : b
---
> #define      a : b
737c737
< #define  a  b ? a : b
---
> #define    b ?  : b
737c737
< #define  a  b ? a : b
---
> #define     ?  : b
737c737
< #define  a  b ? a : b
---
> #define    b   : b
737c737
< #define  a  b ? a : b
---
> #define       : b
737c737
< #define  a  b ? a : b
---
> #define  a   ? a : b
(87.2 %, 26309 bytes)
737c737
< #define      a : b
---
> #define        
737c737
< #define      a : b
---
> #define       : b
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
737c737
< #define      a : b
---
> #define        b
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
737c737
< #define      a : b
---
> #define       : 
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
737c737
< #define      a : b
---
> #define        
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
737c737
< #define      a : b
---
> #define      a  b
737c737
< #define      a : b
---
> #define      a  
(87.2 %, 26308 bytes)
737c737
< #define      a  b
---
> #define      a  
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
> # fpushlz,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
>  fpushlz,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
> #define ,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
> define ,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
> # ,hz 
737c737
< #define      a  b
---
> #define      a  
739c739
< #define fpushlz,hz 
---
>  ,hz 
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
739c739
< #define fpushlz,hz 
---
>  fpushlz,hz 
739c739
< #define fpushlz,hz 
---
> define ,hz 
739c739
< #define fpushlz,hz 
---
>  ,hz 
739c739
< #define fpushlz,hz 
---
> define fpushlzhz 
739c739
< #define fpushlz,hz 
---
>  fpushlzhz 
739c739
< #define fpushlz,hz 
---
> define hz 
739c739
< #define fpushlz,hz 
---
>  hz 
739c739
< #define fpushlz,hz 
---
> # fpushlz,hz 
(87.2 %, 26307 bytes)
739c739
< #define fpushlz,hz 
---
> define fpushlz,hz 
739c739
< #define fpushlz,hz 
---
>  fpushlz,hz 
739c739
< #define fpushlz,hz 
---
> define ,hz 
739c739
< #define fpushlz,hz 
---
>  ,hz 
739c739
< #define fpushlz,hz 
---
> define fpushlzhz 
739c739
< #define fpushlz,hz 
---
>  fpushlzhz 
739c739
< #define fpushlz,hz 
---
> define hz 
739c739
< #define fpushlz,hz 
---
>  hz 
739c739
< #define fpushlz,hz 
---
> # fpushlz,hz 
739c739
< #define fpushlz,hz 
---
> # ,hz 
739c739
< #define fpushlz,hz 
---
> # fpushlzhz 
739c739
< #define fpushlz,hz 
---
> # hz 
739c739
< #define fpushlz,hz 
---
> # fpushlz, 
739c739
< #define fpushlz,hz 
---
> # , 
739c739
< #define fpushlz,hz 
---
> # fpushlz 
739c739
< #define fpushlz,hz 
---
> #  
739c739
< #define fpushlz,hz 
---
> #define ,hz 
739c739
< #define fpushlz,hz 
---
> #define hz 
(87.2 %, 26291 bytes)
741c741
< #define fpoplz,hz 
---
>  hz 
741c741
< #define fpoplz,hz 
---
> # fpoplz,hz 
741c741
< #define fpoplz,hz 
---
> # ,hz 
741c741
< #define fpoplz,hz 
---
> # fpoplzhz 
741c741
< #define fpoplz,hz 
---
> # hz 
741c741
< #define fpoplz,hz 
---
> # fpoplz, 
741c741
< #define fpoplz,hz 
---
> # , 
741c741
< #define fpoplz,hz 
---
> # fpoplz 
741c741
< #define fpoplz,hz 
---
> #  
741c741
< #define fpoplz,hz 
---
> #define ,hz 
741c741
< #define fpoplz,hz 
---
> #define hz 
(87.2 %, 26276 bytes)
743c743
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>   
743c743
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 0
743c743
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #  0
(87.2 %, 26241 bytes)
744c744
< #define FALLBACK_QSORT_STACK_SIZE   0
---
>     
744c744
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> # FALLBACK_QSORT_STACK_SIZE   0
744c744
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> #    0
(87.2 %, 26208 bytes)
749,750c749,750
< #undef fmin
< #undef fpush
---
>  
> undef fpush
749c749
< #undef fmin
---
> # fmin
749c749
< #undef fmin
---
> # 
749,750c749,750
< #undef fmin
< #undef fpush
---
> # fmin
> undef fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> # 
> undef fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> # fmin
> # fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> # 
> # fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> # fmin
>  fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> # 
>  fpush
749c749
< #undef fmin
---
> #undef 
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
> undef fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
> # fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
>  fpush
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
> #undef 
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
> undef 
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
> # 
749,750c749,750
< #undef fmin
< #undef fpush
---
> #undef 
>  
750c750
< #undef fpush
---
> undef fpush
(87.2 %, 26199 bytes)
750c750
< #undef fpush
---
>  fpush
750c750
< #undef fpush
---
> undef 
750c750
< #undef fpush
---
>  
750,751c750,751
< #undef fpush
< #undef fpop
---
> undef fpush
> undef fpop
750,751c750,751
< #undef fpush
< #undef fpop
---
>  fpush
> undef fpop
750,751c750,751
< #undef fpush
< #undef fpop
---
> undef 
> undef fpop
750,751c750,751
< #undef fpush
< #undef fpop
---
>  
> undef fpop
750c750
< #undef fpush
---
> # fpush
750c750
< #undef fpush
---
> # 
(87.2 %, 26188 bytes)
751c751
< #undef fpop
---
>  
751,752c751,752
< #undef fpop
< #undef fswap
---
> undef fpop
> undef fswap
751,752c751,752
< #undef fpop
< #undef fswap
---
>  fpop
> undef fswap
751,752c751,752
< #undef fpop
< #undef fswap
---
> undef 
> undef fswap
751,752c751,752
< #undef fpop
< #undef fswap
---
>  
> undef fswap
751c751
< #undef fpop
---
> # fpop
751c751
< #undef fpop
---
> # 
(87.2 %, 26178 bytes)
752c752
< #undef fswap
---
>  
752,753c752,753
< #undef fswap
< #undef fvswap
---
> undef fswap
> undef fvswap
752,753c752,753
< #undef fswap
< #undef fvswap
---
>  fswap
> undef fvswap
752,753c752,753
< #undef fswap
< #undef fvswap
---
> undef 
> undef fvswap
752,753c752,753
< #undef fswap
< #undef fvswap
---
>  
> undef fvswap
752c752
< #undef fswap
---
> # fswap
752c752
< #undef fswap
---
> # 
(87.2 %, 26167 bytes)
753c753
< #undef fvswap
---
>  
753,754c753,754
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
753,754c753,754
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
753,754c753,754
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef 
> undef FALLBACK_QSORT_SMALL_THRESH
753,754c753,754
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
> undef FALLBACK_QSORT_SMALL_THRESH
753c753
< #undef fvswap
---
> # fvswap
753c753
< #undef fvswap
---
> # 
(87.2 %, 26155 bytes)
754c754
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
754,755c754,755
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
754,755c754,755
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
754,755c754,755
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
> undef FALLBACK_QSORT_STACK_SIZE
754,755c754,755
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
> undef FALLBACK_QSORT_STACK_SIZE
754c754
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # FALLBACK_QSORT_SMALL_THRESH
754c754
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # 
(87.3 %, 26122 bytes)
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_STACK_SIZE
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_STACK_SIZE
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # FALLBACK_QSORT_STACK_SIZE
755c755
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # 
(87.3 %, 26091 bytes)
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>          bhtab[zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define       SET_BHzz  [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>        SET_BHzz  [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> define         [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>          [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #         bhtab[zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #       SET_BHzz  [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #         [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #       SET_BHzz  bhtabzz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #         bhtabzz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #       SET_BHzz  zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #         zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #define         bhtab[zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #define         [zz > 5] |= 1  zz & 1
761c761
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
> #define         bhtabzz > 5] |= 1  zz & 1
(87.3 %, 26083 bytes)
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define         [zz > 5] |= 1  zz & 1
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define         zz > 5] |= 1  zz & 1
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define         [ > 5] |= 1  zz & 1
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define          > 5] |= 1  zz & 1
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define         [zz  5] |= 1  zz & 1
761c761
< #define         bhtab[zz > 5] |= 1  zz & 1
---
> #define         zz  5] |= 1  zz & 1
(87.3 %, 26077 bytes)
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define           5] |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define          > ] |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define           ] |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define          > 5 |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define           5 |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define          >  |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define            |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define         zz  5] |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define         zz  ] |= 1  zz & 1
761c761
< #define         zz > 5] |= 1  zz & 1
---
> #define         zz  5 |= 1  zz & 1
(87.3 %, 26076 bytes)
761c761
< #define         zz  5] |= 1  zz & 1
---
> #define         zz  ] |= 1  zz & 1
761c761
< #define         zz  5] |= 1  zz & 1
---
> #define         zz   |= 1  zz & 1
761c761
< #define         zz  5] |= 1  zz & 1
---
> #define         zz  ]  1  zz & 1
(87.3 %, 26075 bytes)
761c761
< #define         zz  ] |= 1  zz & 1
---
> #define         zz   |= 1  zz & 1
761c761
< #define         zz  ] |= 1  zz & 1
---
> #define         zz    1  zz & 1
(87.3 %, 26074 bytes)
761c761
< #define         zz   |= 1  zz & 1
---
> #define         zz    1  zz & 1
761c761
< #define         zz   |= 1  zz & 1
---
> #define         zz      zz & 1
(87.3 %, 26072 bytes)
761c761
< #define         zz    1  zz & 1
---
> #define         zz      zz & 1
761c761
< #define         zz    1  zz & 1
---
> #define         zz       & 1
761c761
< #define         zz    1  zz & 1
---
> #define         zz      zz  1
(87.3 %, 26071 bytes)
761c761
< #define         zz      zz & 1
---
> #define         zz       & 1
761c761
< #define         zz      zz & 1
---
> #define         zz        1
761c761
< #define         zz      zz & 1
---
> #define         zz       & 
(87.3 %, 26069 bytes)
761c761
< #define         zz       & 1
---
> #define         zz        1
761c761
< #define         zz       & 1
---
> #define         zz        
(87.3 %, 26068 bytes)
761c761
< #define         zz        1
---
> #define         zz        
761,762c761,762
< #define         zz        1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define         zz        
> define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
761,762c761,762
< #define         zz        1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define         zz        
> #     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
761,762c761,762
< #define         zz        1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define         zz        
>      CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
761,762c761,762
< #define         zz        1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define         zz        
> #define       bhtab[zz  5] &= ~1  zz & 1
(87.3 %, 26067 bytes)
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>      CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> define       bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>        bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> define     CLEAR_BHzz  [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>      CLEAR_BHzz  [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> define       [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>        [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #       bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #     CLEAR_BHzz  [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #       [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #     CLEAR_BHzz  bhtabzz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #       bhtabzz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #     CLEAR_BHzz  zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #       zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define       bhtab[zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define       [zz  5] &= ~1  zz & 1
762c762
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
> #define       bhtabzz  5] &= ~1  zz & 1
(87.3 %, 26057 bytes)
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define       [zz  5] &= ~1  zz & 1
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define       zz  5] &= ~1  zz & 1
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define       [  5] &= ~1  zz & 1
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define         5] &= ~1  zz & 1
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define       [zz  ] &= ~1  zz & 1
762c762
< #define       bhtab[zz  5] &= ~1  zz & 1
---
> #define       zz  ] &= ~1  zz & 1
(87.3 %, 26051 bytes)
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define         ] &= ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define         5 &= ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define          &= ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define         5]  ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define         ]  ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define         5  ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define           ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define       zz  ] &= ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define       zz   &= ~1  zz & 1
762c762
< #define       zz  5] &= ~1  zz & 1
---
> #define       zz  ]  ~1  zz & 1
(87.3 %, 26050 bytes)
762c762
< #define       zz  ] &= ~1  zz & 1
---
> #define       zz   &= ~1  zz & 1
762c762
< #define       zz  ] &= ~1  zz & 1
---
> #define       zz    ~1  zz & 1
762c762
< #define       zz  ] &= ~1  zz & 1
---
> #define       zz   &= 1  zz & 1
(87.3 %, 26049 bytes)
762c762
< #define       zz   &= ~1  zz & 1
---
> #define       zz    ~1  zz & 1
762c762
< #define       zz   &= ~1  zz & 1
---
> #define       zz    1  zz & 1
(87.3 %, 26047 bytes)
762c762
< #define       zz    ~1  zz & 1
---
> #define       zz    1  zz & 1
762c762
< #define       zz    ~1  zz & 1
---
> #define       zz      zz & 1
(87.3 %, 26046 bytes)
762c762
< #define       zz    1  zz & 1
---
> #define       zz      zz & 1
762c762
< #define       zz    1  zz & 1
---
> #define       zz       & 1
762c762
< #define       zz    1  zz & 1
---
> #define       zz      zz  1
(87.3 %, 26045 bytes)
762c762
< #define       zz      zz & 1
---
> #define       zz       & 1
762c762
< #define       zz      zz & 1
---
> #define       zz        1
(87.3 %, 26043 bytes)
762c762
< #define       zz       & 1
---
> #define       zz        1
762c762
< #define       zz       & 1
---
> #define       zz        
762,763c762,763
< #define       zz       & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        1
> define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz       & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
> define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz       & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        1
> #     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz       & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
> #     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz       & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        1
>      ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
(87.3 %, 26042 bytes)
762c762
< #define       zz        1
---
> #define       zz        
762,763c762,763
< #define       zz        1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
> define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz        1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
> #     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz        1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
>      ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
762,763c762,763
< #define       zz        1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       zz        
> #define       bhtab[zz  5] & 1  zz & 1
(87.3 %, 26041 bytes)
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>      ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> define       bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>        bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> define     ISSET_BHzz  [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>      ISSET_BHzz  [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> define       [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>        [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #       bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #     ISSET_BHzz  [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #       [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #     ISSET_BHzz  bhtabzz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #       bhtabzz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #     ISSET_BHzz  zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #       zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       bhtab[zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       [zz  5] & 1  zz & 1
763c763
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
> #define       bhtabzz  5] & 1  zz & 1
(87.3 %, 26031 bytes)
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define       [zz  5] & 1  zz & 1
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define       zz  5] & 1  zz & 1
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define       [  5] & 1  zz & 1
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define         5] & 1  zz & 1
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define       [zz  ] & 1  zz & 1
763c763
< #define       bhtab[zz  5] & 1  zz & 1
---
> #define       zz  ] & 1  zz & 1
(87.3 %, 26025 bytes)
763c763
< #define       zz  5] & 1  zz & 1
---
> #define         ] & 1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define         5 & 1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define          & 1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define         5]  1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define         ]  1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define         5  1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define           1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define       zz  ] & 1  zz & 1
763c763
< #define       zz  5] & 1  zz & 1
---
> #define       zz   & 1  zz & 1
(87.3 %, 26024 bytes)
763c763
< #define       zz  ] & 1  zz & 1
---
> #define       zz   & 1  zz & 1
763c763
< #define       zz  ] & 1  zz & 1
---
> #define       zz    1  zz & 1
763c763
< #define       zz  ] & 1  zz & 1
---
> #define       zz   &   zz & 1
(87.3 %, 26023 bytes)
763c763
< #define       zz   & 1  zz & 1
---
> #define       zz    1  zz & 1
763c763
< #define       zz   & 1  zz & 1
---
> #define       zz      zz & 1
(87.3 %, 26022 bytes)
763c763
< #define       zz    1  zz & 1
---
> #define       zz      zz & 1
763c763
< #define       zz    1  zz & 1
---
> #define       zz       & 1
763c763
< #define       zz    1  zz & 1
---
> #define       zz      zz  1
(87.3 %, 26021 bytes)
763c763
< #define       zz      zz & 1
---
> #define       zz       & 1
763c763
< #define       zz      zz & 1
---
> #define       zz        1
763c763
< #define       zz      zz & 1
---
> #define       zz       & 
(87.3 %, 26019 bytes)
763c763
< #define       zz       & 1
---
> #define       zz        1
763c763
< #define       zz       & 1
---
> #define       zz        
763,764c763,764
< #define       zz       & 1
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define       zz        1
> define      WORD_BHzz  bhtab[zz  5]
(87.3 %, 26018 bytes)
763c763
< #define       zz        1
---
> #define       zz        
763,764c763,764
< #define       zz        1
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define       zz        
> define      WORD_BHzz  bhtab[zz  5]
763,764c763,764
< #define       zz        1
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define       zz        
> #      WORD_BHzz  bhtab[zz  5]
763,764c763,764
< #define       zz        1
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define       zz        
>       WORD_BHzz  bhtab[zz  5]
763,764c763,764
< #define       zz        1
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define       zz        
> #define        bhtab[zz  5]
(87.3 %, 26017 bytes)
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> define      WORD_BHzz  bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
>       WORD_BHzz  bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> define        bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
>         bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> define      WORD_BHzz  [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
>       WORD_BHzz  [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> define        [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
>         [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #      WORD_BHzz  bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #        bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #      WORD_BHzz  [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #        [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #      WORD_BHzz  bhtabzz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #        bhtabzz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #      WORD_BHzz  zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #        zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define        bhtab[zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define        [zz  5]
764c764
< #define      WORD_BHzz  bhtab[zz  5]
---
> #define        bhtabzz  5]
(87.3 %, 26008 bytes)
764c764
< #define        bhtab[zz  5]
---
> #define        [zz  5]
764c764
< #define        bhtab[zz  5]
---
> #define        zz  5]
764c764
< #define        bhtab[zz  5]
---
> #define        [  5]
764c764
< #define        bhtab[zz  5]
---
> #define          5]
764c764
< #define        bhtab[zz  5]
---
> #define        [zz  ]
764c764
< #define        bhtab[zz  5]
---
> #define        zz  ]
(87.3 %, 26002 bytes)
764c764
< #define        zz  5]
---
> #define          ]
764c764
< #define        zz  5]
---
> #define          5
764c764
< #define        zz  5]
---
> #define          
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define          5]
> define UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define          ]
> define UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define          5
> define UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define          
> define UNALIGNED_BHzz  zz & 0xf
764c764
< #define        zz  5]
---
> #define        zz  ]
764c764
< #define        zz  5]
---
> #define        zz  
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  ]
> define UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  
> define UNALIGNED_BHzz  zz & 0xf
(87.3 %, 26001 bytes)
764c764
< #define        zz  ]
---
> #define        zz  
764,765c764,765
< #define        zz  ]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  
> define UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  ]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  
> # UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  ]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  
>  UNALIGNED_BHzz  zz & 0xf
764,765c764,765
< #define        zz  ]
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define        zz  
> #define   zz & 0xf
(87.3 %, 26000 bytes)
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> define UNALIGNED_BHzz  zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
>  UNALIGNED_BHzz  zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> define   zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
>    zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> define UNALIGNED_BHzz   & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
>  UNALIGNED_BHzz   & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> define    & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
>     & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> # UNALIGNED_BHzz  zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #   zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> # UNALIGNED_BHzz   & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #    & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> # UNALIGNED_BHzz  zz  0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #   zz  0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> # UNALIGNED_BHzz    0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #     0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define   zz & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define    & 0xf
765c765
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define   zz  0xf
(87.3 %, 25986 bytes)
765c765
< #define   zz & 0xf
---
> #define    & 0xf
765c765
< #define   zz & 0xf
---
> #define     0xf
765c765
< #define   zz & 0xf
---
> #define    & 
765c765
< #define   zz & 0xf
---
> #define     
765c765
< #define   zz & 0xf
---
> #define    & 0xf
769c769
< #undef       SET_BH
---
> undef       SET_BH
765c765
< #define   zz & 0xf
---
> #define     0xf
769c769
< #undef       SET_BH
---
> undef       SET_BH
765c765
< #define   zz & 0xf
---
> #define    & 
769c769
< #undef       SET_BH
---
> undef       SET_BH
765c765
< #define   zz & 0xf
---
> #define     
769c769
< #undef       SET_BH
---
> undef       SET_BH
765c765
< #define   zz & 0xf
---
> #define   zz  0xf
765c765
< #define   zz & 0xf
---
> #define   zz  
(87.3 %, 25985 bytes)
765c765
< #define   zz  0xf
---
> #define   zz  
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
> undef       SET_BH
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
> #       SET_BH
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
>        SET_BH
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
> #undef       
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
> undef       
765c765
< #define   zz  0xf
---
> #define   zz  
769c769
< #undef       SET_BH
---
> #       
(87.3 %, 25982 bytes)
769c769
< #undef       SET_BH
---
> undef       SET_BH
769c769
< #undef       SET_BH
---
>        SET_BH
769c769
< #undef       SET_BH
---
> undef       
769c769
< #undef       SET_BH
---
>        
769,770c769,770
< #undef       SET_BH
< #undef     CLEAR_BH
---
> undef       SET_BH
> undef     CLEAR_BH
769,770c769,770
< #undef       SET_BH
< #undef     CLEAR_BH
---
>        SET_BH
> undef     CLEAR_BH
769,770c769,770
< #undef       SET_BH
< #undef     CLEAR_BH
---
> undef       
> undef     CLEAR_BH
769,770c769,770
< #undef       SET_BH
< #undef     CLEAR_BH
---
>        
> undef     CLEAR_BH
769c769
< #undef       SET_BH
---
> #       SET_BH
769c769
< #undef       SET_BH
---
> #       
(87.3 %, 25970 bytes)
770c770
< #undef     CLEAR_BH
---
>      
770,771c770,771
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> undef     CLEAR_BH
> undef     ISSET_BH
770,771c770,771
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
>      CLEAR_BH
> undef     ISSET_BH
770,771c770,771
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> undef     
> undef     ISSET_BH
770,771c770,771
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
>      
> undef     ISSET_BH
770c770
< #undef     CLEAR_BH
---
> #     CLEAR_BH
770c770
< #undef     CLEAR_BH
---
> #     
(87.3 %, 25956 bytes)
771c771
< #undef     ISSET_BH
---
>      
771,772c771,772
< #undef     ISSET_BH
< #undef      WORD_BH
---
> undef     ISSET_BH
> undef      WORD_BH
771,772c771,772
< #undef     ISSET_BH
< #undef      WORD_BH
---
>      ISSET_BH
> undef      WORD_BH
771,772c771,772
< #undef     ISSET_BH
< #undef      WORD_BH
---
> undef     
> undef      WORD_BH
771,772c771,772
< #undef     ISSET_BH
< #undef      WORD_BH
---
>      
> undef      WORD_BH
771c771
< #undef     ISSET_BH
---
> #     ISSET_BH
771c771
< #undef     ISSET_BH
---
> #     
(87.3 %, 25942 bytes)
772c772
< #undef      WORD_BH
---
>       
772,773c772,773
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> undef      WORD_BH
> undef UNALIGNED_BH
772,773c772,773
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
>       WORD_BH
> undef UNALIGNED_BH
772,773c772,773
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> undef      
> undef UNALIGNED_BH
772,773c772,773
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
>       
> undef UNALIGNED_BH
772c772
< #undef      WORD_BH
---
> #      WORD_BH
772c772
< #undef      WORD_BH
---
> #      
(87.3 %, 25929 bytes)
773c773
< #undef UNALIGNED_BH
---
>  
773c773
< #undef UNALIGNED_BH
---
> undef UNALIGNED_BH
796c796
< #define mswapzz1, zz2 \
---
> define mswapzz1, zz2 \
773c773
< #undef UNALIGNED_BH
---
>  UNALIGNED_BH
796c796
< #define mswapzz1, zz2 \
---
> define mswapzz1, zz2 \
773c773
< #undef UNALIGNED_BH
---
> undef 
796c796
< #define mswapzz1, zz2 \
---
> define mswapzz1, zz2 \
773c773
< #undef UNALIGNED_BH
---
>  
796c796
< #define mswapzz1, zz2 \
---
> define mswapzz1, zz2 \
773c773
< #undef UNALIGNED_BH
---
> # UNALIGNED_BH
773c773
< #undef UNALIGNED_BH
---
> # 
(87.4 %, 25911 bytes)
796c796
< #define mswapzz1, zz2 \
---
>  , zz2 \
796c796
< #define mswapzz1, zz2 \
---
> define mswapzz1 zz2 \
796c796
< #define mswapzz1, zz2 \
---
>  mswapzz1 zz2 \
796c796
< #define mswapzz1, zz2 \
---
> define  zz2 \
796c796
< #define mswapzz1, zz2 \
---
>   zz2 \
796c796
< #define mswapzz1, zz2 \
---
> # mswapzz1, zz2 \
796c796
< #define mswapzz1, zz2 \
---
> # , zz2 \
796c796
< #define mswapzz1, zz2 \
---
> # mswapzz1 zz2 \
796c796
< #define mswapzz1, zz2 \
---
> #  zz2 \
796c796
< #define mswapzz1, zz2 \
---
> # mswapzz1,  \
796c796
< #define mswapzz1, zz2 \
---
> # ,  \
796c796
< #define mswapzz1, zz2 \
---
> # mswapzz1  \
796c796
< #define mswapzz1, zz2 \
---
> #   \
796c796
< #define mswapzz1, zz2 \
---
> #define , zz2 \
796c796
< #define mswapzz1, zz2 \
---
> #define  zz2 \
(87.4 %, 25893 bytes)
796c796
< #   \
---
> #   
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
>  , zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> define mvswapzzp1, zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
>  mvswapzzp1, zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> define , zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
>  , zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> define mvswapzzp1 zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
>  mvswapzzp1 zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> define  zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
>   zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # mvswapzzp1, zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # , zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # mvswapzzp1 zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #  zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # mvswapzzp1, , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # , , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> # mvswapzzp1 , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #  , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define , zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define  zzp2, zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define , , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define  , zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define , zzp2 zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define  zzp2 zzn       \
799c799
< #define mvswapzzp1, zzp2, zzn       \
---
> #define ,  zzn       \
(87.4 %, 25882 bytes)
799c799
< #define  zzp2, zzn       \
---
> #define   zzn       \
799c799
< #define  zzp2, zzn       \
---
> #define  ,        \
799c799
< #define  zzp2, zzn       \
---
> #define          \
799c799
< #define  zzp2, zzn       \
---
> #define  , zzn       
799c799
< #define  zzp2, zzn       \
---
> #define   zzn       
(87.4 %, 25877 bytes)
799c799
< #define   zzn       \
---
> #define          
799c799
< #define   zzn       \
---
> #define          \
804c804
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define          
804c804
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define          \
804c804
< #define mmina,b a < b ? a : b
---
> # mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define          
804c804
< #define mmina,b a < b ? a : b
---
> # mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define          \
804c804
< #define mmina,b a < b ? a : b
---
>  mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define          
804c804
< #define mmina,b a < b ? a : b
---
>  mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
> # mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
>  mmina,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
> #define ,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
> define ,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
> # ,b a < b ? a : b
799c799
< #define   zzn       \
---
> #define   zzn       
804c804
< #define mmina,b a < b ? a : b
---
>  ,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
>  mmina,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> define ,b a < b ? a : b
(87.4 %, 25876 bytes)
804c804
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
>  mmina,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> define ,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
>  ,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> define mminab a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
>  mminab a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> define b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
>  b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # mmina,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # ,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # mminab a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # mmina, a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # , a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> # mmina a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #  a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define ,b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define b a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define , a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define  a < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define ,b  < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define b  < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define ,  < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define   < b ? a : b
804c804
< #define mmina,b a < b ? a : b
---
> #define mminab a < b ? a : b
(87.4 %, 25869 bytes)
804c804
< #define  a < b ? a : b
---
> #define     ? a : b
804c804
< #define  a < b ? a : b
---
> #define   < b  a : b
804c804
< #define  a < b ? a : b
---
> #define    b  a : b
804c804
< #define  a < b ? a : b
---
> #define   <   a : b
804c804
< #define  a < b ? a : b
---
> #define      a : b
804c804
< #define  a < b ? a : b
---
> #define  a  b ? a : b
804c804
< #define  a < b ? a : b
---
> #define  a   ? a : b
(87.4 %, 25865 bytes)
804c804
< #define      a : b
---
> #define        
806c806
< #define mpushlz,hz,dz 
---
> define mpushlz,hz,dz 
804c804
< #define      a : b
---
> #define      a  b
804c804
< #define      a : b
---
> #define      a  
(87.4 %, 25864 bytes)
804c804
< #define      a  b
---
> #define      a  
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
> define mpushlz,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
> # mpushlz,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
>  mpushlz,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
> #define ,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
> define ,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
> # ,hz,dz 
804c804
< #define      a  b
---
> #define      a  
806c806
< #define mpushlz,hz,dz 
---
>  ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define mpushlz,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  mpushlz,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define mpushlzhz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  mpushlzhz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  hz,dz 
(87.4 %, 25863 bytes)
806c806
< #define mpushlz,hz,dz 
---
> define mpushlz,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  mpushlz,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define mpushlzhz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  mpushlzhz,dz 
806c806
< #define mpushlz,hz,dz 
---
> define hz,dz 
806c806
< #define mpushlz,hz,dz 
---
>  hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # mpushlz,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # mpushlzhz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # mpushlz,,dz 
806c806
< #define mpushlz,hz,dz 
---
> # ,,dz 
806c806
< #define mpushlz,hz,dz 
---
> # mpushlz,dz 
806c806
< #define mpushlz,hz,dz 
---
> # ,dz 
806c806
< #define mpushlz,hz,dz 
---
> #define ,hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> #define hz,dz 
806c806
< #define mpushlz,hz,dz 
---
> #define ,,dz 
806c806
< #define mpushlz,hz,dz 
---
> #define ,dz 
806c806
< #define mpushlz,hz,dz 
---
> #define ,hzdz 
806c806
< #define mpushlz,hz,dz 
---
> #define hzdz 
(87.4 %, 25855 bytes)
806c806
< #define hz,dz 
---
> #define dz 
806c806
< #define hz,dz 
---
> #define , 
806c806
< #define hz,dz 
---
> #define  
806c806
< #define hz,dz 
---
> #define ,dz 
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
806c806
< #define hz,dz 
---
> #define dz 
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
806c806
< #define hz,dz 
---
> #define , 
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
806c806
< #define hz,dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
806c806
< #define hz,dz 
---
> #define hzdz 
(87.4 %, 25852 bytes)
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> # mpoplz,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
>  mpoplz,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> #define ,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> define ,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
> # ,hz,dz 
806c806
< #define dz 
---
> #define  
808c808
< #define mpoplz,hz,dz 
---
>  ,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> define mpoplz,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
>  mpoplz,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> define ,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
>  ,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> define mpoplzhz,dz 
808c808
< #define mpoplz,hz,dz 
---
>  mpoplzhz,dz 
808c808
< #define mpoplz,hz,dz 
---
> define hz,dz 
808c808
< #define mpoplz,hz,dz 
---
>  hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # mpoplz,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # ,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # mpoplzhz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # mpoplz,,dz 
808c808
< #define mpoplz,hz,dz 
---
> # ,,dz 
808c808
< #define mpoplz,hz,dz 
---
> # mpoplz,dz 
808c808
< #define mpoplz,hz,dz 
---
> # ,dz 
808c808
< #define mpoplz,hz,dz 
---
> #define ,hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> #define hz,dz 
808c808
< #define mpoplz,hz,dz 
---
> #define ,,dz 
808c808
< #define mpoplz,hz,dz 
---
> #define ,dz 
808c808
< #define mpoplz,hz,dz 
---
> #define ,hzdz 
808c808
< #define mpoplz,hz,dz 
---
> #define hzdz 
(87.4 %, 25845 bytes)
808c808
< #define hz,dz 
---
> #define dz 
808c808
< #define hz,dz 
---
> #define , 
808c808
< #define hz,dz 
---
> #define  
808c808
< #define hz,dz 
---
> #define ,dz 
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define hz,dz 
---
> #define dz 
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define hz,dz 
---
> #define , 
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define hz,dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define hz,dz 
---
> #define hzdz 
(87.4 %, 25842 bytes)
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> # mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>  mnextsizeaz nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #define  nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define  nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #  nextHi[az]-nextLo[az]
808c808
< #define dz 
---
> #define  
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>   nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>  mnextsizeaz nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define  nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>   nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define mnextsizeaz [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>  mnextsizeaz [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> define  [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>   [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> # mnextsizeaz nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #  nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> # mnextsizeaz [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #  [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> # mnextsizeaz nextHiaz]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #  nextHiaz]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> # mnextsizeaz az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #  az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #define  nextHi[az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #define  [az]-nextLo[az]
811c811
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
> #define  nextHiaz]-nextLo[az]
(87.4 %, 25831 bytes)
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  [az]-nextLo[az]
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  az]-nextLo[az]
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  []-nextLo[az]
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  ]-nextLo[az]
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  [az-nextLo[az]
811c811
< #define  nextHi[az]-nextLo[az]
---
> #define  az-nextLo[az]
(87.4 %, 25824 bytes)
811c811
< #define  az]-nextLo[az]
---
> #define  -nextLo[az]
811c811
< #define  az]-nextLo[az]
---
> #define  ]nextLo[az]
811c811
< #define  az]-nextLo[az]
---
> #define  nextLo[az]
811c811
< #define  az]-nextLo[az]
---
> #define  ]-[az]
811c811
< #define  az]-nextLo[az]
---
> #define  -[az]
811c811
< #define  az]-nextLo[az]
---
> #define  ][az]
811c811
< #define  az]-nextLo[az]
---
> #define  [az]
811c811
< #define  az]-nextLo[az]
---
> #define  az-nextLo[az]
(87.4 %, 25820 bytes)
811c811
< #define  nextLo[az]
---
> #define  ]
811c811
< #define  nextLo[az]
---
> #define  [az
811c811
< #define  nextLo[az]
---
> #define  az
811c811
< #define  nextLo[az]
---
> #define  [
811c811
< #define  nextLo[az]
---
> #define  
811c811
< #define  nextLo[az]
---
> #define  nextLoaz]
(87.4 %, 25812 bytes)
811c811
< #define  az
---
> #define  
813c813
< #define mnextswapaz,bz                                        \
---
> define ,bz                                        \
811c811
< #define  az
---
> #define  
813c813
< #define mnextswapaz,bz                                        \
---
> # ,bz                                        \
811c811
< #define  az
---
> #define  
813c813
< #define mnextswapaz,bz                                        \
---
>  ,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> define mnextswapaz,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
>  mnextswapaz,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> define ,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
>  ,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> define mnextswapazbz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
>  mnextswapazbz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> define bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
>  bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # mnextswapaz,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # ,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # mnextswapazbz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # mnextswapaz,                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # ,                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> # mnextswapaz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> #                                         \
813c813
< #define mnextswapaz,bz                                        \
---
> #define ,bz                                        \
813c813
< #define mnextswapaz,bz                                        \
---
> #define bz                                        \
(87.4 %, 25792 bytes)
813c813
< #                                         \
---
> #                                         
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
>  MAIN_QSORT_SMALL_THRESH 0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define  0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
>  MAIN_QSORT_SMALL_THRESH 
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define  
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> # MAIN_QSORT_SMALL_THRESH 0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #  0
817c817
< #define MAIN_QSORT_SMALL_THRESH 0
---
> # MAIN_QSORT_SMALL_THRESH 
(87.4 %, 25761 bytes)
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
>    + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #  BZ_N_RADIX + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH  + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #   + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX  BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #  BZ_N_RADIX  BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH   BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #    BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define   + BZ_N_QSORT
818c818
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX  BZ_N_QSORT
(87.4 %, 25738 bytes)
818c818
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define   + BZ_N_QSORT
818c818
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define    BZ_N_QSORT
818c818
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define   + 
818c818
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define    
818,819c818,819
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define   + BZ_N_QSORT
> define MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> define MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define   + 
> define MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define MAIN_QSORT_STACK_SIZE 0
818c818
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX  BZ_N_QSORT
(87.4 %, 25727 bytes)
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> # MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
>  MAIN_QSORT_STACK_SIZE 0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> #define  0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define  0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> #  0
818,819c818,819
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
>   0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
>   0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
>   
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> # MAIN_QSORT_STACK_SIZE 0
819c819
< #define MAIN_QSORT_STACK_SIZE 0
---
> #  0
(87.5 %, 25698 bytes)
823,824c823,824
< #undef mswap
< #undef mvswap
---
>  
> undef mvswap
823c823
< #undef mswap
---
> # mswap
823c823
< #undef mswap
---
> # 
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # mswap
> undef mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # 
> undef mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # mswap
> # mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # 
> # mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # mswap
>  mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> # 
>  mvswap
823c823
< #undef mswap
---
> #undef 
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
> undef mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
> # mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
>  mvswap
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
> #undef 
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
> undef 
823,824c823,824
< #undef mswap
< #undef mvswap
---
> #undef 
> # 
(87.5 %, 25688 bytes)
824c824
< #undef mvswap
---
>  mvswap
824c824
< #undef mvswap
---
> undef 
824c824
< #undef mvswap
---
>  
824,825c824,825
< #undef mvswap
< #undef mpush
---
> undef mvswap
> undef mpush
824,825c824,825
< #undef mvswap
< #undef mpush
---
>  mvswap
> undef mpush
824,825c824,825
< #undef mvswap
< #undef mpush
---
> undef 
> undef mpush
824,825c824,825
< #undef mvswap
< #undef mpush
---
>  
> undef mpush
824c824
< #undef mvswap
---
> # mvswap
824c824
< #undef mvswap
---
> # 
(87.5 %, 25676 bytes)
825c825
< #undef mpush
---
>  
825,826c825,826
< #undef mpush
< #undef mpop
---
> undef mpush
> undef mpop
825,826c825,826
< #undef mpush
< #undef mpop
---
>  mpush
> undef mpop
825,826c825,826
< #undef mpush
< #undef mpop
---
> undef 
> undef mpop
825,826c825,826
< #undef mpush
< #undef mpop
---
>  
> undef mpop
825c825
< #undef mpush
---
> # mpush
825c825
< #undef mpush
---
> # 
(87.5 %, 25665 bytes)
826c826
< #undef mpop
---
>  
826,827c826,827
< #undef mpop
< #undef mmin
---
> undef mpop
> undef mmin
826,827c826,827
< #undef mpop
< #undef mmin
---
>  mpop
> undef mmin
826,827c826,827
< #undef mpop
< #undef mmin
---
> undef 
> undef mmin
826,827c826,827
< #undef mpop
< #undef mmin
---
>  
> undef mmin
826c826
< #undef mpop
---
> # mpop
826c826
< #undef mpop
---
> # 
(87.5 %, 25655 bytes)
827c827
< #undef mmin
---
>  
827,828c827,828
< #undef mmin
< #undef mnextsize
---
> undef mmin
> undef mnextsize
827,828c827,828
< #undef mmin
< #undef mnextsize
---
>  mmin
> undef mnextsize
827,828c827,828
< #undef mmin
< #undef mnextsize
---
> undef 
> undef mnextsize
827,828c827,828
< #undef mmin
< #undef mnextsize
---
>  
> undef mnextsize
827c827
< #undef mmin
---
> # mmin
827c827
< #undef mmin
---
> # 
(87.5 %, 25645 bytes)
828c828
< #undef mnextsize
---
>  
828,829c828,829
< #undef mnextsize
< #undef mnextswap
---
> undef mnextsize
> undef mnextswap
828,829c828,829
< #undef mnextsize
< #undef mnextswap
---
>  mnextsize
> undef mnextswap
828,829c828,829
< #undef mnextsize
< #undef mnextswap
---
> undef 
> undef mnextswap
828,829c828,829
< #undef mnextsize
< #undef mnextswap
---
>  
> undef mnextswap
828c828
< #undef mnextsize
---
> # mnextsize
828c828
< #undef mnextsize
---
> # 
(87.5 %, 25630 bytes)
829c829
< #undef mnextswap
---
>  
829,830c829,830
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef mnextswap
> undef MAIN_QSORT_SMALL_THRESH
829,830c829,830
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  mnextswap
> undef MAIN_QSORT_SMALL_THRESH
829,830c829,830
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef 
> undef MAIN_QSORT_SMALL_THRESH
829,830c829,830
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
> undef MAIN_QSORT_SMALL_THRESH
829c829
< #undef mnextswap
---
> # mnextswap
829c829
< #undef mnextswap
---
> # 
(87.5 %, 25615 bytes)
830c830
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
830,831c830,831
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
830,831c830,831
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
830,831c830,831
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef 
> undef MAIN_QSORT_DEPTH_THRESH
830,831c830,831
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
> undef MAIN_QSORT_DEPTH_THRESH
830c830
< #undef MAIN_QSORT_SMALL_THRESH
---
> # MAIN_QSORT_SMALL_THRESH
830c830
< #undef MAIN_QSORT_SMALL_THRESH
---
> # 
(87.5 %, 25586 bytes)
831c831
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
831,832c831,832
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
831,832c831,832
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
831,832c831,832
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
> undef MAIN_QSORT_STACK_SIZE
831,832c831,832
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  
> undef MAIN_QSORT_STACK_SIZE
831c831
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # MAIN_QSORT_DEPTH_THRESH
831c831
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # 
(87.5 %, 25557 bytes)
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
>  
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_STACK_SIZE
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_STACK_SIZE
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
>  
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
> # MAIN_QSORT_STACK_SIZE
832c832
< #undef MAIN_QSORT_STACK_SIZE
---
> # 
(87.5 %, 25530 bytes)
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
>   ftab[b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define BIGFREQb [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
>  BIGFREQb [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> define  [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
>   [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> # BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #  ftab[b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> # BIGFREQb [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #  [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> # BIGFREQb ftabb+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #  ftabb+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> # BIGFREQb b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #  b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  ftab[b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  [b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  ftabb+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  b+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  ftab[+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  [+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  ftab+1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define  +1 << 8] - ftab[b << 8]
838c838
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb [b+1 << 8] - ftab[b << 8]
(87.5 %, 25521 bytes)
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  + << 8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define   << 8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  +1  8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  1  8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  +  8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define    8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  ftabb1 << 8] - ftab[b << 8]
838c838
< #define  ftabb+1 << 8] - ftab[b << 8]
---
> #define  ftabb << 8] - ftab[b << 8]
(87.5 %, 25520 bytes)
838c838
< #define  ftabb1 << 8] - ftab[b << 8]
---
> #define  ftabb1  8] - ftab[b << 8]
838c838
< #define  ftabb1 << 8] - ftab[b << 8]
---
> #define  ftabb1  ] - ftab[b << 8]
838c838
< #define  ftabb1 << 8] - ftab[b << 8]
---
> #define  ftabb1  8 - ftab[b << 8]
(87.5 %, 25518 bytes)
838c838
< #define  ftabb1  8] - ftab[b << 8]
---
> #define  ftabb1  ] - ftab[b << 8]
838c838
< #define  ftabb1  8] - ftab[b << 8]
---
> #define  ftabb1   - ftab[b << 8]
(87.5 %, 25517 bytes)
838c838
< #define  ftabb1  ] - ftab[b << 8]
---
> #define  ftabb1   - ftab[b << 8]
838c838
< #define  ftabb1  ] - ftab[b << 8]
---
> #define  ftabb1    ftab[b << 8]
(87.5 %, 25516 bytes)
838c838
< #define  ftabb1   - ftab[b << 8]
---
> #define  ftabb1    ftab[b << 8]
838c838
< #define  ftabb1   - ftab[b << 8]
---
> #define  ftabb1    [b << 8]
(87.5 %, 25515 bytes)
838c838
< #define  ftabb1    ftab[b << 8]
---
> #define  ftabb1    [b << 8]
838c838
< #define  ftabb1    ftab[b << 8]
---
> #define  ftabb1    b << 8]
(87.6 %, 25511 bytes)
838c838
< #define  ftabb1    [b << 8]
---
> #define  ftabb1    b << 8]
838c838
< #define  ftabb1    [b << 8]
---
> #define  ftabb1     << 8]
838c838
< #define  ftabb1    [b << 8]
---
> #define  ftabb1    b  8]
(87.6 %, 25510 bytes)
838c838
< #define  ftabb1    b << 8]
---
> #define  ftabb1     << 8]
838c838
< #define  ftabb1    b << 8]
---
> #define  ftabb1      8]
(87.6 %, 25509 bytes)
838c838
< #define  ftabb1     << 8]
---
> #define  ftabb1      8]
838c838
< #define  ftabb1     << 8]
---
> #define  ftabb1      ]
838c838
< #define  ftabb1     << 8]
---
> #define  ftabb1      8
(87.6 %, 25507 bytes)
838c838
< #define  ftabb1      8]
---
> #define  ftabb1      ]
838c838
< #define  ftabb1      8]
---
> #define  ftabb1      
(87.6 %, 25506 bytes)
838c838
< #define  ftabb1      ]
---
> #define  ftabb1      
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
> define SETMASK 1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
> # SETMASK 1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
>  SETMASK 1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
> #define  1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
> define  1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
> #  1 < 1
838,839c838,839
< #define  ftabb1      ]
< #define SETMASK 1 < 1
---
> #define  ftabb1      
>   1 < 1
839c839
< #define SETMASK 1 < 1
---
> define SETMASK 1 < 1
839c839
< #define SETMASK 1 < 1
---
>  SETMASK 1 < 1
839c839
< #define SETMASK 1 < 1
---
> define  1 < 1
839c839
< #define SETMASK 1 < 1
---
>   1 < 1
839c839
< #define SETMASK 1 < 1
---
> define SETMASK  < 1
839c839
< #define SETMASK 1 < 1
---
>  SETMASK  < 1
839c839
< #define SETMASK 1 < 1
---
> define   < 1
(87.6 %, 25505 bytes)
839c839
< #define SETMASK 1 < 1
---
> define SETMASK 1 < 1
839c839
< #define SETMASK 1 < 1
---
>  SETMASK 1 < 1
839c839
< #define SETMASK 1 < 1
---
> define  1 < 1
839c839
< #define SETMASK 1 < 1
---
>   1 < 1
839c839
< #define SETMASK 1 < 1
---
> define SETMASK  < 1
839c839
< #define SETMASK 1 < 1
---
>  SETMASK  < 1
839c839
< #define SETMASK 1 < 1
---
> define   < 1
839c839
< #define SETMASK 1 < 1
---
>    < 1
839c839
< #define SETMASK 1 < 1
---
> # SETMASK 1 < 1
839c839
< #define SETMASK 1 < 1
---
> #  1 < 1
839c839
< #define SETMASK 1 < 1
---
> # SETMASK  < 1
839c839
< #define SETMASK 1 < 1
---
> #   < 1
839c839
< #define SETMASK 1 < 1
---
> # SETMASK 1  1
839c839
< #define SETMASK 1 < 1
---
> #  1  1
839c839
< #define SETMASK 1 < 1
---
> # SETMASK   1
839c839
< #define SETMASK 1 < 1
---
> #    1
839c839
< #define SETMASK 1 < 1
---
> #define  1 < 1
839c839
< #define SETMASK 1 < 1
---
> #define   < 1
839c839
< #define SETMASK 1 < 1
---
> #define  1  1
839c839
< #define SETMASK 1 < 1
---
> #define    1
839c839
< #define SETMASK 1 < 1
---
> #define  1 < 
839c839
< #define SETMASK 1 < 1
---
> #define   < 
839c839
< #define SETMASK 1 < 1
---
> #define  1  
839c839
< #define SETMASK 1 < 1
---
> #define    
839c839
< #define SETMASK 1 < 1
---
> #define SETMASK  < 1
(87.6 %, 25490 bytes)
839,840c839,840
< #    1
< #define CLEARMASK ~SETMASK
---
> #    
>   ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> define CLEARMASK ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
>  CLEARMASK ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> define  ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
>   ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> define CLEARMASK SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
>  CLEARMASK SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> define  SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
>   SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> # CLEARMASK ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> #  ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> # CLEARMASK SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> #  SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> # CLEARMASK ~
840c840
< #define CLEARMASK ~SETMASK
---
> #  ~
840c840
< #define CLEARMASK ~SETMASK
---
> # CLEARMASK 
840c840
< #define CLEARMASK ~SETMASK
---
> #  
840c840
< #define CLEARMASK ~SETMASK
---
> #define  ~SETMASK
840c840
< #define CLEARMASK ~SETMASK
---
> #define  SETMASK
(87.6 %, 25467 bytes)
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
>  
> undef SETMASK
844c844
< #undef BIGFREQ
---
> # BIGFREQ
844c844
< #undef BIGFREQ
---
> # 
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # BIGFREQ
> undef SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # 
> undef SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # BIGFREQ
> # SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # 
> # SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # BIGFREQ
>  SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> # 
>  SETMASK
844c844
< #undef BIGFREQ
---
> #undef 
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
> undef SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
> # SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
>  SETMASK
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
> #undef 
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
> undef 
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
> # 
844,845c844,845
< #undef BIGFREQ
< #undef SETMASK
---
> #undef 
>  
845c845
< #undef SETMASK
---
> undef SETMASK
(87.6 %, 25455 bytes)
845c845
< #undef SETMASK
---
>  SETMASK
845c845
< #undef SETMASK
---
> undef 
845c845
< #undef SETMASK
---
>  
845,846c845,846
< #undef SETMASK
< #undef CLEARMASK
---
> undef SETMASK
> undef CLEARMASK
845,846c845,846
< #undef SETMASK
< #undef CLEARMASK
---
>  SETMASK
> undef CLEARMASK
845,846c845,846
< #undef SETMASK
< #undef CLEARMASK
---
> undef 
> undef CLEARMASK
845,846c845,846
< #undef SETMASK
< #undef CLEARMASK
---
>  
> undef CLEARMASK
845c845
< #undef SETMASK
---
> # SETMASK
845c845
< #undef SETMASK
---
> # 
(87.6 %, 25442 bytes)
846c846
< #undef CLEARMASK
---
>  
846c846
< #undef CLEARMASK
---
> undef CLEARMASK
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define WEIGHTOFzz0  zz0 & 0x0
846c846
< #undef CLEARMASK
---
>  CLEARMASK
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define WEIGHTOFzz0  zz0 & 0x0
846c846
< #undef CLEARMASK
---
> undef 
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define WEIGHTOFzz0  zz0 & 0x0
846c846
< #undef CLEARMASK
---
>  
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define WEIGHTOFzz0  zz0 & 0x0
846c846
< #undef CLEARMASK
---
> # CLEARMASK
846c846
< #undef CLEARMASK
---
> # 
(87.6 %, 25427 bytes)
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
>    zz0 & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define WEIGHTOFzz0   & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
>  WEIGHTOFzz0   & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> define    & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
>     & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> # WEIGHTOFzz0  zz0 & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #   zz0 & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> # WEIGHTOFzz0   & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #    & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> # WEIGHTOFzz0  zz0  0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #   zz0  0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> # WEIGHTOFzz0    0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #     0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #define   zz0 & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #define    & 0x0
865c865
< #define WEIGHTOFzz0  zz0 & 0x0
---
> #define   zz0  0x0
(87.6 %, 25416 bytes)
865c865
< #define   zz0 & 0x0
---
> #define    & 0x0
865c865
< #define   zz0 & 0x0
---
> #define     0x0
865c865
< #define   zz0 & 0x0
---
> #define    & 
865c865
< #define   zz0 & 0x0
---
> #define     
865,866c865,866
< #define   zz0 & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define    & 0x0
> define DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0 & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define     0x0
> define DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0 & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define    & 
> define DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0 & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define     
> define DEPTHOFzz1   zz1 & 0xf
865c865
< #define   zz0 & 0x0
---
> #define   zz0  0x0
865c865
< #define   zz0 & 0x0
---
> #define   zz0  
(87.6 %, 25415 bytes)
865c865
< #define   zz0  0x0
---
> #define   zz0  
865,866c865,866
< #define   zz0  0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define   zz0  
> define DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0  0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define   zz0  
> # DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0  0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define   zz0  
>  DEPTHOFzz1   zz1 & 0xf
865,866c865,866
< #define   zz0  0x0
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define   zz0  
> #define    zz1 & 0xf
(87.6 %, 25412 bytes)
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> define DEPTHOFzz1   zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
>  DEPTHOFzz1   zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> define    zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
>     zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> define DEPTHOFzz1    & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
>  DEPTHOFzz1    & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> define     & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
>      & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> # DEPTHOFzz1   zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #    zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> # DEPTHOFzz1    & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #     & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> # DEPTHOFzz1   zz1  0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #    zz1  0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> # DEPTHOFzz1     0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #      0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define    zz1 & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define     & 0xf
866c866
< #define DEPTHOFzz1   zz1 & 0xf
---
> #define    zz1  0xf
(87.6 %, 25402 bytes)
866c866
< #define    zz1 & 0xf
---
> #define     & 0xf
866c866
< #define    zz1 & 0xf
---
> #define      0xf
866c866
< #define    zz1 & 0xf
---
> #define     & 
866c866
< #define    zz1 & 0xf
---
> #define      
866,867c866,867
< #define    zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define     & 0xf
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define      0xf
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define     & 
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define      
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866c866
< #define    zz1 & 0xf
---
> #define    zz1  0xf
866c866
< #define    zz1 & 0xf
---
> #define    zz1  
(87.6 %, 25401 bytes)
866c866
< #define    zz1  0xf
---
> #define    zz1  
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
> # MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
>  MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
> #define ,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
> define ,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
> # ,zz3 zz2  zz3 ? zz2 : zz3
866,867c866,867
< #define    zz1  0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz1  
>  ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define MYMAXzz2zz3 zz2  zz3 ? zz2 : zz3
(87.6 %, 25398 bytes)
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define MYMAXzz2zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  MYMAXzz2zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> define zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>  zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # MYMAXzz2zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # MYMAXzz2, zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # , zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> # MYMAXzz2 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #  zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define ,zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define zz3 zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define , zz2  zz3 ? zz2 : zz3
867c867
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
> #define  zz2  zz3 ? zz2 : zz3
(87.6 %, 25389 bytes)
867c867
< #define zz3 zz2  zz3 ? zz2 : zz3
---
> #define    zz3 ? zz2 : zz3
867c867
< #define zz3 zz2  zz3 ? zz2 : zz3
---
> #define  zz2   ? zz2 : zz3
(87.6 %, 25383 bytes)
867c867
< #define    zz3 ? zz2 : zz3
---
> #define      zz2 : zz3
867c867
< #define    zz3 ? zz2 : zz3
---
> #define     ?  : zz3
867c867
< #define    zz3 ? zz2 : zz3
---
> #define       : zz3
867c867
< #define    zz3 ? zz2 : zz3
---
> #define     ? zz2  zz3
867c867
< #define    zz3 ? zz2 : zz3
---
> #define      zz2  zz3
(87.6 %, 25379 bytes)
867c867
< #define      zz2 : zz3
---
> #define        zz3
867c867
< #define      zz2 : zz3
---
> #define       : 
867c867
< #define      zz2 : zz3
---
> #define        
867c867
< #define      zz2 : zz3
---
> #define       : zz3
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
867c867
< #define      zz2 : zz3
---
> #define        zz3
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
867c867
< #define      zz2 : zz3
---
> #define       : 
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
867c867
< #define      zz2 : zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
867c867
< #define      zz2 : zz3
---
> #define      zz2  zz3
(87.6 %, 25375 bytes)
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ADDWEIGHTSzw1,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  ADDWEIGHTSzw1,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #define ,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ,zw2                           \
867c867
< #define        zz3
---
> #define        
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  ,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  ADDWEIGHTSzw1,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  ,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define ADDWEIGHTSzw1zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  ADDWEIGHTSzw1zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> define zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
>  zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ADDWEIGHTSzw1,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ADDWEIGHTSzw1zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ADDWEIGHTSzw1,                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ,                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> # ADDWEIGHTSzw1                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #                            \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #define ,zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #define zw2                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #define ,                           \
869c869
< #define ADDWEIGHTSzw1,zw2                           \
---
> #define                            \
(87.6 %, 25361 bytes)
869c869
< #define zw2                           \
---
> #define                            
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            \
>    +WEIGHTOFzw2 |                    \
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            
>    +WEIGHTOFzw2 |                    \
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            \
>    WEIGHTOFzw1WEIGHTOFzw2 |                    \
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            
>    WEIGHTOFzw1WEIGHTOFzw2 |                    \
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            \
>    WEIGHTOFzw2 |                    \
869,870c869,870
< #define zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
---
> #define                            
>    WEIGHTOFzw2 |                    \
(87.6 %, 25357 bytes)
869,870c869,870
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
> #define                            
>    WEIGHTOFzw1WEIGHTOFzw2 |                    
869,870c869,870
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
> #define                            
>     |                    
869,870c869,870
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
> #define                            
>    WEIGHTOFzw1WEIGHTOFzw2                     
869,870c869,870
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
> #define                            
>                         
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>     |                    \
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>                         \
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>     |                    
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>                         
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     |                    \
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>                         \
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     |                    
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>                         
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>    WEIGHTOFzw1WEIGHTOFzw2                     \
870c870
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     \
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
(87.6 %, 25356 bytes)
870c870
<    WEIGHTOFzw1WEIGHTOFzw2                     \
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>    1  MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>      MYMAXDEPTHOFzw1,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>    1 + ,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>     + ,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>    1  ,DEPTHOFzw2
870,871c870,871
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>    WEIGHTOFzw1WEIGHTOFzw2                     
>      ,DEPTHOFzw2
871c871
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     + MYMAXDEPTHOFzw1,DEPTHOFzw2
871c871
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      MYMAXDEPTHOFzw1,DEPTHOFzw2
(87.6 %, 25355 bytes)
871c871
<     + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      MYMAXDEPTHOFzw1,DEPTHOFzw2
871c871
<     + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      ,DEPTHOFzw2
871c871
<     + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      MYMAXDEPTHOFzw1DEPTHOFzw2
(87.6 %, 25354 bytes)
871c871
<      MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      ,DEPTHOFzw2
871c871
<      MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>      DEPTHOFzw2
(87.6 %, 25339 bytes)
871c871
<      ,DEPTHOFzw2
---
>      DEPTHOFzw2
871c871
<      ,DEPTHOFzw2
---
>      
871c871
<      ,DEPTHOFzw2
---
>      DEPTHOFzw2
873c873
< #define UPHEAPz                                     \
---
> define UPHEAPz                                     \
871c871
<      ,DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> define UPHEAPz                                     \
871c871
<      ,DEPTHOFzw2
---
>      DEPTHOFzw2
873c873
< #define UPHEAPz                                     \
---
> # UPHEAPz                                     \
871c871
<      ,DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> # UPHEAPz                                     \
871c871
<      ,DEPTHOFzw2
---
>      DEPTHOFzw2
873c873
< #define UPHEAPz                                     \
---
>  UPHEAPz                                     \
871c871
<      ,DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
>  UPHEAPz                                     \
(87.6 %, 25338 bytes)
871c871
<      DEPTHOFzw2
---
>      
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> define UPHEAPz                                     \
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> # UPHEAPz                                     \
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
>  UPHEAPz                                     \
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> #define                                      \
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> define                                      \
871c871
<      DEPTHOFzw2
---
>      
873c873
< #define UPHEAPz                                     \
---
> #                                      \
(87.6 %, 25328 bytes)
873c873
< #define UPHEAPz                                     \
---
> define UPHEAPz                                     \
873c873
< #define UPHEAPz                                     \
---
>  UPHEAPz                                     \
873c873
< #define UPHEAPz                                     \
---
> define                                      \
873c873
< #define UPHEAPz                                     \
---
>                                       \
873c873
< #define UPHEAPz                                     \
---
> define UPHEAPz                                     
873c873
< #define UPHEAPz                                     \
---
>  UPHEAPz                                     
873c873
< #define UPHEAPz                                     \
---
> define                                      
873c873
< #define UPHEAPz                                     \
---
>                                       
(87.6 %, 25314 bytes)
873c873
<                                       \
---
>                                       
876c876
< #define DOWNHEAPz                                   \
---
>  DOWNHEAPz                                   \
873c873
<                                       \
---
>                                       
876c876
< #define DOWNHEAPz                                   \
---
> #define                                    \
873c873
<                                       \
---
>                                       
876c876
< #define DOWNHEAPz                                   \
---
> define                                    \
873c873
<                                       \
---
>                                       
876c876
< #define DOWNHEAPz                                   \
---
> #                                    \
873c873
<                                       \
---
>                                       
876c876
< #define DOWNHEAPz                                   \
---
>                                     \
(87.7 %, 25298 bytes)
876c876
< #                                    \
---
>                                     \
944c944
< #define bsNEEDWnz                           \
---
>  bsNEEDWnz                           \
876c876
< #                                    \
---
>                                     
944c944
< #define bsNEEDWnz                           \
---
>  bsNEEDWnz                           \
876c876
< #                                    \
---
> #                                    
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
> define bsNEEDWnz                           \
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
> # bsNEEDWnz                           \
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
>  bsNEEDWnz                           \
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
> #define                            \
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
> define                            \
876c876
< #                                    \
---
> #                                    
944c944
< #define bsNEEDWnz                           \
---
> #                            \
(87.7 %, 25297 bytes)
944c944
< #define bsNEEDWnz                           \
---
> define bsNEEDWnz                           \
944c944
< #define bsNEEDWnz                           \
---
>  bsNEEDWnz                           \
944c944
< #define bsNEEDWnz                           \
---
> define                            \
944c944
< #define bsNEEDWnz                           \
---
>                             \
944c944
< #define bsNEEDWnz                           \
---
> define bsNEEDWnz                           
944c944
< #define bsNEEDWnz                           \
---
>  bsNEEDWnz                           
944c944
< #define bsNEEDWnz                           \
---
> define                            
944c944
< #define bsNEEDWnz                           \
---
>                             
(87.7 %, 25281 bytes)
944c944
<                             \
---
>                             
965,966c965,966
< static
< void makeMaps_e ( EState* s )
---
> 
>  makeMaps_e ( EState* s )
944c944
<                             \
---
>                             
966c966
< void makeMaps_e ( EState* s )
---
> void  ( EState* s )
944c944
<                             \
---
>                             
965,966c965,966
< static
< void makeMaps_e ( EState* s )
---
> 
> void  ( EState* s )
944c944
<                             \
---
>                             
966c966
< void makeMaps_e ( EState* s )
---
>   ( EState* s )
944c944
<                             \
---
>                             
965,966c965,966
< static
< void makeMaps_e ( EState* s )
---
> 
>   ( EState* s )
965c965
< static
---
> 
(87.7 %, 25270 bytes)
966c966
<  makeMaps_e ( EState* s )
---
>    * s )
966c966
<  makeMaps_e ( EState* s )
---
>   ( EState s )
966c966
<  makeMaps_e ( EState* s )
---
>    EState s )
966c966
<  makeMaps_e ( EState* s )
---
>   (  s )
966c966
<  makeMaps_e ( EState* s )
---
>     s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  EState* s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  * s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  EState s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e   s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  EState*  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  *  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e  EState  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e    )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( * s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e (  s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( *  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e (   )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( * s 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e (  s 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( *  
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e (   
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState s )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState s 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState  
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState s )
> 
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState  )
> 
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState s 
> 
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState  
> 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState*  )
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState*  
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState*  )
> 
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState*  
> 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState*  )
968c968
<    Int32 i;
---
>     i;
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState*  
968c968
<    Int32 i;
---
>     i;
966,968c966,968
<  makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>  makeMaps_e ( EState*  )
> 
>     i;
966,968c966,968
<  makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>  makeMaps_e ( EState*  
> 
>     i;
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState* s 
966,967c966,967
<  makeMaps_e ( EState* s )
< {
---
>  makeMaps_e ( EState* s 
> 
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState* s 
968c968
<    Int32 i;
---
>     i;
966,968c966,968
<  makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>  makeMaps_e ( EState* s 
> 
>     i;
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState* s 
968c968
<    Int32 i;
---
>    Int32 ;
966,968c966,968
<  makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>  makeMaps_e ( EState* s 
> 
>    Int32 ;
966c966
<  makeMaps_e ( EState* s )
---
>  makeMaps_e ( EState* s 
968c968
<    Int32 i;
---
>     ;
966,968c966,968
<  makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>  makeMaps_e ( EState* s 
> 
>     ;
967c967
< {
---
> 
967,968c967,968
< {
<    Int32 i;
---
> 
>     i;
967,968c967,968
< {
<    Int32 i;
---
> 
>    Int32 ;
967,968c967,968
< {
<    Int32 i;
---
> 
>     ;
967,968c967,968
< {
<    Int32 i;
---
> 
>    Int32 i
967,968c967,968
< {
<    Int32 i;
---
> 
>     i
967,968c967,968
< {
<    Int32 i;
---
> 
>    Int32 
967,968c967,968
< {
<    Int32 i;
---
> 
>     
968c968
<    Int32 i;
---
>     i;
968c968
<    Int32 i;
---
>     ;
968c968
<    Int32 i;
---
>     i
968c968
<    Int32 i;
---
>     
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>     i;
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>     ;
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>     i
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>     
>    ->nInUse = 0;
968c968
<    Int32 i;
---
>    Int32 ;
968c968
<    Int32 i;
---
>    Int32 
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 ;
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 ;
>    snInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 
>    snInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 ;
>    nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 
>    nInUse = 0;
968c968
<    Int32 i;
---
>    Int32 i
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    ->nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    snInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    nInUse = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    s-> = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    -> = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>    s = 0;
968,969c968,969
<    Int32 i;
<    s->nInUse = 0;
---
>    Int32 i
>     = 0;
969c969
<    s->nInUse = 0;
---
>    ->nInUse = 0;
969c969
<    s->nInUse = 0;
---
>    nInUse = 0;
969c969
<    s->nInUse = 0;
---
>    -> = 0;
969c969
<    s->nInUse = 0;
---
>     = 0;
969c969
<    s->nInUse = 0;
---
>    ->nInUse  0;
969c969
<    s->nInUse = 0;
---
>    nInUse  0;
969c969
<    s->nInUse = 0;
---
>    ->  0;
969c969
<    s->nInUse = 0;
---
>      0;
(87.7 %, 25260 bytes)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>      
>     (i = 0; i < 6; i++)
969c969
<     = 0;
---
>     = ;
969c969
<     = 0;
---
>     = 
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = ;
>     (i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 
>     (i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = ;
>    for i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 
>    for i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = ;
>     i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 
>     i = 0; i < 6; i++)
969c969
<     = 0;
---
>     = 0
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>     (i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>    for i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>     i = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>    for ( = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>     ( = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>    for  = 0; i < 6; i++)
969,970c969,970
<     = 0;
<    for (i = 0; i < 6; i++)
---
>     = 0
>      = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     (i = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     i = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     ( = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>      = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     (i  0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     i  0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>     (  0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>       0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for  = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for i  0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for   0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for i = ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for  = ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for i  ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for   ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for ( = 0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for (  0; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for ( = ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for (  ; i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for ( = 0 i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for (  0 i < 6; i++)
970c970
<    for (i = 0; i < 6; i++)
---
>    for ( =  i < 6; i++)
(87.7 %, 25258 bytes)
970c970
<    for (  0; i < 6; i++)
---
>    for (   i < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  ;  < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (    < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  ; i  6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (   i  6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  ;   6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (     6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0 i < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0  < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0 i  6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0   6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0 i < ; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0  < ; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0 i  ; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0   ; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0;  < 6; i++)
970c970
<    for (  0; i < 6; i++)
---
>    for (  0;   6; i++)
(87.7 %, 25255 bytes)
970c970
<    for (  ;   6; i++)
---
>    for (     6 ++)
970c970
<    for (  ;   6; i++)
---
>    for (      ++)
970c970
<    for (  ;   6; i++)
---
>    for (  ;   ; i++)
970c970
<    for (  ;   6; i++)
---
>    for (  ;    i++)
970c970
<    for (  ;   6; i++)
---
>    for (  ;   ; ++)
970c970
<    for (  ;   6; i++)
---
>    for (  ;    ++)
970c970
<    for (  ;   6; i++)
---
>    for (  ;   ; i)
(87.7 %, 25254 bytes)
970c970
<    for (  ;   ; i++)
---
>    for (  ;    i++)
970c970
<    for (  ;   ; i++)
---
>    for (  ;    ++)
970c970
<    for (  ;   ; i++)
---
>    for (  ;    i)
970c970
<    for (  ;   ; i++)
---
>    for (  ;    )
970c970
<    for (  ;   ; i++)
---
>    for (  ;    i++
970c970
<    for (  ;   ; i++)
---
>    for (  ;    ++
970c970
<    for (  ;   ; i++)
---
>    for (  ;    i
970c970
<    for (  ;   ; i++)
---
>    for (  ;    
970c970
<    for (  ;   ; i++)
---
>    for (  ;   ; ++)
970c970
<    for (  ;   ; i++)
---
>    for (  ;   ; )
970c970
<    for (  ;   ; i++)
---
>    for (  ;   ; ++
970c970
<    for (  ;   ; i++)
---
>    for (  ;   ; 
970,971c970,971
<    for (  ;   ; i++)
<       if (s->inUse[i]) {
---
>    for (  ;   ; ++)
>        (s->inUse[i]) {
970,971c970,971
<    for (  ;   ; i++)
<       if (s->inUse[i]) {
---
>    for (  ;   ; )
>        (s->inUse[i]) {
970,971c970,971
<    for (  ;   ; i++)
<       if (s->inUse[i]) {
---
>    for (  ;   ; ++
>        (s->inUse[i]) {
970,971c970,971
<    for (  ;   ; i++)
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>        (s->inUse[i]) {
970c970
<    for (  ;   ; i++)
---
>    for (  ;   ; i)
(87.7 %, 25251 bytes)
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>        (s->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>       if s->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>        s->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>       if (->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>        (->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>       if ->inUse[i]) {
970,971c970,971
<    for (  ;   ; )
<       if (s->inUse[i]) {
---
>    for (  ;   ; 
>        ->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        (s->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        s->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        (->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        ->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        (sinUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        sinUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        (inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>        inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>       if s->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>       if ->inUse[i]) {
971c971
<       if (s->inUse[i]) {
---
>       if sinUse[i]) {
(87.7 %, 25247 bytes)
971c971
<        s->inUse[i]) {
---
>        [i]) {
971c971
<        s->inUse[i]) {
---
>        ->inUsei]) {
971c971
<        s->inUse[i]) {
---
>        inUsei]) {
971c971
<        s->inUse[i]) {
---
>        ->i]) {
971c971
<        s->inUse[i]) {
---
>        i]) {
971c971
<        s->inUse[i]) {
---
>        sinUse[i]) {
971c971
<        s->inUse[i]) {
---
>        s[i]) {
971c971
<        s->inUse[i]) {
---
>        sinUsei]) {
971c971
<        s->inUse[i]) {
---
>        si]) {
971c971
<        s->inUse[i]) {
---
>        sinUse[]) {
971c971
<        s->inUse[i]) {
---
>        s[]) {
971c971
<        s->inUse[i]) {
---
>        sinUse]) {
971c971
<        s->inUse[i]) {
---
>        s]) {
971c971
<        s->inUse[i]) {
---
>        s->[i]) {
971c971
<        s->inUse[i]) {
---
>        s->i]) {
971c971
<        s->inUse[i]) {
---
>        s->[]) {
971c971
<        s->inUse[i]) {
---
>        s->]) {
971c971
<        s->inUse[i]) {
---
>        s->[i) {
971c971
<        s->inUse[i]) {
---
>        s->i) {
971c971
<        s->inUse[i]) {
---
>        s->[) {
971c971
<        s->inUse[i]) {
---
>        s->) {
971c971
<        s->inUse[i]) {
---
>        s->inUsei]) {
(87.7 %, 25240 bytes)
971c971
<        s[i]) {
---
>        s]) {
971c971
<        s[i]) {
---
>        si) {
971c971
<        s[i]) {
---
>        s) {
971c971
<        s[i]) {
---
>        si] {
971c971
<        s[i]) {
---
>        s] {
971c971
<        s[i]) {
---
>        si {
971c971
<        s[i]) {
---
>        s {
971c971
<        s[i]) {
---
>        s[]) {
971c971
<        s[i]) {
---
>        s[) {
971c971
<        s[i]) {
---
>        s[] {
971c971
<        s[i]) {
---
>        s[ {
971c971
<        s[i]) {
---
>        s[]) 
971c971
<        s[i]) {
---
>        s[) 
971c971
<        s[i]) {
---
>        s[] 
971c971
<        s[i]) {
---
>        s[ 
971c971
<        s[i]) {
---
>        s[i) {
971c971
<        s[i]) {
---
>        s[i {
971c971
<        s[i]) {
---
>        s[i) 
(87.7 %, 25237 bytes)
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s 
>          ->unseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s {
>          sunseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s 
>          sunseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s {
>          unseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s 
>          unseqToSeq[i] = s->nInUse;
971c971
<        s) {
---
>        s) 
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          ->unseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          sunseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          unseqToSeq[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          s->[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          ->[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          s[i] = s->nInUse;
971,972c971,972
<        s) {
<          s->unseqToSeq[i] = s->nInUse;
---
>        s) 
>          [i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          ->unseqToSeq[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          unseqToSeq[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          ->[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          [i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          ->unseqToSeqi] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          unseqToSeqi] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          ->i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          sunseqToSeq[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          sunseqToSeqi] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          si] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          sunseqToSeq[] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s[] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          sunseqToSeq] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->[i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->i] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->[] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->[i = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->i = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->[ = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-> = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeqi] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeqi = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeqi]  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq]  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeqi  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[] = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[ = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[]  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[] = ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[ = ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[]  ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[  ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i = s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i = ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i  ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i = snInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i  snInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i = nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i  nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  s->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  snInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  s->;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  ->;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  s;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i]  ;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = ->nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = nInUse;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = ->;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = ;
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = ->nInUse
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = nInUse
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = ->
972c972
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = 
(87.7 %, 25227 bytes)
972,973c972,973
<          s->unseqToSeq[i]  ;
<          s->nInUse++;
---
>          s->unseqToSeq[i]  
>          ++;
973c973
<          s->nInUse++;
---
>          ->nInUse++;
973c973
<          s->nInUse++;
---
>          nInUse++;
973c973
<          s->nInUse++;
---
>          ->++;
973c973
<          s->nInUse++;
---
>          ++;
973c973
<          s->nInUse++;
---
>          ->nInUse;
973c973
<          s->nInUse++;
---
>          nInUse;
973c973
<          s->nInUse++;
---
>          ->;
973c973
<          s->nInUse++;
---
>          ;
(87.7 %, 25217 bytes)
973,975c973,975
<          ++;
<       }
< }
---
>          
>       
> 
973c973
<          ++;
---
>          ++
973,974c973,974
<          ++;
<       }
---
>          ++
>       
973c973
<          ++;
---
>          ++
975c975
< }
---
> 
973,975c973,975
<          ++;
<       }
< }
---
>          ++
>       
> 
973c973
<          ++;
---
>          ++
979c979
< static
---
> 
973,974c973,974
<          ++;
<       }
---
>          ++
>       
979c979
< static
---
> 
973c973
<          ++;
---
>          ++
975d974
< }
979c978,979
< static
---
> 
> 
973,975c973,976
<          ++;
<       }
< }
---
>          ++
>       
> 
> 
979d979
< static
974c974
<       }
---
>       
974,975c974,975
<       }
< }
---
>       
> 
974c974
<       }
---
>       
979c979
< static
---
> 
974,975c974,976
<       }
< }
---
>       
> 
> 
979d979
< static
974c974
<       }
---
>       
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
974,975c974,975
<       }
< }
---
>       
> 
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
974c974
<       }
---
>       
979,980c979,980
< static
< void generateMTFValues ( EState* s )
---
> 
>  generateMTFValues ( EState* s )
974,975c974
<       }
< }
---
>       
979,980c978,980
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>  generateMTFValues ( EState* s )
975c975
< }
---
> 
975d974
< }
979c978,979
< static
---
> 
> 
975c975
< }
---
> 
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
975d974
< }
979,980c978,980
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>  generateMTFValues ( EState* s )
975c975
< }
---
> 
980c980
< void generateMTFValues ( EState* s )
---
> void  ( EState* s )
975d974
< }
979,980c978,980
< static
< void generateMTFValues ( EState* s )
---
> 
> 
> void  ( EState* s )
975c975
< }
---
> 
980c980
< void generateMTFValues ( EState* s )
---
>   ( EState* s )
975d974
< }
979,980c978,980
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>   ( EState* s )
979c979
< static
---
> 
979,980c979,980
< static
< void generateMTFValues ( EState* s )
---
> 
>  generateMTFValues ( EState* s )
(87.7 %, 25211 bytes)
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
980c980
< void generateMTFValues ( EState* s )
---
>   ( EState* s )
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues  EState* s )
980c980
< void generateMTFValues ( EState* s )
---
>    EState* s )
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( * s )
980c980
< void generateMTFValues ( EState* s )
---
>   ( * s )
980c980
< void generateMTFValues ( EState* s )
---
>  generateMTFValues  * s )
980c980
< void generateMTFValues ( EState* s )
---
>    * s )
(87.7 %, 25207 bytes)
980c980
<  generateMTFValues ( EState* s )
---
>   ( EState* s )
980c980
<  generateMTFValues ( EState* s )
---
>    EState* s )
980c980
<  generateMTFValues ( EState* s )
---
>   ( * s )
980c980
<  generateMTFValues ( EState* s )
---
>    * s )
980c980
<  generateMTFValues ( EState* s )
---
>   ( EState s )
980c980
<  generateMTFValues ( EState* s )
---
>    EState s )
980c980
<  generateMTFValues ( EState* s )
---
>   (  s )
980c980
<  generateMTFValues ( EState* s )
---
>     s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState* s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  * s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues   s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState*  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  *  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues    )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( * s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (  s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( *  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (   )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( * s 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (  s 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( *  
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (   
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState s )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState s 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState  
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState s )
> 
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState  )
> 
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState s 
> 
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState  
> 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState*  )
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState*  
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState*  )
> 
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState*  
> 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState*  )
982c982
<    unsigned char   yy;
---
>     char   yy;
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState*  
982c982
<    unsigned char   yy;
---
>     char   yy;
980,982c980,982
<  generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
---
>  generateMTFValues ( EState*  )
> 
>     char   yy;
980,982c980,982
<  generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
---
>  generateMTFValues ( EState*  
> 
>     char   yy;
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s 
980,981c980,981
<  generateMTFValues ( EState* s )
< {
---
>  generateMTFValues ( EState* s 
> 
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s 
982c982
<    unsigned char   yy;
---
>     char   yy;
980,982c980,982
<  generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
---
>  generateMTFValues ( EState* s 
> 
>     char   yy;
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s 
982c982
<    unsigned char   yy;
---
>    unsigned    yy;
980,982c980,982
<  generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
---
>  generateMTFValues ( EState* s 
> 
>    unsigned    yy;
980c980
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s 
982c982
<    unsigned char   yy;
---
>        yy;
980,982c980,982
<  generateMTFValues ( EState* s )
< {
<    unsigned char   yy;
---
>  generateMTFValues ( EState* s 
> 
>        yy;
981c981
< {
---
> 
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>     char   yy;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>    unsigned    yy;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>        yy;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>    unsigned char   ;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>     char   ;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>    unsigned    ;
981,982c981,982
< {
<    unsigned char   yy;
---
> 
>        ;
982c982
<    unsigned char   yy;
---
>     char   yy;
982c982
<    unsigned char   yy;
---
>        yy;
982c982
<    unsigned char   yy;
---
>     char   ;
(87.7 %, 25199 bytes)
982c982
<     char   yy;
---
>        yy;
982c982
<     char   yy;
---
>        ;
982c982
<     char   yy;
---
>        yy
982c982
<     char   yy;
---
>        
982,983c982,983
<     char   yy;
<    unsigned char yy_1;
---
>        yy;
>     char yy_1;
982,983c982,983
<     char   yy;
<    unsigned char yy_1;
---
>        ;
>     char yy_1;
(87.7 %, 25193 bytes)
982,983c982,983
<        ;
<    unsigned char yy_1;
---
>        
>     char yy_1;
982,983c982,983
<        ;
<    unsigned char yy_1;
---
>        
>    unsigned  yy_1;
(87.7 %, 25184 bytes)
983c983
<     char yy_1;
---
>      ;
983c983
<     char yy_1;
---
>      yy_1
983c983
<     char yy_1;
---
>      
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>      yy_1;
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>      ;
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>      yy_1
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>      
>     char yy_0;
983c983
<     char yy_1;
---
>     char ;
983c983
<     char yy_1;
---
>     char 
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char ;
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char 
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char ;
>    unsigned  yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char 
>    unsigned  yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char ;
>      yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char 
>      yy_0;
983c983
<     char yy_1;
---
>     char yy_1
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>     char yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>    unsigned  yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>      yy_0;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>    unsigned char ;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>     char ;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>    unsigned  ;
983,984c983,984
<     char yy_1;
<    unsigned char yy_0;
---
>     char yy_1
>      ;
984c984
<    unsigned char yy_0;
---
>     char yy_0;
984c984
<    unsigned char yy_0;
---
>      yy_0;
984c984
<    unsigned char yy_0;
---
>     char ;
984c984
<    unsigned char yy_0;
---
>      ;
984c984
<    unsigned char yy_0;
---
>     char yy_0
984c984
<    unsigned char yy_0;
---
>      yy_0
984c984
<    unsigned char yy_0;
---
>     char 
984c984
<    unsigned char yy_0;
---
>      
984c984
<    unsigned char yy_0;
---
>    unsigned  yy_0;
984c984
<    unsigned char yy_0;
---
>    unsigned  ;
984c984
<    unsigned char yy_0;
---
>    unsigned  yy_0
984c984
<    unsigned char yy_0;
---
>    unsigned  
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned  yy_0;
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned  ;
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned  yy_0
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned  
>       i, j;
984c984
<    unsigned char yy_0;
---
>    unsigned char ;
984c984
<    unsigned char yy_0;
---
>    unsigned char 
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char ;
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char 
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char ;
>    Int32   , j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char 
>    Int32   , j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char ;
>       , j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char 
>       , j;
984c984
<    unsigned char yy_0;
---
>    unsigned char yy_0
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>       i, j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>    Int32   , j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>       , j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>    Int32   i j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>       i j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>    Int32    j;
984,985c984,985
<    unsigned char yy_0;
<    Int32   i, j;
---
>    unsigned char yy_0
>        j;
985c985
<    Int32   i, j;
---
>       i, j;
985c985
<    Int32   i, j;
---
>       , j;
985c985
<    Int32   i, j;
---
>       i j;
985c985
<    Int32   i, j;
---
>        j;
985c985
<    Int32   i, j;
---
>       i, ;
985c985
<    Int32   i, j;
---
>       , ;
985c985
<    Int32   i, j;
---
>       i ;
985c985
<    Int32   i, j;
---
>        ;
985c985
<    Int32   i, j;
---
>    Int32   , j;
985c985
<    Int32   i, j;
---
>    Int32    j;
985c985
<    Int32   i, j;
---
>    Int32   , ;
985c985
<    Int32   i, j;
---
>    Int32    ;
985c985
<    Int32   i, j;
---
>    Int32   , j
985c985
<    Int32   i, j;
---
>    Int32    j
985c985
<    Int32   i, j;
---
>    Int32   , 
985c985
<    Int32   i, j;
---
>    Int32    
985c985
<    Int32   i, j;
---
>    Int32   i j;
985c985
<    Int32   i, j;
---
>    Int32   i ;
985c985
<    Int32   i, j;
---
>    Int32   i j
985c985
<    Int32   i, j;
---
>    Int32   i 
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i j;
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i ;
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i j
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i 
>       zPend;
985c985
<    Int32   i, j;
---
>    Int32   i, ;
985c985
<    Int32   i, j;
---
>    Int32   i, 
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, ;
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, 
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, ;
>    Int32   ;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, 
>    Int32   ;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, ;
>       ;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, 
>       ;
985c985
<    Int32   i, j;
---
>    Int32   i, j
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>       zPend;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>    Int32   ;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>       ;
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>    Int32   zPend
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>       zPend
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>    Int32   
985,986c985,986
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j
>       
986c986
<    Int32   zPend;
---
>       zPend;
986c986
<    Int32   zPend;
---
>       ;
986c986
<    Int32   zPend;
---
>       zPend
986c986
<    Int32   zPend;
---
>       
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>       zPend;
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>       ;
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>       zPend
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>       
>       wr;
986c986
<    Int32   zPend;
---
>    Int32   ;
986c986
<    Int32   zPend;
---
>    Int32   
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>    Int32   ;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>    Int32   ;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>       ;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>       ;
986c986
<    Int32   zPend;
---
>    Int32   zPend
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       wr;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   ;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       ;
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   wr
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       wr
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   
986,987c986,987
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       
987c987
<    Int32   wr;
---
>       wr;
987c987
<    Int32   wr;
---
>       ;
987c987
<    Int32   wr;
---
>       wr
987c987
<    Int32   wr;
---
>       
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>       wr;
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>       ;
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>       wr
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>       
>       EOB;
987c987
<    Int32   wr;
---
>    Int32   ;
987c987
<    Int32   wr;
---
>    Int32   
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>    Int32   ;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>    Int32   ;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>       ;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>       ;
987c987
<    Int32   wr;
---
>    Int32   wr
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       EOB;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   ;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       ;
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   EOB
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       EOB
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   
987,988c987,988
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       
988c988
<    Int32   EOB;
---
>       EOB;
988c988
<    Int32   EOB;
---
>       ;
988c988
<    Int32   EOB;
---
>       EOB
988c988
<    Int32   EOB;
---
>       
988c988
<    Int32   EOB;
---
>       EOB;
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>       ;
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>       EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>       
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   ;
988c988
<    Int32   EOB;
---
>    Int32   
988c988
<    Int32   EOB;
---
>    Int32   ;
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   ;
991c991
<    UInt32* ptr   = s->ptr;
---
>    UInt32 ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   
991c991
<    UInt32* ptr   = s->ptr;
---
>    UInt32 ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   ;
991c991
<    UInt32* ptr   = s->ptr;
---
>     ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   
991c991
<    UInt32* ptr   = s->ptr;
---
>     ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    UInt32 ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>     ptr   = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    UInt32*    = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    *    = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>    UInt32    = s->ptr;
988c988
<    Int32   EOB;
---
>    Int32   EOB
991c991
<    UInt32* ptr   = s->ptr;
---
>        = s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>     ptr   = s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>    *    = s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>        = s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>    * ptr    s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>     ptr    s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>    *     s->ptr;
991c991
<    UInt32* ptr   = s->ptr;
---
>         s->ptr;
(87.7 %, 25173 bytes)
991c991
<        = s->ptr;
---
>         ;
991c991
<        = s->ptr;
---
>        = ->ptr;
991c991
<        = s->ptr;
---
>        = ptr;
991c991
<        = s->ptr;
---
>        = ->;
991c991
<        = s->ptr;
---
>        = ;
991c991
<        = s->ptr;
---
>        = ->ptr
991c991
<        = s->ptr;
---
>        = ptr
991c991
<        = s->ptr;
---
>        = ->
991c991
<        = s->ptr;
---
>        = 
991c991
<        = s->ptr;
---
>        = sptr;
991c991
<        = s->ptr;
---
>        = s;
(87.7 %, 25166 bytes)
991,992c991,992
<         ;
<    UInt32 ptr_0;
---
>         
>     
992c992
<    UInt32 ptr_0;
---
>     ptr_0;
992c992
<    UInt32 ptr_0;
---
>     ;
992c992
<    UInt32 ptr_0;
---
>     ptr_0
992c992
<    UInt32 ptr_0;
---
>     
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>     ptr_0;
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>     ;
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>     ptr_0
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>     
>     char* block  = s->block;
992c992
<    UInt32 ptr_0;
---
>    UInt32 ;
992c992
<    UInt32 ptr_0;
---
>    UInt32 
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ;
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ;
>    unsigned * block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 
>    unsigned * block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ;
>     * block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 
>     * block  = s->block;
992c992
<    UInt32 ptr_0;
---
>    UInt32 ptr_0
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>     char* block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>    unsigned * block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>     * block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>    unsigned char block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>     char block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>    unsigned  block  = s->block;
992,993c992,993
<    UInt32 ptr_0;
<    unsigned char* block  = s->block;
---
>    UInt32 ptr_0
>      block  = s->block;
993c993
<    unsigned char* block  = s->block;
---
>     char* block  = s->block;
993c993
<    unsigned char* block  = s->block;
---
>     * block  = s->block;
993c993
<    unsigned char* block  = s->block;
---
>     char block  = s->block;
(87.7 %, 25158 bytes)
993c993
<     char* block  = s->block;
---
>     * block  = s->block;
993c993
<     char* block  = s->block;
---
>      block  = s->block;
993c993
<     char* block  = s->block;
---
>     *   = s->block;
993c993
<     char* block  = s->block;
---
>        = s->block;
993c993
<     char* block  = s->block;
---
>     * block   s->block;
993c993
<     char* block  = s->block;
---
>      block   s->block;
993c993
<     char* block  = s->block;
---
>     *    s->block;
993c993
<     char* block  = s->block;
---
>         s->block;
993c993
<     char* block  = s->block;
---
>     char block  = s->block;
(87.7 %, 25147 bytes)
993c993
<         s->block;
---
>         
993c993
<         s->block;
---
>         sblock;
993c993
<         s->block;
---
>         s;
(87.7 %, 25138 bytes)
994c994
<    unsigned char block_0;
---
>      
994c994
<    unsigned char block_0;
---
>    unsigned  block_0;
994c994
<    unsigned char block_0;
---
>    unsigned  ;
994c994
<    unsigned char block_0;
---
>    unsigned  block_0
994c994
<    unsigned char block_0;
---
>    unsigned  
994,995c994,995
<    unsigned char block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0;
>     short* mtfv  = s->mtfv;
(87.7 %, 25134 bytes)
994c994
<    unsigned  block_0;
---
>    unsigned  ;
994c994
<    unsigned  block_0;
---
>    unsigned  
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  ;
>     short* mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  
>     short* mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  ;
>    unsigned * mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  
>    unsigned * mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  ;
>     * mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  
>     * mtfv  = s->mtfv;
994c994
<    unsigned  block_0;
---
>    unsigned  block_0
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>     short* mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>    unsigned * mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>     * mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>    unsigned short mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>     short mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>    unsigned  mtfv  = s->mtfv;
994,995c994,995
<    unsigned  block_0;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned  block_0
>      mtfv  = s->mtfv;
995c995
<    unsigned short* mtfv  = s->mtfv;
---
>     short* mtfv  = s->mtfv;
995c995
<    unsigned short* mtfv  = s->mtfv;
---
>     * mtfv  = s->mtfv;
995c995
<    unsigned short* mtfv  = s->mtfv;
---
>     short mtfv  = s->mtfv;
(87.7 %, 25126 bytes)
995c995
<     short* mtfv  = s->mtfv;
---
>     * mtfv  = s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>      mtfv  = s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>     *   = s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>        = s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>     * mtfv   s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>      mtfv   s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>     *    s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>         s->mtfv;
995c995
<     short* mtfv  = s->mtfv;
---
>     short mtfv  = s->mtfv;
(87.7 %, 25115 bytes)
995c995
<         s->mtfv;
---
>         
995c995
<         s->mtfv;
---
>         smtfv;
995c995
<         s->mtfv;
---
>         s;
(87.7 %, 25107 bytes)
996c996
<    unsigned short mtfv_0;
---
>      
996c996
<    unsigned short mtfv_0;
---
>    unsigned  mtfv_0;
996c996
<    unsigned short mtfv_0;
---
>    unsigned  ;
996c996
<    unsigned short mtfv_0;
---
>    unsigned  mtfv_0
(87.8 %, 25102 bytes)
996c996
<    unsigned  mtfv_0;
---
>    unsigned  ;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  
996c996
<    unsigned  mtfv_0;
---
>    unsigned  ;
998c998
<    ;
---
>    
996c996
<    unsigned  mtfv_0;
---
>    unsigned  
998c998
<    ;
---
>    
996c996
<    unsigned  mtfv_0;
---
>    unsigned  ;
999c999
<    EOB = s->nInUse+1;
---
>     = s->nInUse+1;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  
999c999
<    EOB = s->nInUse+1;
---
>     = s->nInUse+1;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  ;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>     = s->nInUse+1;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>     = s->nInUse+1;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  mtfv_0
996c996
<    unsigned  mtfv_0;
---
>    unsigned  mtfv_0
998c998
<    ;
---
>    
996c996
<    unsigned  mtfv_0;
---
>    unsigned  mtfv_0
999c999
<    EOB = s->nInUse+1;
---
>     = s->nInUse+1;
996c996
<    unsigned  mtfv_0;
---
>    unsigned  mtfv_0
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>     = s->nInUse+1;
(87.8 %, 25101 bytes)
998c998
<    ;
---
>    
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>     = s->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>    EOB  s->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>      s->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>    EOB = ->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>     = ->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>    EOB  ->nInUse+1;
998,999c998,999
<    ;
<    EOB = s->nInUse+1;
---
>    
>      ->nInUse+1;
999c999
<    EOB = s->nInUse+1;
---
>     = s->nInUse+1;
999c999
<    EOB = s->nInUse+1;
---
>      s->nInUse+1;
(87.8 %, 25097 bytes)
999c999
<     = s->nInUse+1;
---
>      ->nInUse+1;
999c999
<     = s->nInUse+1;
---
>      snInUse+1;
999c999
<     = s->nInUse+1;
---
>      nInUse+1;
999c999
<     = s->nInUse+1;
---
>      s->+1;
999c999
<     = s->nInUse+1;
---
>      ->+1;
999c999
<     = s->nInUse+1;
---
>      s+1;
999c999
<     = s->nInUse+1;
---
>      +1;
999c999
<     = s->nInUse+1;
---
>     = ->nInUse+1;
999c999
<     = s->nInUse+1;
---
>     = nInUse+1;
999c999
<     = s->nInUse+1;
---
>     = ->+1;
999c999
<     = s->nInUse+1;
---
>     = +1;
999c999
<     = s->nInUse+1;
---
>     = ->nInUse1;
999c999
<     = s->nInUse+1;
---
>     = nInUse1;
999c999
<     = s->nInUse+1;
---
>     = ->1;
999c999
<     = s->nInUse+1;
---
>     = 1;
(87.8 %, 25088 bytes)
999c999
<     = +1;
---
>     = 
999c999
<     = +1;
---
>     = 1;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = ;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = 1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = 
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +;
999c999
<     = +1;
---
>     = +
999c999
<     = +1;
---
>     = +;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for ( = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     ( = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for  = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
999c999
<     = +1;
---
>     = +1
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>      = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     ( = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>      = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (i  0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     i  0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>     (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>       0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for  = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i  0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for   0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = ; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for  = ; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i  ; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for   ; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for ( = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for ( = ; i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ; i <= EOB; i++) s->mtfFreq[i] = 0;
(87.8 %, 25086 bytes)
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (   i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;  <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (    <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ; i  EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (   i  EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (     EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0 i <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0  <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0 i  EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0   EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0 i <= ; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0  <= ; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0 i  ; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0   ; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0;  <= EOB; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  0;   EOB; i++) s->mtfFreq[i] = 0;
(87.8 %, 25082 bytes)
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (     EOB ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (      ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   EOB; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; i) s->mtfFreq[i] = 0;
(87.8 %, 25079 bytes)
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    i++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    i) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    ) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    i++ s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    ++ s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;    i s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;     s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ++) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ++ s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  s->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ++) ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ++ ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; i++) s->mtfFreq[i] = 0;
---
>    for (  ;   ; i) s->mtfFreq[i] = 0;
(87.8 %, 25076 bytes)
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  smtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  s->[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  ->[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  s[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ;  [i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) ->mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) mtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) ->[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) [i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) ->mtfFreqi] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) mtfFreqi] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) ->i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) smtfFreq[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) smtfFreqi] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) si] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) smtfFreq[] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s[] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) smtfFreq] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->[i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->i] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->[] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->[i = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->i = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->[ = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s-> = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreqi] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreqi = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreqi]  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq]  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreqi  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[] = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[ = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[]  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[] = ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[ = ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[]  ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[  ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i = ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i  ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i = 0
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i  0
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i = 
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i  
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  0
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  0;
1003c1003
<    wr = 0;
---
>     = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  ;
1003c1003
<    wr = 0;
---
>     = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  0
1003c1003
<    wr = 0;
---
>     = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i] = 0;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>     = 0;
(87.8 %, 25074 bytes)
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>     = 0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>    wr  0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>      0;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>    wr = ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>     = ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>    wr  ;
1001c1001
<    for (  ;   ; ) s->mtfFreq[i]  ;
---
>    for (  ;   ; ) s->mtfFreq[i]  
1003c1003
<    wr = 0;
---
>      ;
(87.8 %, 25071 bytes)
1003c1003
<     = 0;
---
>      ;
1003c1003
<     = 0;
---
>      0
1003c1003
<     = 0;
---
>      
1002a1003
>      0;
1004d1004
<    zPend = 0;
1002a1003
>      ;
1004d1004
<    zPend = 0;
1002a1003
>      0
1004d1004
<    zPend = 0;
1002a1003
>      
1004d1004
<    zPend = 0;
(87.8 %, 25069 bytes)
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>     = 0;
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>    zPend  0;
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>      0;
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>    zPend = ;
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>     = ;
1003,1004c1003,1004
<      ;
<    zPend = 0;
---
>      
>    zPend  ;
1002a1003
>      
1004d1004
<    zPend = 0;
(87.8 %, 25063 bytes)
1004c1004
<     = 0;
---
>      ;
1004c1004
<     = 0;
---
>      0
1004c1004
<     = 0;
---
>      
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      0;
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      ;
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      0
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004c1004
<     = 0;
---
>     = ;
1004c1004
<     = 0;
---
>     = 
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     = ;
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     = 
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     = ;
>    for i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     = 
>    for i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<     = 0;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     = ;
>     i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
(87.8 %, 25061 bytes)
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>    for i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>     i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>    for ( = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>     ( = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>    for  = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1004,1005c1004,1005
<      ;
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      
>      = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     ( = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>      = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     (i  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     i  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>     (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>       0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for  = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for i  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for   0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for i = ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for  = ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for i  ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for   ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for ( = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for ( = ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (i = 0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ; i < s->nInUse; i++) yy_0 = (unsigned char) i;
(87.8 %, 25059 bytes)
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (   i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;  < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (    < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ; i  s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (   i  s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (     s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0 i < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0  < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0 i  s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0   s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0 i < ->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0  < ->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0 i  ->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0   ->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0;  < s->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  0; i < s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  0;   s->nInUse; i++) yy_0 = (unsigned char) i;
(87.8 %, 25056 bytes)
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (     s; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (     ; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ->nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   nInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ->; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ->nInUse i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   nInUse i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   -> i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;    i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   snInUse; i++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   s->nInUse; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   s; i++) yy_0 = (unsigned char) i;
(87.8 %, 25047 bytes)
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;    ) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;    i++ yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;    ++ yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;    i yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;     yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; ++) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; ) yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; ++ yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ;  yy_0 = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; ++)  = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )  = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; ++  = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ;   = (unsigned char) i;
1005c1005
<    for (  ;   ; i++) yy_0 = (unsigned char) i;
---
>    for (  ;   ; i) yy_0 = (unsigned char) i;
(87.8 %, 25044 bytes)
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;   = (unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;  yy_0  (unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;    (unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;  yy_0 = unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;   = unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;  yy_0  unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ;    unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )  = (unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )   (unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )  = unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )   unsigned char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )  = ( char) i;
1005c1005
<    for (  ;   ; ) yy_0 = (unsigned char) i;
---
>    for (  ;   ; )   ( char) i;
(87.8 %, 25039 bytes)
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )    char) i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )   unsigned ) i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )    ) i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )   unsigned char i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )    char i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )   unsigned  i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )     i;
1005c1005
<    for (  ;   ; )   (unsigned char) i;
---
>    for (  ;   ; )   ( char) i;
(87.8 %, 25025 bytes)
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     i = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     (i = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     i = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for ( = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     ( = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for  = 0; i < s->nblock; i++) {
1005c1005
<    for (  ;   ; )     i;
---
>    for (  ;   ; )     i
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>      = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     (i = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     i = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     ( = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>      = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     (i  0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     i  0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>     (  0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>       0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for  = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for i  0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for   0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = ; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for  = ; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for i  ; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for   ; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for ( = 0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for (  0; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for ( = ; i < s->nblock; i++) {
1007c1007
<    for (i = 0; i < s->nblock; i++) {
---
>    for (  ; i < s->nblock; i++) {
(87.8 %, 25023 bytes)
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (   i < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  ;  < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (    < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  ; i  s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (   i  s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  ;   s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (     s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0 i < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0  < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0 i  s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0   s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0 i < ->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0  < ->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0 i  ->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0   ->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0;  < s->nblock; i++) {
1007c1007
<    for (  0; i < s->nblock; i++) {
---
>    for (  0;   s->nblock; i++) {
(87.8 %, 25020 bytes)
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (     s; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (     ; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   ->nblock; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   nblock; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   ->; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   ; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   ->nblock i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   nblock i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   -> i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;    i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   snblock; i++) {
1007c1007
<    for (  ;   s->nblock; i++) {
---
>    for (  ;   s; i++) {
(87.8 %, 25011 bytes)
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;    ) {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;    i++ {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;    ++ {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;    i {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;     {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ++) {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ) {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ++ {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ;  {
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ++) 
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ) 
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; ++ 
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ;  
1007c1007
<    for (  ;   ; i++) {
---
>    for (  ;   ; i) {
(87.8 %, 25008 bytes)
1007c1007
<    for (  ;   ; ) {
---
>    for (  ;   ;  
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  {
>        char ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  
>        char ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  {
>       unsigned  ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  
>       unsigned  ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  {
>         ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ;  
>         ll_i;
1007c1007
<    for (  ;   ; ) {
---
>    for (  ;   ; ) 
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>        char ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>       unsigned  ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>         ll_i;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>       unsigned char ;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>        char ;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>       unsigned  ;
1007,1008c1007,1008
<    for (  ;   ; ) {
<       unsigned char ll_i;
---
>    for (  ;   ; ) 
>         ;
1008c1008
<       unsigned char ll_i;
---
>        char ll_i;
1008c1008
<       unsigned char ll_i;
---
>         ll_i;
1008c1008
<       unsigned char ll_i;
---
>        char ;
1008c1008
<       unsigned char ll_i;
---
>         ;
1008c1008
<       unsigned char ll_i;
---
>        char ll_i
1008c1008
<       unsigned char ll_i;
---
>         ll_i
1008c1008
<       unsigned char ll_i;
---
>        char 
1008c1008
<       unsigned char ll_i;
---
>         
1008c1008
<       unsigned char ll_i;
---
>       unsigned  ll_i;
(87.8 %, 25000 bytes)
1008c1008
<        char ll_i;
---
>         ll_i;
1008c1008
<        char ll_i;
---
>         ;
1008c1008
<        char ll_i;
---
>         ll_i
1008c1008
<        char ll_i;
---
>         
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         ll_i;
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         ;
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         ll_i
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         
>        ( wr <= i, "generateMTFValues1" );
1008c1008
<        char ll_i;
---
>        char ;
1008c1008
<        char ll_i;
---
>        char 
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ;
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char 
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ;
>       AssertD  wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char 
>       AssertD  wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ;
>         wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char 
>         wr <= i, "generateMTFValues1" );
1008c1008
<        char ll_i;
---
>        char ll_i
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>        ( wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>       AssertD  wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>         wr <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>       AssertD (  <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>        (  <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>       AssertD   <= i, "generateMTFValues1" );
1008,1009c1008,1009
<        char ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        char ll_i
>          <= i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        ( wr <= i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         wr <= i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        (  <= i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>          <= i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        ( wr  i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>         wr  i, "generateMTFValues1" );
1009c1009
<       AssertD ( wr <= i, "generateMTFValues1" );
---
>        (   i, "generateMTFValues1" );
(87.8 %, 24993 bytes)
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>         wr <= i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>          <= i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>         wr  i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>           i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>         wr <= , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>          <= , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>         wr  , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>           , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (  <= i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (   i, "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (  <= , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (   , "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (  <= i "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (   i "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (  <=  "generateMTFValues1" );
1009c1009
<        ( wr <= i, "generateMTFValues1" );
---
>        (    "generateMTFValues1" );
(87.8 %, 24989 bytes)
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (    "generateMTFValues1" );
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (   ,  );
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (     );
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (   , "generateMTFValues1" ;
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (    "generateMTFValues1" ;
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (   ,  ;
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (     ;
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (   i "generateMTFValues1" );
1009c1009
<        (   i, "generateMTFValues1" );
---
>        (   i  );
(87.8 %, 24987 bytes)
1009c1009
<        (    "generateMTFValues1" );
---
>        (     ;
1009c1009
<        (    "generateMTFValues1" );
---
>        (     )
1009c1009
<        (    "generateMTFValues1" );
---
>        (     
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (     );
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (     ;
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (     )
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (     
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009c1009
<        (    "generateMTFValues1" );
---
>        (    "generateMTFValues1" ;
1009c1009
<        (    "generateMTFValues1" );
---
>        (    "generateMTFValues1" 
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" ;
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" 
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" ;
>       j  ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" 
>       j  ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" ;
>         ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" 
>         ptr_0-1; if (j < 0) j += s->nblock;
1009c1009
<        (    "generateMTFValues1" );
---
>        (    "generateMTFValues1" )
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>        = ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>       j  ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>         ptr_0-1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>       j = -1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>        = -1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>       j  -1; if (j < 0) j += s->nblock;
1009,1010c1009,1010
<        (    "generateMTFValues1" );
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        (    "generateMTFValues1" )
>         -1; if (j < 0) j += s->nblock;
1010c1010
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>        = ptr_0-1; if (j < 0) j += s->nblock;
1010c1010
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>         ptr_0-1; if (j < 0) j += s->nblock;
(87.8 %, 24979 bytes)
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>           (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -; if (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         - if (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -;  (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -  (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -; if j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         - if j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -;  j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -  j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1 if (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1  (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1 if j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1  j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1 if ( < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1  ( < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1 if  < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1   < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  (j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  ( < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;   < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  (j  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  j  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;  (  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1;    0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if j < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if  < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if j  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if   0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if j < ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if  < ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if j  ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if   ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if ( < 0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if ( < ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (  ) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if ( < 0 j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (  0 j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if ( <  j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (   j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (j  0) j += s->nblock;
1010c1010
<         -1; if (j < 0) j += s->nblock;
---
>         -1; if (j  ) j += s->nblock;
(87.8 %, 24977 bytes)
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (   j += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  )  += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (    += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  ) j  s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (   j  s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  )   s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (     s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0 j += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0  += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0 j  s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0   s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0 j += ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0  += ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0 j  ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0   ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)  += s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)   s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)  += ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)   ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)  += snblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)   snblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)  += nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0)   nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  s->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  ->nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  snblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  nblock;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  s->;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  ->;
1010c1010
<         -1; if (  0) j += s->nblock;
---
>         -1; if (  0) j  s;
(87.8 %, 24974 bytes)
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   nblock;
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   ->;
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   ;
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   ->nblock
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   nblock
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   ->
1010c1010
<         -1; if (  0)   s->nblock;
---
>         -1; if (  0)   
(87.8 %, 24965 bytes)
1010,1011c1010,1011
<         -1; if (  0)   ;
<       ll_i = s->unseqToSeq[block_0];
---
>         -1; if (  0)   
>         s->unseqToSeq[block_0];
1010,1011c1010,1011
<         -1; if (  0)   ;
<       ll_i = s->unseqToSeq[block_0];
---
>         -1; if (  0)   
>       ll_i = ->unseqToSeq[block_0];
1010,1011c1010,1011
<         -1; if (  0)   ;
<       ll_i = s->unseqToSeq[block_0];
---
>         -1; if (  0)   
>        = ->unseqToSeq[block_0];
1010,1011c1010,1011
<         -1; if (  0)   ;
<       ll_i = s->unseqToSeq[block_0];
---
>         -1; if (  0)   
>       ll_i  ->unseqToSeq[block_0];
1010,1011c1010,1011
<         -1; if (  0)   ;
<       ll_i = s->unseqToSeq[block_0];
---
>         -1; if (  0)   
>         ->unseqToSeq[block_0];
1011c1011
<       ll_i = s->unseqToSeq[block_0];
---
>        = s->unseqToSeq[block_0];
1011c1011
<       ll_i = s->unseqToSeq[block_0];
---
>         s->unseqToSeq[block_0];
(87.8 %, 24959 bytes)
1011c1011
<         s->unseqToSeq[block_0];
---
>         [block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         ->unseqToSeqblock_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         unseqToSeqblock_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         ->block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         sunseqToSeq[block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s[block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         sunseqToSeqblock_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         sblock_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         sunseqToSeq[];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s[];
1011c1011
<         s->unseqToSeq[block_0];
---
>         sunseqToSeq];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->[block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->block_0];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->[];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->];
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->[block_0;
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->block_0;
1011c1011
<         s->unseqToSeq[block_0];
---
>         s->[;
(87.8 %, 24947 bytes)
1011c1011
<         s[block_0];
---
>         s];
1011c1011
<         s[block_0];
---
>         sblock_0;
1011c1011
<         s[block_0];
---
>         s;
1011c1011
<         s[block_0];
---
>         sblock_0]
1011c1011
<         s[block_0];
---
>         s]
1011c1011
<         s[block_0];
---
>         sblock_0
1011c1011
<         s[block_0];
---
>         s
1011c1011
<         s[block_0];
---
>         s[];
1011c1011
<         s[block_0];
---
>         s[;
1011c1011
<         s[block_0];
---
>         s[]
1011c1011
<         s[block_0];
---
>         s[
1011,1012c1011,1012
<         s[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s[];
>        ( ll_i < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s[;
>        ( ll_i < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s[]
>        ( ll_i < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s[
>        ( ll_i < s->nInUse, "generateMTFValuesa" );
1011c1011
<         s[block_0];
---
>         s[block_0;
(87.8 %, 24938 bytes)
1011,1012c1011,1012
<         s;
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s
>         ll_i < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s;
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s
>       AssertD (  < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s;
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s
>        (  < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s;
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s
>       AssertD   < s->nInUse, "generateMTFValuesa" );
1011,1012c1011,1012
<         s;
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         s
>          < s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i < s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i < s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (  < s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>          < s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i  s->nInUse, "generateMTFValuesa" );
1012c1012
<       AssertD ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (   s->nInUse, "generateMTFValuesa" );
(87.8 %, 24931 bytes)
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i < s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>          < s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i  s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>           s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i < ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>          < ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>         ll_i  ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>           ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (  < s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (   s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (  < ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (   ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (  < snInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (   snInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (  < nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        (   nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  s->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  ->nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  snInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  nInUse, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  s->, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  ->, "generateMTFValuesa" );
1012c1012
<        ( ll_i < s->nInUse, "generateMTFValuesa" );
---
>        ( ll_i  s, "generateMTFValuesa" );
(87.8 %, 24926 bytes)
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   nInUse, "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   ->, "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   , "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   ->nInUse "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   nInUse "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   -> "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   snInUse, "generateMTFValuesa" );
1012c1012
<        (   s->nInUse, "generateMTFValuesa" );
---
>        (   s, "generateMTFValuesa" );
(87.8 %, 24916 bytes)
1012c1012
<        (    "generateMTFValuesa" );
---
>        (     
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" ;
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" ;
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" ;
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" ;
1014c1014
<       if (yy_0 == ll_i) { 
---
>        yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>        yy_0 == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if ( == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>        ( == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if  == ll_i) { 
1012c1012
<        (    "generateMTFValuesa" );
---
>        (    "generateMTFValuesa" )
1014c1014
<       if (yy_0 == ll_i) { 
---
>         == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0 == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        yy_0 == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        ( == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>         == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (yy_0  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        yy_0  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>        (  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>          ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if  == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if   ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if  == ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if yy_0  ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if   ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if ( == ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if ( == ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (  ) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if ( == ll_i { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (  ll_i { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if ( ==  { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (   { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (yy_0  ll_i) { 
1014c1014
<       if (yy_0 == ll_i) { 
---
>       if (yy_0  ) { 
(87.8 %, 24910 bytes)
1014c1014
<       if (  ll_i) { 
---
>       if (   { 
1014c1014
<       if (  ll_i) { 
---
>       if (  )  
1014c1014
<       if (  ll_i) { 
---
>       if (    
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ) { 
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (   { 
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  )  
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (    
>          ++;
1014c1014
<       if (  ll_i) { 
---
>       if (  ll_i { 
1014c1014
<       if (  ll_i) { 
---
>       if (  ll_i  
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i { 
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i  
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i { 
>          zPend;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i  
>          zPend;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i { 
>          ;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i  
>          ;
1014c1014
<       if (  ll_i) { 
---
>       if (  ll_i)  
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          ++;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          zPend;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          ;
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          zPend++
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          ++
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          zPend
1014,1015c1014,1015
<       if (  ll_i) { 
<          zPend++;
---
>       if (  ll_i)  
>          
1015c1015
<          zPend++;
---
>          ++;
1015c1015
<          zPend++;
---
>          ;
1015c1015
<          zPend++;
---
>          ++
1015c1015
<          zPend++;
---
>          
(87.8 %, 24903 bytes)
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>        else {
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>       }  {
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>         {
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>       } else 
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>        else 
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>       }  
1015,1016c1015,1016
<          ;
<       } else {
---
>          
>         
(87.9 %, 24898 bytes)
1016c1016
<       }  {
---
>         {
1018c1018
<          if (zPend > 0) 
---
>           (zPend > 0) 
1016c1016
<       }  {
---
>         
1018c1018
<          if (zPend > 0) 
---
>           (zPend > 0) 
1016c1016
<       }  {
---
>         {
1018c1018
<          if (zPend > 0) 
---
>          if zPend > 0) 
1016c1016
<       }  {
---
>         
1018c1018
<          if (zPend > 0) 
---
>          if zPend > 0) 
1016c1016
<       }  {
---
>         {
1018c1018
<          if (zPend > 0) 
---
>           zPend > 0) 
1016c1016
<       }  {
---
>         
1018c1018
<          if (zPend > 0) 
---
>           zPend > 0) 
1016c1016
<       }  {
---
>       }  
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>           (zPend > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>          if zPend > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>           zPend > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>          if ( > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>           ( > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>          if  > 0) 
1016c1016
<       }  {
---
>       }  
1018c1018
<          if (zPend > 0) 
---
>            > 0) 
1018c1018
<          if (zPend > 0) 
---
>           (zPend > 0) 
1018c1018
<          if (zPend > 0) 
---
>           zPend > 0) 
1018c1018
<          if (zPend > 0) 
---
>           ( > 0) 
1018c1018
<          if (zPend > 0) 
---
>            > 0) 
1018c1018
<          if (zPend > 0) 
---
>           (zPend  0) 
1018c1018
<          if (zPend > 0) 
---
>           zPend  0) 
1018c1018
<          if (zPend > 0) 
---
>           (  0) 
1018c1018
<          if (zPend > 0) 
---
>             0) 
1018c1018
<          if (zPend > 0) 
---
>          if zPend > 0) 
1018c1018
<          if (zPend > 0) 
---
>          if  > 0) 
1018c1018
<          if (zPend > 0) 
---
>          if zPend  0) 
1018c1018
<          if (zPend > 0) 
---
>          if   0) 
1018c1018
<          if (zPend > 0) 
---
>          if zPend > ) 
1018c1018
<          if (zPend > 0) 
---
>          if  > ) 
1018c1018
<          if (zPend > 0) 
---
>          if zPend  ) 
1018c1018
<          if (zPend > 0) 
---
>          if   ) 
1018c1018
<          if (zPend > 0) 
---
>          if ( > 0) 
1018c1018
<          if (zPend > 0) 
---
>          if (  0) 
1018c1018
<          if (zPend > 0) 
---
>          if ( > ) 
1018c1018
<          if (zPend > 0) 
---
>          if (  ) 
1018c1018
<          if (zPend > 0) 
---
>          if ( > 0 
1018c1018
<          if (zPend > 0) 
---
>          if (  0 
1018c1018
<          if (zPend > 0) 
---
>          if ( >  
1018c1018
<          if (zPend > 0) 
---
>          if (   
1018c1018
<          if (zPend > 0) 
---
>          if (zPend  0) 
1018c1018
<          if (zPend > 0) 
---
>          if (zPend  ) 
(87.9 %, 24892 bytes)
1018c1018
<          if (  0) 
---
>          if (   
1018,1019c1018,1019
<          if (  0) 
<          {
---
>          if (  ) 
>          
1018,1019c1018,1019
<          if (  0) 
<          {
---
>          if (   
>          
1018c1018
<          if (  0) 
---
>          if (  ) 
1020c1020
<             register unsigned char  rtmp;
---
>              unsigned char  rtmp;
1018c1018
<          if (  0) 
---
>          if (   
1020c1020
<             register unsigned char  rtmp;
---
>              unsigned char  rtmp;
1018,1020c1018,1020
<          if (  0) 
<          {
<             register unsigned char  rtmp;
---
>          if (  ) 
>          
>              unsigned char  rtmp;
1018,1020c1018,1020
<          if (  0) 
<          {
<             register unsigned char  rtmp;
---
>          if (   
>          
>              unsigned char  rtmp;
1018c1018
<          if (  0) 
---
>          if (  0 
1018,1019c1018,1019
<          if (  0) 
<          {
---
>          if (  0 
>          
1018c1018
<          if (  0) 
---
>          if (  0 
1020c1020
<             register unsigned char  rtmp;
---
>              unsigned char  rtmp;
1018,1020c1018,1020
<          if (  0) 
<          {
<             register unsigned char  rtmp;
---
>          if (  0 
>          
>              unsigned char  rtmp;
1018c1018
<          if (  0) 
---
>          if (  0 
1020c1020
<             register unsigned char  rtmp;
---
>             register  char  rtmp;
1018,1020c1018,1020
<          if (  0) 
<          {
<             register unsigned char  rtmp;
---
>          if (  0 
>          
>             register  char  rtmp;
1018c1018
<          if (  0) 
---
>          if (  0 
1020c1020
<             register unsigned char  rtmp;
---
>               char  rtmp;
1018,1020c1018,1020
<          if (  0) 
<          {
<             register unsigned char  rtmp;
---
>          if (  0 
>          
>               char  rtmp;
1019c1019
<          {
---
>          
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>              unsigned char  rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>             register  char  rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>               char  rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>             register unsigned   rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>              unsigned   rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>             register    rtmp;
1019,1020c1019,1020
<          {
<             register unsigned char  rtmp;
---
>          
>                 rtmp;
1020c1020
<             register unsigned char  rtmp;
---
>              unsigned char  rtmp;
1020c1020
<             register unsigned char  rtmp;
---
>               char  rtmp;
1020c1020
<             register unsigned char  rtmp;
---
>              unsigned   rtmp;
(87.9 %, 24884 bytes)
1020c1020
<              unsigned char  rtmp;
---
>               char  rtmp;
1020c1020
<              unsigned char  rtmp;
---
>                 rtmp;
1020c1020
<              unsigned char  rtmp;
---
>               char  ;
1020c1020
<              unsigned char  rtmp;
---
>                 ;
1020c1020
<              unsigned char  rtmp;
---
>               char  rtmp
1020c1020
<              unsigned char  rtmp;
---
>                 rtmp
1020c1020
<              unsigned char  rtmp;
---
>               char  
1020c1020
<              unsigned char  rtmp;
---
>                 
1020c1020
<              unsigned char  rtmp;
---
>              unsigned   rtmp;
(87.9 %, 24876 bytes)
1020c1020
<               char  rtmp;
---
>                 rtmp;
1020c1020
<               char  rtmp;
---
>                 ;
1020c1020
<               char  rtmp;
---
>                 rtmp
1020c1020
<               char  rtmp;
---
>                 
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>                 rtmp;
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>                 ;
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>                 rtmp
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>                 
>              unsigned char* ryy_j;
1020c1020
<               char  rtmp;
---
>               char  ;
1020c1020
<               char  rtmp;
---
>               char  
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  ;
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  ;
>             register  char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  
>             register  char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  ;
>               char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  
>               char* ryy_j;
1020c1020
<               char  rtmp;
---
>               char  rtmp
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>              unsigned char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>             register  char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>               char* ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>             register unsigned * ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>              unsigned * ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>             register  * ryy_j;
1020,1021c1020,1021
<               char  rtmp;
<             register unsigned char* ryy_j;
---
>               char  rtmp
>               * ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>              unsigned char* ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>               char* ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>              unsigned * ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>               * ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>              unsigned char ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>               char ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>              unsigned  ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>                ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>             register  char* ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>             register  * ryy_j;
1021c1021
<             register unsigned char* ryy_j;
---
>             register  char ryy_j;
(87.9 %, 24868 bytes)
1021c1021
<              unsigned char* ryy_j;
---
>               char* ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>               * ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>               char ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>                ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>               char* ;
1021c1021
<              unsigned char* ryy_j;
---
>               * ;
1021c1021
<              unsigned char* ryy_j;
---
>               char ;
1021c1021
<              unsigned char* ryy_j;
---
>                ;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned * ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned  ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned * ;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned  ;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned * ryy_j
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned  ryy_j
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned * 
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned  
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char ryy_j;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char ;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char ryy_j
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char 
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char ryy_j;
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char ;
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char ryy_j
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char 
>              unsigned char  rll_i;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char* ;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char* 
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ;
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* 
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ;
>             register  char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* 
>             register  char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ;
>               char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* 
>               char  rll_i;
1021c1021
<              unsigned char* ryy_j;
---
>              unsigned char* ryy_j
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>              unsigned char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>             register  char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>               char  rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>             register unsigned   rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>              unsigned   rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>             register    rll_i;
1021,1022c1021,1022
<              unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>              unsigned char* ryy_j
>                 rll_i;
1022c1022
<             register unsigned char  rll_i;
---
>              unsigned char  rll_i;
1022c1022
<             register unsigned char  rll_i;
---
>               char  rll_i;
(87.9 %, 24860 bytes)
1022c1022
<              unsigned char  rll_i;
---
>               char  rll_i;
1022c1022
<              unsigned char  rll_i;
---
>                 rll_i;
1022c1022
<              unsigned char  rll_i;
---
>               char  ;
1022c1022
<              unsigned char  rll_i;
---
>                 ;
1022c1022
<              unsigned char  rll_i;
---
>               char  rll_i
1022c1022
<              unsigned char  rll_i;
---
>                 rll_i
1022c1022
<              unsigned char  rll_i;
---
>               char  
1022c1022
<              unsigned char  rll_i;
---
>                 
1022c1022
<              unsigned char  rll_i;
---
>              unsigned   rll_i;
(87.9 %, 24852 bytes)
1022c1022
<               char  rll_i;
---
>                 rll_i;
1022c1022
<               char  rll_i;
---
>                 ;
1022c1022
<               char  rll_i;
---
>                 rll_i
1022c1022
<               char  rll_i;
---
>                 
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>                 rll_i;
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>                 ;
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>                 rll_i
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>                 
>               = yy_1;
1022c1022
<               char  rll_i;
---
>               char  ;
1022c1022
<               char  rll_i;
---
>               char  
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  ;
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  ;
>             rtmp   yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  
>             rtmp   yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  ;
>                yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  
>                yy_1;
1022c1022
<               char  rll_i;
---
>               char  rll_i
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>               = yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>             rtmp   yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>                yy_1;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>             rtmp  = ;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>               = ;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>             rtmp   ;
1022,1023c1022,1023
<               char  rll_i;
<             rtmp  = yy_1;
---
>               char  rll_i
>                ;
(87.9 %, 24847 bytes)
1023c1023
<               = yy_1;
---
>                ;
1023c1023
<               = yy_1;
---
>                yy_1
1023c1023
<               = yy_1;
---
>                
1023,1024c1023,1024
<               = yy_1;
<             yy_1 = yy_0;
---
>                yy_1;
>              = yy_0;
1023,1024c1023,1024
<               = yy_1;
<             yy_1 = yy_0;
---
>                ;
>              = yy_0;
1023,1024c1023,1024
<               = yy_1;
<             yy_1 = yy_0;
---
>                yy_1
>              = yy_0;
1023,1024c1023,1024
<               = yy_1;
<             yy_1 = yy_0;
---
>                
>              = yy_0;
(87.9 %, 24842 bytes)
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>              = yy_0;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>             yy_1  yy_0;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>               yy_0;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>             yy_1 = ;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>              = ;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>             yy_1  ;
1023,1024c1023,1024
<                ;
<             yy_1 = yy_0;
---
>                
>               ;
(87.9 %, 24837 bytes)
1024c1024
<              = yy_0;
---
>               ;
1024c1024
<              = yy_0;
---
>               yy_0
1024c1024
<              = yy_0;
---
>               
1024,1025c1024,1025
<              = yy_0;
<             ryy_j = &yy_1;
---
>               yy_0;
>              = &yy_1;
1024,1025c1024,1025
<              = yy_0;
<             ryy_j = &yy_1;
---
>               ;
>              = &yy_1;
1024,1025c1024,1025
<              = yy_0;
<             ryy_j = &yy_1;
---
>               yy_0
>              = &yy_1;
1024,1025c1024,1025
<              = yy_0;
<             ryy_j = &yy_1;
---
>               
>              = &yy_1;
(87.9 %, 24832 bytes)
1024,1025c1024,1025
<               ;
<             ryy_j = &yy_1;
---
>               
>              = &yy_1;
1024,1025c1024,1025
<               ;
<             ryy_j = &yy_1;
---
>               
>             ryy_j  &yy_1;
1024,1025c1024,1025
<               ;
<             ryy_j = &yy_1;
---
>               
>               &yy_1;
1024,1025c1024,1025
<               ;
<             ryy_j = &yy_1;
---
>               
>             ryy_j = yy_1;
1024,1025c1024,1025
<               ;
<             ryy_j = &yy_1;
---
>               
>              = yy_1;
(87.9 %, 24826 bytes)
1025c1025
<              = &yy_1;
---
>               yy_1;
1025c1025
<              = &yy_1;
---
>               &;
1025c1025
<              = &yy_1;
---
>               ;
1025c1025
<              = &yy_1;
---
>               &yy_1
1025c1025
<              = &yy_1;
---
>               yy_1
1025c1025
<              = &yy_1;
---
>               &
1025c1025
<              = &yy_1;
---
>               
1025c1025
<              = &yy_1;
---
>              = yy_1;
(87.9 %, 24820 bytes)
1025,1026c1025,1026
<               ;
<             rll_i = ll_i;
---
>               
>               ll_i;
1025,1026c1025,1026
<               ;
<             rll_i = ll_i;
---
>               
>             rll_i = ;
1025,1026c1025,1026
<               ;
<             rll_i = ll_i;
---
>               
>              = ;
1025,1026c1025,1026
<               ;
<             rll_i = ll_i;
---
>               
>             rll_i  ;
1024a1025
>               
1026d1026
<             rll_i = ll_i;
1026c1026
<             rll_i = ll_i;
---
>              = ll_i;
1026c1026
<             rll_i = ll_i;
---
>               ll_i;
(87.9 %, 24809 bytes)
1026,1027c1026,1027
<               ;
<             while ( rll_i != rtmp ) ;
---
>               
>                != rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>              ( rll_i != rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>               rll_i != rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>              (  != rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>                != rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>              ( rll_i  rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>               rll_i  rtmp ) ;
1027c1027
<             while ( rll_i != rtmp ) ;
---
>              (   rtmp ) ;
(87.9 %, 24804 bytes)
1027c1027
<              ( rll_i != rtmp ) ;
---
>               rll_i != rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>                != rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>               rll_i  rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>                 rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>               rll_i !=  ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>                !=  ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>               rll_i   ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>                  ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (  != rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (   rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (  !=  ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (    ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (  != rtmp  ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (   rtmp  ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (  !=   ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              (     ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              ( rll_i  rtmp ) ;
1027c1027
<              ( rll_i != rtmp ) ;
---
>              ( rll_i   ) ;
(87.9 %, 24797 bytes)
1027c1027
<              (   rtmp ) ;
---
>              (     ;
1027c1027
<              (   rtmp ) ;
---
>              (    ) 
1027c1027
<              (   rtmp ) ;
---
>              (     
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (    ) ;
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (     ;
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (    ) 
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (     
>              = rtmp;
1027c1027
<              (   rtmp ) ;
---
>              (   rtmp  ;
1027c1027
<              (   rtmp ) ;
---
>              (   rtmp  
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  ;
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  ;
>             yy_0  rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  
>             yy_0  rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  ;
>               rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp  
>               rtmp;
1027c1027
<              (   rtmp ) ;
---
>              (   rtmp ) 
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>              = rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>             yy_0  rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>               rtmp;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>             yy_0 = ;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>              = ;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>             yy_0  ;
1027,1028c1027,1028
<              (   rtmp ) ;
<             yy_0 = rtmp;
---
>              (   rtmp ) 
>               ;
(87.9 %, 24792 bytes)
1028c1028
<              = rtmp;
---
>               ;
1028c1028
<              = rtmp;
---
>               rtmp
1028c1028
<              = rtmp;
---
>               
1028,1029c1028,1029
<              = rtmp;
<             j = ryy_j - &yy_0;
---
>               rtmp;
>              = ryy_j - &yy_0;
1028,1029c1028,1029
<              = rtmp;
<             j = ryy_j - &yy_0;
---
>               ;
>              = ryy_j - &yy_0;
1028,1029c1028,1029
<              = rtmp;
<             j = ryy_j - &yy_0;
---
>               rtmp
>              = ryy_j - &yy_0;
1028,1029c1028,1029
<              = rtmp;
<             j = ryy_j - &yy_0;
---
>               
>              = ryy_j - &yy_0;
(87.9 %, 24787 bytes)
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>              = ryy_j - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>             j  ryy_j - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>               ryy_j - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>             j =  - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>              =  - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>             j   - &yy_0;
1028,1029c1028,1029
<               ;
<             j = ryy_j - &yy_0;
---
>               
>                - &yy_0;
1029c1029
<             j = ryy_j - &yy_0;
---
>              = ryy_j - &yy_0;
1029c1029
<             j = ryy_j - &yy_0;
---
>               ryy_j - &yy_0;
(87.9 %, 24785 bytes)
1029c1029
<              = ryy_j - &yy_0;
---
>                - &yy_0;
1029c1029
<              = ryy_j - &yy_0;
---
>               ryy_j  &yy_0;
1029c1029
<              = ryy_j - &yy_0;
---
>                 &yy_0;
1029c1029
<              = ryy_j - &yy_0;
---
>               ryy_j - yy_0;
1029c1029
<              = ryy_j - &yy_0;
---
>                - yy_0;
(87.9 %, 24778 bytes)
1029c1029
<                 &yy_0;
---
>                 
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 yy_0;
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 ;
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 yy_0
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029c1029
<                 &yy_0;
---
>                 &;
1029c1029
<                 &yy_0;
---
>                 &
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &;
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &
>              = j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &;
>             mtfv_0  j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &
>             mtfv_0  j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &;
>               j+1; wr++; s->mtfFreq[j+1]++;
1029,1030c1029,1030
<                 &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>                 &
>               j+1; wr++; s->mtfFreq[j+1]++;
(87.9 %, 24766 bytes)
1030c1030
<              = j+1; wr++; s->mtfFreq[j+1]++;
---
>               ; wr++; s->mtfFreq[j+1]++;
1030c1030
<              = j+1; wr++; s->mtfFreq[j+1]++;
---
>              = +1; wr++; s->mtfFreq[j+1]++;
(87.9 %, 24762 bytes)
1030c1030
<               ; wr++; s->mtfFreq[j+1]++;
---
>                 s->mtfFreq[j+1]++;
1030c1030
<               ; wr++; s->mtfFreq[j+1]++;
---
>               ; ++; s->mtfFreq[j+1]++;
1030c1030
<               ; wr++; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq[j+1]++;
1030c1030
<               ; wr++; s->mtfFreq[j+1]++;
---
>               ; ++ s->mtfFreq[j+1]++;
1030c1030
<               ; wr++; s->mtfFreq[j+1]++;
---
>               ;  s->mtfFreq[j+1]++;
(87.9 %, 24758 bytes)
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  ->mtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  smtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  mtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  s->[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  ->[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  s[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ;  [j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; ->mtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; mtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; ->[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; [j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; ->mtfFreqj+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; mtfFreqj+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; ->j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; smtfFreq[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; smtfFreqj+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; sj+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; smtfFreq[+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s[+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; smtfFreq+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->[j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->j+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->[+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->[j1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->j1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->[1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreqj+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreqj1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreqj+]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq+]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreqj]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq[+1]++;
1030c1030
<               ; ; s->mtfFreq[j+1]++;
---
>               ; ; s->mtfFreq[1]++;
(87.9 %, 24757 bytes)
1030c1030
<               ; ; s->mtfFreq[+1]++;
---
>               ; ; s->mtfFreq[1]++;
1030c1030
<               ; ; s->mtfFreq[+1]++;
---
>               ; ; s->mtfFreq[]++;
1030c1030
<               ; ; s->mtfFreq[+1]++;
---
>               ; ; s->mtfFreq[1++;
1030c1030
<               ; ; s->mtfFreq[+1]++;
---
>               ; ; s->mtfFreq[++;
1030c1030
<               ; ; s->mtfFreq[+1]++;
---
>               ; ; s->mtfFreq[1];
(87.9 %, 24756 bytes)
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[]++;
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[++;
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[];
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[;
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[]++
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[++
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[]
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1++;
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1;
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1++
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1++;
>          
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1;
>          
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1++
>          
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1
>          
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1];
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1]
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1];
>          
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1]
>          
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1];
1033c1033
<       }
---
>       
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1]
1033c1033
<       }
---
>       
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1];
>          
1033c1033
<       }
---
>       
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1]
>          
1033c1033
<       }
---
>       
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1]++
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1]++
>          
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1]++
1033c1033
<       }
---
>       
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1]++
>          
1033c1033
<       }
---
>       
1030c1030
<               ; ; s->mtfFreq[1]++;
---
>               ; ; s->mtfFreq[1]++
1034c1034
<    }
---
>    
1030,1031c1030,1031
<               ; ; s->mtfFreq[1]++;
<          }
---
>               ; ; s->mtfFreq[1]++
>          
1034c1034
<    }
---
>    
(87.9 %, 24754 bytes)
1030c1030
<               ; ; s->mtfFreq[1];
---
>               ; ; s->mtfFreq[1]
1030,1031c1030,1031
<               ; ; s->mtfFreq[1];
<          }
---
>               ; ; s->mtfFreq[1]
>          
1030c1030
<               ; ; s->mtfFreq[1];
---
>               ; ; s->mtfFreq[1]
1033c1033
<       }
---
>       
1030,1031c1030,1031
<               ; ; s->mtfFreq[1];
<          }
---
>               ; ; s->mtfFreq[1]
>          
1033c1033
<       }
---
>       
1030c1030
<               ; ; s->mtfFreq[1];
---
>               ; ; s->mtfFreq[1]
1034c1034
<    }
---
>    
1030,1031c1030,1031
<               ; ; s->mtfFreq[1];
<          }
---
>               ; ; s->mtfFreq[1]
>          
1034c1034
<    }
---
>    
1030c1030
<               ; ; s->mtfFreq[1];
---
>               ; ; s->mtfFreq[1]
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1030,1031c1030,1031
<               ; ; s->mtfFreq[1];
<          }
---
>               ; ; s->mtfFreq[1]
>          
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1031c1031
<          }
---
>          
1031c1031
<          }
---
>          
1033c1033
<       }
---
>       
1031c1031
<          }
---
>          
1034c1034
<    }
---
>    
1031c1031
<          }
---
>          
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1031c1031
<          }
---
>          
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1031c1031
<          }
---
>          
1033c1033
<       }
---
>       
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1031c1031
<          }
---
>          
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1031c1031
<          }
---
>          
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1033c1033
<       }
---
>       
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1033c1033
<       }
---
>       
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1033c1033
<       }
---
>       
1036c1036
<    if (zPend > 0) 
---
>    if zPend > 0) 
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1036c1036
<    if (zPend > 0) 
---
>    if zPend > 0) 
1033c1033
<       }
---
>       
1036c1036
<    if (zPend > 0) 
---
>     zPend > 0) 
1033,1034c1033,1034
<       }
<    }
---
>       
>    
1036c1036
<    if (zPend > 0) 
---
>     zPend > 0) 
1034c1034
<    }
---
>    
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>    if zPend > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>     zPend > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>    if ( > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>     ( > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>    if  > 0) 
1034c1034
<    }
---
>    
1036c1036
<    if (zPend > 0) 
---
>      > 0) 
1036c1036
<    if (zPend > 0) 
---
>     (zPend > 0) 
1036c1036
<    if (zPend > 0) 
---
>     zPend > 0) 
1036c1036
<    if (zPend > 0) 
---
>     ( > 0) 
1036c1036
<    if (zPend > 0) 
---
>      > 0) 
1036c1036
<    if (zPend > 0) 
---
>     (zPend  0) 
1036c1036
<    if (zPend > 0) 
---
>     zPend  0) 
1036c1036
<    if (zPend > 0) 
---
>     (  0) 
1036c1036
<    if (zPend > 0) 
---
>       0) 
1036c1036
<    if (zPend > 0) 
---
>    if zPend > 0) 
1036c1036
<    if (zPend > 0) 
---
>    if  > 0) 
1036c1036
<    if (zPend > 0) 
---
>    if zPend  0) 
1036c1036
<    if (zPend > 0) 
---
>    if   0) 
1036c1036
<    if (zPend > 0) 
---
>    if zPend > ) 
1036c1036
<    if (zPend > 0) 
---
>    if  > ) 
1036c1036
<    if (zPend > 0) 
---
>    if zPend  ) 
1036c1036
<    if (zPend > 0) 
---
>    if   ) 
1036c1036
<    if (zPend > 0) 
---
>    if ( > 0) 
1036c1036
<    if (zPend > 0) 
---
>    if (  0) 
1036c1036
<    if (zPend > 0) 
---
>    if ( > ) 
1036c1036
<    if (zPend > 0) 
---
>    if (  ) 
1036c1036
<    if (zPend > 0) 
---
>    if ( > 0 
1036c1036
<    if (zPend > 0) 
---
>    if (  0 
1036c1036
<    if (zPend > 0) 
---
>    if ( >  
1036c1036
<    if (zPend > 0) 
---
>    if (   
1036c1036
<    if (zPend > 0) 
---
>    if (zPend  0) 
1036c1036
<    if (zPend > 0) 
---
>    if (zPend  ) 
(87.9 %, 24748 bytes)
1036c1036
<    if (  0) 
---
>    if (   
1036c1036
<    if (  0) 
---
>    if (  ) 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (   
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  ) 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0  EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (   
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0  EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  ) 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (   
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0  EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      EOB; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = ; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = ; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0  ; wr++; s->mtfFreq[EOB]++;
1036c1036
<    if (  0) 
---
>    if (  0 
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      ; wr++; s->mtfFreq[EOB]++;
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = EOB; wr++; s->mtfFreq[EOB]++;
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      EOB; wr++; s->mtfFreq[EOB]++;
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>     = ; wr++; s->mtfFreq[EOB]++;
1038c1038
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>      ; wr++; s->mtfFreq[EOB]++;
(87.9 %, 24741 bytes)
1038c1038
<      EOB; wr++; s->mtfFreq[EOB]++;
---
>       wr++; s->mtfFreq[EOB]++;
1038c1038
<      EOB; wr++; s->mtfFreq[EOB]++;
---
>      ; ++; s->mtfFreq[EOB]++;
1038c1038
<      EOB; wr++; s->mtfFreq[EOB]++;
---
>       ++; s->mtfFreq[EOB]++;
1038c1038
<      EOB; wr++; s->mtfFreq[EOB]++;
---
>      ; wr; s->mtfFreq[EOB]++;
(87.9 %, 24737 bytes)
1038c1038
<       wr++; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[EOB]++;
1038c1038
<       wr++; s->mtfFreq[EOB]++;
---
>       ++ s->mtfFreq[EOB]++;
1038c1038
<       wr++; s->mtfFreq[EOB]++;
---
>        s->mtfFreq[EOB]++;
(87.9 %, 24733 bytes)
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        ->mtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        smtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        mtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        s->[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        ->[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        s[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>        [EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; ->mtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; mtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; ->[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; [EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; ->mtfFreqEOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; mtfFreqEOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; ->EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; smtfFreq[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; smtfFreqEOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; sEOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; smtfFreq[]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s[]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; smtfFreq]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->[EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->EOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->[]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->[EOB++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->EOB++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->[++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreqEOB]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreqEOB++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreqEOB];
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq];
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreqEOB;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[]++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[++;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[];
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[;
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[]++
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[++
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[]
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[
1038c1038
<       ; s->mtfFreq[EOB]++;
---
>       ; s->mtfFreq[EOB++;
(87.9 %, 24726 bytes)
1038c1038
<       ; s->mtfFreq;
---
>       ; s->mtfFreq
1040c1040
<    s->nMTF = wr;
---
>     = wr;
1040c1040
<    s->nMTF = wr;
---
>    ->nMTF = wr;
1040c1040
<    s->nMTF = wr;
---
>    nMTF = wr;
1040c1040
<    s->nMTF = wr;
---
>    -> = wr;
1040c1040
<    s->nMTF = wr;
---
>     = wr;
1040c1040
<    s->nMTF = wr;
---
>    ->nMTF  wr;
1040c1040
<    s->nMTF = wr;
---
>    nMTF  wr;
1040c1040
<    s->nMTF = wr;
---
>    ->  wr;
1040c1040
<    s->nMTF = wr;
---
>      wr;
1040c1040
<    s->nMTF = wr;
---
>    snMTF = wr;
1040c1040
<    s->nMTF = wr;
---
>    s = wr;
(87.9 %, 24718 bytes)
1040,1041c1040
<      wr;
< }
---
>      
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
1040c1040
<      wr;
---
>      wr
1040,1041c1040,1041
<      wr;
< }
---
>      wr
> 
1040c1040
<      wr;
---
>      wr
1045c1045
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  0
1040,1041c1040
<      wr;
< }
---
>      wr
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
1040c1040
<      wr;
---
>      wr
1045c1045
< #define BZ_LESSER_ICOST  0
---
> # BZ_LESSER_ICOST  0
1040,1041c1040
<      wr;
< }
---
>      wr
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> # BZ_LESSER_ICOST  0
1040c1040
<      wr;
---
>      wr
1045c1045
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  0
1040,1041c1040
<      wr;
< }
---
>      wr
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
>  BZ_LESSER_ICOST  0
1041c1041
< }
---
> 
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> # BZ_LESSER_ICOST  0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
>  BZ_LESSER_ICOST  0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> #define   0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> define   0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
> #   0
1041d1040
< }
1045c1044,1045
< #define BZ_LESSER_ICOST  0
---
> 
>    0
1045c1045
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  0
1045c1045
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  0
1045c1045
< #define BZ_LESSER_ICOST  0
---
> define   0
1045c1045
< #define BZ_LESSER_ICOST  0
---
>    0
1045c1045
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  
1045c1045
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  
1045c1045
< #define BZ_LESSER_ICOST  0
---
> define   
1045c1045
< #define BZ_LESSER_ICOST  0
---
>    
1045c1045
< #define BZ_LESSER_ICOST  0
---
> # BZ_LESSER_ICOST  0
1045c1045
< #define BZ_LESSER_ICOST  0
---
> #   0
(87.9 %, 24695 bytes)
1046c1046
< #define BZ_GREATER_ICOST 5
---
>   
1046c1046
< #define BZ_GREATER_ICOST 5
---
> # BZ_GREATER_ICOST 5
1046c1046
< #define BZ_GREATER_ICOST 5
---
> #  5
(88.0 %, 24671 bytes)
1070c1070
< #define RETURNrrr                               \
---
>                                 
1070c1070
< #define RETURNrrr                               \
---
> # RETURNrrr                               \
1070c1070
< #define RETURNrrr                               \
---
> #                                \
1070c1070
< #define RETURNrrr                               \
---
> # RETURNrrr                               
1070c1070
< #define RETURNrrr                               \
---
> #                                
(88.0 %, 24654 bytes)
1071c1071
<    ;
---
>    
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
>  ,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> define GET_BITSlll,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
>  GET_BITSlll,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> define ,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
>  ,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> define GET_BITSlllvvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
>  GET_BITSlllvvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> define vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
>  vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # GET_BITSlll,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # ,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # GET_BITSlllvvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # GET_BITSlll,,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # ,,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # GET_BITSlll,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> # ,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define ,vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define vvv,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define ,,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define ,nnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define ,vvvnnn                     \
1073c1073
< #define GET_BITSlll,vvv,nnn                     \
---
> #define vvvnnn                     \
(88.0 %, 24642 bytes)
1073c1073
< #define vvv,nnn                     \
---
> #define nnn                     \
1073c1073
< #define vvv,nnn                     \
---
> #define ,                     \
1073c1073
< #define vvv,nnn                     \
---
> #define                      \
1073c1073
< #define vvv,nnn                     \
---
> #define ,nnn                     
(88.0 %, 24638 bytes)
1073c1073
< #define nnn                     \
---
> #define                      
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      \
>     lll: s->state = lll;                      \
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      
>     lll: s->state = lll;                      \
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      \
>    case : s->state = lll;                      \
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      
>    case : s->state = lll;                      \
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      \
>     : s->state = lll;                      \
1073,1074c1073,1074
< #define nnn                     \
<    case lll: s->state = lll;                      \
---
> #define                      
>     : s->state = lll;                      \
(88.0 %, 24631 bytes)
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>     lll s->state = lll;                      \
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>      s->state = lll;                      \
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>     lll: ->state = lll;                      \
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>     : ->state = lll;                      \
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>     lll ->state = lll;                      \
1073,1074c1073,1074
< #define                      \
<     lll: s->state = lll;                      \
---
> #define                      
>      ->state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>     : s->state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>      s->state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>     : ->state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>      ->state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>     : sstate = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>      sstate = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>     : state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>      state = lll;                      \
1074c1074
<     lll: s->state = lll;                      \
---
>     lll s->state = lll;                      \
(88.0 %, 24625 bytes)
1074c1074
<      sstate = lll;                      \
---
>        lll                      \
1074c1074
<      sstate = lll;                      \
---
>       =                       \
1074c1074
<      sstate = lll;                      \
---
>                              \
1074c1074
<      sstate = lll;                      \
---
>      sstate  lll;                      \
(88.0 %, 24617 bytes)
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>                              
>    while  
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>                              \
>      
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>                              
>      
1074c1074
<        lll                      \
---
>        lll                      
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>     True 
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>    while  
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>      
1074c1074
<        lll                      \
---
>        lll                      
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define GET_UCHARlll,uuu                        \
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>     True 
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define GET_UCHARlll,uuu                        \
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>    while  
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define GET_UCHARlll,uuu                        \
1074,1075c1074,1075
<        lll                      \
<    while True 
---
>        lll                      
>      
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define GET_UCHARlll,uuu                        \
1075c1075
<    while True 
---
>     True 
(88.0 %, 24607 bytes)
1077c1077
< #define GET_UCHARlll,uuu                        \
---
>  ,uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define GET_UCHARllluuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
>  GET_UCHARllluuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> define uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
>  uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # GET_UCHARlll,uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # ,uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # GET_UCHARllluuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # GET_UCHARlll,                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # ,                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> # GET_UCHARlll                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> #                         \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> #define ,uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> #define uuu                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> #define ,                        \
1077c1077
< #define GET_UCHARlll,uuu                        \
---
> #define                         \
(88.0 %, 24594 bytes)
1077c1077
< #define uuu                        \
---
> #define                         
1077,1078c1077,1078
< #define uuu                        \
<    GET_BITSlll,uuu,8
---
> #define                         \
>    ,uuu,8
1077,1078c1077,1078
< #define uuu                        \
<    GET_BITSlll,uuu,8
---
> #define                         
>    ,uuu,8
1077,1078c1077,1078
< #define uuu                        \
<    GET_BITSlll,uuu,8
---
> #define                         \
>    GET_BITSllluuu,8
1077,1078c1077,1078
< #define uuu                        \
<    GET_BITSlll,uuu,8
---
> #define                         
>    GET_BITSllluuu,8
1077,1078c1077,1078
< #define uuu                        \
<    GET_BITSlll,uuu,8
---
> #define                         \
>    uuu,8
(88.0 %, 24590 bytes)
1077,1078c1077,1078
< #define                         \
<    GET_BITSllluuu,8
---
> #define                         
>    GET_BITSllluuu,
1077,1078c1077,1078
< #define                         \
<    GET_BITSllluuu,8
---
> #define                         
>    ,
1077,1078c1077,1078
< #define                         \
<    GET_BITSllluuu,8
---
> #define                         
>    GET_BITSllluuu
1077,1078c1077,1078
< #define                         \
<    GET_BITSllluuu,8
---
> #define                         
>    
1078c1078
<    GET_BITSllluuu,8
---
>    ,8
1078c1078
<    GET_BITSllluuu,8
---
>    8
1078c1078
<    GET_BITSllluuu,8
---
>    ,
1078c1078
<    GET_BITSllluuu,8
---
>    
1078c1078
<    GET_BITSllluuu,8
---
>    ,8
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITlll,uuu                          \
1078c1078
<    GET_BITSllluuu,8
---
>    8
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITlll,uuu                          \
1078c1078
<    GET_BITSllluuu,8
---
>    ,
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITlll,uuu                          \
1078c1078
<    GET_BITSllluuu,8
---
>    
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITlll,uuu                          \
1078c1078
<    GET_BITSllluuu,8
---
>    GET_BITSllluuu8
1078c1078
<    GET_BITSllluuu,8
---
>    GET_BITSllluuu
(88.0 %, 24589 bytes)
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITlll,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
>  GET_BITlll,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> define ,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
>  ,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> define GET_BITllluuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
>  GET_BITllluuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> define uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
>  uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # GET_BITlll,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # ,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # GET_BITllluuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # GET_BITlll,                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # ,                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> # GET_BITlll                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> #                           \
1080c1080
< #define GET_BITlll,uuu                          \
---
> #define ,uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> #define uuu                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> #define ,                          \
1080c1080
< #define GET_BITlll,uuu                          \
---
> #define                           \
(88.0 %, 24578 bytes)
1080c1080
< #define uuu                          \
---
> #define                           
1080,1081c1080,1081
< #define uuu                          \
<    GET_BITSlll,uuu,1
---
> #define                           \
>    ,uuu,1
1080,1081c1080,1081
< #define uuu                          \
<    GET_BITSlll,uuu,1
---
> #define                           
>    ,uuu,1
1080,1081c1080,1081
< #define uuu                          \
<    GET_BITSlll,uuu,1
---
> #define                           \
>    GET_BITSllluuu,1
1080,1081c1080,1081
< #define uuu                          \
<    GET_BITSlll,uuu,1
---
> #define                           
>    GET_BITSllluuu,1
1080,1081c1080,1081
< #define uuu                          \
<    GET_BITSlll,uuu,1
---
> #define                           \
>    uuu,1
(88.0 %, 24574 bytes)
1080,1081c1080,1081
< #define                           \
<    GET_BITSllluuu,1
---
> #define                           
>    GET_BITSllluuu,
1080,1081c1080,1081
< #define                           \
<    GET_BITSllluuu,1
---
> #define                           
>    ,
1080,1081c1080,1081
< #define                           \
<    GET_BITSllluuu,1
---
> #define                           
>    GET_BITSllluuu
1080,1081c1080,1081
< #define                           \
<    GET_BITSllluuu,1
---
> #define                           
>    
1081c1081
<    GET_BITSllluuu,1
---
>    ,1
1081c1081
<    GET_BITSllluuu,1
---
>    1
1081c1081
<    GET_BITSllluuu,1
---
>    ,
1081c1081
<    GET_BITSllluuu,1
---
>    
1081c1081
<    GET_BITSllluuu,1
---
>    ,1
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1,label2,lval           \
1081c1081
<    GET_BITSllluuu,1
---
>    1
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1,label2,lval           \
1081c1081
<    GET_BITSllluuu,1
---
>    ,
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1,label2,lval           \
1081c1081
<    GET_BITSllluuu,1
---
>    
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1,label2,lval           \
1081c1081
<    GET_BITSllluuu,1
---
>    GET_BITSllluuu1
1081c1081
<    GET_BITSllluuu,1
---
>    GET_BITSllluuu
(88.0 %, 24573 bytes)
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
>  GET_MTF_VALlabel1,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define ,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
>  ,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define GET_MTF_VALlabel1label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
>  GET_MTF_VALlabel1label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> define label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
>  label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # GET_MTF_VALlabel1,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # ,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # GET_MTF_VALlabel1label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # GET_MTF_VALlabel1,,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # ,,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # GET_MTF_VALlabel1,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> # ,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define ,label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define label2,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define ,,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define ,lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define ,label2lval           \
1084c1084
< #define GET_MTF_VALlabel1,label2,lval           \
---
> #define label2lval           \
(88.0 %, 24555 bytes)
1084c1084
< #define label2,lval           \
---
> #define lval           \
1084c1084
< #define label2,lval           \
---
> #define ,           \
1084c1084
< #define label2,lval           \
---
> #define            \
1084c1084
< #define label2,lval           \
---
> #define ,lval           
1084c1084
< #define label2,lval           \
---
> #define lval           
(88.0 %, 24548 bytes)
1084c1084
< #define lval           \
---
> #define            
1084c1084,1085
< #define lval           \
---
> #define            \
> 
1111d1111
< static
1084c1084,1085
< #define lval           \
---
> #define            
> 
1111d1111
< static
1084c1084
< #define lval           \
---
> #define            \
1112c1112
< int bz_config_ok ( void )
---
>  bz_config_ok ( void )
1084c1084
< #define lval           \
---
> #define            
1112c1112
< int bz_config_ok ( void )
---
>  bz_config_ok ( void )
1084c1084
< #define lval           \
---
> #define            \
1111,1112c1111,1112
< static
< int bz_config_ok ( void )
---
> 
>  bz_config_ok ( void )
1084c1084
< #define lval           \
---
> #define            
1111,1112c1111,1112
< static
< int bz_config_ok ( void )
---
> 
>  bz_config_ok ( void )
1084c1084
< #define lval           \
---
> #define lval           
1084c1084,1085
< #define lval           \
---
> #define lval           
> 
1111d1111
< static
(88.0 %, 24547 bytes)
1111c1111
< static
---
> 
1111,1112c1111,1112
< static
< int bz_config_ok ( void )
---
> 
>  bz_config_ok ( void )
1111,1112c1111,1112
< static
< int bz_config_ok ( void )
---
> 
> int  ( void )
(88.0 %, 24541 bytes)
1112c1112
< int bz_config_ok ( void )
---
>  bz_config_ok ( void )
1112c1112
< int bz_config_ok ( void )
---
>   ( void )
1112c1112
< int bz_config_ok ( void )
---
>  bz_config_ok  void )
1112c1112
< int bz_config_ok ( void )
---
>    void )
1112c1112
< int bz_config_ok ( void )
---
>  bz_config_ok (  )
(88.0 %, 24538 bytes)
1112c1112
<  bz_config_ok ( void )
---
>   ( void )
1112c1112
<  bz_config_ok ( void )
---
>    void )
1112c1112
<  bz_config_ok ( void )
---
>   (  )
1112c1112
<  bz_config_ok ( void )
---
>     )
1112c1112
<  bz_config_ok ( void )
---
>   ( void 
1112c1112
<  bz_config_ok ( void )
---
>    void 
1112c1112
<  bz_config_ok ( void )
---
>   (  
1112c1112
<  bz_config_ok ( void )
---
>     
(88.0 %, 24524 bytes)
1112,1113c1112,1113
<    void 
< ;
---
>     
> 
1118c1118
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> * default_bzalloc ( void* opaque, Int32 items, Int32 size )
1112c1112
<    void 
---
>     
1117,1118c1117,1118
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> 
> * default_bzalloc ( void* opaque, Int32 items, Int32 size )
(88.0 %, 24515 bytes)
1117,1118c1117,1118
< static
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> 
>  default_bzalloc  void* opaque, Int32 items, Int32 size )
1117,1118c1117,1118
< static
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> 
> *   void* opaque, Int32 items, Int32 size )
1117,1118c1117,1118
< static
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> 
>    void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   ( void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   ( * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> *  ( void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> *   void* opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> *  ( * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> *   * opaque, Int32 items, Int32 size )
1118c1118
< * default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> *  ( void opaque, Int32 items, Int32 size )
(88.0 %, 24514 bytes)
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   ( void* opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    void* opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   ( * opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    * opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   ( void opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    void opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>   (  opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>     opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  void* opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  * opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  void opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc   opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  void* , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  * , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc  void , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc   , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( * opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc (  opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( * , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc (  , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( * opaque Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc (  opaque Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( *  Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc (   Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void opaque, Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void , Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void opaque Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void  Int32 items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void opaque,  items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void ,  items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void opaque  items, Int32 size )
1118c1118
<  default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>  default_bzalloc ( void   items, Int32 size )
(88.0 %, 24502 bytes)
1118c1118
<  default_bzalloc (   Int32 items, Int32 size )
---
>  default_bzalloc (      size )
1118c1118
<  default_bzalloc (   Int32 items, Int32 size )
---
>  default_bzalloc (   Int32 , Int32 size )
1118c1118
<  default_bzalloc (   Int32 items, Int32 size )
---
>  default_bzalloc (   Int32  Int32 size )
1118c1118
<  default_bzalloc (   Int32 items, Int32 size )
---
>  default_bzalloc (   Int32 ,  size )
1118c1118
<  default_bzalloc (   Int32 items, Int32 size )
---
>  default_bzalloc (   Int32   size )
(88.0 %, 24497 bytes)
1118c1118
<  default_bzalloc (   Int32 , Int32 size )
---
>  default_bzalloc (   Int32  Int32 size )
1118c1118
<  default_bzalloc (   Int32 , Int32 size )
---
>  default_bzalloc (   Int32   size )
1118c1118
<  default_bzalloc (   Int32 , Int32 size )
---
>  default_bzalloc (   Int32  Int32  )
(88.0 %, 24491 bytes)
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32    
1118,1119c1118,1119
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32    )
> 
1118,1119c1118,1119
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32    
> 
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32    )
1121c1121
< static
---
> 
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32    
1121c1121
< static
---
> 
1118,1119c1118,1120
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32    )
> 
> 
1121d1121
< static
1118,1119c1118,1120
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32    
> 
> 
1121d1121
< static
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32   size 
1118,1119c1118,1119
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32   size 
> 
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32   size 
1121c1121
< static
---
> 
1118,1119c1118,1120
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32   size 
> 
> 
1121d1121
< static
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32   size 
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void* opaque, void* addr )
1118,1119c1118,1119
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32   size 
> 
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void* opaque, void* addr )
1118c1118
<  default_bzalloc (   Int32   size )
---
>  default_bzalloc (   Int32   size 
1121,1122c1121,1122
< static
< void default_bzfree ( void* opaque, void* addr )
---
> 
>  default_bzfree ( void* opaque, void* addr )
1118,1119c1118
<  default_bzalloc (   Int32   size )
< ;
---
>  default_bzalloc (   Int32   size 
1121,1122c1120,1122
< static
< void default_bzfree ( void* opaque, void* addr )
---
> 
> 
>  default_bzfree ( void* opaque, void* addr )
1119c1119
< ;
---
> 
1119d1118
< ;
1121c1120,1121
< static
---
> 
> 
1119c1119
< ;
---
> 
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void* opaque, void* addr )
1119d1118
< ;
1121,1122c1120,1122
< static
< void default_bzfree ( void* opaque, void* addr )
---
> 
> 
>  default_bzfree ( void* opaque, void* addr )
(88.1 %, 24481 bytes)
1118c1118
<  default_bzalloc (   Int32    )
---
>  default_bzalloc (   Int32    
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void  ( void* opaque, void* addr )
1118,1119c1118
<  default_bzalloc (   Int32    )
< ;
---
>  default_bzalloc (   Int32    
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
> void  ( void* opaque, void* addr )
1118c1118
<  default_bzalloc (   Int32    )
---
>  default_bzalloc (   Int32    
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>   ( void* opaque, void* addr )
1118,1119c1118
<  default_bzalloc (   Int32    )
< ;
---
>  default_bzalloc (   Int32    
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
>   ( void* opaque, void* addr )
1119c1119
< ;
---
> 
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
>  default_bzfree ( void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
> void  ( void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
>   ( void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
> void default_bzfree  void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
>  default_bzfree  void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
> void   void* opaque, void* addr )
1119d1118
< ;
1122c1121,1122
< void default_bzfree ( void* opaque, void* addr )
---
> 
>    void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>   ( void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>    void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>   ( * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
>    * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void  ( void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void   void* opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void  ( * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void   * opaque, void* addr )
1122c1122
< void default_bzfree ( void* opaque, void* addr )
---
> void  ( void opaque, void* addr )
(88.1 %, 24477 bytes)
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>   ( void* opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>    void* opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>   ( * opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>    * opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>   ( void opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>    void opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>   (  opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>     opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  void* opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  * opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  void opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree   opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  void* , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  * , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree  void , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree   , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( * opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree (  opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( * , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree (  , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( * opaque void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree (  opaque void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( *  void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree (   void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void opaque, void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void , void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void opaque void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void  void* addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void opaque, * addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void , * addr )
1122c1122
<  default_bzfree ( void* opaque, void* addr )
---
>  default_bzfree ( void opaque * addr )
(88.1 %, 24465 bytes)
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (     
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (   void addr )
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (   void  )
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (   void addr 
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (   void  
1122,1123c1122,1123
<  default_bzfree (   void* addr )
< ;
---
>  default_bzfree (   void addr )
> 
1122,1123c1122,1123
<  default_bzfree (   void* addr )
< ;
---
>  default_bzfree (   void  )
> 
1122,1123c1122,1123
<  default_bzfree (   void* addr )
< ;
---
>  default_bzfree (   void addr 
> 
1122,1123c1122,1123
<  default_bzfree (   void* addr )
< ;
---
>  default_bzfree (   void  
> 
1122c1122
<  default_bzfree (   void* addr )
---
>  default_bzfree (   void*  )
(88.1 %, 24460 bytes)
1122,1123c1122,1123
<  default_bzfree (   void  )
< ;
---
>  default_bzfree (   void  
> 
1122c1122
<  default_bzfree (   void  )
---
>  default_bzfree (   void  
1127c1127
< static
---
> 
1122,1123c1122,1124
<  default_bzfree (   void  )
< ;
---
>  default_bzfree (   void  
> 
> 
1127d1127
< static
1122c1122
<  default_bzfree (   void  )
---
>  default_bzfree (   void  
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block ( EState* s )
1122,1123c1122,1123
<  default_bzfree (   void  )
< ;
---
>  default_bzfree (   void  
> 
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block ( EState* s )
1122c1122
<  default_bzfree (   void  )
---
>  default_bzfree (   void  
1127,1128c1127,1128
< static
< void prepare_new_block ( EState* s )
---
> 
>  prepare_new_block ( EState* s )
1122,1123c1122
<  default_bzfree (   void  )
< ;
---
>  default_bzfree (   void  
1127,1128c1126,1128
< static
< void prepare_new_block ( EState* s )
---
> 
> 
>  prepare_new_block ( EState* s )
1123c1123
< ;
---
> 
1123d1122
< ;
1127c1126,1127
< static
---
> 
> 
1123c1123
< ;
---
> 
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block ( EState* s )
1123d1122
< ;
1127,1128c1126,1128
< static
< void prepare_new_block ( EState* s )
---
> 
> 
>  prepare_new_block ( EState* s )
1123c1123
< ;
---
> 
1128c1128
< void prepare_new_block ( EState* s )
---
> void  ( EState* s )
1123d1122
< ;
1127,1128c1126,1128
< static
< void prepare_new_block ( EState* s )
---
> 
> 
> void  ( EState* s )
1123c1123
< ;
---
> 
1128c1128
< void prepare_new_block ( EState* s )
---
>   ( EState* s )
1123d1122
< ;
1127,1128c1126,1128
< static
< void prepare_new_block ( EState* s )
---
> 
> 
>   ( EState* s )
1127c1127
< static
---
> 
1127,1128c1127,1128
< static
< void prepare_new_block ( EState* s )
---
> 
>  prepare_new_block ( EState* s )
(88.1 %, 24454 bytes)
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block ( EState* s )
1128c1128
< void prepare_new_block ( EState* s )
---
>   ( EState* s )
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block  EState* s )
1128c1128
< void prepare_new_block ( EState* s )
---
>    EState* s )
1128c1128
< void prepare_new_block ( EState* s )
---
>  prepare_new_block ( * s )
1128c1128
< void prepare_new_block ( EState* s )
---
>   ( * s )
(88.1 %, 24450 bytes)
1128c1128
<  prepare_new_block ( EState* s )
---
>   ( EState* s )
1128c1128
<  prepare_new_block ( EState* s )
---
>    EState* s )
1128c1128
<  prepare_new_block ( EState* s )
---
>   ( * s )
1128c1128
<  prepare_new_block ( EState* s )
---
>    * s )
1128c1128
<  prepare_new_block ( EState* s )
---
>   ( EState s )
1128c1128
<  prepare_new_block ( EState* s )
---
>    EState s )
1128c1128
<  prepare_new_block ( EState* s )
---
>   (  s )
(88.1 %, 24427 bytes)
1128c1128
<   ( * s )
---
>    *  )
1128c1128
<   ( * s )
---
>      )
1128c1128
<   ( * s )
---
>    * s 
1128c1128
<   ( * s )
---
>     s 
1128c1128
<   ( * s )
---
>    *  
(88.1 %, 24425 bytes)
1128c1128
<    * s 
---
>     s 
1136c1136
< static
---
> 
1128c1128
<    * s 
---
>      
1136c1136
< static
---
> 
1128,1129c1128,1130
<    * s 
< ;
---
>     s 
> 
> 
1136d1136
< static
1128,1129c1128,1130
<    * s 
< ;
---
>      
> 
> 
1136d1136
< static
(88.1 %, 24418 bytes)
1128c1128
<     s 
---
>      
1137c1137
< Bool isempty_RL ( EState* s )
---
> Bool  ( EState* s )
1128,1129c1128
<     s 
< ;
---
>      
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
> Bool  ( EState* s )
1128c1128
<     s 
---
>      
1137c1137
< Bool isempty_RL ( EState* s )
---
>   ( EState* s )
1128,1129c1128
<     s 
< ;
---
>      
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
>   ( EState* s )
1129c1129
< ;
---
> 
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
>  isempty_RL ( EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
> Bool  ( EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
>   ( EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
> Bool isempty_RL  EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
>  isempty_RL  EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
> Bool   EState* s )
1129d1128
< ;
1137c1136,1137
< Bool isempty_RL ( EState* s )
---
> 
>    EState* s )
1137c1137
< Bool isempty_RL ( EState* s )
---
>  isempty_RL ( EState* s )
(88.1 %, 24403 bytes)
1137c1137
<   ( EState* s )
---
>     s )
1137c1137
<   ( EState* s )
---
>    EState*  )
1137c1137
<   ( EState* s )
---
>    *  )
1137c1137
<   ( EState* s )
---
>    EState  )
1137c1137
<   ( EState* s )
---
>      )
1137c1137
<   ( EState* s )
---
>   ( * s )
1137c1137
<   ( EState* s )
---
>   (  s )
1137c1137
<   ( EState* s )
---
>   ( *  )
1137c1137
<   ( EState* s )
---
>   (   )
1137c1137
<   ( EState* s )
---
>   ( * s 
1137c1137
<   ( EState* s )
---
>   (  s 
1137c1137
<   ( EState* s )
---
>   ( *  
1137c1137
<   ( EState* s )
---
>   (   
1137c1137
<   ( EState* s )
---
>   ( EState s )
(88.1 %, 24395 bytes)
1137,1138c1137
<   (   )
< ;
---
>   (   
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
>  BZ_APIBZ2_bzCompressInit 
1137c1137
<   (   )
---
>   (   
1142c1142
< int BZ_APIBZ2_bzCompressInit 
---
> int  
1137,1138c1137
<   (   )
< ;
---
>   (   
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
> int  
1137c1137
<   (   )
---
>   (   
1142c1142
< int BZ_APIBZ2_bzCompressInit 
---
>   
1137,1138c1137
<   (   )
< ;
---
>   (   
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
>   
1138c1138
< ;
---
> 
1138d1137
< ;
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
>  BZ_APIBZ2_bzCompressInit 
1138d1137
< ;
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
> int  
1138d1137
< ;
1142c1141,1142
< int BZ_APIBZ2_bzCompressInit 
---
> 
>   
1138c1138
< ;
---
> 
1143c1143
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1138d1137
< ;
1142,1143c1141,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> 
>  BZ_APIBZ2_bzCompressInit 
>                      bz_stream* strm, 
1138d1137
< ;
1142,1143c1141,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> 
> int  
>                      bz_stream* strm, 
1138d1137
< ;
1142,1143c1141,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> 
>   
>                      bz_stream* strm, 
1142c1142
< int BZ_APIBZ2_bzCompressInit 
---
>  BZ_APIBZ2_bzCompressInit 
1142c1142
< int BZ_APIBZ2_bzCompressInit 
---
>   
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzCompressInit 
>                      bz_stream* strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      bz_stream* strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzCompressInit 
>                     ( * strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     ( * strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzCompressInit 
>                      * strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      * strm, 
1142c1142
< int BZ_APIBZ2_bzCompressInit 
---
> int  
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> int  
>                      bz_stream* strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> int  
>                     ( * strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> int  
>                      * strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> int  
>                     ( bz_stream strm, 
1142,1143c1142,1143
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> int  
>                      bz_stream strm, 
(88.1 %, 24392 bytes)
1142c1142
<  BZ_APIBZ2_bzCompressInit 
---
>   
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      bz_stream* strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     ( * strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      * strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     ( bz_stream strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      bz_stream strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     (  strm, 
1142,1143c1142,1143
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                       strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                      * strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                      bz_stream strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                       strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                      bz_stream* , 
1143c1143
<                     ( bz_stream* strm, 
---
>                      * , 
1143c1143
<                     ( bz_stream* strm, 
---
>                      bz_stream , 
1143c1143
<                     ( bz_stream* strm, 
---
>                       , 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( * strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                     (  strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( * , 
1143c1143
<                     ( bz_stream* strm, 
---
>                     (  , 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( * strm 
1143c1143
<                     ( bz_stream* strm, 
---
>                     (  strm 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( *  
1143c1143
<                     ( bz_stream* strm, 
---
>                     (   
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm, 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream , 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream  
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream strm, 
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream , 
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream strm 
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream  
>                              blockSize100k,
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream* , 
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream*  
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                      int        ,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                      int        ,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                              ,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                              ,
1143c1143
<                     ( bz_stream* strm, 
---
>                     ( bz_stream* strm 
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              blockSize100k,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        ,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              ,
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        blockSize100k
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              blockSize100k
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        
1143,1144c1143,1144
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              
1144c1144
<                      int        blockSize100k,
---
>                              blockSize100k,
1144c1144
<                      int        blockSize100k,
---
>                              ,
1144c1144
<                      int        blockSize100k,
---
>                              blockSize100k
1144c1144
<                      int        blockSize100k,
---
>                              
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              blockSize100k,
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              ,
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              blockSize100k
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              
>                              verbosity,
1144c1144
<                      int        blockSize100k,
---
>                      int        ,
1144c1144
<                      int        blockSize100k,
---
>                      int        
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                      int        ,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                      int        ,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                              ,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                              ,
1144c1144
<                      int        blockSize100k,
---
>                      int        blockSize100k
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              verbosity,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        ,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              ,
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        verbosity
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              verbosity
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        
1144,1145c1144,1145
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              
1145c1145
<                      int        verbosity,
---
>                              verbosity,
1145c1145
<                      int        verbosity,
---
>                              ,
1145c1145
<                      int        verbosity,
---
>                              verbosity
1145c1145
<                      int        verbosity,
---
>                              
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                              verbosity,
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                              ,
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                              verbosity
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                              
>                              workFactor )
1145c1145
<                      int        verbosity,
---
>                      int        ,
1145c1145
<                      int        verbosity,
---
>                      int        
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                      int         )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                      int         )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                               )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                               )
1145c1145
<                      int        verbosity,
---
>                      int        verbosity
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                              workFactor )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int         )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                               )
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int        workFactor 
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                              workFactor 
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int         
1145,1146c1145,1146
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                               
1146c1146
<                      int        workFactor )
---
>                              workFactor )
1146c1146
<                      int        workFactor )
---
>                               )
1146c1146
<                      int        workFactor )
---
>                              workFactor 
1146c1146
<                      int        workFactor )
---
>                               
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                              workFactor )
> 
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                               )
> 
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                              workFactor 
> 
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                               
> 
1146c1146
<                      int        workFactor )
---
>                      int         )
1146c1146
<                      int        workFactor )
---
>                      int         
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                      int         )
> 
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                      int         
> 
1146c1146
<                      int        workFactor )
---
>                      int         )
1148c1148
<    Int32   n;
---
>       n;
1146c1146
<                      int        workFactor )
---
>                      int         
1148c1148
<    Int32   n;
---
>       n;
1146,1148c1146,1148
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         )
> 
>       n;
1146,1148c1146,1148
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         
> 
>       n;
1146c1146
<                      int        workFactor )
---
>                      int        workFactor 
1146,1147c1146,1147
<                      int        workFactor )
< {
---
>                      int        workFactor 
> 
1146c1146
<                      int        workFactor )
---
>                      int        workFactor 
1148c1148
<    Int32   n;
---
>       n;
1146,1148c1146,1148
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       n;
1146c1146
<                      int        workFactor )
---
>                      int        workFactor 
1148c1148
<    Int32   n;
---
>    Int32   ;
1146,1148c1146,1148
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>    Int32   ;
1146c1146
<                      int        workFactor )
---
>                      int        workFactor 
1148c1148
<    Int32   n;
---
>       ;
1146,1148c1146,1148
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       ;
1147c1147
< {
---
> 
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>       n;
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>    Int32   ;
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>       ;
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>    Int32   n
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>       n
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>    Int32   
1147,1148c1147,1148
< {
<    Int32   n;
---
> 
>       
1148c1148
<    Int32   n;
---
>       n;
1148c1148
<    Int32   n;
---
>       ;
1148c1148
<    Int32   n;
---
>       n
1148c1148
<    Int32   n;
---
>       
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>       n;
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>       ;
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>       n
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>       
>    * s;
1148c1148
<    Int32   n;
---
>    Int32   ;
1148c1148
<    Int32   n;
---
>    Int32   
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>    EState s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   
>    EState s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>     s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   
>     s;
1148c1148
<    Int32   n;
---
>    Int32   n
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    * s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>     s;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState* ;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    * ;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState ;
1148,1149c1148,1149
<    Int32   n;
<    EState* s;
---
>    Int32   n
>     ;
1149c1149
<    EState* s;
---
>    * s;
1149c1149
<    EState* s;
---
>     s;
1149c1149
<    EState* s;
---
>    * ;
1149c1149
<    EState* s;
---
>     ;
1149c1149
<    EState* s;
---
>    * s
1149c1149
<    EState* s;
---
>     s
1149c1149
<    EState* s;
---
>    * 
1149c1149
<    EState* s;
---
>     
1149c1149
<    EState* s;
---
>    EState s;
1149c1149
<    EState* s;
---
>    EState ;
1149c1149
<    EState* s;
---
>    EState s
1149c1149
<    EState* s;
---
>    EState 
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState s;
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState ;
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState s
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState 
>     *s_8;
1149c1149
<    EState* s;
---
>    EState* ;
1149c1149
<    EState* s;
---
>    EState* 
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* ;
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* 
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* ;
>    UInt32 s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* 
>    UInt32 s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* ;
>     s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* 
>     s_8;
1149c1149
<    EState* s;
---
>    EState* s
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>     *s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>    UInt32 s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>     s_8;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>    UInt32 *;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>     *;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>    UInt32 ;
1149,1150c1149,1150
<    EState* s;
<    UInt32 *s_8;
---
>    EState* s
>     ;
1150c1150
<    UInt32 *s_8;
---
>     *s_8;
1150c1150
<    UInt32 *s_8;
---
>     s_8;
1150c1150
<    UInt32 *s_8;
---
>     *;
1150c1150
<    UInt32 *s_8;
---
>     ;
1150c1150
<    UInt32 *s_8;
---
>     *s_8
1150c1150
<    UInt32 *s_8;
---
>     s_8
1150c1150
<    UInt32 *s_8;
---
>     *
1150c1150
<    UInt32 *s_8;
---
>     
1150c1150
<    UInt32 *s_8;
---
>    UInt32 s_8;
1150c1150
<    UInt32 *s_8;
---
>    UInt32 ;
1150c1150
<    UInt32 *s_8;
---
>    UInt32 s_8
1150c1150
<    UInt32 *s_8;
---
>    UInt32 
1150,1151c1150,1151
<    UInt32 *s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8;
>     short *s_10;
(88.1 %, 24391 bytes)
1150c1150
<    UInt32 s_8;
---
>    UInt32 ;
1150c1150
<    UInt32 s_8;
---
>    UInt32 
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 ;
>     short *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 
>     short *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 ;
>    unsigned  *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 
>    unsigned  *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 ;
>      *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 
>      *s_10;
1150c1150
<    UInt32 s_8;
---
>    UInt32 s_8
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>     short *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>    unsigned  *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>      *s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>    unsigned short s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>     short s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>    unsigned  s_10;
1150,1151c1150,1151
<    UInt32 s_8;
<    unsigned short *s_10;
---
>    UInt32 s_8
>      s_10;
1151c1151
<    unsigned short *s_10;
---
>     short *s_10;
1151c1151
<    unsigned short *s_10;
---
>      *s_10;
1151c1151
<    unsigned short *s_10;
---
>     short s_10;
(88.1 %, 24383 bytes)
1151c1151
<     short *s_10;
---
>      *s_10;
1151c1151
<     short *s_10;
---
>      s_10;
1151c1151
<     short *s_10;
---
>      *;
1151c1151
<     short *s_10;
---
>      ;
1151c1151
<     short *s_10;
---
>      *s_10
1151c1151
<     short *s_10;
---
>      s_10
1151c1151
<     short *s_10;
---
>      *
1151c1151
<     short *s_10;
---
>      
1151c1151
<     short *s_10;
---
>     short s_10;
1151c1151
<     short *s_10;
---
>     short ;
1151c1151
<     short *s_10;
---
>     short s_10
1151c1151
<     short *s_10;
---
>     short 
1151,1152c1151,1152
<     short *s_10;
<    unsigned char *s_9;
---
>     short s_10;
>     char *s_9;
(88.1 %, 24382 bytes)
1151c1151
<     short s_10;
---
>     short ;
1151c1151
<     short s_10;
---
>     short 
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>     char *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>     char *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>    unsigned  *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>    unsigned  *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>      *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>      *s_9;
1151c1151
<     short s_10;
---
>     short s_10
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>     char *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned  *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>      *s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned char s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>     char s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned  s_9;
1151,1152c1151,1152
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>      s_9;
1152c1152
<    unsigned char *s_9;
---
>     char *s_9;
1152c1152
<    unsigned char *s_9;
---
>      *s_9;
1152c1152
<    unsigned char *s_9;
---
>     char s_9;
(88.1 %, 24374 bytes)
1152c1152
<     char *s_9;
---
>      *s_9;
1152c1152
<     char *s_9;
---
>      s_9;
1152c1152
<     char *s_9;
---
>      *;
1152c1152
<     char *s_9;
---
>      ;
1152c1152
<     char *s_9;
---
>      *s_9
1152c1152
<     char *s_9;
---
>      s_9
1152c1152
<     char *s_9;
---
>      *
1152c1152
<     char *s_9;
---
>      
1152c1152
<     char *s_9;
---
>     char s_9;
1152c1152
<     char *s_9;
---
>     char ;
1152c1152
<     char *s_9;
---
>     char s_9
1152c1152
<     char *s_9;
---
>     char 
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char s_9;
>     s_12;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char ;
>     s_12;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char 
>     s_12;
1152c1152
<     char *s_9;
---
>     char *;
1152c1152
<     char *s_9;
---
>     char *
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char *;
>     s_12;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char *
>     s_12;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char *;
>    Int32 ;
1152,1153c1152,1153
<     char *s_9;
<    Int32 s_12;
---
>     char *
>    Int32 ;
(88.1 %, 24373 bytes)
1152c1152
<     char s_9;
---
>     char ;
1152c1152
<     char s_9;
---
>     char 
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char ;
>     s_12;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char 
>     s_12;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char ;
>    Int32 ;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char 
>    Int32 ;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char ;
>     ;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char 
>     ;
1152c1152
<     char s_9;
---
>     char s_9
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 ;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     ;
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 s_12
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 
1152,1153c1152,1153
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     
1153c1153
<    Int32 s_12;
---
>     s_12;
1153c1153
<    Int32 s_12;
---
>     ;
1153c1153
<    Int32 s_12;
---
>     s_12
1153c1153
<    Int32 s_12;
---
>     
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>     s_12;
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>     ;
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>     s_12
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>     
>     s_28;
1153c1153
<    Int32 s_12;
---
>    Int32 ;
1153c1153
<    Int32 s_12;
---
>    Int32 
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>    Int32 ;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>    Int32 ;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>     ;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>     ;
1153c1153
<    Int32 s_12;
---
>    Int32 s_12
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     s_28;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 ;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     ;
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 s_28
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     s_28
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 
1153,1154c1153,1154
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     
1154c1154
<    Int32 s_28;
---
>     s_28;
1154c1154
<    Int32 s_28;
---
>     ;
1154c1154
<    Int32 s_28;
---
>     s_28
1154c1154
<    Int32 s_28;
---
>     
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>     s_28;
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>     ;
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>     s_28
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>     
>     s_18;
1154c1154
<    Int32 s_28;
---
>    Int32 ;
1154c1154
<    Int32 s_28;
---
>    Int32 
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>    Int32 ;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>    Int32 ;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>     ;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>     ;
1154c1154
<    Int32 s_28;
---
>    Int32 s_28
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     s_18;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 ;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     ;
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 s_18
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     s_18
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 
1154,1155c1154,1155
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     
1155c1155
<    Int32 s_18;
---
>     s_18;
1155c1155
<    Int32 s_18;
---
>     ;
1155c1155
<    Int32 s_18;
---
>     s_18
1155c1155
<    Int32 s_18;
---
>     
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>     s_18;
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>     ;
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>     s_18
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>     
>     s_30;
1155c1155
<    Int32 s_18;
---
>    Int32 ;
1155c1155
<    Int32 s_18;
---
>    Int32 
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>    Int32 ;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>    Int32 ;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>     ;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>     ;
1155c1155
<    Int32 s_18;
---
>    Int32 s_18
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     s_30;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 ;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     ;
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 s_30
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     s_30
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 
1155,1156c1155,1156
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     
1156c1156
<    Int32 s_30;
---
>     s_30;
1156c1156
<    Int32 s_30;
---
>     ;
1156c1156
<    Int32 s_30;
---
>     s_30
1156c1156
<    Int32 s_30;
---
>     
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>     s_30;
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>     ;
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>     s_30
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>     
>     s_27;
1156c1156
<    Int32 s_30;
---
>    Int32 ;
1156c1156
<    Int32 s_30;
---
>    Int32 
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>    UInt32 ;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>    UInt32 ;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>     ;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>     ;
1156c1156
<    Int32 s_30;
---
>    Int32 s_30
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     s_27;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 ;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     ;
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 s_27
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     s_27
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 
1156,1157c1156,1157
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     
1157c1157
<    UInt32 s_27;
---
>     s_27;
1157c1157
<    UInt32 s_27;
---
>     ;
1157c1157
<    UInt32 s_27;
---
>     s_27
1157c1157
<    UInt32 s_27;
---
>     
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>     s_27;
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>     ;
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>     s_27
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>     
>     s_1;
1157c1157
<    UInt32 s_27;
---
>    UInt32 ;
1157c1157
<    UInt32 s_27;
---
>    UInt32 
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>    Int32 ;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>    Int32 ;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>     ;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>     ;
1157c1157
<    UInt32 s_27;
---
>    UInt32 s_27
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     s_1;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 ;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     ;
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 s_1
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     s_1
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 
1157,1158c1157,1158
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     
1158c1158
<    Int32 s_1;
---
>     s_1;
1158c1158
<    Int32 s_1;
---
>     ;
1158c1158
<    Int32 s_1;
---
>     s_1
1158c1158
<    Int32 s_1;
---
>     
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>     s_1;
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>     ;
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>     s_1
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>     
>     s_2;
1158c1158
<    Int32 s_1;
---
>    Int32 ;
1158c1158
<    Int32 s_1;
---
>    Int32 
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>    Int32 ;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>    Int32 ;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>     ;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>     ;
1158c1158
<    Int32 s_1;
---
>    Int32 s_1
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     s_2;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 ;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     ;
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 s_2
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     s_2
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 
1158,1159c1158,1159
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     
1159c1159
<    Int32 s_2;
---
>     s_2;
1159c1159
<    Int32 s_2;
---
>     ;
1159c1159
<    Int32 s_2;
---
>     s_2
1159c1159
<    Int32 s_2;
---
>     
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>     s_2;
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>     ;
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>     s_2
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>     
>     *s_6;
1159c1159
<    Int32 s_2;
---
>    Int32 ;
1159c1159
<    Int32 s_2;
---
>    Int32 
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>    UInt32 s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>    UInt32 s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>     s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>     s_6;
1159c1159
<    Int32 s_2;
---
>    Int32 s_2
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     *s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     s_6;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 *;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     *;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 ;
1159,1160c1159,1160
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     ;
1160c1160
<    UInt32 *s_6;
---
>     *s_6;
1160c1160
<    UInt32 *s_6;
---
>     s_6;
1160c1160
<    UInt32 *s_6;
---
>     *;
1160c1160
<    UInt32 *s_6;
---
>     ;
1160c1160
<    UInt32 *s_6;
---
>     *s_6
1160c1160
<    UInt32 *s_6;
---
>     s_6
1160c1160
<    UInt32 *s_6;
---
>     *
1160c1160
<    UInt32 *s_6;
---
>     
1160c1160
<    UInt32 *s_6;
---
>    UInt32 s_6;
1160c1160
<    UInt32 *s_6;
---
>    UInt32 ;
1160c1160
<    UInt32 *s_6;
---
>    UInt32 s_6
1160c1160
<    UInt32 *s_6;
---
>    UInt32 
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6;
>     *s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     *s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     *s_5;
1160c1160
<    UInt32 *s_6;
---
>    UInt32 *;
1160c1160
<    UInt32 *s_6;
---
>    UInt32 *
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *;
>     *s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *
>     *s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *;
>    UInt32 s_5;
1160,1161c1160,1161
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *
>    UInt32 s_5;
(88.1 %, 24372 bytes)
1160c1160
<    UInt32 s_6;
---
>    UInt32 ;
1160c1160
<    UInt32 s_6;
---
>    UInt32 
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     *s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     *s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>    UInt32 s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>    UInt32 s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     s_5;
1160c1160
<    UInt32 s_6;
---
>    UInt32 s_6
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     s_5;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 *;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 ;
1160,1161c1160,1161
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     ;
1161c1161
<    UInt32 *s_5;
---
>     *s_5;
1161c1161
<    UInt32 *s_5;
---
>     s_5;
1161c1161
<    UInt32 *s_5;
---
>     *;
1161c1161
<    UInt32 *s_5;
---
>     ;
1161c1161
<    UInt32 *s_5;
---
>     *s_5
1161c1161
<    UInt32 *s_5;
---
>     s_5
1161c1161
<    UInt32 *s_5;
---
>     *
1161c1161
<    UInt32 *s_5;
---
>     
1161c1161
<    UInt32 *s_5;
---
>    UInt32 s_5;
1161c1161
<    UInt32 *s_5;
---
>    UInt32 ;
1161c1161
<    UInt32 *s_5;
---
>    UInt32 s_5
1161c1161
<    UInt32 *s_5;
---
>    UInt32 
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5;
>     *s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     *s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     *s_4;
1161c1161
<    UInt32 *s_5;
---
>    UInt32 *;
1161c1161
<    UInt32 *s_5;
---
>    UInt32 *
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *;
>     *s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *
>     *s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *;
>    UInt32 s_4;
1161,1162c1161,1162
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *
>    UInt32 s_4;
(88.1 %, 24371 bytes)
1161c1161
<    UInt32 s_5;
---
>    UInt32 ;
1161c1161
<    UInt32 s_5;
---
>    UInt32 
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     *s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     *s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>    UInt32 s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>    UInt32 s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     s_4;
1161c1161
<    UInt32 s_5;
---
>    UInt32 s_5
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     s_4;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 *;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 ;
1161,1162c1161,1162
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     ;
1162c1162
<    UInt32 *s_4;
---
>     *s_4;
1162c1162
<    UInt32 *s_4;
---
>     s_4;
1162c1162
<    UInt32 *s_4;
---
>     *;
1162c1162
<    UInt32 *s_4;
---
>     ;
1162c1162
<    UInt32 *s_4;
---
>     *s_4
1162c1162
<    UInt32 *s_4;
---
>     s_4
1162c1162
<    UInt32 *s_4;
---
>     *
1162c1162
<    UInt32 *s_4;
---
>     
1162c1162
<    UInt32 *s_4;
---
>    UInt32 s_4;
1162c1162
<    UInt32 *s_4;
---
>    UInt32 ;
1162c1162
<    UInt32 *s_4;
---
>    UInt32 s_4
1162c1162
<    UInt32 *s_4;
---
>    UInt32 
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4;
>     *s_0;
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     *s_0;
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *s_0;
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     *s_0;
1162c1162
<    UInt32 *s_4;
---
>    UInt32 *;
1162c1162
<    UInt32 *s_4;
---
>    UInt32 *
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *;
>     *s_0;
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *
>     *s_0;
1162,1163c1162,1163
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *;
>    bz_stream s_0;
(88.1 %, 24370 bytes)
1162c1162
<    UInt32 s_4;
---
>    UInt32 ;
1162c1162
<    UInt32 s_4;
---
>    UInt32 
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     *s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     *s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>    bz_stream s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>    bz_stream s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     s_0;
1162c1162
<    UInt32 s_4;
---
>    UInt32 s_4
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     s_0;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream *;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream ;
1162,1163c1162,1163
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     ;
1163c1163
<    bz_stream *s_0;
---
>     *s_0;
1163c1163
<    bz_stream *s_0;
---
>     s_0;
1163c1163
<    bz_stream *s_0;
---
>     *;
1163c1163
<    bz_stream *s_0;
---
>     ;
1163c1163
<    bz_stream *s_0;
---
>     *s_0
1163c1163
<    bz_stream *s_0;
---
>     s_0
1163c1163
<    bz_stream *s_0;
---
>     *
1163c1163
<    bz_stream *s_0;
---
>     
1163c1163
<    bz_stream *s_0;
---
>    bz_stream s_0;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream ;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream s_0
1163c1163
<    bz_stream *s_0;
---
>    bz_stream 
1163c1163
<    bz_stream *s_0;
---
>    bz_stream s_0;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream ;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream 
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1163c1163
<    bz_stream *s_0;
---
>    bz_stream *s_0
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     () return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>     ) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0 return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ! return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1165c1165
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
(88.1 %, 24369 bytes)
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return 
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  ;
1165c1165
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR
(88.1 %, 24363 bytes)
1165c1165
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  ;
1165c1165
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  
1165c1165
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  ;
1167c1167
<    if (strm == NULL || 
---
>     (strm == NULL || 
(88.1 %, 24348 bytes)
1165c1165
<    if (0)  ;
---
>    if (0)  
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>     (strm == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>    if strm == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>     strm == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>    if ( == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>     ( == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>    if  == NULL || 
1165c1165
<    if (0)  ;
---
>    if (0)  
1167c1167
<    if (strm == NULL || 
---
>      == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     (strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     ( == NULL || 
1167c1167
<    if (strm == NULL || 
---
>      == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     (strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>     strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>     (  NULL || 
1167c1167
<    if (strm == NULL || 
---
>       NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if  == NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if   NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm ==  || 
1167c1167
<    if (strm == NULL || 
---
>    if  ==  || 
(88.1 %, 24347 bytes)
1167c1167
<    if (strm == NULL || 
---
>     (strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     ( == NULL || 
1167c1167
<    if (strm == NULL || 
---
>      == NULL || 
1167c1167
<    if (strm == NULL || 
---
>     (strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>     strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>     (  NULL || 
1167c1167
<    if (strm == NULL || 
---
>       NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm == NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if  == NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm  NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if   NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if strm ==  || 
1167c1167
<    if (strm == NULL || 
---
>    if  ==  || 
1167c1167
<    if (strm == NULL || 
---
>    if strm   || 
1167c1167
<    if (strm == NULL || 
---
>    if    || 
1167c1167
<    if (strm == NULL || 
---
>    if ( == NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if (  NULL || 
1167c1167
<    if (strm == NULL || 
---
>    if ( ==  || 
1167c1167
<    if (strm == NULL || 
---
>    if (   || 
1167c1167
<    if (strm == NULL || 
---
>    if ( == NULL  
1167c1167
<    if (strm == NULL || 
---
>    if (  NULL  
1167c1167
<    if (strm == NULL || 
---
>    if ( ==   
1167c1167
<    if (strm == NULL || 
---
>    if (    
(88.1 %, 24341 bytes)
1167c1167
<    if (  NULL || 
---
>    if (    
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>         < 1 || blockSize100k > 9 ||
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>         < 1 || blockSize100k > 9 ||
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>        blockSize100k  1 || blockSize100k > 9 ||
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>        blockSize100k  1 || blockSize100k > 9 ||
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>          1 || blockSize100k > 9 ||
1167,1168c1167,1168
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>          1 || blockSize100k > 9 ||
(88.1 %, 24335 bytes)
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1 || blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <  || blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           || blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         < 1  blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1  blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <   blockSize100k > 9 ||
1168c1168
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
(88.1 %, 24321 bytes)
1168c1168
<          1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>           ||  > 9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>             > 9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>           || blockSize100k  9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>            blockSize100k  9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>           ||   9 ||
1168c1168
<          1 || blockSize100k > 9 ||
---
>              9 ||
(88.1 %, 24318 bytes)
1168c1168
<            blockSize100k > 9 ||
---
>              9 ||
1168c1168
<            blockSize100k > 9 ||
---
>             >  ||
1168c1168
<            blockSize100k > 9 ||
---
>               ||
1168c1168
<            blockSize100k > 9 ||
---
>             > 9 
1168c1168
<            blockSize100k > 9 ||
---
>              9 
1168c1168
<            blockSize100k > 9 ||
---
>             >  
1168c1168
<            blockSize100k > 9 ||
---
>               
(88.1 %, 24304 bytes)
1168c1168
<              9 ||
---
>               
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>         < 0 || workFactor > 0)
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>         < 0 || workFactor > 0)
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>        workFactor  0 || workFactor > 0)
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>        workFactor  0 || workFactor > 0)
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>          0 || workFactor > 0)
1168,1169c1168,1169
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>          0 || workFactor > 0)
(88.1 %, 24301 bytes)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>          0 || workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>         <  || workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>           || workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>         < 0  workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>          0  workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>         <   workFactor > 0)
1169c1169
<        workFactor < 0 || workFactor > 0)
---
>            workFactor > 0)
(88.1 %, 24290 bytes)
1169c1169
<          0 || workFactor > 0)
---
>            workFactor > 0)
1169c1169
<          0 || workFactor > 0)
---
>           ||  > 0)
1169c1169
<          0 || workFactor > 0)
---
>             > 0)
1169c1169
<          0 || workFactor > 0)
---
>           || workFactor  0)
1169c1169
<          0 || workFactor > 0)
---
>            workFactor  0)
1169c1169
<          0 || workFactor > 0)
---
>           ||   0)
1169c1169
<          0 || workFactor > 0)
---
>              0)
(88.1 %, 24287 bytes)
1169c1169
<            workFactor > 0)
---
>              0)
1169c1169
<            workFactor > 0)
---
>             > )
1169c1169
<            workFactor > 0)
---
>              )
1169c1169
<            workFactor > 0)
---
>             > 0
1169c1169
<            workFactor > 0)
---
>              0
1169c1169
<            workFactor > 0)
---
>             > 
1169c1169
<            workFactor > 0)
---
>              
1169c1169
<            workFactor > 0)
---
>            workFactor  0)
1169c1169
<            workFactor > 0)
---
>            workFactor  )
(88.2 %, 24276 bytes)
1169c1169
<              0)
---
>              
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>       BZ_PARAM_ERROR;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>       BZ_PARAM_ERROR;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>      return ;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>      return ;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>       ;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>       ;
1169c1169
<              0)
---
>              0
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       BZ_PARAM_ERROR;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return ;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       ;
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return BZ_PARAM_ERROR
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       BZ_PARAM_ERROR
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return 
1169,1170c1169,1170
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       
1170c1170
<      return BZ_PARAM_ERROR;
---
>       BZ_PARAM_ERROR;
1170c1170
<      return BZ_PARAM_ERROR;
---
>       ;
(88.2 %, 24270 bytes)
1170c1170
<       BZ_PARAM_ERROR;
---
>       ;
1170c1170
<       BZ_PARAM_ERROR;
---
>       
1170c1170
<       BZ_PARAM_ERROR;
---
>       ;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
(88.2 %, 24256 bytes)
1170c1170
<       ;
---
>       
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1170c1170
<       ;
---
>       
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
(88.2 %, 24255 bytes)
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if   0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if  == ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if   ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (  ) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0 workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if ( ==  workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (   workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  0) workFactor = 0;
1172c1172
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  ) workFactor = 0;
(88.2 %, 24243 bytes)
1172c1172
<    if (  0) workFactor = 0;
---
>    if (   workFactor = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  )  = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (    = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  ) workFactor  0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (   workFactor  0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  )   0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (     0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0  = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0   0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = ;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0  = ;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  ;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0   ;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0)   0;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0)  = ;
1172c1172
<    if (  0) workFactor = 0;
---
>    if (  0)   ;
(88.2 %, 24232 bytes)
1172c1172
<    if (  0)   0;
---
>    if (  0)   
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172c1172
<    if (  0)   0;
---
>    if (  0)   0
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1172,1173c1172,1173
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
(88.2 %, 24230 bytes)
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm-> == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if -> == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (-> == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ( == NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc  NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->  NULL) strm->bzalloc = default_bzalloc;
1173c1173
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL) strm->bzalloc = default_bzalloc;
(88.2 %, 24222 bytes)
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  ) ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (   ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strm->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strm->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strmbzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strmbzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strmbzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm-> = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL -> = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL  = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) -> = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)  = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc  default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc  default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->  default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strmbzalloc = default_bzalloc;
1173c1173
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm = default_bzalloc;
(88.2 %, 24208 bytes)
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1173c1173
<    if (bzalloc  NULL)   default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1173,1174c1173,1174
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strmbzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strmbzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strmbzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm-> == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if -> == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (-> == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ( == NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree  NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->  NULL) strm->bzfree = default_bzfree;
1174c1174
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL) strm->bzfree = default_bzfree;
(88.2 %, 24200 bytes)
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  ) ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (   ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strm->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strm->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strmbzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strmbzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strmbzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm-> = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL -> = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL  = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) -> = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)  = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree  default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree  default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->  default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strmbzfree = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm = default_bzfree;
1174c1174
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strmbzfree  default_bzfree;
(88.2 %, 24187 bytes)
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>     = BZALLOC( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>    s  BZALLOC( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>    s = ( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>     = ( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>    s  ( sizeof(EState) );
1174c1174
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>      ( sizeof(EState) );
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>     = BZALLOC( sizeof(EState) );
1176c1176
<    s = BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState) );
(88.2 %, 24170 bytes)
1176c1176
<      BZALLOC( sizeof(EState) );
---
>       EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof(EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC (EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeofEState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof() );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC () );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC ) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( (EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( EState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( () );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( ) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( (EState );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( EState );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( ( );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC(  );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof) );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState) ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof) ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( );
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( ;
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() )
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( )
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() 
1176c1176
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( 
(88.2 %, 24156 bytes)
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  
>     s == NULL) return BZ_MEM_ERROR;
1176c1176
<      BZALLOC(  );
---
>      BZALLOC(  )
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     (s == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if s == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     s == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if ( == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     ( == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if  == NULL) return BZ_MEM_ERROR;
1176,1177c1176,1177
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>      == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     ( == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>       NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  ) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( ==  return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  NULL) return BZ_MEM_ERROR;
1177c1177
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  ) return BZ_MEM_ERROR;
(88.2 %, 24153 bytes)
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  ) return ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  ;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return 
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  BZ_MEM_ERROR;
1177c1177
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  ;
(88.2 %, 24147 bytes)
1177c1177
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  ;
1177c1177
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  
(88.2 %, 24135 bytes)
1177c1177
<    if (  NULL)  ;
---
>    if (  NULL)  
1177,1178c1177,1178
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>     = strm;
1177,1178c1177,1178
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>    s_0  strm;
1177,1178c1177,1178
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>      strm;
(88.2 %, 24134 bytes)
1178c1178
<    s_0 = strm;
---
>     = strm;
1178c1178
<    s_0 = strm;
---
>      strm;
1178c1178
<    s_0 = strm;
---
>     = ;
1178c1178
<    s_0 = strm;
---
>      ;
(88.2 %, 24130 bytes)
1178c1178
<      strm;
---
>      
1178c1178
<      strm;
---
>      ;
1180c1180
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1178c1178
<      strm;
---
>      
1180c1180
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1178c1178
<      strm;
---
>      ;
1180c1180
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1178c1178
<      strm;
---
>      
1180c1180
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1178c1178
<      strm;
---
>      ;
1180c1180
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1178c1178
<      strm;
---
>      
1180c1180
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1178c1178
<      strm;
---
>      strm
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    s-> = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    -> = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>    s = NULL;
1178c1178
<      strm;
---
>      strm
1180c1180
<    s->arr1 = NULL;
---
>     = NULL;
(88.2 %, 24125 bytes)
1180c1180
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1180c1180
<    s->arr1 = NULL;
---
>    -> = NULL;
1180c1180
<    s->arr1 = NULL;
---
>     = NULL;
1180c1180
<    s->arr1 = NULL;
---
>    ->arr1  NULL;
1180c1180
<    s->arr1 = NULL;
---
>    arr1  NULL;
1180c1180
<    s->arr1 = NULL;
---
>    ->  NULL;
1180c1180
<    s->arr1 = NULL;
---
>      NULL;
(88.2 %, 24121 bytes)
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      ;
>    ->arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      NULL
>    ->arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      
>    ->arr2 = NULL;
1180c1180
<    arr1  NULL;
---
>    arr1  ;
1180c1180
<    arr1  NULL;
---
>    arr1  
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    ->arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    ->arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    sarr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    sarr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    arr2 = NULL;
1180c1180
<    arr1  NULL;
---
>    arr1  NULL
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    ->arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    sarr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    arr2 = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    s-> = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    -> = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    s = NULL;
1180,1181c1180,1181
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>     = NULL;
1181c1181
<    s->arr2 = NULL;
---
>    ->arr2 = NULL;
1181c1181
<    s->arr2 = NULL;
---
>    arr2 = NULL;
1181c1181
<    s->arr2 = NULL;
---
>    -> = NULL;
1181c1181
<    s->arr2 = NULL;
---
>     = NULL;
1181c1181
<    s->arr2 = NULL;
---
>    ->arr2  NULL;
1181c1181
<    s->arr2 = NULL;
---
>    arr2  NULL;
1181c1181
<    s->arr2 = NULL;
---
>    ->  NULL;
1181c1181
<    s->arr2 = NULL;
---
>      NULL;
(88.2 %, 24117 bytes)
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>      ;
>    ->ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>      NULL
>    ->ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>      
>    ->ftab = NULL;
1181c1181
<    arr2  NULL;
---
>    arr2  ;
1181c1181
<    arr2  NULL;
---
>    arr2  
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    ->ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    ->ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    sftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    sftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    ftab = NULL;
1181c1181
<    arr2  NULL;
---
>    arr2  NULL
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    ->ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    sftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    ftab = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    s-> = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    -> = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    s = NULL;
1181,1182c1181,1182
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>     = NULL;
1182c1182
<    s->ftab = NULL;
---
>    ->ftab = NULL;
1182c1182
<    s->ftab = NULL;
---
>    ftab = NULL;
1182c1182
<    s->ftab = NULL;
---
>    -> = NULL;
1182c1182
<    s->ftab = NULL;
---
>     = NULL;
1182c1182
<    s->ftab = NULL;
---
>    ->ftab  NULL;
1182c1182
<    s->ftab = NULL;
---
>    ftab  NULL;
1182c1182
<    s->ftab = NULL;
---
>    ->  NULL;
1182c1182
<    s->ftab = NULL;
---
>      NULL;
(88.2 %, 24113 bytes)
1182c1182
<    ftab  NULL;
---
>      ;
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>      NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>      
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  ;
1182c1182
<    ftab  NULL;
---
>    ftab  
1182c1182
<    ftab  NULL;
---
>    ftab  ;
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  ;
1184c1184
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  
1184c1184
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  ;
1184c1184
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  
1184c1184
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>    n       =  * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>           =  * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>    n         * blockSize100k;
1182c1182
<    ftab  NULL;
---
>    ftab  NULL
1184c1184
<    n       = 0 * blockSize100k;
---
>             * blockSize100k;
1184c1184
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1184c1184
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
(88.2 %, 24109 bytes)
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>              
>     = BZALLOC( n                  * sizeof(UInt32) );
1184c1184
<             * blockSize100k;
---
>             * ;
1184c1184
<             * blockSize100k;
---
>             * 
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>     = BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>     = BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>      BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>      BZALLOC( n                  * sizeof(UInt32) );
1184c1184
<             * blockSize100k;
---
>             * blockSize100k
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>     = BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>      BZALLOC( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4 = ( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>     = ( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4  ( n                  * sizeof(UInt32) );
1184,1185c1184,1185
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>      ( n                  * sizeof(UInt32) );
1185c1185
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>     = BZALLOC( n                  * sizeof(UInt32) );
1185c1185
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * sizeof(UInt32) );
(88.2 %, 24091 bytes)
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>                          sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                  * sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                   * sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                   sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                    sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                  * (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                   * (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                   (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                    (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * sizeofUInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof(UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeofUInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof() );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   () );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   ) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * (UInt32) );
1185c1185
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * UInt32) );
(88.2 %, 24089 bytes)
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    UInt32) );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    () );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    ) );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    (UInt32 );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    UInt32 );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    ( );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                     );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof) );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32 );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof) ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32 ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( );
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( ;
1185c1185
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() )
(88.3 %, 24075 bytes)
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     
>      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185c1185
<      BZALLOC(                     );
---
>      BZALLOC(                     )
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>     = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>    s_5  BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>    s_5 =  (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>     =  (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>    s_5   (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1185,1186c1185,1186
<      BZALLOC(                     );
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC(                     )
>       (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>     = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>     =  (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
(88.3 %, 24071 bytes)
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       (+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       (nBZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       nBZ_N_OVERSHOOT) * sizeof(UInt32) ;
1186c1186
<      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       (BZ_N_OVERSHOOT) * sizeof(UInt32) ;
(88.3 %, 24063 bytes)
1186c1186
<       (+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       +) * sizeof(UInt32) ;
1186c1186
<       (+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       ) * sizeof(UInt32) ;
1186c1186
<       (+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
1186c1186
<       (+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>       BZ_N_OVERSHOOT * sizeof(UInt32) ;
(88.3 %, 24061 bytes)
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       BZ_N_OVERSHOOT * (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>        * (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       BZ_N_OVERSHOOT  (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>         (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       + * sizeof(UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +  sizeof(UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       + * (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +  (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       + * sizeofUInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +  sizeofUInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       + * UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +  UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  sizeof(UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  (UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  sizeofUInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  UInt32) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  sizeof() ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  () ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  sizeof) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT  ) ;
1186c1186
<       +BZ_N_OVERSHOOT * sizeof(UInt32) ;
---
>       +BZ_N_OVERSHOOT * (UInt32) ;
(88.3 %, 24046 bytes)
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  UInt32) ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  () ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  ) ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  (UInt32 ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  UInt32 ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  ( ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +   ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeofUInt32) ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof) ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeofUInt32 ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeofUInt32) 
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof) 
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeofUInt32 
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof 
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof() ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof( ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof() 
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof( 
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof() ;
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof( ;
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof() 
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof( 
>     = BZALLOC( 7              * sizeof(UInt32) );
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof(UInt32 ;
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof(UInt32 
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 ;
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 ;
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 ;
>      BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32 
>      BZALLOC( 7              * sizeof(UInt32) );
1186c1186
<       +  sizeof(UInt32) ;
---
>       +  sizeof(UInt32) 
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>     = BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>      BZALLOC( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>    s_6 = ( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>     = ( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>    s_6  ( 7              * sizeof(UInt32) );
1186,1187c1186,1187
<       +  sizeof(UInt32) ;
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       +  sizeof(UInt32) 
>      ( 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     = BZALLOC( 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC( 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     = ( 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     = BZALLOC 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     =  7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>       7              * sizeof(UInt32) );
1187c1187
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
(88.3 %, 24042 bytes)
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>       7              * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      (               * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>                     * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      ( 7               sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>       7               sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      (                sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>                      sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7              * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC               * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7               sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC                sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7              * (UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC               * (UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7               (UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC                (UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC(               * sizeof(UInt32) );
1187c1187
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC(                sizeof(UInt32) );
(88.3 %, 24033 bytes)
1187c1187
<      (                sizeof(UInt32) );
---
>                      sizeof) );
1187c1187
<      (                sizeof(UInt32) );
---
>                      ) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                (UInt32) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                UInt32) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                () );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                ) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                (UInt32 );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                UInt32 );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                ( );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                 );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof) );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32 );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32) ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof) ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32 ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof() );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof( );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof() ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof( ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof() )
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof( )
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof() 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof( 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 );
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 )
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 );
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 ;
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1187c1187
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s-> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if -> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if  == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (-> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( == NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1  NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL) 
(88.3 %, 24030 bytes)
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( ==  || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( == NULL  s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (  NULL  s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( ==   s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    s->arr2 == NULL || s->ftab == NULL) 
(88.3 %, 24024 bytes)
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    s->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || ->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    ->arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || sarr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    sarr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2 == NULL || s->ftab == NULL) 
(88.3 %, 24018 bytes)
1189c1189
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2 == NULL || s->ftab == NULL) 
1189c1189
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    -> == NULL || s->ftab == NULL) 
1189c1189
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (     == NULL || s->ftab == NULL) 
1189c1189
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    ->arr2  NULL || s->ftab == NULL) 
1189c1189
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2  NULL || s->ftab == NULL) 
(88.3 %, 24015 bytes)
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (      NULL || s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     ==  || s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (       || s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     == NULL  s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (      NULL  s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     ==   s->ftab == NULL) 
1189c1189
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (        s->ftab == NULL) 
(88.3 %, 24009 bytes)
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (        s->ftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || ->ftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (        ->ftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || sftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (        sftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || ftab == NULL) 
1189c1189
<    if (      NULL || s->ftab == NULL) 
---
>    if (        ftab == NULL) 
(88.3 %, 24003 bytes)
1189c1189
<    if (        s->ftab == NULL) 
---
>    if (        ftab == NULL) 
1189c1189
<    if (        s->ftab == NULL) 
---
>    if (        -> == NULL) 
1189c1189
<    if (        s->ftab == NULL) 
---
>    if (         == NULL) 
1189c1189
<    if (        s->ftab == NULL) 
---
>    if (        ->ftab  NULL) 
1189c1189
<    if (        s->ftab == NULL) 
---
>    if (        ftab  NULL) 
(88.3 %, 24000 bytes)
1189c1189
<    if (        ftab == NULL) 
---
>    if (          NULL) 
1189c1189
<    if (        ftab == NULL) 
---
>    if (         == ) 
1189c1189
<    if (        ftab == NULL) 
---
>    if (          ) 
1189c1189
<    if (        ftab == NULL) 
---
>    if (         == NULL 
1189c1189
<    if (        ftab == NULL) 
---
>    if (          NULL 
1189c1189
<    if (        ftab == NULL) 
---
>    if (         ==  
1189c1189
<    if (        ftab == NULL) 
---
>    if (           
1189c1189
<    if (        ftab == NULL) 
---
>    if (        ftab  NULL) 
(88.3 %, 23994 bytes)
1189c1189
<    if (          NULL) 
---
>    if (           
1189c1189
<    if (          NULL) 
---
>    if (          ) 
1191c1191
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (           
1191c1191
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          ) 
1191c1191
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (           
1191c1191
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          ) 
1191c1191
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (           
1191c1191
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    s->           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    ->           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>    s           = 0;
1189c1189
<    if (          NULL) 
---
>    if (          NULL 
1191c1191
<    s->blockNo           = 0;
---
>               = 0;
1191c1191
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1191c1191
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1191c1191
<    s->blockNo           = 0;
---
>    ->           = 0;
1191c1191
<    s->blockNo           = 0;
---
>               = 0;
1191c1191
<    s->blockNo           = 0;
---
>    ->blockNo            0;
1191c1191
<    s->blockNo           = 0;
---
>    blockNo            0;
1191c1191
<    s->blockNo           = 0;
---
>    ->            0;
1191c1191
<    s->blockNo           = 0;
---
>                0;
1191c1191
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1191c1191
<    s->blockNo           = 0;
---
>    s           = 0;
(88.3 %, 23983 bytes)
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                
>                  BZ_S_INPUT;
1191c1191
<                0;
---
>                0
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                 = BZ_S_INPUT;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2              BZ_S_INPUT;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                  BZ_S_INPUT;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2             = ;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                 = ;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2              ;
1191,1192c1191,1192
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                  ;
(88.3 %, 23977 bytes)
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  
>                   BZ_M_RUNNING;
1192c1192
<                  BZ_S_INPUT;
---
>                  BZ_S_INPUT
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                  = BZ_M_RUNNING;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1               BZ_M_RUNNING;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                   BZ_M_RUNNING;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1              = ;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                  = ;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1               ;
1192,1193c1192,1193
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                   ;
(88.3 %, 23962 bytes)
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   
>            0;
1193c1193
<                   BZ_M_RUNNING;
---
>                   BZ_M_RUNNING
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>           = 0;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27        0;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>            0;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27       = ;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>           = ;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27        ;
1193,1194c1193,1194
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>            ;
(88.3 %, 23944 bytes)
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            
>          blockSize100k;
1194c1194
<            0;
---
>            0
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>         = blockSize100k;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30      blockSize100k;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>          blockSize100k;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30     = ;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>         = ;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30      ;
1194,1195c1194,1195
<            0;
<    s_30     = blockSize100k;
---
>            0
>          ;
(88.3 %, 23937 bytes)
1195,1196c1195,1196
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          
>              0 * blockSize100k - 9;
1195c1195
<          blockSize100k;
---
>          blockSize100k
1195,1196c1195,1196
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          blockSize100k
>             = 0 * blockSize100k - 9;
1195,1196c1195,1196
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          blockSize100k
>    s_18          0 * blockSize100k - 9;
(88.3 %, 23918 bytes)
1196c1196
<              0 * blockSize100k - 9;
---
>                  9;
1196c1196
<              0 * blockSize100k - 9;
---
>              0  blockSize100k - 9;
1196c1196
<              0 * blockSize100k - 9;
---
>              0   - 9;
(88.3 %, 23902 bytes)
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  
>              verbosity;
1196c1196
<                  9;
---
>                  9
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>             = verbosity;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>    s_28          verbosity;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>              verbosity;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>    s_28         = ;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>             = ;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>    s_28          ;
1196,1197c1196,1197
<                  9;
<    s_28         = verbosity;
---
>                  9
>              ;
(88.3 %, 23895 bytes)
1197,1198c1197,1198
<              verbosity;
<    s_12        = workFactor;
---
>              
>             workFactor;
1197c1197
<              verbosity;
---
>              verbosity
1197,1198c1197,1198
<              verbosity;
<    s_12        = workFactor;
---
>              verbosity
>            = workFactor;
(88.3 %, 23880 bytes)
1198c1198
<             workFactor;
---
>             
1200c1200
<    s_9             = (unsigned char*)s_5;
---
>                  (unsigned char*)s_5;
1198c1198
<             workFactor;
---
>             workFactor
1198c1198
<             workFactor;
---
>             workFactor
1200c1200
<    s_9             = (unsigned char*)s_5;
---
>                 = (unsigned char*)s_5;
1198c1198
<             workFactor;
---
>             workFactor
1200c1200
<    s_9             = (unsigned char*)s_5;
---
>    s_9              (unsigned char*)s_5;
1198c1198
<             workFactor;
---
>             workFactor
1200c1200
<    s_9             = (unsigned char*)s_5;
---
>                  (unsigned char*)s_5;
(88.4 %, 23865 bytes)
1200c1200
<                  (unsigned char*)s_5;
---
>                   )s_5;
1200c1200
<                  (unsigned char*)s_5;
---
>                  ( char*)s_5;
1200c1200
<                  (unsigned char*)s_5;
---
>                  ( *)s_5;
1200c1200
<                  (unsigned char*)s_5;
---
>                  ( char)s_5;
(88.4 %, 23857 bytes)
1200c1200
<                  ( char*)s_5;
---
>                  ( *)s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( )s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( *s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( *);
1200c1200
<                  ( char*)s_5;
---
>                  ( );
1200c1200
<                  ( char*)s_5;
---
>                  ( *;
1200c1200
<                  ( char*)s_5;
---
>                  ( ;
1200c1200
<                  ( char*)s_5;
---
>                  ( char)s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( chars_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( char);
1200c1200
<                  ( char*)s_5;
---
>                  ( char;
1200c1200
<                  ( char*)s_5;
---
>                  ( char)s_5
1200c1200
<                  ( char*)s_5;
---
>                  ( chars_5
1200c1200
<                  ( char*)s_5;
---
>                  ( char)
1200c1200
<                  ( char*)s_5;
---
>                  ( char
1200c1200
<                  ( char*)s_5;
---
>                  ( char*s_5;
1200c1200
<                  ( char*)s_5;
---
>                  ( char*;
1200c1200
<                  ( char*)s_5;
---
>                  ( char*s_5
1200c1200
<                  ( char*)s_5;
---
>                  ( char*
1200,1201c1200,1201
<                  ( char*)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char*s_5;
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char*)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char*;
>                  = (unsigned short*)s_4;
(88.4 %, 23856 bytes)
1200c1200
<                  ( char)s_5;
---
>                  ( chars_5;
1200c1200
<                  ( char)s_5;
---
>                  ( char;
1200c1200
<                  ( char)s_5;
---
>                  ( chars_5
1200c1200
<                  ( char)s_5;
---
>                  ( char
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( chars_5;
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char;
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( chars_5
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char
>                  = (unsigned short*)s_4;
1200c1200
<                  ( char)s_5;
---
>                  ( char);
1200c1200
<                  ( char)s_5;
---
>                  ( char)
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char);
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char);
>    s_10               (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)
>    s_10               (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char);
>                   (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)
>                   (unsigned short*)s_4;
1200c1200
<                  ( char)s_5;
---
>                  ( char)s_5
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>                  = (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>    s_10               (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>                   (unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>    s_10              = unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>                  = unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>    s_10               unsigned short*)s_4;
1200,1201c1200,1201
<                  ( char)s_5;
<    s_10              = (unsigned short*)s_4;
---
>                  ( char)s_5
>                   unsigned short*)s_4;
1201c1201
<    s_10              = (unsigned short*)s_4;
---
>                  = (unsigned short*)s_4;
1201c1201
<    s_10              = (unsigned short*)s_4;
---
>                   (unsigned short*)s_4;
(88.4 %, 23847 bytes)
1201c1201
<                   (unsigned short*)s_4;
---
>                    )s_4;
1201c1201
<                   (unsigned short*)s_4;
---
>                   ( short*)s_4;
1201c1201
<                   (unsigned short*)s_4;
---
>                   ( *)s_4;
1201c1201
<                   (unsigned short*)s_4;
---
>                   ( short)s_4;
1201c1201
<                   (unsigned short*)s_4;
---
>                   ( )s_4;
(88.4 %, 23839 bytes)
1201c1201
<                   ( short*)s_4;
---
>                   ( *)s_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( )s_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( *s_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( s_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( *);
1201c1201
<                   ( short*)s_4;
---
>                   ( );
1201c1201
<                   ( short*)s_4;
---
>                   ( *;
1201c1201
<                   ( short*)s_4;
---
>                   ( ;
1201c1201
<                   ( short*)s_4;
---
>                   ( short)s_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( shorts_4;
1201c1201
<                   ( short*)s_4;
---
>                   ( short);
1201c1201
<                   ( short*)s_4;
---
>                   ( short;
1201c1201
<                   ( short*)s_4;
---
>                   ( short)s_4
1201c1201
<                   ( short*)s_4;
---
>                   ( shorts_4
1201c1201
<                   ( short*)s_4;
---
>                   ( short)
1201c1201
<                   ( short*)s_4;
---
>                   ( short
(88.4 %, 23838 bytes)
1201c1201
<                   ( short)s_4;
---
>                   ( shorts_4;
1201c1201
<                   ( short)s_4;
---
>                   ( short;
1201c1201
<                   ( short)s_4;
---
>                   ( shorts_4
1201c1201
<                   ( short)s_4;
---
>                   ( short
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( shorts_4;
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short;
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( shorts_4
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short
>    ->zbits             = NULL;
1201c1201
<                   ( short)s_4;
---
>                   ( short);
1201c1201
<                   ( short)s_4;
---
>                   ( short)
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short);
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short);
>    szbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)
>    szbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short);
>    zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)
>    zbits             = NULL;
1201c1201
<                   ( short)s_4;
---
>                   ( short)s_4
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    ->zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    szbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    zbits             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    s->             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    ->             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>    s             = NULL;
1201,1202c1201,1202
<                   ( short)s_4;
<    s->zbits             = NULL;
---
>                   ( short)s_4
>                 = NULL;
1202c1202
<    s->zbits             = NULL;
---
>    ->zbits             = NULL;
1202c1202
<    s->zbits             = NULL;
---
>    zbits             = NULL;
1202c1202
<    s->zbits             = NULL;
---
>    ->             = NULL;
1202c1202
<    s->zbits             = NULL;
---
>                 = NULL;
1202c1202
<    s->zbits             = NULL;
---
>    ->zbits              NULL;
1202c1202
<    s->zbits             = NULL;
---
>    zbits              NULL;
1202c1202
<    s->zbits             = NULL;
---
>    ->              NULL;
1202c1202
<    s->zbits             = NULL;
---
>                  NULL;
(88.4 %, 23834 bytes)
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>                  ;
>                   = (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>                  NULL
>                   = (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>                  
>                   = (UInt32*)s_4;
1202c1202
<    zbits              NULL;
---
>    zbits              ;
1202c1202
<    zbits              NULL;
---
>    zbits              
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              ;
>                   = (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              
>                   = (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              ;
>    s_8                (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              
>    s_8                (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              ;
>                    (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              
>                    (UInt32*)s_4;
1202c1202
<    zbits              NULL;
---
>    zbits              NULL
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>                   = (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>    s_8                (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>                    (UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>    s_8               = UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>                   = UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>    s_8                UInt32*)s_4;
1202,1203c1202,1203
<    zbits              NULL;
<    s_8               = (UInt32*)s_4;
---
>    zbits              NULL
>                    UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                   = (UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                    (UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                   = UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                    UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                   = (*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                    (*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                   = *)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>                    *)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                (UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                UInt32*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                (*)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                *)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                (UInt32)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                UInt32)s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                ()s_4;
1203c1203
<    s_8               = (UInt32*)s_4;
---
>    s_8                )s_4;
(88.4 %, 23830 bytes)
1203c1203
<                    (UInt32*)s_4;
---
>                    *)s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    UInt32)s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    )s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    UInt32*s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    *s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    UInt32s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    (*)s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    ()s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    (*s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    (s_4;
1203c1203
<                    (UInt32*)s_4;
---
>                    (*);
1203c1203
<                    (UInt32*)s_4;
---
>                    ();
1203c1203
<                    (UInt32*)s_4;
---
>                    (*;
1203c1203
<                    (UInt32*)s_4;
---
>                    (;
1203c1203
<                    (UInt32*)s_4;
---
>                    (UInt32)s_4;
(88.4 %, 23821 bytes)
1203c1203
<                    s_4;
---
>                    
1205c1205
<    strm->state          = s;
---
>    state          = s;
1203c1203
<                    s_4;
---
>                    s_4
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    ->state          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    strmstate          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    state          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    strm->          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    ->          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>    strm          = s;
1203c1203
<                    s_4;
---
>                    s_4
1205c1205
<    strm->state          = s;
---
>              = s;
1205c1205
<    strm->state          = s;
---
>    ->state          = s;
1205c1205
<    strm->state          = s;
---
>    state          = s;
1205c1205
<    strm->state          = s;
---
>    ->          = s;
1205c1205
<    strm->state          = s;
---
>              = s;
1205c1205
<    strm->state          = s;
---
>    ->state           s;
1205c1205
<    strm->state          = s;
---
>    state           s;
1205c1205
<    strm->state          = s;
---
>    ->           s;
1205c1205
<    strm->state          = s;
---
>               s;
(88.4 %, 23809 bytes)
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>               
>    ->total_in_lo32  = 0;
1205c1205
<              = s;
---
>              = ;
1205c1205
<              = s;
---
>              = 
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = ;
>    ->total_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = 
>    ->total_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = ;
>    strmtotal_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = 
>    strmtotal_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = ;
>    total_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = 
>    total_in_lo32  = 0;
1205c1205
<              = s;
---
>              = s
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    ->total_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    strmtotal_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    total_in_lo32  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    strm->  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    ->  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>    strm  = 0;
1205,1206c1205,1206
<              = s;
<    strm->total_in_lo32  = 0;
---
>              = s
>      = 0;
(88.4 %, 23807 bytes)
1206c1206
<    strm->total_in_lo32  = 0;
---
>    total_in_lo32  = 0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    ->  = 0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>      = 0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    ->total_in_lo32   0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    total_in_lo32   0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    ->   0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>       0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    strmtotal_in_lo32  = 0;
1206c1206
<    strm->total_in_lo32  = 0;
---
>    strm  = 0;
(88.4 %, 23787 bytes)
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       
>    total_in_hi32  = 0;
1206c1206
<       0;
---
>       0
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    ->total_in_hi32  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    strmtotal_in_hi32  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    total_in_hi32  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    strm->  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    ->  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>    strm  = 0;
1206,1207c1206,1207
<       0;
<    strm->total_in_hi32  = 0;
---
>       0
>      = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    ->total_in_hi32  = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    total_in_hi32  = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    ->  = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>      = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    ->total_in_hi32   0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    total_in_hi32   0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    ->   0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>       0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    strmtotal_in_hi32  = 0;
1207c1207
<    strm->total_in_hi32  = 0;
---
>    strm  = 0;
(88.4 %, 23767 bytes)
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       
>    total_out_lo32 = 0;
1207c1207
<       0;
---
>       0
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    ->total_out_lo32 = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    strmtotal_out_lo32 = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    total_out_lo32 = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    strm-> = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    -> = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>    strm = 0;
1207,1208c1207,1208
<       0;
<    strm->total_out_lo32 = 0;
---
>       0
>     = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    ->total_out_lo32 = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    total_out_lo32 = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    -> = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>     = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    ->total_out_lo32  0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    total_out_lo32  0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    ->  0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>      0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    strmtotal_out_lo32 = 0;
1208c1208
<    strm->total_out_lo32 = 0;
---
>    strm = 0;
(88.4 %, 23746 bytes)
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      
>    total_out_hi32 = 0;
1208c1208
<      0;
---
>      0
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    ->total_out_hi32 = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    strmtotal_out_hi32 = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    total_out_hi32 = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    strm-> = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    -> = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>    strm = 0;
1208,1209c1208,1209
<      0;
<    strm->total_out_hi32 = 0;
---
>      0
>     = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    ->total_out_hi32 = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    total_out_hi32 = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    -> = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>     = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    ->total_out_hi32  0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    total_out_hi32  0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    ->  0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>      0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    strmtotal_out_hi32 = 0;
1209c1209
<    strm->total_out_hi32 = 0;
---
>    strm = 0;
(88.4 %, 23725 bytes)
1209,1211c1209,1211
<      0;
<    ;
<    ;
---
>      
>    
>    
1209c1209
<      0;
---
>      0
(88.4 %, 23721 bytes)
1212,1213c1212,1213
<    return BZ_OK;
< }
---
>     
> 
1212c1212
<    return BZ_OK;
---
>    return ;
1212c1212
<    return BZ_OK;
---
>    return 
1212,1213c1212,1213
<    return BZ_OK;
< }
---
>    return ;
> 
1212,1213c1212,1213
<    return BZ_OK;
< }
---
>    return 
> 
1212c1212
<    return BZ_OK;
---
>    return ;
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212c1212
<    return BZ_OK;
---
>    return 
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212,1213c1212
<    return BZ_OK;
< }
---
>    return ;
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212,1213c1212
<    return BZ_OK;
< }
---
>    return 
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212c1212
<    return BZ_OK;
---
>    return BZ_OK
1212,1213c1212,1213
<    return BZ_OK;
< }
---
>    return BZ_OK
> 
1212c1212
<    return BZ_OK;
---
>    return BZ_OK
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212,1213c1212
<    return BZ_OK;
< }
---
>    return BZ_OK
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1212c1212
<    return BZ_OK;
---
>    return BZ_OK
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ADD_CHAR_TO_BLOCKzs,zchh0               \
1212,1213c1212
<    return BZ_OK;
< }
---
>    return BZ_OK
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> # ADD_CHAR_TO_BLOCKzs,zchh0               \
1212c1212
<    return BZ_OK;
---
>    return BZ_OK
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
>  ADD_CHAR_TO_BLOCKzs,zchh0               \
1212,1213c1212
<    return BZ_OK;
< }
---
>    return BZ_OK
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
>  ADD_CHAR_TO_BLOCKzs,zchh0               \
1213c1213
< }
---
> 
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> # ADD_CHAR_TO_BLOCKzs,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
>  ADD_CHAR_TO_BLOCKzs,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> #define ,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> define ,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
> # ,zchh0               \
1213d1212
< }
1225c1224,1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> 
>  ,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ADD_CHAR_TO_BLOCKzs,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
>  ADD_CHAR_TO_BLOCKzs,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
>  ,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define ADD_CHAR_TO_BLOCKzszchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
>  ADD_CHAR_TO_BLOCKzszchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> define zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
>  zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ADD_CHAR_TO_BLOCKzs,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ADD_CHAR_TO_BLOCKzszchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ADD_CHAR_TO_BLOCKzs,               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ,               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> # ADD_CHAR_TO_BLOCKzs               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> #                \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> #define ,zchh0               \
1225c1225
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
---
> #define zchh0               \
(88.4 %, 23690 bytes)
1225c1225
< #                \
---
> #                
1238,1239c1238,1239
< static
< Bool handle_compress ( bz_stream* strm )
---
> 
>   ( bz_stream* strm )
1238c1238
< static
---
> 
1238,1239c1238,1239
< static
< Bool handle_compress ( bz_stream* strm )
---
> 
>  handle_compress ( bz_stream* strm )
(88.4 %, 23684 bytes)
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>  handle_compress ( bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>   ( bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>  handle_compress  bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>    bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>  handle_compress ( * strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>   ( * strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>  handle_compress  * strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
>    * strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
> Bool  ( bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
> Bool   bz_stream* strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
> Bool  ( * strm )
1239c1239
< Bool handle_compress ( bz_stream* strm )
---
> Bool   * strm )
(88.4 %, 23680 bytes)
1239c1239
<  handle_compress ( bz_stream* strm )
---
>   ( bz_stream* strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>    bz_stream* strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>   ( * strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>    * strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>   ( bz_stream strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>    bz_stream strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>   (  strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>     strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  bz_stream* strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  * strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  bz_stream strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress   strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  bz_stream*  )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  *  )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress  bz_stream  )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress    )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress ( * strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress (  strm )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress ( *  )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress (   )
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress ( * strm 
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress (  strm 
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress ( *  
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress (   
1239c1239
<  handle_compress ( bz_stream* strm )
---
>  handle_compress ( bz_stream strm )
(88.5 %, 23666 bytes)
1239,1240c1239
<  handle_compress (   )
< ;
---
>  handle_compress (   
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1239c1239
<  handle_compress (   )
---
>  handle_compress (   
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int  ( bz_stream *strm, int action )
1239,1240c1239
<  handle_compress (   )
< ;
---
>  handle_compress (   
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
> int  ( bz_stream *strm, int action )
1239c1239
<  handle_compress (   )
---
>  handle_compress (   
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   ( bz_stream *strm, int action )
1239,1240c1239
<  handle_compress (   )
< ;
---
>  handle_compress (   
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>   ( bz_stream *strm, int action )
1240c1240
< ;
---
> 
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
> int  ( bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>   ( bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>  BZ_APIBZ2_bzCompress  bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
> int   bz_stream *strm, int action )
1240d1239
< ;
1244c1243,1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> 
>    bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   ( bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress  bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>    bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   (  *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress   *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>     *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int  ( bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int   bz_stream *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int  (  *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int    *strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int  ( bz_stream strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int   bz_stream strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int  (  strm, int action )
1244c1244
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int    strm, int action )
(88.5 %, 23663 bytes)
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   ( bz_stream *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>    bz_stream *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   (  *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>     *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   ( bz_stream strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>    bz_stream strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>   (  strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>     strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress  bz_stream *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress   *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress  bz_stream strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress   strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress  bz_stream *, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress   *, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress  bz_stream , int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress   , int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  *strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  *, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  , int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  *strm int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  strm int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (  * int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress (   int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream strm, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream , int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream strm int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream  int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream strm,  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream ,  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream strm  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream   action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *, int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream * int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *,  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *, int  )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream * int  )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *,   )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *   )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm int action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm int  )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm   )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm int action 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm  action 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm int  
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm   
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,  action )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,   )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,  action 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,   
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,  action )
> 
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,   )
> 
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,  action 
> 
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm,   
> 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  )
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  )
> 
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  
> 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  )
1247c1247
<    EState* s;
---
>    * s;
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  
1247c1247
<    EState* s;
---
>    * s;
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  )
> 
1247c1247
<    EState* s;
---
>    * s;
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int  
> 
1247c1247
<    EState* s;
---
>    * s;
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
> 
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
1247c1247
<    EState* s;
---
>    * s;
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
> 
1247c1247
<    EState* s;
---
>    * s;
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
1247c1247
<    EState* s;
---
>    EState s;
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
> 
1247c1247
<    EState* s;
---
>    EState s;
1244c1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
1247c1247
<    EState* s;
---
>     s;
1244,1245c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< {
---
>  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action 
> 
1247c1247
<    EState* s;
---
>     s;
1245c1245
< {
---
> 
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>    * s;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>    EState s;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>     s;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>    EState* ;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>    * ;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>    EState ;
1245c1245
< {
---
> 
1247c1247
<    EState* s;
---
>     ;
1247c1247
<    EState* s;
---
>    * s;
1247c1247
<    EState* s;
---
>     s;
1247c1247
<    EState* s;
---
>    * ;
1247c1247
<    EState* s;
---
>     ;
1247c1247
<    EState* s;
---
>    * s
1247c1247
<    EState* s;
---
>     s
1247c1247
<    EState* s;
---
>    * 
1247c1247
<    EState* s;
---
>     
1247c1247
<    EState* s;
---
>    EState s;
1247c1247
<    EState* s;
---
>    EState ;
1247c1247
<    EState* s;
---
>    EState s
1247c1247
<    EState* s;
---
>    EState 
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState s;
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState ;
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState s
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState 
>     s_1;
1247c1247
<    EState* s;
---
>    EState* ;
1247c1247
<    EState* s;
---
>    EState* 
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* ;
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* 
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* ;
>    Int32 ;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* 
>    Int32 ;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* ;
>     ;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* 
>     ;
1247c1247
<    EState* s;
---
>    EState* s
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>     s_1;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>    Int32 ;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>     ;
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>    Int32 s_1
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>     s_1
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>    Int32 
1247,1248c1247,1248
<    EState* s;
<    Int32 s_1;
---
>    EState* s
>     
1248c1248
<    Int32 s_1;
---
>     s_1;
1248c1248
<    Int32 s_1;
---
>     ;
1248c1248
<    Int32 s_1;
---
>     s_1
1248c1248
<    Int32 s_1;
---
>     
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>     s_1;
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>     ;
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>     s_1
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>     
>     *s_0;
1248c1248
<    Int32 s_1;
---
>    Int32 ;
1248c1248
<    Int32 s_1;
---
>    Int32 
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>    bz_stream s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>    bz_stream s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>     s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>     s_0;
1248c1248
<    Int32 s_1;
---
>    Int32 s_1
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     *s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     s_0;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream *;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     *;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream ;
1248,1249c1248,1249
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     ;
1249c1249
<    bz_stream *s_0;
---
>     *s_0;
1249c1249
<    bz_stream *s_0;
---
>     s_0;
1249c1249
<    bz_stream *s_0;
---
>     *;
1249c1249
<    bz_stream *s_0;
---
>     ;
1249c1249
<    bz_stream *s_0;
---
>     *s_0
1249c1249
<    bz_stream *s_0;
---
>     s_0
1249c1249
<    bz_stream *s_0;
---
>     *
1249c1249
<    bz_stream *s_0;
---
>     
1249c1249
<    bz_stream *s_0;
---
>    bz_stream s_0;
1249c1249
<    bz_stream *s_0;
---
>    bz_stream ;
1249c1249
<    bz_stream *s_0;
---
>    bz_stream s_0
1249c1249
<    bz_stream *s_0;
---
>    bz_stream 
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0;
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream ;
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream 
>     (strm == NULL) return BZ_PARAM_ERROR;
1249c1249
<    bz_stream *s_0;
---
>    bz_stream *;
1249c1249
<    bz_stream *s_0;
---
>    bz_stream *
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>    if strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>    if strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     strm == NULL) return BZ_PARAM_ERROR;
1249c1249
<    bz_stream *s_0;
---
>    bz_stream *s_0
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     strm == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if ( == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     ( == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if  == NULL) return BZ_PARAM_ERROR;
1249,1250c1249,1250
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>      == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  NULL) return BZ_PARAM_ERROR;
1250c1250
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  ) return BZ_PARAM_ERROR;
(88.5 %, 23657 bytes)
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1250c1250
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.5 %, 23651 bytes)
1250c1250
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1250c1250
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1250,1251c1250,1251
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  ;
>     = strm->state;
1250,1251c1250,1251
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
(88.5 %, 23637 bytes)
1250c1250
<    if (  NULL)  ;
---
>    if (  NULL)  
1250,1251c1250,1251
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
1250,1251c1250,1251
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>    s  strm->state;
1250,1251c1250,1251
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>      strm->state;
(88.5 %, 23636 bytes)
1251c1251
<    s = strm->state;
---
>     = strm->state;
1251c1251
<    s = strm->state;
---
>      strm->state;
1251c1251
<    s = strm->state;
---
>     = ->state;
1251c1251
<    s = strm->state;
---
>      ->state;
1251c1251
<    s = strm->state;
---
>     = strmstate;
1251c1251
<    s = strm->state;
---
>      strmstate;
1251c1251
<    s = strm->state;
---
>     = state;
1251c1251
<    s = strm->state;
---
>      state;
1251c1251
<    s = strm->state;
---
>    s  strm->state;
1251c1251
<    s = strm->state;
---
>    s  ->state;
1251c1251
<    s = strm->state;
---
>    s  strmstate;
1251c1251
<    s = strm->state;
---
>    s  state;
1251c1251
<    s = strm->state;
---
>    s  strm->;
1251c1251
<    s = strm->state;
---
>    s  ->;
1251c1251
<    s = strm->state;
---
>    s  strm;
(88.5 %, 23634 bytes)
1251c1251
<      strm->state;
---
>      state;
1251c1251
<      strm->state;
---
>      ->;
1251c1251
<      strm->state;
---
>      ;
1251c1251
<      strm->state;
---
>      ->state
1251c1251
<      strm->state;
---
>      state
1251c1251
<      strm->state;
---
>      ->
1251c1251
<      strm->state;
---
>      
(88.5 %, 23623 bytes)
1251,1252c1251,1252
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     s == NULL) return BZ_PARAM_ERROR;
1251,1252c1251,1252
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if ( == NULL) return BZ_PARAM_ERROR;
1251,1252c1251,1252
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     ( == NULL) return BZ_PARAM_ERROR;
1251,1252c1251,1252
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if  == NULL) return BZ_PARAM_ERROR;
1251,1252c1251,1252
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>      == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  NULL) return BZ_PARAM_ERROR;
1252c1252
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  ) return BZ_PARAM_ERROR;
(88.5 %, 23620 bytes)
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1252c1252
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.5 %, 23614 bytes)
1252c1252
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1252c1252
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1252,1253c1252,1253
<    if (  NULL)  BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
>     (s_0 != strm) return BZ_PARAM_ERROR;
(88.5 %, 23600 bytes)
1252c1252
<    if (  NULL)  ;
---
>    if (  NULL)  
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (s_0 != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if s_0 != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     s_0 != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if ( != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     ( != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if  != strm) return BZ_PARAM_ERROR;
1252,1253c1252,1253
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>      != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
(88.5 %, 23599 bytes)
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>       strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( !=  return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  strm) return BZ_PARAM_ERROR;
1253c1253
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  ) return BZ_PARAM_ERROR;
(88.5 %, 23594 bytes)
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  ;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return 
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  BZ_PARAM_ERROR;
1253c1253
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  ;
(88.5 %, 23588 bytes)
1253c1253
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1253c1253
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  
(88.5 %, 23574 bytes)
1253c1253
<    if (  strm)  ;
---
>    if (  strm)  
1253c1253
<    if (  strm)  ;
---
>    if (  strm)  
1255c1255
<    preswitch:
---
>    :
1253c1253
<    if (  strm)  ;
---
>    if (  strm)  
1255c1255
<    preswitch:
---
>    preswitch
1253c1253
<    if (  strm)  ;
---
>    if (  strm)  
1255c1255
<    preswitch:
---
>    
1253c1253
<    if (  strm)  ;
---
>    if (  strm)  
1256c1256
<    switch (s_1) 
---
>     (s_1) 
(88.5 %, 23573 bytes)
1255c1255
<    preswitch:
---
>    :
1255c1255
<    preswitch:
---
>    
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    :
>     (s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    
>     (s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    :
>    switch s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    
>    switch s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    :
>     s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    
>     s_1) 
1255c1255
<    preswitch:
---
>    preswitch
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>     (s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>    switch s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>     s_1) 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>    switch () 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>     () 
1255,1256c1255,1256
<    preswitch:
<    switch (s_1) 
---
>    preswitch
>    switch ) 
(88.5 %, 23563 bytes)
1256c1256
<    switch (s_1) 
---
>     s_1) 
1256c1256
<    switch (s_1) 
---
>     () 
1256c1256
<    switch (s_1) 
---
>     ) 
1256c1256
<    switch (s_1) 
---
>     (s_1 
1256c1256
<    switch (s_1) 
---
>     s_1 
1256c1256
<    switch (s_1) 
---
>     ( 
1256c1256
<    switch (s_1) 
---
>      
1256c1256
<    switch (s_1) 
---
>    switch s_1) 
1256c1256
<    switch (s_1) 
---
>    switch ) 
1256c1256
<    switch (s_1) 
---
>    switch s_1 
1256c1256
<    switch (s_1) 
---
>    switch  
1256,1257c1256,1257
<    switch (s_1) 
<    return BZ_OK; 
---
>    switch s_1) 
>     BZ_OK; 
1256,1257c1256,1257
<    switch (s_1) 
<    return BZ_OK; 
---
>    switch ) 
>     BZ_OK; 
1256,1257c1256,1257
<    switch (s_1) 
<    return BZ_OK; 
---
>    switch s_1 
>     BZ_OK; 
1256,1257c1256,1257
<    switch (s_1) 
<    return BZ_OK; 
---
>    switch  
>     BZ_OK; 
1256c1256
<    switch (s_1) 
---
>    switch () 
(88.5 %, 23552 bytes)
1257,1258c1257,1258
<    return BZ_OK; 
< }
---
>      
> 
1257c1257
<    return BZ_OK; 
---
>    return ; 
1257c1257
<    return BZ_OK; 
---
>    return  
1257,1258c1257,1258
<    return BZ_OK; 
< }
---
>    return ; 
> 
1257,1258c1257,1258
<    return BZ_OK; 
< }
---
>    return  
> 
1257c1257
<    return BZ_OK; 
---
>    return ; 
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257c1257
<    return BZ_OK; 
---
>    return  
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257,1258c1257
<    return BZ_OK; 
< }
---
>    return ; 
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257,1258c1257
<    return BZ_OK; 
< }
---
>    return  
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257c1257
<    return BZ_OK; 
---
>    return BZ_OK 
1257,1258c1257,1258
<    return BZ_OK; 
< }
---
>    return BZ_OK 
> 
1257c1257
<    return BZ_OK; 
---
>    return BZ_OK 
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257,1258c1257
<    return BZ_OK; 
< }
---
>    return BZ_OK 
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1257c1257
<    return BZ_OK; 
---
>    return BZ_OK 
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int   ( bz_stream *strm )
1257,1258c1257
<    return BZ_OK; 
< }
---
>    return BZ_OK 
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
> int   ( bz_stream *strm )
1257c1257
<    return BZ_OK; 
---
>    return BZ_OK 
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1257,1258c1257
<    return BZ_OK; 
< }
---
>    return BZ_OK 
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>    ( bz_stream *strm )
1258c1258
< }
---
> 
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
> int   ( bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>    ( bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzCompressEnd   bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
> int    bz_stream *strm )
1258d1257
< }
1262c1261,1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> 
>     bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd   bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>     bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    (  *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd    *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>      *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int   ( bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int    bz_stream *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int   (  *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int     *strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int   ( bz_stream strm )
1262c1262
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int    bz_stream strm )
(88.5 %, 23549 bytes)
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>     bz_stream *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    (  *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>      *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    ( bz_stream strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>     bz_stream strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>    (  strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>      strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd   bz_stream *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd    *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd   bz_stream strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd    strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd   bz_stream * )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd    * )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd   bz_stream  )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd     )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  *strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  * )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (   )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  *strm 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  strm 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (  * 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  (   
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream strm )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream  )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream strm 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream  
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream strm )
> 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream  )
> 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream strm 
> 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream  
> 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * )
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * )
> 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * 
> 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * )
1264c1264
<    EState* s;
---
>    * s;
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * 
1264c1264
<    EState* s;
---
>    * s;
1262,1264c1262,1264
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * )
> 
>    * s;
1262,1264c1262,1264
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream * 
> 
>    * s;
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
1262,1263c1262,1263
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
> 
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
1264c1264
<    EState* s;
---
>    * s;
1262,1264c1262,1264
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
> 
>    * s;
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
1264c1264
<    EState* s;
---
>    EState s;
1262,1264c1262,1264
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
> 
>    EState s;
1262c1262
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
1264c1264
<    EState* s;
---
>     s;
1262,1264c1262,1264
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< {
<    EState* s;
---
>  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm 
> 
>     s;
1263c1263
< {
---
> 
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>    * s;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>    EState s;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>     s;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>    EState* ;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>    * ;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>    EState ;
1263,1264c1263,1264
< {
<    EState* s;
---
> 
>     ;
1264c1264
<    EState* s;
---
>    * s;
1264c1264
<    EState* s;
---
>     s;
1264c1264
<    EState* s;
---
>    * ;
1264c1264
<    EState* s;
---
>     ;
1264c1264
<    EState* s;
---
>    * s
1264c1264
<    EState* s;
---
>     s
1264c1264
<    EState* s;
---
>    * 
1264c1264
<    EState* s;
---
>     
1264c1264
<    EState* s;
---
>    EState s;
1264c1264
<    EState* s;
---
>    EState ;
1264c1264
<    EState* s;
---
>    EState s
1264c1264
<    EState* s;
---
>    EState 
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState s;
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState ;
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState s
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState 
>     *s_0;
1264c1264
<    EState* s;
---
>    EState* ;
1264c1264
<    EState* s;
---
>    EState* 
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* ;
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* 
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* ;
>    bz_stream s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* 
>    bz_stream s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* ;
>     s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* 
>     s_0;
1264c1264
<    EState* s;
---
>    EState* s
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>     *s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>    bz_stream s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>     s_0;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>    bz_stream *;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>     *;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>    bz_stream ;
1264,1265c1264,1265
<    EState* s;
<    bz_stream *s_0;
---
>    EState* s
>     ;
1265c1265
<    bz_stream *s_0;
---
>     *s_0;
1265c1265
<    bz_stream *s_0;
---
>     s_0;
1265c1265
<    bz_stream *s_0;
---
>     *;
1265c1265
<    bz_stream *s_0;
---
>     ;
1265c1265
<    bz_stream *s_0;
---
>     *s_0
1265c1265
<    bz_stream *s_0;
---
>     s_0
1265c1265
<    bz_stream *s_0;
---
>     *
1265c1265
<    bz_stream *s_0;
---
>     
1265c1265
<    bz_stream *s_0;
---
>    bz_stream s_0;
1265c1265
<    bz_stream *s_0;
---
>    bz_stream ;
1265c1265
<    bz_stream *s_0;
---
>    bz_stream s_0
1265c1265
<    bz_stream *s_0;
---
>    bz_stream 
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0;
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream ;
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream 
>     (strm == NULL) return BZ_PARAM_ERROR;
1265c1265
<    bz_stream *s_0;
---
>    bz_stream *;
1265c1265
<    bz_stream *s_0;
---
>    bz_stream *
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>    if strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>    if strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     strm == NULL) return BZ_PARAM_ERROR;
1265c1265
<    bz_stream *s_0;
---
>    bz_stream *s_0
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     strm == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if ( == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     ( == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if  == NULL) return BZ_PARAM_ERROR;
1265,1266c1265,1266
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>      == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  NULL) return BZ_PARAM_ERROR;
1266c1266
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  ) return BZ_PARAM_ERROR;
(88.5 %, 23543 bytes)
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1266c1266
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR
(88.5 %, 23537 bytes)
1266c1266
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1266c1266
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1266,1267c1266,1267
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  ;
>     = strm->state;
1266,1267c1266,1267
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
1266,1267c1266,1267
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  ;
>    s  strm->state;
(88.5 %, 23523 bytes)
1266c1266
<    if (  NULL)  ;
---
>    if (  NULL)  
1266,1267c1266,1267
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
1266,1267c1266,1267
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>    s  strm->state;
1266,1267c1266,1267
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>      strm->state;
(88.5 %, 23522 bytes)
1267c1267
<    s = strm->state;
---
>     = strm->state;
1267c1267
<    s = strm->state;
---
>      strm->state;
1267c1267
<    s = strm->state;
---
>     = ->state;
1267c1267
<    s = strm->state;
---
>      ->state;
1267c1267
<    s = strm->state;
---
>     = strmstate;
1267c1267
<    s = strm->state;
---
>      strmstate;
1267c1267
<    s = strm->state;
---
>     = state;
1267c1267
<    s = strm->state;
---
>      state;
1267c1267
<    s = strm->state;
---
>    s  strm->state;
1267c1267
<    s = strm->state;
---
>    s  ->state;
1267c1267
<    s = strm->state;
---
>    s  strmstate;
1267c1267
<    s = strm->state;
---
>    s  state;
1267c1267
<    s = strm->state;
---
>    s  strm->;
1267c1267
<    s = strm->state;
---
>    s  ->;
(88.5 %, 23520 bytes)
1267c1267
<      strm->state;
---
>      state;
1267c1267
<      strm->state;
---
>      ->;
1267c1267
<      strm->state;
---
>      ;
1267c1267
<      strm->state;
---
>      ->state
1267c1267
<      strm->state;
---
>      state
1267c1267
<      strm->state;
---
>      ->
1267c1267
<      strm->state;
---
>      
(88.5 %, 23509 bytes)
1267,1268c1267,1268
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     s == NULL) return BZ_PARAM_ERROR;
1267,1268c1267,1268
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if ( == NULL) return BZ_PARAM_ERROR;
1267,1268c1267,1268
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     ( == NULL) return BZ_PARAM_ERROR;
1267,1268c1267,1268
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if  == NULL) return BZ_PARAM_ERROR;
1267,1268c1267,1268
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>      == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  NULL) return BZ_PARAM_ERROR;
1268c1268
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  ) return BZ_PARAM_ERROR;
(88.5 %, 23506 bytes)
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1268c1268
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.5 %, 23500 bytes)
1268c1268
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1268c1268
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
(88.5 %, 23486 bytes)
1268c1268
<    if (  NULL)  ;
---
>    if (  NULL)  
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (s_0 != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if s_0 != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     s_0 != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if ( != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     ( != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if  != strm) return BZ_PARAM_ERROR;
1268,1269c1268,1269
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>      != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>       strm) return BZ_PARAM_ERROR;
(88.5 %, 23485 bytes)
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>       strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( !=  return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  strm) return BZ_PARAM_ERROR;
1269c1269
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  ) return BZ_PARAM_ERROR;
(88.5 %, 23480 bytes)
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return 
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  BZ_PARAM_ERROR;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1269c1269
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  BZ_PARAM_ERROR
(88.5 %, 23474 bytes)
1269c1269
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1269c1269
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  
1269c1269
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (s->arr1 != NULL) BZFREE(s->arr1);
(88.6 %, 23460 bytes)
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (s->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     s->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if ->arr1 != NULL) BZFREE(s->arr1);
1269c1269
<    if (  strm)  ;
---
>    if (  strm)  
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     ->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (s->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     s->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     ->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (sarr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     sarr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (arr1 != NULL) BZFREE(s->arr1);
(88.6 %, 23459 bytes)
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (s->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     s->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     ->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (sarr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     sarr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     (arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>     arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if ->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if sarr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s-> != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if -> != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if  != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (->arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (arr1 != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (-> != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if ( != NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (->arr1  NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (->  NULL) BZFREE(s->arr1);
1271c1271
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (  NULL) BZFREE(s->arr1);
(88.6 %, 23454 bytes)
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (  ) (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (  NULL (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (   (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  ) BZFREE(s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1   BZFREE(s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  ) (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1   (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  ) BZFREEs->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1   BZFREEs->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  ) s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1   s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL BZFREE(s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL BZFREEs->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL BZFREE(->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL (->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL BZFREE->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL ->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) (s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) s->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) (->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) ->arr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) (sarr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) sarr1);
1271c1271
<    if (arr1  NULL) BZFREE(s->arr1);
---
>    if (arr1  NULL) (arr1);
(88.6 %, 23448 bytes)
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) s->arr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) ->arr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) sarr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) arr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) s->);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) ->);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) s);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) );
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (->arr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (arr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (->);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) ();
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (->arr1;
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (arr1;
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (->;
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (;
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (sarr1);
1271c1271
<    if (arr1  NULL) (s->arr1);
---
>    if (arr1  NULL) (s);
(88.6 %, 23445 bytes)
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) (;
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) ()
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) (
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) ();
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (;
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) ()
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) (arr1;
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) (arr1
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1;
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1;
>    if s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1
>    if s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1;
>     s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1
>     s->arr2 != NULL) BZFREE(s->arr2);
1271c1271
<    if (arr1  NULL) (arr1);
---
>    if (arr1  NULL) (arr1)
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>     (s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>    if s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>     s->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>    if (->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>     (->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>    if ->arr2 != NULL) BZFREE(s->arr2);
1271,1272c1271,1272
<    if (arr1  NULL) (arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr1  NULL) (arr1)
>     ->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     (s->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     s->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     (->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     ->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     (sarr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     sarr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     (arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>     arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if ->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if sarr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s-> != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if -> != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if  != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (->arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (-> != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if ( != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (->arr2  NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (->  NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (  NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (sarr2 != NULL) BZFREE(s->arr2);
1272c1272
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s != NULL) BZFREE(s->arr2);
(88.6 %, 23440 bytes)
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (  ) (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (  NULL (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (   (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  ) BZFREE(s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2   BZFREE(s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  ) (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2   (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  ) BZFREEs->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2   BZFREEs->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  ) s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2   s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL BZFREE(s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL BZFREEs->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL BZFREE(->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL (->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL BZFREE->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL ->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) (s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) s->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) (->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) ->arr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) (sarr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) sarr2);
1272c1272
<    if (arr2  NULL) BZFREE(s->arr2);
---
>    if (arr2  NULL) (arr2);
(88.6 %, 23434 bytes)
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) s->arr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) ->arr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) sarr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) arr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) s->);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) ->);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) s);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) );
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (->arr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (arr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (->);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) ();
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (->arr2;
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (arr2;
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (->;
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (;
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (sarr2);
1272c1272
<    if (arr2  NULL) (s->arr2);
---
>    if (arr2  NULL) (s);
(88.6 %, 23431 bytes)
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) (;
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) ()
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) (
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) ();
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (;
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) ()
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (
>     (s->ftab != NULL) BZFREE(s->ftab);
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) (arr2;
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) (arr2
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2;
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2;
>    if s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2
>    if s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2;
>     s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2
>     s->ftab != NULL) BZFREE(s->ftab);
1272c1272
<    if (arr2  NULL) (arr2);
---
>    if (arr2  NULL) (arr2)
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>     (s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>    if s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>     s->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>    if (->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>     (->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>    if ->ftab != NULL) BZFREE(s->ftab);
1272,1273c1272,1273
<    if (arr2  NULL) (arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (arr2  NULL) (arr2)
>     ->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     (s->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     s->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     (->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     ->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     (sftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     sftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     (ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>     ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if ->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if sftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s-> != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if -> != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if  != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (->ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (ftab != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (-> != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if ( != NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (->ftab  NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (->  NULL) BZFREE(s->ftab);
1273c1273
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (  NULL) BZFREE(s->ftab);
(88.6 %, 23426 bytes)
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (  ) (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (  NULL (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (   (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  ) BZFREE(s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab   BZFREE(s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  ) (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab   (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  ) BZFREEs->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab   BZFREEs->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  ) s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab   s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL BZFREE(s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL BZFREEs->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL BZFREE(->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL (->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL BZFREE->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL ->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) (s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) s->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) (->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) ->ftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) (sftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) sftab);
1273c1273
<    if (ftab  NULL) BZFREE(s->ftab);
---
>    if (ftab  NULL) (ftab);
(88.6 %, 23420 bytes)
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) s->ftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) ->ftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) sftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) ftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) s->);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) ->);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) s);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) );
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (->ftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (ftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (->);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) ();
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (->ftab;
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (ftab;
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (->;
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (;
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (sftab);
1273c1273
<    if (ftab  NULL) (s->ftab);
---
>    if (ftab  NULL) (s);
(88.6 %, 23417 bytes)
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) (;
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) ()
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) (
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) ();
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (;
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) ()
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (
>    (strm->state);
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) (ftab;
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) (ftab
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab;
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab;
>    BZFREEstrm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab
>    BZFREEstrm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab;
>    strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab
>    strm->state);
1273c1273
<    if (ftab  NULL) (ftab);
---
>    if (ftab  NULL) (ftab)
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    (strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    BZFREEstrm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    strm->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    BZFREE(->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    (->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    BZFREE->state);
1273,1274c1273,1274
<    if (ftab  NULL) (ftab);
<    BZFREE(strm->state);
---
>    if (ftab  NULL) (ftab)
>    ->state);
1274c1274
<    BZFREE(strm->state);
---
>    (strm->state);
(88.6 %, 23410 bytes)
1274c1274
<    (strm->state);
---
>    ->state);
1274c1274
<    (strm->state);
---
>    strmstate);
1274c1274
<    (strm->state);
---
>    state);
1274c1274
<    (strm->state);
---
>    strm->);
1274c1274
<    (strm->state);
---
>    ->);
1274c1274
<    (strm->state);
---
>    strm);
1274c1274
<    (strm->state);
---
>    );
1274c1274
<    (strm->state);
---
>    (->state);
1274c1274
<    (strm->state);
---
>    (state);
1274c1274
<    (strm->state);
---
>    (->);
1274c1274
<    (strm->state);
---
>    ();
1274c1274
<    (strm->state);
---
>    (->state;
1274c1274
<    (strm->state);
---
>    (state;
1274c1274
<    (strm->state);
---
>    (->;
1274c1274
<    (strm->state);
---
>    (;
1274c1274
<    (strm->state);
---
>    (strmstate);
1274c1274
<    (strm->state);
---
>    (strm);
(88.6 %, 23399 bytes)
1274c1274
<    ();
---
>    (
1276c1276
<    strm->state = NULL;   
---
>    ->state = NULL;   
1274c1274
<    ();
---
>    (;
1276c1276
<    strm->state = NULL;   
---
>    strmstate = NULL;   
1274c1274
<    ();
---
>    (
1276c1276
<    strm->state = NULL;   
---
>    strmstate = NULL;   
1274c1274
<    ();
---
>    (;
1276c1276
<    strm->state = NULL;   
---
>    state = NULL;   
1274c1274
<    ();
---
>    (
1276c1276
<    strm->state = NULL;   
---
>    state = NULL;   
1274c1274
<    ();
---
>    ()
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    ->state = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    strmstate = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    state = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    strm-> = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    -> = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>    strm = NULL;   
1274c1274
<    ();
---
>    ()
1276c1276
<    strm->state = NULL;   
---
>     = NULL;   
1276c1276
<    strm->state = NULL;   
---
>    ->state = NULL;   
1276c1276
<    strm->state = NULL;   
---
>    state = NULL;   
1276c1276
<    strm->state = NULL;   
---
>    -> = NULL;   
1276c1276
<    strm->state = NULL;   
---
>     = NULL;   
1276c1276
<    strm->state = NULL;   
---
>    ->state  NULL;   
1276c1276
<    strm->state = NULL;   
---
>    state  NULL;   
1276c1276
<    strm->state = NULL;   
---
>    ->  NULL;   
1276c1276
<    strm->state = NULL;   
---
>      NULL;   
1276c1276
<    strm->state = NULL;   
---
>    strmstate = NULL;   
1276c1276
<    strm->state = NULL;   
---
>    strm = NULL;   
(88.6 %, 23392 bytes)
1276c1276
<    state  NULL;   
---
>      ;   
1278c1278
<    return BZ_OK;
---
>     BZ_OK;
1276c1276
<    state  NULL;   
---
>      NULL   
1278c1278
<    return BZ_OK;
---
>     BZ_OK;
1276c1276
<    state  NULL;   
---
>         
1278c1278
<    return BZ_OK;
---
>     BZ_OK;
(88.6 %, 23377 bytes)
1276c1276,1278
<      ;   
---
>         
> 
>     ;
1278,1279d1279
<     BZ_OK;
< }
1276c1276,1278
<      ;   
---
>         
> 
>     BZ_OK
1278,1279d1279
<     BZ_OK;
< }
1276c1276,1278
<      ;   
---
>         
> 
>     
1278,1279d1279
<     BZ_OK;
< }
1278c1278
<     BZ_OK;
---
>     ;
1278c1278
<     BZ_OK;
---
>     
(88.6 %, 23372 bytes)
1278c1278
<     ;
---
>     
1278,1279c1278,1279
<     ;
< }
---
>     
> 
1278c1278
<     ;
---
>     
1287c1287
< int BZ_APIBZ2_bzDecompressInit 
---
>  BZ_APIBZ2_bzDecompressInit 
1278,1279c1278
<     ;
< }
---
>     
1287c1286,1287
< int BZ_APIBZ2_bzDecompressInit 
---
> 
>  BZ_APIBZ2_bzDecompressInit 
(88.6 %, 23371 bytes)
1279c1279
< }
---
> 
1279d1278
< }
1287c1286,1287
< int BZ_APIBZ2_bzDecompressInit 
---
> 
>  BZ_APIBZ2_bzDecompressInit 
1279d1278
< }
1287c1286,1287
< int BZ_APIBZ2_bzDecompressInit 
---
> 
> int  
1279d1278
< }
1287c1286,1287
< int BZ_APIBZ2_bzDecompressInit 
---
> 
>   
1279c1279
< }
---
> 
1288c1288
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1279d1278
< }
1287,1288c1286,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> 
>  BZ_APIBZ2_bzDecompressInit 
>                       bz_stream* strm, 
1279d1278
< }
1287,1288c1286,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> 
> int  
>                       bz_stream* strm, 
1279d1278
< }
1287,1288c1286,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> 
>   
>                       bz_stream* strm, 
1287c1287
< int BZ_APIBZ2_bzDecompressInit 
---
>  BZ_APIBZ2_bzDecompressInit 
1287c1287
< int BZ_APIBZ2_bzDecompressInit 
---
>   
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzDecompressInit 
>                       bz_stream* strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                       bz_stream* strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzDecompressInit 
>                      ( * strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                      ( * strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  BZ_APIBZ2_bzDecompressInit 
>                       * strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                       * strm, 
1287c1287
< int BZ_APIBZ2_bzDecompressInit 
---
> int  
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                       bz_stream* strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                      ( * strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                       * strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                      ( bz_stream strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                       bz_stream strm, 
1287,1288c1287,1288
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int  
>                      (  strm, 
(88.6 %, 23368 bytes)
1287c1287
<  BZ_APIBZ2_bzDecompressInit 
---
>   
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                       bz_stream* strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                      ( * strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                       * strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                      ( bz_stream strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                       bz_stream strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                      (  strm, 
1287,1288c1287,1288
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>   
>                        strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                       * strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                       bz_stream strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                        strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                       bz_stream* , 
1288c1288
<                      ( bz_stream* strm, 
---
>                       * , 
1288c1288
<                      ( bz_stream* strm, 
---
>                       bz_stream , 
1288c1288
<                      ( bz_stream* strm, 
---
>                        , 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( * strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                      (  strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( * , 
1288c1288
<                      ( bz_stream* strm, 
---
>                      (  , 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( * strm 
1288c1288
<                      ( bz_stream* strm, 
---
>                      (  strm 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( *  
1288c1288
<                      ( bz_stream* strm, 
---
>                      (   
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream strm, 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream , 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream strm 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream  
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream strm, 
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream , 
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream strm 
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream  
>                                verbosity,
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* , 
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream*  
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                        int        ,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                        int        ,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                                ,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                                ,
1288c1288
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* strm 
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                verbosity,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        ,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                ,
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        verbosity
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                verbosity
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        
1288,1289c1288,1289
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                
1289c1289
<                        int        verbosity,
---
>                                verbosity,
1289c1289
<                        int        verbosity,
---
>                                ,
1289c1289
<                        int        verbosity,
---
>                                verbosity
1289c1289
<                        int        verbosity,
---
>                                
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                                verbosity,
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                                ,
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                                verbosity
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                                
>                                small )
1289c1289
<                        int        verbosity,
---
>                        int        ,
1289c1289
<                        int        verbosity,
---
>                        int        
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                        int         )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                        int         )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                                 )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                                 )
1289c1289
<                        int        verbosity,
---
>                        int        verbosity
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                small )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int         )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                 )
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int        small 
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                small 
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int         
1289,1290c1289,1290
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                 
1290c1290
<                        int        small )
---
>                                small )
1290c1290
<                        int        small )
---
>                                 )
1290c1290
<                        int        small )
---
>                                small 
1290c1290
<                        int        small )
---
>                                 
1290,1291c1290,1291
<                        int        small )
< {
---
>                                small )
> 
1290,1291c1290,1291
<                        int        small )
< {
---
>                                 )
> 
1290,1291c1290,1291
<                        int        small )
< {
---
>                                small 
> 
1290,1291c1290,1291
<                        int        small )
< {
---
>                                 
> 
1290c1290
<                        int        small )
---
>                        int         )
1290c1290
<                        int        small )
---
>                        int         
1290,1291c1290,1291
<                        int        small )
< {
---
>                        int         )
> 
1290,1291c1290,1291
<                        int        small )
< {
---
>                        int         
> 
1290c1290
<                        int        small )
---
>                        int         )
1292c1292
<    DState* s;
---
>    * s;
1290c1290
<                        int        small )
---
>                        int         
1292c1292
<    DState* s;
---
>    * s;
1290,1292c1290,1292
<                        int        small )
< {
<    DState* s;
---
>                        int         )
> 
>    * s;
1290,1292c1290,1292
<                        int        small )
< {
<    DState* s;
---
>                        int         
> 
>    * s;
1290c1290
<                        int        small )
---
>                        int        small 
1290,1291c1290,1291
<                        int        small )
< {
---
>                        int        small 
> 
1290c1290
<                        int        small )
---
>                        int        small 
1292c1292
<    DState* s;
---
>    * s;
1290,1292c1290,1292
<                        int        small )
< {
<    DState* s;
---
>                        int        small 
> 
>    * s;
1290c1290
<                        int        small )
---
>                        int        small 
1292c1292
<    DState* s;
---
>    DState s;
1290,1292c1290,1292
<                        int        small )
< {
<    DState* s;
---
>                        int        small 
> 
>    DState s;
1290c1290
<                        int        small )
---
>                        int        small 
1292c1292
<    DState* s;
---
>     s;
1290,1292c1290,1292
<                        int        small )
< {
<    DState* s;
---
>                        int        small 
> 
>     s;
1291c1291
< {
---
> 
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>    * s;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>    DState s;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>     s;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>    DState* ;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>    * ;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>    DState ;
1291,1292c1291,1292
< {
<    DState* s;
---
> 
>     ;
1292c1292
<    DState* s;
---
>    * s;
1292c1292
<    DState* s;
---
>     s;
1292c1292
<    DState* s;
---
>    * ;
1292c1292
<    DState* s;
---
>     ;
1292c1292
<    DState* s;
---
>    * s
1292c1292
<    DState* s;
---
>     s
1292c1292
<    DState* s;
---
>    * 
1292c1292
<    DState* s;
---
>     
1292c1292
<    DState* s;
---
>    DState s;
1292c1292
<    DState* s;
---
>    DState ;
1292c1292
<    DState* s;
---
>    DState s
1292c1292
<    DState* s;
---
>    DState 
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState s;
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState ;
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState s
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState 
>     s_12;
1292c1292
<    DState* s;
---
>    DState* ;
1292c1292
<    DState* s;
---
>    DState* 
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* ;
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* 
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* ;
>    Int32 ;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* 
>    Int32 ;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* ;
>     ;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* 
>     ;
1292c1292
<    DState* s;
---
>    DState* s
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>     s_12;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>    Int32 ;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>     ;
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>    Int32 s_12
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>     s_12
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>    Int32 
1292,1293c1292,1293
<    DState* s;
<    Int32 s_12;
---
>    DState* s
>     
1293c1293
<    Int32 s_12;
---
>     s_12;
1293c1293
<    Int32 s_12;
---
>     ;
1293c1293
<    Int32 s_12;
---
>     s_12
1293c1293
<    Int32 s_12;
---
>     
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>     s_12;
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>     ;
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>     s_12
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>     
>     s_11;
1293c1293
<    Int32 s_12;
---
>    Int32 ;
1293c1293
<    Int32 s_12;
---
>    Int32 
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 ;
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 ;
>    Int32 ;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 
>    Int32 ;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 ;
>     ;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 
>     ;
1293c1293
<    Int32 s_12;
---
>    Int32 s_12
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>     s_11;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>    Int32 ;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>     ;
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>    Int32 s_11
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>     s_11
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>    Int32 
1293,1294c1293,1294
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12
>     
1294c1294
<    Int32 s_11;
---
>     s_11;
1294c1294
<    Int32 s_11;
---
>     ;
1294c1294
<    Int32 s_11;
---
>     s_11
1294c1294
<    Int32 s_11;
---
>     
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>     s_11;
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>     ;
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>     s_11
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>     
>     s_10;
1294c1294
<    Int32 s_11;
---
>    Int32 ;
1294c1294
<    Int32 s_11;
---
>    Int32 
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 ;
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 ;
>    Bool ;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 
>    Bool ;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 ;
>     ;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 
>     ;
1294c1294
<    Int32 s_11;
---
>    Int32 s_11
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>     s_10;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>    Bool ;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>     ;
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>    Bool s_10
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>     s_10
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>    Bool 
1294,1295c1294,1295
<    Int32 s_11;
<    Bool s_10;
---
>    Int32 s_11
>     
1295c1295
<    Bool s_10;
---
>     s_10;
1295c1295
<    Bool s_10;
---
>     ;
1295c1295
<    Bool s_10;
---
>     s_10
1295c1295
<    Bool s_10;
---
>     
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>     s_10;
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>     ;
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>     s_10
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>     
>     s_26;
1295c1295
<    Bool s_10;
---
>    Bool ;
1295c1295
<    Bool s_10;
---
>    Bool 
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool ;
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool 
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool ;
>    UInt32 ;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool 
>    UInt32 ;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool ;
>     ;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool 
>     ;
1295c1295
<    Bool s_10;
---
>    Bool s_10
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>     s_26;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>    UInt32 ;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>     ;
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>    UInt32 s_26
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>     s_26
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>    UInt32 
1295,1296c1295,1296
<    Bool s_10;
<    UInt32 s_26;
---
>    Bool s_10
>     
1296c1296
<    UInt32 s_26;
---
>     s_26;
1296c1296
<    UInt32 s_26;
---
>     ;
1296c1296
<    UInt32 s_26;
---
>     s_26
1296c1296
<    UInt32 s_26;
---
>     
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>     s_26;
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>     ;
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>     s_26
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>     
>     s_7;
1296c1296
<    UInt32 s_26;
---
>    UInt32 ;
1296c1296
<    UInt32 s_26;
---
>    UInt32 
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 ;
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 ;
>    UInt32 ;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 
>    UInt32 ;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 ;
>     ;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 
>     ;
1296c1296
<    UInt32 s_26;
---
>    UInt32 s_26
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>     s_7;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>    UInt32 ;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>     ;
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>    UInt32 s_7
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>     s_7
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>    UInt32 
1296,1297c1296,1297
<    UInt32 s_26;
<    UInt32 s_7;
---
>    UInt32 s_26
>     
1297c1297
<    UInt32 s_7;
---
>     s_7;
1297c1297
<    UInt32 s_7;
---
>     ;
1297c1297
<    UInt32 s_7;
---
>     s_7
1297c1297
<    UInt32 s_7;
---
>     
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>     s_7;
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>     ;
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>     s_7
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>     
>     s_8;
1297c1297
<    UInt32 s_7;
---
>    UInt32 ;
1297c1297
<    UInt32 s_7;
---
>    UInt32 
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 ;
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 ;
>    Int32 ;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 
>    Int32 ;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 ;
>     ;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 
>     ;
1297c1297
<    UInt32 s_7;
---
>    UInt32 s_7
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>     s_8;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>    Int32 ;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>     ;
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>    Int32 s_8
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>     s_8
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>    Int32 
1297,1298c1297,1298
<    UInt32 s_7;
<    Int32 s_8;
---
>    UInt32 s_7
>     
1298c1298
<    Int32 s_8;
---
>     s_8;
1298c1298
<    Int32 s_8;
---
>     ;
1298c1298
<    Int32 s_8;
---
>     s_8
1298c1298
<    Int32 s_8;
---
>     
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>     s_8;
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>     ;
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>     s_8
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>     
>     s_1;
1298c1298
<    Int32 s_8;
---
>    Int32 ;
1298c1298
<    Int32 s_8;
---
>    Int32 
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 ;
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 ;
>    Int32 ;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 
>    Int32 ;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 ;
>     ;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 
>     ;
1298c1298
<    Int32 s_8;
---
>    Int32 s_8
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>     s_1;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>    Int32 ;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>     ;
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>    Int32 s_1
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>     s_1
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>    Int32 
1298,1299c1298,1299
<    Int32 s_8;
<    Int32 s_1;
---
>    Int32 s_8
>     
1299c1299
<    Int32 s_1;
---
>     s_1;
1299c1299
<    Int32 s_1;
---
>     ;
1299c1299
<    Int32 s_1;
---
>     s_1
1299c1299
<    Int32 s_1;
---
>     
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>     s_1;
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>     ;
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>     s_1
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>     
>     *s_0;
1299c1299
<    Int32 s_1;
---
>    Int32 ;
1299c1299
<    Int32 s_1;
---
>    Int32 
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>    bz_stream s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>    bz_stream s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 ;
>     s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 
>     s_0;
1299c1299
<    Int32 s_1;
---
>    Int32 s_1
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     *s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     s_0;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream *;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     *;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>    bz_stream ;
1299,1300c1299,1300
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 s_1
>     ;
1300c1300
<    bz_stream *s_0;
---
>     *s_0;
1300c1300
<    bz_stream *s_0;
---
>     s_0;
1300c1300
<    bz_stream *s_0;
---
>     *;
1300c1300
<    bz_stream *s_0;
---
>     ;
1300c1300
<    bz_stream *s_0;
---
>     *s_0
1300c1300
<    bz_stream *s_0;
---
>     s_0
1300c1300
<    bz_stream *s_0;
---
>     *
1300c1300
<    bz_stream *s_0;
---
>     
1300c1300
<    bz_stream *s_0;
---
>    bz_stream s_0;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream ;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream s_0
1300c1300
<    bz_stream *s_0;
---
>    bz_stream 
1300c1300
<    bz_stream *s_0;
---
>    bz_stream s_0;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream ;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream 
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1300c1300
<    bz_stream *s_0;
---
>    bz_stream *s_0
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     () return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>     ) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0 return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ! return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1302c1302
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
(88.6 %, 23367 bytes)
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return 
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  ;
1302c1302
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR
(88.6 %, 23361 bytes)
1302c1302
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  ;
1302c1302
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  
1302c1302
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  ;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
(88.6 %, 23346 bytes)
1302c1302
<    if (0)  ;
---
>    if (0)  
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1302c1302
<    if (0)  ;
---
>    if (0)  
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
(88.6 %, 23345 bytes)
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  NULL) return BZ_PARAM_ERROR;
1304c1304
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  ) return BZ_PARAM_ERROR;
(88.6 %, 23339 bytes)
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1304c1304
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.6 %, 23333 bytes)
1304c1304
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1304c1304
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
(88.6 %, 23319 bytes)
1304c1304
<    if (  NULL)  ;
---
>    if (  NULL)  
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (small != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if small != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     small != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if ( != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     ( != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if  != 0 && small != 1) return BZ_PARAM_ERROR;
1304,1305c1304,1305
<    if (  NULL)  ;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>      != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (small != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     small != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     ( != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>      != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (small  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     small  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>       0 && small != 1) return BZ_PARAM_ERROR;
(88.6 %, 23318 bytes)
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (small != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     small != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     ( != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>      != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (small  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     small  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>     (  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>       0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if  != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if   0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small !=  && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if  !=  && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small   && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if    && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if ( != 0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  0 && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if ( !=  && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (   && small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if ( != 0  small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (  0  small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if ( !=   small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (    small != 1) return BZ_PARAM_ERROR;
(88.6 %, 23311 bytes)
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (    small != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (   &&  != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (     != 1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (   && small  1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (    small  1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (   &&   1) return BZ_PARAM_ERROR;
1305c1305
<    if (  0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (      1) return BZ_PARAM_ERROR;
(88.6 %, 23308 bytes)
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (      1) return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (     != ) return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (      ) return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (     != 1 return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (      1 return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (     !=  return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (       return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (    small  1) return BZ_PARAM_ERROR;
1305c1305
<    if (    small != 1) return BZ_PARAM_ERROR;
---
>    if (    small  ) return BZ_PARAM_ERROR;
(88.6 %, 23301 bytes)
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (       return BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      )  BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (        BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      ) return ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (       return ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      )  ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (        ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1 return BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1  BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1 return ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1  ;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1 return BZ_PARAM_ERROR
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1  BZ_PARAM_ERROR
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1 return 
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1  
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1)  BZ_PARAM_ERROR;
1305c1305
<    if (      1) return BZ_PARAM_ERROR;
---
>    if (      1)  ;
(88.6 %, 23295 bytes)
1305c1305
<    if (      1)  BZ_PARAM_ERROR;
---
>    if (      1)  ;
1305c1305
<    if (      1)  BZ_PARAM_ERROR;
---
>    if (      1)  
(88.6 %, 23281 bytes)
1305c1305
<    if (      1)  ;
---
>    if (      1)  
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>     (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>    if verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>     verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>    if ( < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>     ( < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>    if  < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1305,1306c1305,1306
<    if (      1)  ;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      1)  
>      < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     ( < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>      < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (verbosity  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     verbosity  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>       0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
(88.6 %, 23280 bytes)
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     ( < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>      < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (verbosity  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     verbosity  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     (  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>       0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if  < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if   0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity <  || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if  <  || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity   || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if    || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if ( < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if ( <  || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (   || verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if ( < 0  verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (  0  verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if ( <   verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (    verbosity > 4) return BZ_PARAM_ERROR;
(88.6 %, 23270 bytes)
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (    verbosity > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (   ||  > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (     > 4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (   || verbosity  4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (    verbosity  4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (   ||   4) return BZ_PARAM_ERROR;
1306c1306
<    if (  0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      4) return BZ_PARAM_ERROR;
(88.6 %, 23267 bytes)
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      4) return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (     > ) return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      ) return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (     > 4 return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (      4 return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (     >  return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (       return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (    verbosity  4) return BZ_PARAM_ERROR;
1306c1306
<    if (    verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (    verbosity  ) return BZ_PARAM_ERROR;
(88.7 %, 23257 bytes)
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (       return BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      )  BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (        BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      ) return ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (       return ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      )  ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (        ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4 return BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4  BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4 return ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4  ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4 return BZ_PARAM_ERROR
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4  BZ_PARAM_ERROR
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4 return 
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4  
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4)  BZ_PARAM_ERROR;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4)  ;
1306c1306
<    if (      4) return BZ_PARAM_ERROR;
---
>    if (      4)  BZ_PARAM_ERROR
(88.7 %, 23251 bytes)
1306c1306
<    if (      4)  BZ_PARAM_ERROR;
---
>    if (      4)  ;
1306c1306
<    if (      4)  BZ_PARAM_ERROR;
---
>    if (      4)  
1306c1306
<    if (      4)  BZ_PARAM_ERROR;
---
>    if (      4)  ;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
(88.7 %, 23237 bytes)
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1306c1306
<    if (      4)  ;
---
>    if (      4)  
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     bzalloc == NULL) strm->bzalloc = default_bzalloc;
(88.7 %, 23236 bytes)
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm-> == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if -> == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (-> == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ( == NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc  NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->  NULL) strm->bzalloc = default_bzalloc;
1308c1308
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL) strm->bzalloc = default_bzalloc;
(88.7 %, 23228 bytes)
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  ) ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (   ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strm->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strm->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strmbzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strmbzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strmbzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm-> = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL -> = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL  = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) -> = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)  = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc  default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc  default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->  default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strmbzalloc = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm = default_bzalloc;
1308c1308
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strmbzalloc  default_bzalloc;
(88.7 %, 23214 bytes)
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1308c1308
<    if (bzalloc  NULL)   default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1308,1309c1308,1309
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strmbzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strmbzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strmbzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm-> == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if -> == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (-> == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ( == NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree  NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->  NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL) strm->bzfree = default_bzfree;
1309c1309
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strmbzfree == NULL) strm->bzfree = default_bzfree;
(88.7 %, 23206 bytes)
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  ) ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (   ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strm->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strm->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strmbzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strmbzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strmbzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm-> = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL -> = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL  = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) -> = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)  = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree  default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree  default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->  default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strmbzfree = default_bzfree;
1309c1309
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm = default_bzfree;
(88.7 %, 23193 bytes)
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>     = BZALLOC( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>    s  BZALLOC( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>    s = ( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>     = ( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>    s  ( sizeof(DState) );
1309c1309
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>      ( sizeof(DState) );
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>     = BZALLOC( sizeof(DState) );
1311c1311
<    s = BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof(DState) );
(88.7 %, 23176 bytes)
1311c1311
<      BZALLOC( sizeof(DState) );
---
>       DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC sizeof(DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC (DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC sizeofDState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC sizeof() );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC () );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC sizeof) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC ) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( (DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( DState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( () );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( ) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( (DState );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( DState );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( ( );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC(  );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeofDState) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof) );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeofDState );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeofDState) ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof) ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeofDState ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof() );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof( );
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof() ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof( ;
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof() )
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof( )
1311c1311
<      BZALLOC( sizeof(DState) );
---
>      BZALLOC( sizeof() 
(88.7 %, 23162 bytes)
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  
>     s == NULL) return BZ_MEM_ERROR;
1311c1311
<      BZALLOC(  );
---
>      BZALLOC(  )
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     (s == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if s == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     s == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if ( == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     ( == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if  == NULL) return BZ_MEM_ERROR;
1311,1312c1311,1312
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>      == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     ( == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>       NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  ) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( ==  return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  NULL) return BZ_MEM_ERROR;
1312c1312
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  ) return BZ_MEM_ERROR;
(88.7 %, 23159 bytes)
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  ) return ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  ;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return 
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  BZ_MEM_ERROR;
1312c1312
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  ;
(88.7 %, 23153 bytes)
1312c1312
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  ;
1312c1312
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  
1312,1313c1312,1313
<    if (  NULL)  BZ_MEM_ERROR;
<    s_0                  = strm;
---
>    if (  NULL)  ;
>                      = strm;
(88.7 %, 23141 bytes)
1312c1312
<    if (  NULL)  ;
---
>    if (  NULL)  
1312,1313c1312,1313
<    if (  NULL)  ;
<    s_0                  = strm;
---
>    if (  NULL)  
>                      = strm;
1312,1313c1312,1313
<    if (  NULL)  ;
<    s_0                  = strm;
---
>    if (  NULL)  
>    s_0                   strm;
1312,1313c1312,1313
<    if (  NULL)  ;
<    s_0                  = strm;
---
>    if (  NULL)  
>                       strm;
(88.7 %, 23140 bytes)
1313c1313
<    s_0                  = strm;
---
>                      = strm;
1313c1313
<    s_0                  = strm;
---
>                       strm;
1313c1313
<    s_0                  = strm;
---
>                      = ;
1313c1313
<    s_0                  = strm;
---
>                       ;
(88.7 %, 23136 bytes)
1313c1313
<                       strm;
---
>                       
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       ;
>    ->state              = s;
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       
>    ->state              = s;
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       ;
>    strmstate              = s;
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       
>    strmstate              = s;
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       ;
>    state              = s;
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       
>    state              = s;
1313c1313
<                       strm;
---
>                       strm
1313,1314c1313,1314
<                       strm;
<    strm->state              = s;
---
>                       strm
>    ->state              = s;
(88.7 %, 23131 bytes)
1314c1314
<    strm->state              = s;
---
>    state              = s;
1314c1314
<    strm->state              = s;
---
>    ->              = s;
1314c1314
<    strm->state              = s;
---
>                  = s;
1314c1314
<    strm->state              = s;
---
>    ->state               s;
1314c1314
<    strm->state              = s;
---
>    state               s;
1314c1314
<    strm->state              = s;
---
>    ->               s;
1314c1314
<    strm->state              = s;
---
>                   s;
1314c1314
<    strm->state              = s;
---
>    strmstate              = s;
1314c1314
<    strm->state              = s;
---
>    strm              = s;
1314c1314
<    strm->state              = s;
---
>    strmstate               s;
1314c1314
<    strm->state              = s;
---
>    strm               s;
1314c1314
<    strm->state              = s;
---
>    strmstate              = ;
(88.7 %, 23119 bytes)
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   
>                      BZ_X_MAGIC_1;
1314c1314
<                   s;
---
>                   s
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   s
>                     = BZ_X_MAGIC_1;
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   s
>    s_1                  BZ_X_MAGIC_1;
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   s
>                      BZ_X_MAGIC_1;
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   s
>    s_1                 = ;
1314,1315c1314,1315
<                   s;
<    s_1                 = BZ_X_MAGIC_1;
---
>                   s
>                     = ;
(88.7 %, 23113 bytes)
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      
>                     0;
1315c1315
<                      BZ_X_MAGIC_1;
---
>                      BZ_X_MAGIC_1
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>                    = 0;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>    s_8                 0;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>                     0;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>    s_8                = ;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>                    = ;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>    s_8                 ;
1315,1316c1315,1316
<                      BZ_X_MAGIC_1;
<    s_8                = 0;
---
>                      BZ_X_MAGIC_1
>                     ;
(88.7 %, 23096 bytes)
1315a1316
>                     
1317d1317
<    s_7                = 0;
1316c1316
<                     0;
---
>                     0
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>                    = 0;
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>    s_7                 0;
1315a1316
>                     0
1317d1317
<    s_7                = 0;
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>    s_7                = ;
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>                    = ;
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>    s_7                 ;
1316,1317c1316,1317
<                     0;
<    s_7                = 0;
---
>                     0
>                     ;
(88.7 %, 23090 bytes)
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     
>      0;
1317c1317
<                     0;
---
>                     0
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>     = 0;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>    s_26  0;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>      0;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>    s_26 = ;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>     = ;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>    s_26  ;
1317,1318c1317,1318
<                     0;
<    s_26 = 0;
---
>                     0
>      ;
(88.7 %, 23083 bytes)
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      
>    total_in_lo32      = 0;
1318c1318
<      0;
---
>      0
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    ->total_in_lo32      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    strmtotal_in_lo32      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    total_in_lo32      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    strm->      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    ->      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>    strm      = 0;
1318,1319c1318,1319
<      0;
<    strm->total_in_lo32      = 0;
---
>      0
>          = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    ->total_in_lo32      = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    total_in_lo32      = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    ->      = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>          = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    ->total_in_lo32       0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    total_in_lo32       0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    ->       0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>           0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    strmtotal_in_lo32      = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    strm      = 0;
1319c1319
<    strm->total_in_lo32      = 0;
---
>    strmtotal_in_lo32       0;
(88.7 %, 23063 bytes)
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           
>    total_in_hi32      = 0;
1319c1319
<           0;
---
>           0
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    ->total_in_hi32      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    strmtotal_in_hi32      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    total_in_hi32      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    strm->      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    ->      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>    strm      = 0;
1319,1320c1319,1320
<           0;
<    strm->total_in_hi32      = 0;
---
>           0
>          = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    ->total_in_hi32      = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    total_in_hi32      = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    ->      = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>          = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    ->total_in_hi32       0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    total_in_hi32       0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    ->       0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>           0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    strmtotal_in_hi32      = 0;
1320c1320
<    strm->total_in_hi32      = 0;
---
>    strm      = 0;
(88.8 %, 23043 bytes)
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           
>    total_out_lo32     = 0;
1320c1320
<           0;
---
>           0
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    ->total_out_lo32     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    strmtotal_out_lo32     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    total_out_lo32     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    strm->     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    ->     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>    strm     = 0;
1320,1321c1320,1321
<           0;
<    strm->total_out_lo32     = 0;
---
>           0
>         = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    ->total_out_lo32     = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    total_out_lo32     = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    ->     = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>         = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    ->total_out_lo32      0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    total_out_lo32      0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    ->      0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>          0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    strmtotal_out_lo32     = 0;
1321c1321
<    strm->total_out_lo32     = 0;
---
>    strm     = 0;
(88.8 %, 23022 bytes)
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          
>    total_out_hi32     = 0;
1321c1321
<          0;
---
>          0
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    ->total_out_hi32     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    strmtotal_out_hi32     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    total_out_hi32     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    strm->     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    ->     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>    strm     = 0;
1321,1322c1321,1322
<          0;
<    strm->total_out_hi32     = 0;
---
>          0
>         = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    ->total_out_hi32     = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    total_out_hi32     = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    ->     = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>         = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    ->total_out_hi32      0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    total_out_hi32      0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    ->      0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>          0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    strmtotal_out_hi32     = 0;
1322c1322
<    strm->total_out_hi32     = 0;
---
>    strm     = 0;
(88.8 %, 23001 bytes)
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          
>            (Bool)small;
1322c1322
<          0;
---
>          0
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>           = (Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>    s_10        (Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>            (Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>    s_10       = Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>           = Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>    s_10        Bool)small;
1322,1323c1322,1323
<          0;
<    s_10       = (Bool)small;
---
>          0
>            Bool)small;
1323c1323
<    s_10       = (Bool)small;
---
>           = (Bool)small;
1323c1323
<    s_10       = (Bool)small;
---
>            (Bool)small;
(88.8 %, 22994 bytes)
1323c1323
<            (Bool)small;
---
>            ;
1323c1323
<            (Bool)small;
---
>            ()small;
1323c1323
<            (Bool)small;
---
>            (small;
1323c1323
<            (Bool)small;
---
>            ();
1323c1323
<            (Bool)small;
---
>            (;
1323c1323
<            (Bool)small;
---
>            ()small
1323c1323
<            (Bool)small;
---
>            (small
1323c1323
<            (Bool)small;
---
>            ()
1323c1323
<            (Bool)small;
---
>            (
1323c1323
<            (Bool)small;
---
>            (Boolsmall;
1323c1323
<            (Bool)small;
---
>            (Bool;
1323c1323
<            (Bool)small;
---
>            (Boolsmall
1323c1323
<            (Bool)small;
---
>            (Bool
1323,1324c1323,1324
<            (Bool)small;
<    s->ll4                   = NULL;
---
>            (Boolsmall;
>    ->ll4                   = NULL;
1323,1324c1323,1324
<            (Bool)small;
<    s->ll4                   = NULL;
---
>            (Bool;
>    ->ll4                   = NULL;
(88.8 %, 22983 bytes)
1323,1324c1323,1324
<            ;
<    s->ll4                   = NULL;
---
>            
>                       = NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ->ll4                   = NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ll4                   = NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ->                   = NULL;
1324c1324
<    s->ll4                   = NULL;
---
>                       = NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ->ll4                    NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ll4                    NULL;
1324c1324
<    s->ll4                   = NULL;
---
>    ->                    NULL;
1324c1324
<    s->ll4                   = NULL;
---
>                        NULL;
(88.8 %, 22979 bytes)
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>                        ;
>    ->ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>                        NULL
>    ->ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>                        
>    ->ll16                  = NULL;
1324c1324
<    ll4                    NULL;
---
>    ll4                    ;
1324c1324
<    ll4                    NULL;
---
>    ll4                    
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    ;
>    ->ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    
>    ->ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    ;
>    sll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    
>    sll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    ;
>    ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    
>    ll16                  = NULL;
1324c1324
<    ll4                    NULL;
---
>    ll4                    NULL
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    ->ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    sll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    ll16                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    s->                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    ->                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>    s                  = NULL;
1324,1325c1324,1325
<    ll4                    NULL;
<    s->ll16                  = NULL;
---
>    ll4                    NULL
>                      = NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ->ll16                  = NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ll16                  = NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ->                  = NULL;
1325c1325
<    s->ll16                  = NULL;
---
>                      = NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ->ll16                   NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ll16                   NULL;
1325c1325
<    s->ll16                  = NULL;
---
>    ->                   NULL;
1325c1325
<    s->ll16                  = NULL;
---
>                       NULL;
(88.8 %, 22975 bytes)
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>                       ;
>    ->tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>                       NULL
>    ->tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>                       
>    ->tt                    = NULL;
1325c1325
<    ll16                   NULL;
---
>    ll16                   ;
1325c1325
<    ll16                   NULL;
---
>    ll16                   
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   ;
>    ->tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   
>    ->tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   ;
>    stt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   
>    stt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   ;
>    tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   
>    tt                    = NULL;
1325c1325
<    ll16                   NULL;
---
>    ll16                   NULL
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    ->tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    stt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    tt                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    s->                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    ->                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>    s                    = NULL;
1325,1326c1325,1326
<    ll16                   NULL;
<    s->tt                    = NULL;
---
>    ll16                   NULL
>                        = NULL;
1326c1326
<    s->tt                    = NULL;
---
>    ->tt                    = NULL;
1326c1326
<    s->tt                    = NULL;
---
>    tt                    = NULL;
1326c1326
<    s->tt                    = NULL;
---
>    ->                    = NULL;
1326c1326
<    s->tt                    = NULL;
---
>                        = NULL;
1326c1326
<    s->tt                    = NULL;
---
>    ->tt                     NULL;
1326c1326
<    s->tt                    = NULL;
---
>    tt                     NULL;
1326c1326
<    s->tt                    = NULL;
---
>    ->                     NULL;
1326c1326
<    s->tt                    = NULL;
---
>                         NULL;
(88.8 %, 22971 bytes)
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>                         ;
>               = 0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>                         NULL
>               = 0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>                         
>               = 0;
1326c1326
<    tt                     NULL;
---
>    tt                     ;
1326c1326
<    tt                     NULL;
---
>    tt                     
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     ;
>               = 0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     
>               = 0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     ;
>    s_11            0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     
>    s_11            0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     ;
>                0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     
>                0;
1326c1326
<    tt                     NULL;
---
>    tt                     NULL
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>               = 0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>    s_11            0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>                0;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>    s_11           = ;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>               = ;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>    s_11            ;
1326,1327c1326,1327
<    tt                     NULL;
<    s_11           = 0;
---
>    tt                     NULL
>                ;
1327c1327
<    s_11           = 0;
---
>               = 0;
1327c1327
<    s_11           = 0;
---
>                0;
(88.8 %, 22964 bytes)
1327,1328c1327,1328
<                ;
<    s_12             = verbosity;
---
>                
>                  ;
1328c1328
<    s_12             = verbosity;
---
>                 = verbosity;
1328c1328
<    s_12             = verbosity;
---
>                  verbosity;
(88.8 %, 22949 bytes)
1328c1328
<                  ;
---
>                  
1330c1330
<    return BZ_OK;
---
>     
1330c1330
<    return BZ_OK;
---
>     BZ_OK;
1330c1330
<    return BZ_OK;
---
>     ;
1330c1330
<    return BZ_OK;
---
>     BZ_OK
1330c1330
<    return BZ_OK;
---
>     
(88.8 %, 22943 bytes)
1330c1330
<     BZ_OK;
---
>     ;
1330c1330
<     BZ_OK;
---
>     
1330,1331c1330,1331
<     BZ_OK;
< }
---
>     ;
> 
(88.8 %, 22938 bytes)
1330c1330
<     ;
---
>     
1330,1331c1330,1331
<     ;
< }
---
>     
> 
1330c1330
<     ;
---
>     
1335c1335
< static
---
> 
(88.8 %, 22937 bytes)
1331c1331
< }
---
> 
1331d1330
< }
1335c1334,1335
< static
---
> 
> 
1331c1331
< }
---
> 
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( DState* s )
1331d1330
< }
1335,1336c1334,1336
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> 
> 
>  unRLE_obuf_to_output_FAST ( DState* s )
1331c1331
< }
---
> 
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void  ( DState* s )
1331d1330
< }
1335,1336c1334,1336
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> 
> 
> void  ( DState* s )
1331c1331
< }
---
> 
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( DState* s )
1331d1330
< }
1335,1336c1334,1336
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> 
> 
>   ( DState* s )
1335c1335
< static
---
> 
1335,1336c1335,1336
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> 
>  unRLE_obuf_to_output_FAST ( DState* s )
1335,1336c1335,1336
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> 
> void  ( DState* s )
(88.8 %, 22931 bytes)
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>    DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
>    * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void  ( DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void   DState* s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void  ( * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void   * s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void  ( DState s )
1336c1336
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void   DState s )
(88.8 %, 22927 bytes)
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( DState* s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>    DState* s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( * s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>    * s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>   ( DState s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>    DState s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>   (  s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>     s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  DState* s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  * s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  DState s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST   s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  DState*  )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  *  )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST  DState  )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST    )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( * s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST (  s )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( *  )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST (   )
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( * s 
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST (  s 
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( *  
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST (   
1336c1336
<  unRLE_obuf_to_output_FAST ( DState* s )
---
>  unRLE_obuf_to_output_FAST ( DState s )
(88.8 %, 22919 bytes)
1336,1337c1336
<  unRLE_obuf_to_output_FAST (   )
< ;
---
>  unRLE_obuf_to_output_FAST (   
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1336c1336
<  unRLE_obuf_to_output_FAST (   )
---
>  unRLE_obuf_to_output_FAST (   
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int  ( bz_stream *strm )
1336,1337c1336
<  unRLE_obuf_to_output_FAST (   )
< ;
---
>  unRLE_obuf_to_output_FAST (   
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
> int  ( bz_stream *strm )
1336c1336
<  unRLE_obuf_to_output_FAST (   )
---
>  unRLE_obuf_to_output_FAST (   
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   ( bz_stream *strm )
1336,1337c1336
<  unRLE_obuf_to_output_FAST (   )
< ;
---
>  unRLE_obuf_to_output_FAST (   
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>   ( bz_stream *strm )
1337c1337
< ;
---
> 
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
> int  ( bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>   ( bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
> int BZ_APIBZ2_bzDecompress  bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompress  bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
> int   bz_stream *strm )
1337d1336
< ;
1350c1349,1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> 
>    bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   ( bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress  bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>    bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   (  *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress   *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>     *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int  ( bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int   bz_stream *strm )
1350c1350
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int  (  *strm )
(88.8 %, 22916 bytes)
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   ( bz_stream *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>    bz_stream *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   (  *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>     *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   ( bz_stream strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>    bz_stream strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>   (  strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>     strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress  bz_stream *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress   *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress  bz_stream strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress   strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress  bz_stream * )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress   * )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress  bz_stream  )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress    )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  *strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  * )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (   )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  *strm 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  strm 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (  * 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress (   
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream strm )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream  )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream strm 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream  
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream strm )
> 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream  )
> 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream strm 
> 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream  
> 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * )
> 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * 
> 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * )
1352c1352
<    DState* s;
---
>    * s;
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * 
1352c1352
<    DState* s;
---
>    * s;
1350,1352c1350,1352
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * )
> 
>    * s;
1350,1352c1350,1352
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompress ( bz_stream * 
> 
>    * s;
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
1350,1351c1350,1351
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
> 
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
1352c1352
<    DState* s;
---
>    * s;
1350,1352c1350,1352
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
> 
>    * s;
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
1352c1352
<    DState* s;
---
>    DState s;
1350,1352c1350,1352
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
> 
>    DState s;
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
1352c1352
<    DState* s;
---
>     s;
1350,1352c1350,1352
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *strm 
> 
>     s;
1351c1351
< {
---
> 
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>    * s;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>    DState s;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>     s;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>    DState* ;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>    * ;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>    DState ;
1351,1352c1351,1352
< {
<    DState* s;
---
> 
>     ;
1352c1352
<    DState* s;
---
>    * s;
1352c1352
<    DState* s;
---
>     s;
1352c1352
<    DState* s;
---
>    * ;
1352c1352
<    DState* s;
---
>     ;
1352c1352
<    DState* s;
---
>    * s
1352c1352
<    DState* s;
---
>     s
1352c1352
<    DState* s;
---
>    * 
1352c1352
<    DState* s;
---
>     
1352c1352
<    DState* s;
---
>    DState s;
1352c1352
<    DState* s;
---
>    DState ;
1352c1352
<    DState* s;
---
>    DState s
1352c1352
<    DState* s;
---
>    DState 
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState s;
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState ;
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState s
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState 
>     *s_0;
1352c1352
<    DState* s;
---
>    DState* ;
1352c1352
<    DState* s;
---
>    DState* 
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>    bz_stream s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>    bz_stream s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>     s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>     s_0;
1352c1352
<    DState* s;
---
>    DState* s
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     *s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     s_0;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream *;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     *;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream ;
1352,1353c1352,1353
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     ;
1353c1353
<    bz_stream *s_0;
---
>     *s_0;
1353c1353
<    bz_stream *s_0;
---
>     s_0;
1353c1353
<    bz_stream *s_0;
---
>     *;
1353c1353
<    bz_stream *s_0;
---
>     ;
1353c1353
<    bz_stream *s_0;
---
>     *s_0
1353c1353
<    bz_stream *s_0;
---
>     s_0
1353c1353
<    bz_stream *s_0;
---
>     *
1353c1353
<    bz_stream *s_0;
---
>     
1353c1353
<    bz_stream *s_0;
---
>    bz_stream s_0;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream ;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream s_0
1353c1353
<    bz_stream *s_0;
---
>    bz_stream 
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0;
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream ;
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream 
>     (strm == NULL) return BZ_PARAM_ERROR;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream *;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream *
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>    if strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>    if strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     strm == NULL) return BZ_PARAM_ERROR;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream *s_0
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     strm == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if ( == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     ( == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if  == NULL) return BZ_PARAM_ERROR;
1353,1354c1353,1354
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>      == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  NULL) return BZ_PARAM_ERROR;
1354c1354
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  ) return BZ_PARAM_ERROR;
(88.8 %, 22910 bytes)
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1354c1354
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.8 %, 22904 bytes)
1354c1354
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1354c1354
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1354,1355c1354,1355
<    if (  NULL)  BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if (  NULL)  ;
>     = strm->state;
(88.8 %, 22890 bytes)
1354c1354
<    if (  NULL)  ;
---
>    if (  NULL)  
1354,1355c1354,1355
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
1354,1355c1354,1355
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>    s  strm->state;
1354,1355c1354,1355
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>      strm->state;
(88.8 %, 22889 bytes)
1355c1355
<    s = strm->state;
---
>     = strm->state;
1355c1355
<    s = strm->state;
---
>      strm->state;
1355c1355
<    s = strm->state;
---
>     = ->state;
1355c1355
<    s = strm->state;
---
>      ->state;
1355c1355
<    s = strm->state;
---
>     = strmstate;
1355c1355
<    s = strm->state;
---
>      strmstate;
1355c1355
<    s = strm->state;
---
>     = state;
1355c1355
<    s = strm->state;
---
>      state;
1355c1355
<    s = strm->state;
---
>    s  strm->state;
1355c1355
<    s = strm->state;
---
>    s  ->state;
1355c1355
<    s = strm->state;
---
>    s  strmstate;
1355c1355
<    s = strm->state;
---
>    s  state;
1355c1355
<    s = strm->state;
---
>    s  strm->;
1355c1355
<    s = strm->state;
---
>    s  ->;
1355c1355
<    s = strm->state;
---
>    s  strm;
(88.8 %, 22887 bytes)
1355c1355
<      strm->state;
---
>      state;
1355c1355
<      strm->state;
---
>      ->;
1355c1355
<      strm->state;
---
>      ;
1355c1355
<      strm->state;
---
>      ->state
1355c1355
<      strm->state;
---
>      state
1355c1355
<      strm->state;
---
>      ->
1355c1355
<      strm->state;
---
>      
(88.8 %, 22876 bytes)
1355,1356c1355,1356
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     s == NULL) return BZ_PARAM_ERROR;
1355,1356c1355,1356
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if ( == NULL) return BZ_PARAM_ERROR;
1355,1356c1355,1356
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     ( == NULL) return BZ_PARAM_ERROR;
1355,1356c1355,1356
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if  == NULL) return BZ_PARAM_ERROR;
1355,1356c1355,1356
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>      == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s  NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s  NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1356c1356
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  NULL) return BZ_PARAM_ERROR;
(88.8 %, 22873 bytes)
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1356c1356
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.8 %, 22867 bytes)
1356c1356
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1356c1356
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1356,1357c1356,1357
<    if (  NULL)  BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
>     (s_0 != strm) return BZ_PARAM_ERROR;
(88.8 %, 22853 bytes)
1356c1356
<    if (  NULL)  ;
---
>    if (  NULL)  
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (s_0 != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if s_0 != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     s_0 != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if ( != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     ( != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if  != strm) return BZ_PARAM_ERROR;
1356,1357c1356,1357
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>      != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
(88.8 %, 22852 bytes)
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>       strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( !=  return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  strm) return BZ_PARAM_ERROR;
1357c1357
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  ) return BZ_PARAM_ERROR;
(88.9 %, 22847 bytes)
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  ;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return 
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  BZ_PARAM_ERROR;
1357c1357
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  ;
(88.9 %, 22841 bytes)
1357c1357
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1357c1357
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  
(88.9 %, 22827 bytes)
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>     (True) 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>    while True) 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>     True) 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>    while () 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>     () 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>    while ) 
1357c1357
<    if (  strm)  ;
---
>    if (  strm)  
1359c1359
<    while (True) 
---
>     ) 
1359c1359
<    while (True) 
---
>     (True) 
1359c1359
<    while (True) 
---
>     True) 
1359c1359
<    while (True) 
---
>     () 
1359c1359
<    while (True) 
---
>     ) 
1359c1359
<    while (True) 
---
>     (True 
1359c1359
<    while (True) 
---
>     True 
(88.9 %, 22826 bytes)
1359c1359
<    while (True) 
---
>     (True) 
1359c1359
<    while (True) 
---
>     True) 
1359c1359
<    while (True) 
---
>     () 
1359c1359
<    while (True) 
---
>     ) 
1359c1359
<    while (True) 
---
>     (True 
1359c1359
<    while (True) 
---
>     True 
1359c1359
<    while (True) 
---
>     ( 
1359c1359
<    while (True) 
---
>      
1359c1359
<    while (True) 
---
>    while True) 
1359c1359
<    while (True) 
---
>    while ) 
1359c1359
<    while (True) 
---
>    while True 
1359c1359
<    while (True) 
---
>    while  
1359c1359
<    while (True) 
---
>    while True) 
1361c1361
<    AssertH ( 0, 1 );
---
>     ( 0, 1 );
1359c1359
<    while (True) 
---
>    while ) 
1361c1361
<    AssertH ( 0, 1 );
---
>     ( 0, 1 );
1359c1359
<    while (True) 
---
>    while True 
1361c1361
<    AssertH ( 0, 1 );
---
>     ( 0, 1 );
1359c1359
<    while (True) 
---
>    while  
1361c1361
<    AssertH ( 0, 1 );
---
>     ( 0, 1 );
(88.9 %, 22815 bytes)
1361c1361
<    AssertH ( 0, 1 );
---
>       1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  0, 1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  , 1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  0 1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH   1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  0,  );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  ,  );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH  0  );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH    );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH ( , 1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH (  1 );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH ( ,  );
1361c1361
<    AssertH ( 0, 1 );
---
>    AssertH (   );
(88.9 %, 22813 bytes)
1361c1361
<    AssertH (  1 );
---
>    AssertH (   ;
1361c1361
<    AssertH (  1 );
---
>    AssertH (   )
1361c1361
<    AssertH (  1 );
---
>    AssertH (   
1361c1361
<    AssertH (  1 );
---
>    AssertH (   );
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (   ;
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (   )
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (   
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 ;
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 ;
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 
1363c1363
<    return 0;  
---
>     0;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 ;
1363c1363
<    return 0;  
---
>    return ;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 
1363c1363
<    return 0;  
---
>    return ;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 ;
1363c1363
<    return 0;  
---
>     ;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 
1363c1363
<    return 0;  
---
>     ;  
1361c1361
<    AssertH (  1 );
---
>    AssertH (  1 )
(88.9 %, 22806 bytes)
1361c1361
<    AssertH (   );
---
>    AssertH (   ;
1363c1363
<     0;  
---
>     0  
1361c1361
<    AssertH (   );
---
>    AssertH (   
1363c1363
<     0;  
---
>     0  
1361c1361
<    AssertH (   );
---
>    AssertH (   ;
1363c1363
<     0;  
---
>       
1361c1361
<    AssertH (   );
---
>    AssertH (   
1363c1363
<     0;  
---
>       
1361c1361
<    AssertH (   );
---
>    AssertH (   )
1361c1361
<    AssertH (   );
---
>    AssertH (   )
1363c1363
<     0;  
---
>     ;  
1361c1361
<    AssertH (   );
---
>    AssertH (   )
1363c1363
<     0;  
---
>     0  
1361c1361
<    AssertH (   );
---
>    AssertH (   )
1363c1363
<     0;  
---
>       
1361c1361
<    AssertH (   );
---
>    AssertH (   )
1364c1364
< }
---
> 
1361c1361,1363
<    AssertH (   );
---
>    AssertH (   )
> 
>     ;  
1363,1364d1364
<     0;  
< }
1361c1361,1363
<    AssertH (   );
---
>    AssertH (   )
> 
>     0  
1363,1364d1364
<     0;  
< }
1361c1361,1363
<    AssertH (   );
---
>    AssertH (   )
> 
>       
1363,1364d1364
<     0;  
< }
1363c1363
<     0;  
---
>     ;  
(88.9 %, 22804 bytes)
1363,1364c1363,1364
<     ;  
< }
---
>       
> 
1363c1363
<     ;  
---
>       
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1363,1364c1363
<     ;  
< }
---
>       
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1363c1363
<     ;  
---
>       
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int   ( bz_stream *strm )
1363,1364c1363
<     ;  
< }
---
>       
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
> int   ( bz_stream *strm )
1363c1363
<     ;  
---
>       
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1363,1364c1363
<     ;  
< }
---
>       
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>    ( bz_stream *strm )
1364c1364
< }
---
> 
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
> int   ( bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>    ( bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>  BZ_APIBZ2_bzDecompressEnd   bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
> int    bz_stream *strm )
1364d1363
< }
1368c1367,1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> 
>     bz_stream *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd   bz_stream *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     bz_stream *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    (  *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd    *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>      *strm )
1368c1368
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int   ( bz_stream *strm )
(88.9 %, 22801 bytes)
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    ( bz_stream *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     bz_stream *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    (  *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>      *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    ( bz_stream strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     bz_stream strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    (  strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>      strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd   bz_stream *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd    *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd   bz_stream strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd    strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd   bz_stream * )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd    * )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd   bz_stream  )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd     )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  * )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (   )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  *strm 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  strm 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (  * 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  (   
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream  )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream strm 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream  
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream strm )
> 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream  )
> 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream strm 
> 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream  
> 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * )
> 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * 
> 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * )
1370c1370
<    DState* s;
---
>    * s;
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * 
1370c1370
<    DState* s;
---
>    * s;
1368,1370c1368,1370
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * )
> 
>    * s;
1368,1370c1368,1370
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream * 
> 
>    * s;
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
1368,1369c1368,1369
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
> 
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
1370c1370
<    DState* s;
---
>    * s;
1368,1370c1368,1370
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
> 
>    * s;
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
1370c1370
<    DState* s;
---
>    DState s;
1368,1370c1368,1370
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
> 
>    DState s;
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
1370c1370
<    DState* s;
---
>     s;
1368,1370c1368,1370
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< {
<    DState* s;
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm 
> 
>     s;
1369c1369
< {
---
> 
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>    * s;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>    DState s;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>     s;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>    DState* ;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>    * ;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>    DState ;
1369,1370c1369,1370
< {
<    DState* s;
---
> 
>     ;
1370c1370
<    DState* s;
---
>    * s;
1370c1370
<    DState* s;
---
>     s;
1370c1370
<    DState* s;
---
>    * ;
1370c1370
<    DState* s;
---
>     ;
1370c1370
<    DState* s;
---
>    * s
1370c1370
<    DState* s;
---
>     s
1370c1370
<    DState* s;
---
>    * 
1370c1370
<    DState* s;
---
>     
1370c1370
<    DState* s;
---
>    DState s;
1370c1370
<    DState* s;
---
>    DState ;
1370c1370
<    DState* s;
---
>    DState s
1370c1370
<    DState* s;
---
>    DState 
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState s;
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState ;
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState s
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState 
>     *s_0;
1370c1370
<    DState* s;
---
>    DState* ;
1370c1370
<    DState* s;
---
>    DState* 
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>    bz_stream s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>    bz_stream s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* ;
>     s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* 
>     s_0;
1370c1370
<    DState* s;
---
>    DState* s
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     *s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     s_0;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream *;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     *;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>    bz_stream ;
1370,1371c1370,1371
<    DState* s;
<    bz_stream *s_0;
---
>    DState* s
>     ;
1371c1371
<    bz_stream *s_0;
---
>     *s_0;
1371c1371
<    bz_stream *s_0;
---
>     s_0;
1371c1371
<    bz_stream *s_0;
---
>     *;
1371c1371
<    bz_stream *s_0;
---
>     ;
1371c1371
<    bz_stream *s_0;
---
>     *s_0
1371c1371
<    bz_stream *s_0;
---
>     s_0
1371c1371
<    bz_stream *s_0;
---
>     *
1371c1371
<    bz_stream *s_0;
---
>     
1371c1371
<    bz_stream *s_0;
---
>    bz_stream s_0;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream ;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream s_0
1371c1371
<    bz_stream *s_0;
---
>    bz_stream 
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0;
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream ;
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream 
>     (strm == NULL) return BZ_PARAM_ERROR;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream *;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream *
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>    if strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>    if strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *;
>     strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *
>     strm == NULL) return BZ_PARAM_ERROR;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream *s_0
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     (strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     strm == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if ( == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>     ( == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>    if  == NULL) return BZ_PARAM_ERROR;
1371,1372c1371,1372
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    bz_stream *s_0
>      == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (strm  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     strm  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm  ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  NULL) return BZ_PARAM_ERROR;
1372c1372
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (strm  ) return BZ_PARAM_ERROR;
(88.9 %, 22795 bytes)
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1372c1372
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.9 %, 22789 bytes)
1372c1372
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1372c1372
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
(88.9 %, 22775 bytes)
1372c1372
<    if (  NULL)  ;
---
>    if (  NULL)  
1372,1373c1372,1373
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>     = strm->state;
1372,1373c1372,1373
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>    s  strm->state;
1372,1373c1372,1373
<    if (  NULL)  ;
<    s = strm->state;
---
>    if (  NULL)  
>      strm->state;
(88.9 %, 22774 bytes)
1373c1373
<    s = strm->state;
---
>     = strm->state;
1373c1373
<    s = strm->state;
---
>      strm->state;
1373c1373
<    s = strm->state;
---
>     = ->state;
1373c1373
<    s = strm->state;
---
>      ->state;
1373c1373
<    s = strm->state;
---
>     = strmstate;
1373c1373
<    s = strm->state;
---
>      strmstate;
1373c1373
<    s = strm->state;
---
>     = state;
1373c1373
<    s = strm->state;
---
>      state;
1373c1373
<    s = strm->state;
---
>    s  strm->state;
1373c1373
<    s = strm->state;
---
>    s  ->state;
1373c1373
<    s = strm->state;
---
>    s  strmstate;
1373c1373
<    s = strm->state;
---
>    s  state;
1373c1373
<    s = strm->state;
---
>    s  strm->;
(88.9 %, 22772 bytes)
1373c1373
<      strm->state;
---
>      state;
1373c1373
<      strm->state;
---
>      ->;
1373c1373
<      strm->state;
---
>      ;
1373c1373
<      strm->state;
---
>      ->state
1373c1373
<      strm->state;
---
>      state
1373c1373
<      strm->state;
---
>      ->
1373c1373
<      strm->state;
---
>      
(88.9 %, 22761 bytes)
1373,1374c1373,1374
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     s == NULL) return BZ_PARAM_ERROR;
1373,1374c1373,1374
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if ( == NULL) return BZ_PARAM_ERROR;
1373,1374c1373,1374
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>     ( == NULL) return BZ_PARAM_ERROR;
1373,1374c1373,1374
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>    if  == NULL) return BZ_PARAM_ERROR;
1373,1374c1373,1374
<      ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      
>      == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     ( == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>      == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (s  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     s  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>     (  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>       NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  == ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s  ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( == NULL return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if ( ==  return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  NULL) return BZ_PARAM_ERROR;
1374c1374
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s  ) return BZ_PARAM_ERROR;
(88.9 %, 22758 bytes)
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (   return ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (    ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  ;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return BZ_PARAM_ERROR
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  BZ_PARAM_ERROR
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL return 
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL  
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  BZ_PARAM_ERROR;
1374c1374
<    if (  NULL) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
(88.9 %, 22752 bytes)
1374c1374
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
1374c1374
<    if (  NULL)  BZ_PARAM_ERROR;
---
>    if (  NULL)  
1374,1375c1374,1375
<    if (  NULL)  BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  ;
>     (s_0 != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (s_0 != strm) return BZ_PARAM_ERROR;
(88.9 %, 22738 bytes)
1374c1374
<    if (  NULL)  ;
---
>    if (  NULL)  
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     (s_0 != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if s_0 != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     s_0 != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if ( != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>     ( != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>    if  != strm) return BZ_PARAM_ERROR;
1374,1375c1374,1375
<    if (  NULL)  ;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  NULL)  
>      != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
(88.9 %, 22737 bytes)
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0 != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0 != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     ( != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>      != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (s_0  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     s_0  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>     (  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>       strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if  != ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0  ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if   ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  ) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( != strm return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if ( !=  return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  strm) return BZ_PARAM_ERROR;
1375c1375
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (s_0  ) return BZ_PARAM_ERROR;
(88.9 %, 22732 bytes)
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  ) return ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (   return ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  )  ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (    ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  ;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return BZ_PARAM_ERROR
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  BZ_PARAM_ERROR
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm return 
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm  
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  BZ_PARAM_ERROR;
1375c1375
<    if (  strm) return BZ_PARAM_ERROR;
---
>    if (  strm)  ;
(88.9 %, 22726 bytes)
1375c1375
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1375c1375
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  
1375c1375
<    if (  strm)  BZ_PARAM_ERROR;
---
>    if (  strm)  ;
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (s->tt   != NULL) BZFREE(s->tt);
(88.9 %, 22712 bytes)
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (s->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     s->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if ->tt   != NULL) BZFREE(s->tt);
1375c1375
<    if (  strm)  ;
---
>    if (  strm)  
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     ->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (s->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     s->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     ->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (stt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     stt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (tt   != NULL) BZFREE(s->tt);
(88.9 %, 22711 bytes)
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (s->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     s->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     ->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (stt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     stt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     (tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>     tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if ->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if stt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if ->   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if    != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (->tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (tt   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (->   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (   != NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (->tt    NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (tt    NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (->    NULL) BZFREE(s->tt);
1377c1377
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (    NULL) BZFREE(s->tt);
(88.9 %, 22706 bytes)
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (    ) (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (    NULL (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (     (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    ) BZFREE(s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt     BZFREE(s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    ) (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt     (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    ) BZFREEs->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt     BZFREEs->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    ) s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt     s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL BZFREE(s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL BZFREEs->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL BZFREE(->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL (->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL BZFREE->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL ->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) (s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) s->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) (->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) ->tt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) (stt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) stt);
1377c1377
<    if (tt    NULL) BZFREE(s->tt);
---
>    if (tt    NULL) (tt);
(88.9 %, 22700 bytes)
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) s->tt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) ->tt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) stt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) tt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) s->);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) ->);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) s);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) );
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (->tt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (tt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (->);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) ();
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (->tt;
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (tt;
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (->;
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (;
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (stt);
1377c1377
<    if (tt    NULL) (s->tt);
---
>    if (tt    NULL) (s);
(88.9 %, 22697 bytes)
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) (;
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) ()
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) (
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) ();
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (;
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) ()
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) (tt;
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) (tt
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt;
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt;
>    if s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt
>    if s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt;
>     s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt
>     s->ll16 != NULL) BZFREE(s->ll16);
1377c1377
<    if (tt    NULL) (tt);
---
>    if (tt    NULL) (tt)
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>     (s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>    if s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>     s->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>    if (->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>     (->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>    if ->ll16 != NULL) BZFREE(s->ll16);
1377,1378c1377,1378
<    if (tt    NULL) (tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (tt    NULL) (tt)
>     ->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     (s->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     s->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     (->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     ->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     (sll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     sll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     (ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>     ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if ->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if sll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s-> != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if -> != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if  != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (->ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (ll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (-> != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if ( != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (->ll16  NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (->  NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (  NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (sll16 != NULL) BZFREE(s->ll16);
1378c1378
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s != NULL) BZFREE(s->ll16);
(88.9 %, 22692 bytes)
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (  ) (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (  NULL (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (   (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  ) BZFREE(s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16   BZFREE(s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  ) (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16   (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  ) BZFREEs->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16   BZFREEs->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  ) s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16   s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL BZFREE(s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL BZFREEs->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL BZFREE(->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL (->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL BZFREE->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL ->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) (s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) s->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) (->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) ->ll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) (sll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) sll16);
1378c1378
<    if (ll16  NULL) BZFREE(s->ll16);
---
>    if (ll16  NULL) (ll16);
(88.9 %, 22686 bytes)
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) s->ll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) ->ll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) sll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) ll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) s->);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) ->);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) s);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) );
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (->ll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (ll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (->);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) ();
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (->ll16;
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (ll16;
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (->;
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (;
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (sll16);
1378c1378
<    if (ll16  NULL) (s->ll16);
---
>    if (ll16  NULL) (s);
(88.9 %, 22683 bytes)
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) (;
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) ()
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) (
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) ();
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (;
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) ()
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) (ll16;
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) (ll16
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16;
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16;
>    if s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16
>    if s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16;
>     s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16
>     s->ll4  != NULL) BZFREE(s->ll4);
1378c1378
<    if (ll16  NULL) (ll16);
---
>    if (ll16  NULL) (ll16)
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>     (s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>    if s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>     s->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>    if (->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>     (->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>    if ->ll4  != NULL) BZFREE(s->ll4);
1378,1379c1378,1379
<    if (ll16  NULL) (ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll16  NULL) (ll16)
>     ->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     (s->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     s->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     (->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     ->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     (sll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     sll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     (ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if ->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if sll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if ->  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if   != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (->ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll4  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (->  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (  != NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (->ll4   NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (->   NULL) BZFREE(s->ll4);
1379c1379
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (   NULL) BZFREE(s->ll4);
(88.9 %, 22678 bytes)
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (   ) (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (   NULL (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (    (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   ) BZFREE(s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4    BZFREE(s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   ) (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4    (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   ) BZFREEs->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4    BZFREEs->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   ) s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4    s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL BZFREE(s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL BZFREEs->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL BZFREE(->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL (->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL BZFREE->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL ->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) (s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) s->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) (->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) ->ll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) (sll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) sll4);
1379c1379
<    if (ll4   NULL) BZFREE(s->ll4);
---
>    if (ll4   NULL) (ll4);
(88.9 %, 22672 bytes)
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) s->ll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) ->ll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) sll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) ll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) s->);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) ->);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) s);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) );
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (->ll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (ll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (->);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) ();
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (->ll4;
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (ll4;
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (->;
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (;
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (sll4);
1379c1379
<    if (ll4   NULL) (s->ll4);
---
>    if (ll4   NULL) (s);
(88.9 %, 22669 bytes)
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (;
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) ()
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) ();
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (;
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) ()
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4;
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4;
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4;
1381c1381
<    BZFREE(strm->state);
---
>    BZFREEstrm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4
1381c1381
<    BZFREE(strm->state);
---
>    BZFREEstrm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4;
1381c1381
<    BZFREE(strm->state);
---
>    strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4
1381c1381
<    BZFREE(strm->state);
---
>    strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    BZFREEstrm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    strm->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    BZFREE(->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    (->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    BZFREE->state);
1379c1379
<    if (ll4   NULL) (ll4);
---
>    if (ll4   NULL) (ll4)
1381c1381
<    BZFREE(strm->state);
---
>    ->state);
1381c1381
<    BZFREE(strm->state);
---
>    (strm->state);
(88.9 %, 22662 bytes)
1381c1381
<    (strm->state);
---
>    ->state);
1381c1381
<    (strm->state);
---
>    strmstate);
1381c1381
<    (strm->state);
---
>    state);
1381c1381
<    (strm->state);
---
>    strm->);
1381c1381
<    (strm->state);
---
>    ->);
1381c1381
<    (strm->state);
---
>    strm);
1381c1381
<    (strm->state);
---
>    );
1381c1381
<    (strm->state);
---
>    (->state);
1381c1381
<    (strm->state);
---
>    (state);
1381c1381
<    (strm->state);
---
>    (->);
1381c1381
<    (strm->state);
---
>    ();
1381c1381
<    (strm->state);
---
>    (->state;
1381c1381
<    (strm->state);
---
>    (state;
1381c1381
<    (strm->state);
---
>    (->;
1381c1381
<    (strm->state);
---
>    (;
1381c1381
<    (strm->state);
---
>    (strmstate);
1381c1381
<    (strm->state);
---
>    (strm);
(88.9 %, 22651 bytes)
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    (
>    ->state = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    (;
>    strmstate = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    (
>    strmstate = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    (;
>    state = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    (
>    state = NULL;
1381c1381
<    ();
---
>    ()
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    ->state = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    strmstate = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    state = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    strm-> = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    -> = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>    strm = NULL;
1381,1382c1381,1382
<    ();
<    strm->state = NULL;
---
>    ()
>     = NULL;
1382c1382
<    strm->state = NULL;
---
>    ->state = NULL;
1382c1382
<    strm->state = NULL;
---
>    state = NULL;
1382c1382
<    strm->state = NULL;
---
>    -> = NULL;
1382c1382
<    strm->state = NULL;
---
>     = NULL;
1382c1382
<    strm->state = NULL;
---
>    ->state  NULL;
1382c1382
<    strm->state = NULL;
---
>    state  NULL;
1382c1382
<    strm->state = NULL;
---
>    ->  NULL;
1382c1382
<    strm->state = NULL;
---
>      NULL;
(89.0 %, 22644 bytes)
1382c1382
<    state  NULL;
---
>      ;
1384c1384
<    return BZ_OK;
---
>     BZ_OK;
1382c1382
<    state  NULL;
---
>      NULL
1384c1384
<    return BZ_OK;
---
>     BZ_OK;
1382c1382
<    state  NULL;
---
>      
1384c1384
<    return BZ_OK;
---
>     BZ_OK;
(89.0 %, 22629 bytes)
1382c1382,1384
<      ;
---
>      
> 
>     ;
1384,1385d1385
<     BZ_OK;
< }
1382c1382,1384
<      ;
---
>      
> 
>     BZ_OK
1384,1385d1385
<     BZ_OK;
< }
1382c1382,1384
<      ;
---
>      
> 
>     
1384,1385d1385
<     BZ_OK;
< }
1384c1384
<     BZ_OK;
---
>     ;
1384c1384
<     BZ_OK;
---
>     
(89.0 %, 22624 bytes)
1384c1384
<     ;
---
>     
1384,1385c1384,1385
<     ;
< }
---
>     
> 
1384c1384
<     ;
---
>     
1392c1392
< #define BZ_SETERRe                    \
---
> define BZ_SETERRe                    \
1384,1385c1384
<     ;
< }
---
>     
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> define BZ_SETERRe                    \
1384c1384
<     ;
---
>     
1392c1392
< #define BZ_SETERRe                    \
---
> # BZ_SETERRe                    \
1384,1385c1384
<     ;
< }
---
>     
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> # BZ_SETERRe                    \
1384c1384
<     ;
---
>     
1392c1392
< #define BZ_SETERRe                    \
---
>  BZ_SETERRe                    \
1384,1385c1384
<     ;
< }
---
>     
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
>  BZ_SETERRe                    \
1385c1385
< }
---
> 
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> define BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> # BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
>  BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> #define                     \
(89.0 %, 22623 bytes)
1385c1385
< }
---
> 
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> define BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> # BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
>  BZ_SETERRe                    \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> #define                     \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> define                     \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
> #                     \
1385d1384
< }
1392c1391,1392
< #define BZ_SETERRe                    \
---
> 
>                      \
1392c1392
< #define BZ_SETERRe                    \
---
> define BZ_SETERRe                    \
1392c1392
< #define BZ_SETERRe                    \
---
>  BZ_SETERRe                    \
1392c1392
< #define BZ_SETERRe                    \
---
> define                     \
1392c1392
< #define BZ_SETERRe                    \
---
>                      \
1392c1392
< #define BZ_SETERRe                    \
---
> define BZ_SETERRe                    
1392c1392
< #define BZ_SETERRe                    \
---
>  BZ_SETERRe                    
1392c1392
< #define BZ_SETERRe                    \
---
> define                     
1392c1392
< #define BZ_SETERRe                    \
---
>                      
(89.0 %, 22606 bytes)
1392c1392
<                      \
---
>                      
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>     {
1392c1392
<                      \
---
>                      
1396c1396
<    struct {
---
>    struct 
1392c1392
<                      \
---
>                      
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>    struct 
1392c1392
<                      \
---
>                      
1396c1396
<    struct {
---
>     
1392c1392
<                      \
---
>                      
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>     
1395c1395
< typedef 
---
>  
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>     {
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>    struct 
1395,1396c1395,1396
< typedef 
<    struct {
---
>  
>     
1395c1395
< typedef 
---
>  
1397c1397
<       FILE*     handle;
---
>       *     handle;
1395,1397c1395,1397
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     {
>       *     handle;
1395,1397c1395,1397
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>    struct 
>       *     handle;
1395,1397c1395,1397
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     
>       *     handle;
1396c1396
<    struct {
---
>     {
1396c1396
<    struct {
---
>     
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     {
>       *     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     
>       *     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     {
>       FILE     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     
>       FILE     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     {
>            handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>     
>            handle;
1396c1396
<    struct {
---
>    struct 
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>            handle;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE*     ;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     ;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     ;
1396,1397c1396,1397
<    struct {
<       FILE*     handle;
---
>    struct 
>            ;
1397c1397
<       FILE*     handle;
---
>       *     handle;
1397c1397
<       FILE*     handle;
---
>            handle;
1397c1397
<       FILE*     handle;
---
>       *     ;
1397c1397
<       FILE*     handle;
---
>            ;
1397c1397
<       FILE*     handle;
---
>       *     handle
1397c1397
<       FILE*     handle;
---
>            handle
1397c1397
<       FILE*     handle;
---
>       *     
1397c1397
<       FILE*     handle;
---
>            
1397c1397
<       FILE*     handle;
---
>       FILE     handle;
1397c1397
<       FILE*     handle;
---
>       FILE     ;
1397c1397
<       FILE*     handle;
---
>       FILE     handle
1397c1397
<       FILE*     handle;
---
>       FILE     
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE     handle;
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE     ;
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE     handle
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE     
>             buf[BZ_MAX_UNUSED];
1397c1397
<       FILE*     handle;
---
>       FILE*     ;
1397c1397
<       FILE*     handle;
---
>       FILE*     
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     ;
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     ;
>       char      [BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     
>       char      [BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     ;
>             [BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     
>             [BZ_MAX_UNUSED];
1397c1397
<       FILE*     handle;
---
>       FILE*     handle
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>             buf[BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>       char      [BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>             [BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>       char      bufBZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>             bufBZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>       char      BZ_MAX_UNUSED];
1397,1398c1397,1398
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handle
>             BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             buf[BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             [BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             bufBZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             buf[];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             [];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             buf];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>             ];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      BZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      ];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [BZ_MAX_UNUSED;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      BZ_MAX_UNUSED;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      ;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED]
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf]
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[];
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[]
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[
1398,1399c1398,1399
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[];
>            bufN;
1398,1399c1398,1399
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[;
>            bufN;
1398,1399c1398,1399
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[]
>            bufN;
1398,1399c1398,1399
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[
>            bufN;
1398c1398
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED;
(89.0 %, 22591 bytes)
1398,1399c1398,1399
<       char      buf;
<       Int32     bufN;
---
>       char      buf
>            ;
1398,1399c1398,1399
<       char      buf;
<       Int32     bufN;
---
>       char      buf
>       Int32     bufN
1398,1399c1398,1399
<       char      buf;
<       Int32     bufN;
---
>       char      buf
>            bufN
1398,1399c1398,1399
<       char      buf;
<       Int32     bufN;
---
>       char      buf
>       Int32     
1398,1399c1398,1399
<       char      buf;
<       Int32     bufN;
---
>       char      buf
>            
1399c1399
<       Int32     bufN;
---
>            bufN;
1399c1399
<       Int32     bufN;
---
>            ;
1399c1399
<       Int32     bufN;
---
>            bufN
1399c1399
<       Int32     bufN;
---
>            
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>            bufN;
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>            ;
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>            bufN
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>            
>             writing;
1399c1399
<       Int32     bufN;
---
>       Int32     ;
1399c1399
<       Int32     bufN;
---
>       Int32     
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     ;
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     ;
>       Bool      ;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     
>       Bool      ;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     ;
>             ;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     
>             ;
1399c1399
<       Int32     bufN;
---
>       Int32     bufN
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>             writing;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>       Bool      ;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>             ;
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>       Bool      writing
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>             writing
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>       Bool      
1399,1400c1399,1400
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufN
>             
1400c1400
<       Bool      writing;
---
>             writing;
1400c1400
<       Bool      writing;
---
>             ;
1400c1400
<       Bool      writing;
---
>             writing
1400c1400
<       Bool      writing;
---
>             
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>             writing;
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>             ;
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>             writing
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>             
>        strm;
1400c1400
<       Bool      writing;
---
>       Bool      ;
1400c1400
<       Bool      writing;
---
>       Bool      
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      ;
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      ;
>       bz_stream ;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      
>       bz_stream ;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      ;
>        ;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      
>        ;
1400c1400
<       Bool      writing;
---
>       Bool      writing
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>        strm;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>       bz_stream ;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>        ;
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>       bz_stream strm
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>        strm
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>       bz_stream 
1400,1401c1400,1401
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writing
>        
1401c1401
<       bz_stream strm;
---
>        strm;
1401c1401
<       bz_stream strm;
---
>        ;
1401c1401
<       bz_stream strm;
---
>        strm
1401c1401
<       bz_stream strm;
---
>        
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>        strm;
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>        ;
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>        strm
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>        
>            lastErr;
1401c1401
<       bz_stream strm;
---
>       bz_stream ;
1401c1401
<       bz_stream strm;
---
>       bz_stream 
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream ;
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream 
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream ;
>       Int32     ;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream 
>       Int32     ;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream ;
>            ;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream 
>            ;
1401c1401
<       bz_stream strm;
---
>       bz_stream strm
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>            lastErr;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>       Int32     ;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>            ;
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>       Int32     lastErr
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>            lastErr
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>       Int32     
1401,1402c1401,1402
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strm
>            
1402c1402
<       Int32     lastErr;
---
>            lastErr;
1402c1402
<       Int32     lastErr;
---
>            ;
1402c1402
<       Int32     lastErr;
---
>            lastErr
1402c1402
<       Int32     lastErr;
---
>            
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>            lastErr;
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>            ;
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>            lastErr
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>            
>             initialisedOk;
1402c1402
<       Int32     lastErr;
---
>       Int32     ;
1402c1402
<       Int32     lastErr;
---
>       Int32     
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
>       Bool      ;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     
>       Bool      ;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
>             ;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     
>             ;
1402c1402
<       Int32     lastErr;
---
>       Int32     lastErr
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>             initialisedOk;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>       Bool      ;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>             ;
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>       Bool      initialisedOk
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>             initialisedOk
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>       Bool      
1402,1403c1402,1403
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErr
>             
1403c1403
<       Bool      initialisedOk;
---
>             initialisedOk;
1403c1403
<       Bool      initialisedOk;
---
>             ;
1403c1403
<       Bool      initialisedOk;
---
>             initialisedOk
1403c1403
<       Bool      initialisedOk;
---
>             
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>             initialisedOk;
>    
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>             ;
>    
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>             initialisedOk
>    
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>             
>    
1403c1403
<       Bool      initialisedOk;
---
>       Bool      ;
1403c1403
<       Bool      initialisedOk;
---
>       Bool      
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>       Bool      ;
>    
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>       Bool      
>    
1403c1403
<       Bool      initialisedOk;
---
>       Bool      ;
1405c1405
<    bzFile;
---
>    ;
1403c1403
<       Bool      initialisedOk;
---
>       Bool      
1405c1405
<    bzFile;
---
>    ;
1403,1405c1403,1405
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      ;
>    
>    ;
1403,1405c1403,1405
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      
>    
>    ;
1403c1403
<       Bool      initialisedOk;
---
>       Bool      initialisedOk
1403,1404c1403,1404
<       Bool      initialisedOk;
<    }
---
>       Bool      initialisedOk
>    
1403c1403
<       Bool      initialisedOk;
---
>       Bool      initialisedOk
1405c1405
<    bzFile;
---
>    ;
1403,1405c1403,1405
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      initialisedOk
>    
>    ;
1403c1403
<       Bool      initialisedOk;
---
>       Bool      initialisedOk
1405c1405
<    bzFile;
---
>    bzFile
1403,1405c1403,1405
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      initialisedOk
>    
>    bzFile
1403c1403
<       Bool      initialisedOk;
---
>       Bool      initialisedOk
1405c1405
<    bzFile;
---
>    
1403,1405c1403,1405
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      initialisedOk
>    
>    
1404c1404
<    }
---
>    
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    ;
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    bzFile
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    
1404c1404
<    }
---
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    ;
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
(89.0 %, 22590 bytes)
1404c1404
<    }
---
>    
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    ;
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    bzFile
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    
1404c1404
<    }
---
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    ;
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1404,1405c1404,1405
<    }
<    bzFile;
---
>    
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    ;
1405c1405
<    bzFile;
---
>    
1405c1405
<    bzFile;
---
>    ;
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    ;
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    ;
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    bzFile
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE*  
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> *  
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE  
1405c1405
<    bzFile;
---
>    bzFile
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>   
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> *  
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>   
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> * BZ_APIBZ2_bzWriteOpen 
>                      int*  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                      int*  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      int*  bzerror,      
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
1413c1413
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE  
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
>                      int*  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE  
>                      int*  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
>                     ( *  bzerror,      
1413,1414c1413,1414
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE  
>                     ( *  bzerror,      
(89.0 %, 22584 bytes)
1413c1413
< * BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
1413c1413
< * BZ_APIBZ2_bzWriteOpen 
---
>   
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                      int*  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      int*  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                     ( *  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                     ( *  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                      *  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      *  bzerror,      
1413c1413
< * BZ_APIBZ2_bzWriteOpen 
---
> *  
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( *  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      *  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( int  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int  bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     (   bzerror,      
1413,1414c1413,1414
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                        bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                        bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                      int*  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                      *  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                      int  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                        ,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( *  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                     (   ,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
1414c1414
<                     ( int*  bzerror,      
---
>                     (   bzerror      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( *        
1414c1414
<                     ( int*  bzerror,      
---
>                     (         
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int        
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int*        
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
1414c1414
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        f, 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE* , 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * , 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE , 
1414,1415c1414,1415
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        , 
1415c1415
<                       FILE* f, 
---
>                       * f, 
1415c1415
<                       FILE* f, 
---
>                        f, 
1415c1415
<                       FILE* f, 
---
>                       * , 
1415c1415
<                       FILE* f, 
---
>                        , 
1415c1415
<                       FILE* f, 
---
>                       * f 
1415c1415
<                       FILE* f, 
---
>                        f 
1415c1415
<                       FILE* f, 
---
>                       *  
1415c1415
<                       FILE* f, 
---
>                         
1415c1415
<                       FILE* f, 
---
>                       FILE f, 
1415c1415
<                       FILE* f, 
---
>                       FILE , 
1415c1415
<                       FILE* f, 
---
>                       FILE f 
1415c1415
<                       FILE* f, 
---
>                       FILE  
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
1415c1415
<                       FILE* f, 
---
>                       FILE* , 
1415c1415
<                       FILE* f, 
---
>                       FILE*  
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          , 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
1415c1415
<                       FILE* f, 
---
>                       FILE* f 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k, 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   , 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          , 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   blockSize100k 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k 
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int    
1415,1416c1415,1416
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                           
1416c1416
<                       int   blockSize100k, 
---
>                          blockSize100k, 
1416c1416
<                       int   blockSize100k, 
---
>                          , 
1416c1416
<                       int   blockSize100k, 
---
>                          blockSize100k 
1416c1416
<                       int   blockSize100k, 
---
>                           
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
1416c1416
<                       int   blockSize100k, 
---
>                       int   , 
1416c1416
<                       int   blockSize100k, 
---
>                       int    
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                       int   ,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          ,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          ,
1416c1416
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   ,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          ,
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   verbosity
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   
1416,1417c1416,1417
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          
1417c1417
<                       int   verbosity,
---
>                          verbosity,
1417c1417
<                       int   verbosity,
---
>                          ,
1417c1417
<                       int   verbosity,
---
>                          verbosity
1417c1417
<                       int   verbosity,
---
>                          
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
1417c1417
<                       int   verbosity,
---
>                       int   ,
1417c1417
<                       int   verbosity,
---
>                       int   
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                       int    )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                           )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                           )
1417c1417
<                       int   verbosity,
---
>                       int   verbosity
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           )
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int   workFactor 
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor 
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    
1417,1418c1417,1418
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           
1418c1418
<                       int   workFactor )
---
>                          workFactor )
1418c1418
<                       int   workFactor )
---
>                           )
1418c1418
<                       int   workFactor )
---
>                          workFactor 
1418c1418
<                       int   workFactor )
---
>                           
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                          workFactor )
> 
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                           )
> 
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                          workFactor 
> 
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                           
> 
1418c1418
<                       int   workFactor )
---
>                       int    )
1418c1418
<                       int   workFactor )
---
>                       int    
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                       int    )
> 
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                       int    
> 
1418c1418
<                       int   workFactor )
---
>                       int    )
1420c1420
<    Int32   ret;
---
>       ret;
1418c1418
<                       int   workFactor )
---
>                       int    
1420c1420
<    Int32   ret;
---
>       ret;
1418,1420c1418,1420
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int    )
> 
>       ret;
1418,1420c1418,1420
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int    
> 
>       ret;
1418c1418
<                       int   workFactor )
---
>                       int   workFactor 
1418,1419c1418,1419
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
1418c1418
<                       int   workFactor )
---
>                       int   workFactor 
1420c1420
<    Int32   ret;
---
>       ret;
1418,1420c1418,1420
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>       ret;
1418c1418
<                       int   workFactor )
---
>                       int   workFactor 
1420c1420
<    Int32   ret;
---
>    Int32   ;
1418,1420c1418,1420
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>    Int32   ;
1418c1418
<                       int   workFactor )
---
>                       int   workFactor 
1420c1420
<    Int32   ret;
---
>       ;
1418,1420c1418,1420
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>       ;
1419c1419
< {
---
> 
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>       ret;
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>    Int32   ;
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>       ;
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>    Int32   ret
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>       ret
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>    Int32   
1419,1420c1419,1420
< {
<    Int32   ret;
---
> 
>       
1420c1420
<    Int32   ret;
---
>       ret;
1420c1420
<    Int32   ret;
---
>       ;
1420c1420
<    Int32   ret;
---
>       ret
1420c1420
<    Int32   ret;
---
>       
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>       ret;
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>       ;
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>       ret
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>       
>    * bzf = NULL;
1420c1420
<    Int32   ret;
---
>    Int32   ;
1420c1420
<    Int32   ret;
---
>    Int32   
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ;
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ;
>    bzFile bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   
>    bzFile bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ;
>     bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   
>     bzf = NULL;
1420c1420
<    Int32   ret;
---
>    Int32   ret
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>    * bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>    bzFile bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>     bzf = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>    bzFile*  = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>    *  = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>    bzFile  = NULL;
1420,1421c1420,1421
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret
>      = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>     bzf = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    *  = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>      = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    * bzf  NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>     bzf  NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    *   NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>       NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile bzf = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile  = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile bzf  NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile   NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile bzf = ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile  = ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile bzf  ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile   ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*  = ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*   ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*  = 
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile*   
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  ;
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL;
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1421c1421
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  ;
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
(89.0 %, 22579 bytes)
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    ();
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
1421c1421
<    bzFile* bzf  ;
---
>    bzFile* bzf  
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    );
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    ();
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    );
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1423c1423
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.0 %, 22570 bytes)
1423c1423
<    (BZ_OK);
---
>    BZ_OK);
1423c1423
<    (BZ_OK);
---
>    );
1423c1423
<    (BZ_OK);
---
>    BZ_OK;
1423c1423
<    (BZ_OK);
---
>    ;
(89.0 %, 22568 bytes)
1423c1423
<    BZ_OK;
---
>    ;
1425c1425
<    if (f == NULL ||
---
>     (f == NULL ||
1423c1423
<    BZ_OK;
---
>    
1425c1425
<    if (f == NULL ||
---
>     (f == NULL ||
(89.0 %, 22561 bytes)
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>     ( == NULL ||
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>      == NULL ||
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>     (f  NULL ||
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>     f  NULL ||
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>     (  NULL ||
1423c1423
<    ;
---
>    
1425c1425
<     (f == NULL ||
---
>       NULL ||
1425c1425
<     (f == NULL ||
---
>     f == NULL ||
1425c1425
<     (f == NULL ||
---
>      == NULL ||
1425c1425
<     (f == NULL ||
---
>     f  NULL ||
1425c1425
<     (f == NULL ||
---
>       NULL ||
1425c1425
<     (f == NULL ||
---
>     f ==  ||
1425c1425
<     (f == NULL ||
---
>      ==  ||
1425c1425
<     (f == NULL ||
---
>     f   ||
1425c1425
<     (f == NULL ||
---
>        ||
1425c1425
<     (f == NULL ||
---
>     ( == NULL ||
1425c1425
<     (f == NULL ||
---
>     (  NULL ||
(89.0 %, 22557 bytes)
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>       NULL 
>         < 1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        
>         < 1 || blockSize100k > 9 ||
1425c1425
<     (  NULL ||
---
>     (   ||
1425c1425
<     (  NULL ||
---
>     (   
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   ||
>         < 1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   
>         < 1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   ||
>        blockSize100k  1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   
>        blockSize100k  1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   ||
>          1 || blockSize100k > 9 ||
1425,1426c1425,1426
<     (  NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>     (   
>          1 || blockSize100k > 9 ||
(89.0 %, 22551 bytes)
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1 || blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <  || blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           || blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         < 1  blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1  blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <   blockSize100k > 9 ||
1426c1426
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
(89.0 %, 22537 bytes)
1426c1426
<          1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>           ||  > 9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>             > 9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>           || blockSize100k  9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>            blockSize100k  9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>           ||   9 ||
1426c1426
<          1 || blockSize100k > 9 ||
---
>              9 ||
(89.0 %, 22534 bytes)
1426c1426
<            blockSize100k > 9 ||
---
>              9 ||
1426c1426
<            blockSize100k > 9 ||
---
>             >  ||
1426c1426
<            blockSize100k > 9 ||
---
>               ||
1426c1426
<            blockSize100k > 9 ||
---
>             > 9 
1426c1426
<            blockSize100k > 9 ||
---
>              9 
1426c1426
<            blockSize100k > 9 ||
---
>             >  
1426c1426
<            blockSize100k > 9 ||
---
>               
(89.0 %, 22520 bytes)
1426c1426
<              9 ||
---
>               
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               ||
>         < 0 || workFactor > 0 ||
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               
>         < 0 || workFactor > 0 ||
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               ||
>        workFactor  0 || workFactor > 0 ||
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               
>        workFactor  0 || workFactor > 0 ||
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               ||
>          0 || workFactor > 0 ||
1426,1427c1426,1427
<              9 ||
<        workFactor < 0 || workFactor > 0 ||
---
>               
>          0 || workFactor > 0 ||
(89.0 %, 22517 bytes)
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>          0 || workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>         <  || workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>           || workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>         < 0  workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>          0  workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>         <   workFactor > 0 ||
1427c1427
<        workFactor < 0 || workFactor > 0 ||
---
>            workFactor > 0 ||
(89.0 %, 22506 bytes)
1427c1427
<          0 || workFactor > 0 ||
---
>            workFactor > 0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>           ||  > 0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>             > 0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>           || workFactor  0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>            workFactor  0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>           ||   0 ||
1427c1427
<          0 || workFactor > 0 ||
---
>              0 ||
(89.0 %, 22503 bytes)
1427c1427
<            workFactor > 0 ||
---
>              0 ||
1427c1427
<            workFactor > 0 ||
---
>             >  ||
1427c1427
<            workFactor > 0 ||
---
>               ||
1427c1427
<            workFactor > 0 ||
---
>             > 0 
1427c1427
<            workFactor > 0 ||
---
>              0 
1427c1427
<            workFactor > 0 ||
---
>             >  
1427c1427
<            workFactor > 0 ||
---
>               
(89.0 %, 22492 bytes)
1427c1427
<              0 ||
---
>               
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               ||
>         < 0 || verbosity > 4)
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               
>         < 0 || verbosity > 4)
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               ||
>        verbosity  0 || verbosity > 4)
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               
>        verbosity  0 || verbosity > 4)
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               ||
>          0 || verbosity > 4)
1427,1428c1427,1428
<              0 ||
<        verbosity < 0 || verbosity > 4)
---
>               
>          0 || verbosity > 4)
(89.0 %, 22489 bytes)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>          0 || verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>         <  || verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>           || verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>         < 0  verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>          0  verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>         <   verbosity > 4)
1428c1428
<        verbosity < 0 || verbosity > 4)
---
>            verbosity > 4)
(89.0 %, 22479 bytes)
1428c1428
<          0 || verbosity > 4)
---
>            verbosity > 4)
1428c1428
<          0 || verbosity > 4)
---
>           ||  > 4)
1428c1428
<          0 || verbosity > 4)
---
>             > 4)
1428c1428
<          0 || verbosity > 4)
---
>           || verbosity  4)
1428c1428
<          0 || verbosity > 4)
---
>            verbosity  4)
1428c1428
<          0 || verbosity > 4)
---
>           ||   4)
1428c1428
<          0 || verbosity > 4)
---
>              4)
(89.0 %, 22476 bytes)
1428c1428
<            verbosity > 4)
---
>              4)
1428c1428
<            verbosity > 4)
---
>             > )
1428c1428
<            verbosity > 4)
---
>              )
1428c1428
<            verbosity > 4)
---
>             > 4
1428c1428
<            verbosity > 4)
---
>              4
1428c1428
<            verbosity > 4)
---
>             > 
1428c1428
<            verbosity > 4)
---
>              
1428c1428
<            verbosity > 4)
---
>            verbosity  4)
1428c1428
<            verbosity > 4)
---
>            verbosity  )
(89.0 %, 22466 bytes)
1428c1428
<              4)
---
>              
1428,1429c1428,1429
<              4)
<       ;
---
>              )
>       
1428,1429c1428,1429
<              4)
<       ;
---
>              
>       
1428c1428
<              4)
---
>              )
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428c1428
<              4)
---
>              
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428,1429c1428,1429
<              4)
<       ;
---
>              )
>       
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428,1429c1428,1429
<              4)
<       ;
---
>              
>       
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428c1428
<              4)
---
>              4
1428,1429c1428,1429
<              4)
<       ;
---
>              4
>       
1428c1428
<              4)
---
>              4
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428,1429c1428,1429
<              4)
<       ;
---
>              4
>       
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1428c1428
<              4)
---
>              4
1431c1431
<    if (ferror(f))
---
>    if ferror(f))
1428,1429c1428,1429
<              4)
<       ;
---
>              4
>       
1431c1431
<    if (ferror(f))
---
>    if ferror(f))
1428c1428
<              4)
---
>              4
1431c1431
<    if (ferror(f))
---
>     ferror(f))
1428,1429c1428,1429
<              4)
<       ;
---
>              4
>       
1431c1431
<    if (ferror(f))
---
>     ferror(f))
1429c1429
<       ;
---
>       
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>    if ferror(f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>     ferror(f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>    if ((f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>     ((f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>    if (f))
1429c1429
<       ;
---
>       
1431c1431
<    if (ferror(f))
---
>     (f))
1431c1431
<    if (ferror(f))
---
>     (ferror(f))
1431c1431
<    if (ferror(f))
---
>     ferror(f))
1431c1431
<    if (ferror(f))
---
>     ((f))
(89.0 %, 22464 bytes)
1431c1431
<     (ferror(f))
---
>     ferror(f))
1431c1431
<     (ferror(f))
---
>     (f))
1431c1431
<     (ferror(f))
---
>     ferrorf))
1431c1431
<     (ferror(f))
---
>     f))
1431c1431
<     (ferror(f))
---
>     ferror())
1431c1431
<     (ferror(f))
---
>     ())
1431c1431
<     (ferror(f))
---
>     ferror))
1431c1431
<     (ferror(f))
---
>     ))
1431c1431
<     (ferror(f))
---
>     ((f))
1431c1431
<     (ferror(f))
---
>     (f))
1431c1431
<     (ferror(f))
---
>     (())
1431c1431
<     (ferror(f))
---
>     ())
1431c1431
<     (ferror(f))
---
>     ((f)
1431c1431
<     (ferror(f))
---
>     (f)
(89.0 %, 22458 bytes)
1431c1431
<     ((f))
---
>     (f))
1431c1431
<     ((f))
---
>     ())
1431c1431
<     ((f))
---
>     (f)
1431c1431
<     ((f))
---
>     ()
1431c1431
<     ((f))
---
>     (f)
(89.0 %, 22456 bytes)
1431,1432c1431,1432
<     (f)
<       ;
---
>     ()
>       
1431,1432c1431,1432
<     (f)
<       ;
---
>     (
>       
1431c1431
<     (f)
---
>     ()
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431c1431
<     (f)
---
>     (
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431,1432c1431,1432
<     (f)
<       ;
---
>     ()
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431,1432c1431,1432
<     (f)
<       ;
---
>     (
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431c1431
<     (f)
---
>     (f
1431,1432c1431,1432
<     (f)
<       ;
---
>     (f
>       
1431c1431
<     (f)
---
>     (f
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431,1432c1431,1432
<     (f)
<       ;
---
>     (f
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1431c1431
<     (f)
---
>     (f
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1431,1432c1431,1432
<     (f)
<       ;
---
>     (f
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1431c1431
<     (f)
---
>     (f
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1431,1432c1431,1432
<     (f)
<       ;
---
>     (f
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1432c1432
<       ;
---
>       
1432c1432
<       ;
---
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1432c1432
<       ;
---
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1432c1432
<       ;
---
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1432c1432
<       ;
---
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf =  ( sizeof(bzFile) );
1432c1432
<       ;
---
>       
1434c1434
<    bzf = malloc ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) );
(89.0 %, 22452 bytes)
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>       ( sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>      malloc  sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>        sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>      malloc ( (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>       ( (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>      malloc  (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>        (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =   sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =  ( (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =   (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =   sizeofbzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =  ( bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     =   bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  sizeof(bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  (bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  sizeofbzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  bzFile) );
1434c1434
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  sizeof() );
(89.0 %, 22446 bytes)
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   sizeof(bzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   (bzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   sizeofbzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   bzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   sizeof() );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   () );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   sizeof) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =   ) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( (bzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( bzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( () );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( ) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( (bzFile );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( bzFile );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( ( );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  (  );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof) );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof) ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() )
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( )
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() 
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( 
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile );
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile )
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile 
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile );
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile ;
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile )
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile 
>     (bzf == NULL)
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) ;
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) 
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) ;
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) 
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) ;
>    if bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) 
>    if bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) ;
>     bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) 
>     bzf == NULL)
1434c1434
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) )
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>     (bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>    if bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>     bzf == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>    if ( == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>     ( == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>    if  == NULL)
1434,1435c1434,1435
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>     =  ( sizeof(bzFile) )
>      == NULL)
1435c1435
<    if (bzf == NULL)
---
>     (bzf == NULL)
1435c1435
<    if (bzf == NULL)
---
>     bzf == NULL)
1435c1435
<    if (bzf == NULL)
---
>     ( == NULL)
1435c1435
<    if (bzf == NULL)
---
>      == NULL)
1435c1435
<    if (bzf == NULL)
---
>     (bzf  NULL)
1435c1435
<    if (bzf == NULL)
---
>     bzf  NULL)
1435c1435
<    if (bzf == NULL)
---
>     (  NULL)
(89.0 %, 22444 bytes)
1435c1435
<     (bzf == NULL)
---
>     bzf == NULL)
1435c1435
<     (bzf == NULL)
---
>      == NULL)
1435c1435
<     (bzf == NULL)
---
>     bzf  NULL)
1435c1435
<     (bzf == NULL)
---
>       NULL)
1435c1435
<     (bzf == NULL)
---
>     bzf == )
1435c1435
<     (bzf == NULL)
---
>      == )
1435c1435
<     (bzf == NULL)
---
>     bzf  )
1435c1435
<     (bzf == NULL)
---
>       )
1435c1435
<     (bzf == NULL)
---
>     ( == NULL)
1435c1435
<     (bzf == NULL)
---
>     (  NULL)
1435c1435
<     (bzf == NULL)
---
>     ( == )
1435c1435
<     (bzf == NULL)
---
>     (  )
1435c1435
<     (bzf == NULL)
---
>     ( == NULL
1435c1435
<     (bzf == NULL)
---
>     (  NULL
1435c1435
<     (bzf == NULL)
---
>     ( == 
1435c1435
<     (bzf == NULL)
---
>     (  
1435c1435
<     (bzf == NULL)
---
>     (bzf  NULL)
1435c1435
<     (bzf == NULL)
---
>     (bzf  )
(89.1 %, 22439 bytes)
1435c1435
<     (  NULL)
---
>     (  
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  )
>       
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  
>       
1435c1435
<     (  NULL)
---
>     (  )
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435c1435
<     (  NULL)
---
>     (  
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  )
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435c1435
<     (  NULL)
---
>     (  NULL
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  NULL
>       
1435c1435
<     (  NULL)
---
>     (  NULL
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  NULL
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1435c1435
<     (  NULL)
---
>     (  NULL
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  NULL
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1435c1435
<     (  NULL)
---
>     (  NULL
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1435,1436c1435,1436
<     (  NULL)
<       ;
---
>     (  NULL
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1436c1436
<       ;
---
>       
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    ();
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
1436c1436
<       ;
---
>       
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    );
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    ();
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    );
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1438c1438
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.1 %, 22430 bytes)
1438c1438
<    (BZ_OK);
---
>    BZ_OK);
1438c1438
<    (BZ_OK);
---
>    );
1438c1438
<    (BZ_OK);
---
>    BZ_OK;
1438c1438
<    (BZ_OK);
---
>    ;
(89.1 %, 22428 bytes)
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    ;
>    ->initialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    
>    ->initialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    ;
>    bzfinitialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    
>    bzfinitialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    ;
>    initialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    
>    initialisedOk = False;
1438c1438
<    BZ_OK;
---
>    BZ_OK
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    ->initialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    bzfinitialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    initialisedOk = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    bzf-> = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    -> = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>    bzf = False;
1438,1439c1438,1439
<    BZ_OK;
<    bzf->initialisedOk = False;
---
>    BZ_OK
>     = False;
1439c1439
<    bzf->initialisedOk = False;
---
>    ->initialisedOk = False;
1439c1439
<    bzf->initialisedOk = False;
---
>    initialisedOk = False;
1439c1439
<    bzf->initialisedOk = False;
---
>    -> = False;
1439c1439
<    bzf->initialisedOk = False;
---
>     = False;
1439c1439
<    bzf->initialisedOk = False;
---
>    ->initialisedOk  False;
1439c1439
<    bzf->initialisedOk = False;
---
>    initialisedOk  False;
1439c1439
<    bzf->initialisedOk = False;
---
>    ->  False;
1439c1439
<    bzf->initialisedOk = False;
---
>      False;
1439c1439
<    bzf->initialisedOk = False;
---
>    bzfinitialisedOk = False;
1439c1439
<    bzf->initialisedOk = False;
---
>    bzf = False;
(89.1 %, 22409 bytes)
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      
>    bufN          = 0;
1439c1439
<      False;
---
>      False
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    ->bufN          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    bzfbufN          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    bufN          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    bzf->          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    ->          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>    bzf          = 0;
1439,1440c1439,1440
<      False;
<    bzf->bufN          = 0;
---
>      False
>              = 0;
1440c1440
<    bzf->bufN          = 0;
---
>    ->bufN          = 0;
1440c1440
<    bzf->bufN          = 0;
---
>    bufN          = 0;
1440c1440
<    bzf->bufN          = 0;
---
>    ->          = 0;
1440c1440
<    bzf->bufN          = 0;
---
>              = 0;
1440c1440
<    bzf->bufN          = 0;
---
>    ->bufN           0;
1440c1440
<    bzf->bufN          = 0;
---
>    bufN           0;
1440c1440
<    bzf->bufN          = 0;
---
>    ->           0;
1440c1440
<    bzf->bufN          = 0;
---
>               0;
1440c1440
<    bzf->bufN          = 0;
---
>    bzfbufN          = 0;
1440c1440
<    bzf->bufN          = 0;
---
>    bzf          = 0;
(89.1 %, 22399 bytes)
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               
>    handle        = f;
1440c1440
<               0;
---
>               0
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    ->handle        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    bzfhandle        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    handle        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    bzf->        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    ->        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>    bzf        = f;
1440,1441c1440,1441
<               0;
<    bzf->handle        = f;
---
>               0
>            = f;
1441c1441
<    bzf->handle        = f;
---
>    ->handle        = f;
1441c1441
<    bzf->handle        = f;
---
>    handle        = f;
1441c1441
<    bzf->handle        = f;
---
>    ->        = f;
1441c1441
<    bzf->handle        = f;
---
>            = f;
1441c1441
<    bzf->handle        = f;
---
>    ->handle         f;
1441c1441
<    bzf->handle        = f;
---
>    handle         f;
1441c1441
<    bzf->handle        = f;
---
>    ->         f;
1441c1441
<    bzf->handle        = f;
---
>             f;
1441c1441
<    bzf->handle        = f;
---
>    bzfhandle        = f;
1441c1441
<    bzf->handle        = f;
---
>    bzf        = f;
(89.1 %, 22387 bytes)
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             
>    writing       = True;
1441c1441
<             f;
---
>             f
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    ->writing       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    bzfwriting       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    writing       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    bzf->       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    ->       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>    bzf       = True;
1441,1442c1441,1442
<             f;
<    bzf->writing       = True;
---
>             f
>           = True;
1442c1442
<    bzf->writing       = True;
---
>    ->writing       = True;
1442c1442
<    bzf->writing       = True;
---
>    writing       = True;
1442c1442
<    bzf->writing       = True;
---
>    ->       = True;
1442c1442
<    bzf->writing       = True;
---
>           = True;
1442c1442
<    bzf->writing       = True;
---
>    ->writing        True;
1442c1442
<    bzf->writing       = True;
---
>    writing        True;
1442c1442
<    bzf->writing       = True;
---
>    ->        True;
1442c1442
<    bzf->writing       = True;
---
>            True;
(89.1 %, 22374 bytes)
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>            
>    ->strm.bzalloc  = NULL;
1442c1442
<           = True;
---
>           = ;
1442c1442
<           = True;
---
>           = 
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = ;
>    ->strm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = 
>    ->strm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = ;
>    bzfstrm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = 
>    bzfstrm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = ;
>    strm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = 
>    strm.bzalloc  = NULL;
1442c1442
<           = True;
---
>           = True
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = True
>    ->strm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = True
>    bzfstrm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = True
>    strm.bzalloc  = NULL;
1442,1443c1442,1443
<           = True;
<    bzf->strm.bzalloc  = NULL;
---
>           = True
>    bzf->.bzalloc  = NULL;
(89.1 %, 22369 bytes)
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    strm.bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    ->.bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    ->strmbzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    strmbzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    ->bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf.bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrmbzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf.  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc   NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bzalloc   NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.   NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->   NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->strmbzalloc  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->strm  = NULL;
1443c1443
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->strmbzalloc   NULL;
(89.1 %, 22355 bytes)
1443,1444c1443,1444
<    bzf  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf   
>    ->strm.bzfree   = NULL;
1443c1443
<    bzf  = NULL;
---
>    bzf  = ;
1443c1443
<    bzf  = NULL;
---
>    bzf  = 
1443,1444c1443,1444
<    bzf  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf  = ;
>    ->strm.bzfree   = NULL;
1443,1444c1443,1444
<    bzf  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf  = 
>    ->strm.bzfree   = NULL;
(89.1 %, 22346 bytes)
1444c1444
<    ->strm.bzfree   = NULL;
---
>       = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->.bzfree   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->bzfree   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->.   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->.bzfree    NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->bzfree    NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->.    NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->    NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->strmbzfree   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->strm   = NULL;
1444c1444
<    ->strm.bzfree   = NULL;
---
>    ->strmbzfree    NULL;
(89.1 %, 22333 bytes)
1444,1445c1444,1445
<       = NULL;
<    bzf->strm.opaque   = NULL;
---
>        
>    ->strm.opaque   = NULL;
1444c1444
<       = NULL;
---
>       = ;
1444c1444
<       = NULL;
---
>       = 
(89.1 %, 22324 bytes)
1445c1445
<    ->strm.opaque   = NULL;
---
>       = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->.opaque   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->opaque   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->.   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->.opaque    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->opaque    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->.    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->strmopaque   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->strm   = NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->strmopaque    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->strm    NULL;
1445c1445
<    ->strm.opaque   = NULL;
---
>    ->strmopaque   = ;
(89.1 %, 22311 bytes)
1445c1445
<       = NULL;
---
>        
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = ;
1445c1445
<       = NULL;
---
>       = 
1445c1445
<       = NULL;
---
>       = ;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = 
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = ;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = 
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = ;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = 
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1445c1445
<       = NULL;
---
>       = NULL
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if   0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if  == ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if   ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (  ) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0 workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if ( ==  workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (   workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  0) workFactor = 0;
1447c1447
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  ) workFactor = 0;
(89.1 %, 22299 bytes)
1447c1447
<    if (  0) workFactor = 0;
---
>    if (   workFactor = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  )  = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (    = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  ) workFactor  0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (   workFactor  0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  )   0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (     0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0  = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0   0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0  = ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0   ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)   0;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)  = ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)   ;
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)   0
1447c1447
<    if (  0) workFactor = 0;
---
>    if (  0)  = 
(89.1 %, 22288 bytes)
1447c1447
<    if (  0)   0;
---
>    if (  0)   
1447,1448c1447,1448
<    if (  0)   0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>    if (  0)   ;
>     = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1447,1448c1447,1448
<    if (  0)   0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>    if (  0)   
>     = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1447,1448c1447,1448
<    if (  0)   0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>    if (  0)   ;
>    ret  BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1447,1448c1447,1448
<    if (  0)   0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>    if (  0)   
>    ret  BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1447,1448c1447,1448
<    if (  0)   0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>    if (  0)   ;
>      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
(89.1 %, 22286 bytes)
1448c1448
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1448c1448
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>     =  ( &bzf->strm, blockSize100k, 
1448c1448
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>       ( &bzf->strm, blockSize100k, 
(89.1 %, 22282 bytes)
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>        &bzf->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>       ( bzf->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>        bzf->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>       ( &->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>        &->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>       ( ->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>        ->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  &bzf->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  bzf->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  &->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  ->strm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  &bzfstrm, blockSize100k, 
1448c1448
<      BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
---
>      BZ2_bzCompressInit  bzfstrm, blockSize100k, 
(89.1 %, 22263 bytes)
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        bzfstrm, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        strm, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        bzf->, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        ->, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        bzf, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>        , blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( ->strm, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( strm, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( ->, blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( , blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( ->strm blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( strm blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       ( -> blockSize100k, 
1448c1448
<       ( bzf->strm, blockSize100k, 
---
>       (  blockSize100k, 
(89.1 %, 22258 bytes)
1448c1448
<       ( strm, blockSize100k, 
---
>       (  blockSize100k, 
1448c1448
<       ( strm, blockSize100k, 
---
>       ( , , 
1448c1448
<       ( strm, blockSize100k, 
---
>       (  , 
1448c1448
<       ( strm, blockSize100k, 
---
>       ( , blockSize100k 
1448c1448
<       ( strm, blockSize100k, 
---
>       (  blockSize100k 
1448c1448
<       ( strm, blockSize100k, 
---
>       ( ,  
1448c1448
<       ( strm, blockSize100k, 
---
>       (   
(89.1 %, 22253 bytes)
1448c1448
<       (  blockSize100k, 
---
>       (   
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (  , 
>                               , workFactor );
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (   
>                               , workFactor );
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (  , 
>                               verbosity workFactor );
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (   
>                               verbosity workFactor );
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (  , 
>                                workFactor );
1448,1449c1448,1449
<       (  blockSize100k, 
<                               verbosity, workFactor );
---
>       (   
>                                workFactor );
(89.1 %, 22239 bytes)
1449c1449
<                               verbosity, workFactor );
---
>                                workFactor );
1449c1449
<                               verbosity, workFactor );
---
>                               ,  );
1449c1449
<                               verbosity, workFactor );
---
>                                 );
1449c1449
<                               verbosity, workFactor );
---
>                               , workFactor ;
1449c1449
<                               verbosity, workFactor );
---
>                                workFactor ;
1449c1449
<                               verbosity, workFactor );
---
>                               ,  ;
1449c1449
<                               verbosity, workFactor );
---
>                                 ;
1449c1449
<                               verbosity, workFactor );
---
>                               verbosity workFactor );
1449c1449
<                               verbosity, workFactor );
---
>                               verbosity  );
(89.2 %, 22229 bytes)
1449c1449
<                                workFactor );
---
>                                 ;
1449c1449
<                                workFactor );
---
>                                 )
1449c1449
<                                workFactor );
---
>                                 
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                 );
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                 ;
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                 )
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                 
>     (ret != BZ_OK)
1449c1449
<                                workFactor );
---
>                                workFactor ;
1449c1449
<                                workFactor );
---
>                                workFactor 
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor ;
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor 
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor ;
>    if ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor 
>    if ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor ;
>     ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor 
>     ret != BZ_OK)
1449c1449
<                                workFactor );
---
>                                workFactor )
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>     (ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>    if ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>     ret != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>    if ( != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>     ( != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>    if  != BZ_OK)
1449,1450c1449,1450
<                                workFactor );
<    if (ret != BZ_OK)
---
>                                workFactor )
>      != BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     (ret != BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     ret != BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     ( != BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>      != BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     (ret  BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     ret  BZ_OK)
1450c1450
<    if (ret != BZ_OK)
---
>     (  BZ_OK)
(89.2 %, 22227 bytes)
1450c1450
<     (ret != BZ_OK)
---
>     ret != BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>      != BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>     ret  BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>       BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>     ret != )
1450c1450
<     (ret != BZ_OK)
---
>      != )
1450c1450
<     (ret != BZ_OK)
---
>     ret  )
1450c1450
<     (ret != BZ_OK)
---
>       )
1450c1450
<     (ret != BZ_OK)
---
>     ( != BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>     (  BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>     ( != )
1450c1450
<     (ret != BZ_OK)
---
>     (  )
1450c1450
<     (ret != BZ_OK)
---
>     ( != BZ_OK
1450c1450
<     (ret != BZ_OK)
---
>     (  BZ_OK
1450c1450
<     (ret != BZ_OK)
---
>     ( != 
1450c1450
<     (ret != BZ_OK)
---
>     (  
1450c1450
<     (ret != BZ_OK)
---
>     (ret  BZ_OK)
1450c1450
<     (ret != BZ_OK)
---
>     (ret  )
(89.2 %, 22222 bytes)
1450c1450
<     (  BZ_OK)
---
>     (  
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  )
>       
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  
>       
1450c1450
<     (  BZ_OK)
---
>     (  )
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450c1450
<     (  BZ_OK)
---
>     (  
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  )
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450c1450
<     (  BZ_OK)
---
>     (  BZ_OK
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1450c1450
<     (  BZ_OK)
---
>     (  BZ_OK
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1450c1450
<     (  BZ_OK)
---
>     (  BZ_OK
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm.avail_in = 0;
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm.avail_in = 0;
1450c1450
<     (  BZ_OK)
---
>     (  BZ_OK
1453c1453
<    bzf->strm.avail_in = 0;
---
>    strm.avail_in = 0;
1450,1451c1450,1451
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    strm.avail_in = 0;
1451c1451
<       ;
---
>       
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    strm.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf.avail_in = 0;
1451c1451
<       ;
---
>       
1453c1453
<    bzf->strm.avail_in = 0;
---
>    .avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strm.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    strm.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    .avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->strmavail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    strmavail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    ->avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrmavail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfavail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm. = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf. = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzfstrm = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->.avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->avail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->. = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf-> = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->.avail_in  0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->avail_in  0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->.  0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->  0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->strmavail_in = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->strm = 0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->strmavail_in  0;
1453c1453
<    bzf->strm.avail_in = 0;
---
>    bzf->strm  0;
(89.2 %, 22207 bytes)
1453,1454c1453,1454
<    bzf = 0;
<    bzf->initialisedOk = True;
---
>    bzf  
>    ->initialisedOk = True;
1453c1453
<    bzf = 0;
---
>    bzf = ;
1453c1453
<    bzf = 0;
---
>    bzf = 
(89.2 %, 22201 bytes)
1454c1454
<    ->initialisedOk = True;
---
>      ;
1454c1454
<    ->initialisedOk = True;
---
>    -> = True;
1454c1454
<    ->initialisedOk = True;
---
>    ->  True;
1454c1454
<    ->initialisedOk = True;
---
>    -> = ;
1454c1454
<    ->initialisedOk = True;
---
>    ->  ;
1454c1454
<    ->initialisedOk = True;
---
>    -> = True
1454c1454
<    ->initialisedOk = True;
---
>    ->  True
1454c1454
<    ->initialisedOk = True;
---
>    -> = 
1454c1454
<    ->initialisedOk = True;
---
>    ->  
1454c1454
<    ->initialisedOk = True;
---
>    ->initialisedOk  True;
1454c1454
<    ->initialisedOk = True;
---
>    ->initialisedOk  ;
(89.2 %, 22181 bytes)
1454,1455c1454,1455
<      ;
<    return bzf;   
---
>      
>        
1455c1455
<    return bzf;   
---
>     bzf;   
1455c1455
<    return bzf;   
---
>     ;   
1455c1455
<    return bzf;   
---
>     bzf   
1455c1455
<    return bzf;   
---
>        
(89.2 %, 22175 bytes)
1455c1455
<     bzf;   
---
>     ;   
1455c1455
<     bzf;   
---
>        
1455,1456c1455,1456
<     bzf;   
< }
---
>     ;   
> 
1455,1456c1455,1456
<     bzf;   
< }
---
>        
> 
1455c1455
<     bzf;   
---
>     ;   
1461c1461
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
(89.2 %, 22172 bytes)
1455c1455
<     ;   
---
>        
1455,1456c1455,1456
<     ;   
< }
---
>        
> 
1455c1455
<     ;   
---
>        
1461c1461
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
1455,1456c1455
<     ;   
< }
---
>        
1461c1460,1461
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
1455c1455
<     ;   
---
>        
1461c1461
< void BZ_APIBZ2_bzWrite
---
> void 
(89.2 %, 22171 bytes)
1456c1456
< }
---
> 
1456d1455
< }
1461c1460,1461
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
1456d1455
< }
1461c1460,1461
< void BZ_APIBZ2_bzWrite
---
> 
> void 
1456d1455
< }
1461c1460,1461
< void BZ_APIBZ2_bzWrite
---
> 
>  
1456c1456
< }
---
> 
1462c1462
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1456d1455
< }
1461,1462c1460,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>  BZ_APIBZ2_bzWrite
>               int*    bzerror, 
1456d1455
< }
1461,1462c1460,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
> void 
>               int*    bzerror, 
1456d1455
< }
1461,1462c1460,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>  
>               int*    bzerror, 
1461c1461
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
1461c1461
< void BZ_APIBZ2_bzWrite
---
>  
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>               int*    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               int*    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>              ( *    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>              ( *    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>               *    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               *    bzerror, 
1461c1461
< void BZ_APIBZ2_bzWrite
---
> void 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int*    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( *    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               *    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( int    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int    bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              (     bzerror, 
1461,1462c1461,1462
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>                   bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>               *    bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>               int    bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>                   bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>               int*    , 
1462c1462
<              ( int*    bzerror, 
---
>               *    , 
1462c1462
<              ( int*    bzerror, 
---
>               int    , 
1462c1462
<              ( int*    bzerror, 
---
>                   , 
1462c1462
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>              (     bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>              ( *    , 
1462c1462
<              ( int*    bzerror, 
---
>              (     , 
1462c1462
<              ( int*    bzerror, 
---
>              ( *    bzerror 
1462c1462
<              ( int*    bzerror, 
---
>              (     bzerror 
1462c1462
<              ( int*    bzerror, 
---
>              ( *     
1462c1462
<              ( int*    bzerror, 
---
>              (      
1462c1462
<              ( int*    bzerror, 
---
>              ( int    bzerror, 
1462c1462
<              ( int*    bzerror, 
---
>              ( int    , 
1462c1462
<              ( int*    bzerror, 
---
>              ( int    bzerror 
1462c1462
<              ( int*    bzerror, 
---
>              ( int     
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror, 
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    , 
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror 
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int     
>                * b, 
1462c1462
<              ( int*    bzerror, 
---
>              ( int*    , 
1462c1462
<              ( int*    bzerror, 
---
>              ( int*     
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                BZFILE b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                 b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                 b, 
1462c1462
<              ( int*    bzerror, 
---
>              ( int*    bzerror 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                * b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                 b, 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE* , 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                * , 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE , 
1462,1463c1462,1463
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                 , 
1463c1463
<                BZFILE* b, 
---
>                * b, 
1463c1463
<                BZFILE* b, 
---
>                 b, 
1463c1463
<                BZFILE* b, 
---
>                * , 
1463c1463
<                BZFILE* b, 
---
>                 , 
1463c1463
<                BZFILE* b, 
---
>                * b 
1463c1463
<                BZFILE* b, 
---
>                 b 
1463c1463
<                BZFILE* b, 
---
>                *  
1463c1463
<                BZFILE* b, 
---
>                  
1463c1463
<                BZFILE* b, 
---
>                BZFILE b, 
1463c1463
<                BZFILE* b, 
---
>                BZFILE , 
1463c1463
<                BZFILE* b, 
---
>                BZFILE b 
1463c1463
<                BZFILE* b, 
---
>                BZFILE  
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b, 
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE , 
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b 
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE  
>                *   buf, 
1463c1463
<                BZFILE* b, 
---
>                BZFILE* , 
1463c1463
<                BZFILE* b, 
---
>                BZFILE*  
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                void   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                void   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                   buf, 
1463c1463
<                BZFILE* b, 
---
>                BZFILE* b 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                *   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                void   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                   buf, 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                void*   , 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                *   , 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                void   , 
1463,1464c1463,1464
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b 
>                   , 
1464c1464
<                void*   buf, 
---
>                *   buf, 
1464c1464
<                void*   buf, 
---
>                   buf, 
1464c1464
<                void*   buf, 
---
>                *   , 
1464c1464
<                void*   buf, 
---
>                   , 
1464c1464
<                void*   buf, 
---
>                *   buf 
1464c1464
<                void*   buf, 
---
>                   buf 
1464c1464
<                void*   buf, 
---
>                *    
1464c1464
<                void*   buf, 
---
>                    
1464c1464
<                void*   buf, 
---
>                void   buf, 
1464c1464
<                void*   buf, 
---
>                void   , 
1464c1464
<                void*   buf, 
---
>                void   buf 
1464c1464
<                void*   buf, 
---
>                void    
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void   buf, 
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void   , 
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void   buf 
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void    
>                     len )
1464c1464
<                void*   buf, 
---
>                void*   , 
1464c1464
<                void*   buf, 
---
>                void*    
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*    
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                int      )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*    
>                int      )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                      )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*    
>                      )
1464c1464
<                void*   buf, 
---
>                void*   buf 
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                     len )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int      )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                      )
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int     len 
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                     len 
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int      
1464,1465c1464,1465
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                      
1465c1465
<                int     len )
---
>                     len )
1465c1465
<                int     len )
---
>                      )
1465c1465
<                int     len )
---
>                     len 
1465c1465
<                int     len )
---
>                      
1465,1466c1465,1466
<                int     len )
< {
---
>                     len )
> 
1465,1466c1465,1466
<                int     len )
< {
---
>                      )
> 
1465,1466c1465,1466
<                int     len )
< {
---
>                     len 
> 
1465,1466c1465,1466
<                int     len )
< {
---
>                      
> 
1465c1465
<                int     len )
---
>                int      )
1465c1465
<                int     len )
---
>                int      
1465,1466c1465,1466
<                int     len )
< {
---
>                int      )
> 
1465,1466c1465,1466
<                int     len )
< {
---
>                int      
> 
1465c1465
<                int     len )
---
>                int      )
1467c1467
<    Int32   ret;
---
>       ret;
1465c1465
<                int     len )
---
>                int      
1467c1467
<    Int32   ret;
---
>       ret;
1465,1467c1465,1467
<                int     len )
< {
<    Int32   ret;
---
>                int      )
> 
>       ret;
1465,1467c1465,1467
<                int     len )
< {
<    Int32   ret;
---
>                int      
> 
>       ret;
1465c1465
<                int     len )
---
>                int     len 
1465,1466c1465,1466
<                int     len )
< {
---
>                int     len 
> 
1465c1465
<                int     len )
---
>                int     len 
1467c1467
<    Int32   ret;
---
>       ret;
1465,1467c1465,1467
<                int     len )
< {
<    Int32   ret;
---
>                int     len 
> 
>       ret;
1465c1465
<                int     len )
---
>                int     len 
1467c1467
<    Int32   ret;
---
>    Int32   ;
1465,1467c1465,1467
<                int     len )
< {
<    Int32   ret;
---
>                int     len 
> 
>    Int32   ;
1465c1465
<                int     len )
---
>                int     len 
1467c1467
<    Int32   ret;
---
>       ;
1465,1467c1465,1467
<                int     len )
< {
<    Int32   ret;
---
>                int     len 
> 
>       ;
1466c1466
< {
---
> 
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>       ret;
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>    Int32   ;
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>       ;
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>    Int32   ret
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>       ret
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>    Int32   
1466,1467c1466,1467
< {
<    Int32   ret;
---
> 
>       
1467c1467
<    Int32   ret;
---
>       ret;
1467c1467
<    Int32   ret;
---
>       ;
1467c1467
<    Int32   ret;
---
>       ret
1467c1467
<    Int32   ret;
---
>       
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>       ret;
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>       ;
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>       ret
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>       
>    * bzf = (bzFile*)b;
1467c1467
<    Int32   ret;
---
>    Int32   ;
1467c1467
<    Int32   ret;
---
>    Int32   
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ;
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ;
>    bzFile bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   
>    bzFile bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ;
>     bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   
>     bzf = (bzFile*)b;
1467c1467
<    Int32   ret;
---
>    Int32   ret
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>    * bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>    bzFile bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>     bzf = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>    bzFile*  = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>    *  = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>    bzFile  = (bzFile*)b;
1467,1468c1467,1468
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret
>      = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = *)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   *)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  *)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  ()b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  )b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile)b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = )b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *b;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFileb;
1468c1468
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(89.2 %, 22163 bytes)
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = ;
>     *bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = b
>     *bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = 
>     *bzf_4_4;
1468c1468
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *;
1468c1468
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>     *bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>     *bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>    char bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>    char bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>     bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>     bzf_4_4;
1468c1468
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *b
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     *bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     bzf_4_4;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char *;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     *;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char ;
1468,1469c1468,1469
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     ;
1469c1469
<    char *bzf_4_4;
---
>     *bzf_4_4;
1469c1469
<    char *bzf_4_4;
---
>     bzf_4_4;
1469c1469
<    char *bzf_4_4;
---
>     *;
1469c1469
<    char *bzf_4_4;
---
>     ;
1469c1469
<    char *bzf_4_4;
---
>     *bzf_4_4
1469c1469
<    char *bzf_4_4;
---
>     bzf_4_4
1469c1469
<    char *bzf_4_4;
---
>     *
1469c1469
<    char *bzf_4_4;
---
>     
1469c1469
<    char *bzf_4_4;
---
>    char bzf_4_4;
1469c1469
<    char *bzf_4_4;
---
>    char ;
1469c1469
<    char *bzf_4_4;
---
>    char bzf_4_4
1469c1469
<    char *bzf_4_4;
---
>    char 
1469,1470c1469,1470
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4;
>     int bzf_4_5;
(89.2 %, 22162 bytes)
1469c1469
<    char bzf_4_4;
---
>    char ;
1469c1469
<    char bzf_4_4;
---
>    char 
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>     int bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>     int bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>    unsigned  bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>    unsigned  bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>      bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>      bzf_4_5;
1469c1469
<    char bzf_4_4;
---
>    char bzf_4_4
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>     int bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned  bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>      bzf_4_5;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned int ;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>     int ;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned  ;
1469,1470c1469,1470
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>      ;
1470c1470
<    unsigned int bzf_4_5;
---
>     int bzf_4_5;
1470c1470
<    unsigned int bzf_4_5;
---
>      bzf_4_5;
1470c1470
<    unsigned int bzf_4_5;
---
>     int ;
1470c1470
<    unsigned int bzf_4_5;
---
>      ;
1470c1470
<    unsigned int bzf_4_5;
---
>     int bzf_4_5
1470c1470
<    unsigned int bzf_4_5;
---
>      bzf_4_5
1470c1470
<    unsigned int bzf_4_5;
---
>     int 
1470c1470
<    unsigned int bzf_4_5;
---
>      
1470c1470
<    unsigned int bzf_4_5;
---
>    unsigned  bzf_4_5;
(89.2 %, 22154 bytes)
1470c1470
<     int bzf_4_5;
---
>      bzf_4_5;
1470c1470
<     int bzf_4_5;
---
>      ;
1470c1470
<     int bzf_4_5;
---
>      bzf_4_5
1470c1470
<     int bzf_4_5;
---
>      
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>      bzf_4_5;
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>      ;
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>      bzf_4_5
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>      
>     *bzf_4_0;
1470c1470
<     int bzf_4_5;
---
>     int ;
1470c1470
<     int bzf_4_5;
---
>     int 
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int ;
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int 
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int ;
>    char bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int 
>    char bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int ;
>     bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int 
>     bzf_4_0;
1470c1470
<     int bzf_4_5;
---
>     int bzf_4_5
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>     *bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>    char bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>     bzf_4_0;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>    char *;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>     *;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>    char ;
1470,1471c1470,1471
<     int bzf_4_5;
<    char *bzf_4_0;
---
>     int bzf_4_5
>     ;
1471c1471
<    char *bzf_4_0;
---
>     *bzf_4_0;
1471c1471
<    char *bzf_4_0;
---
>     bzf_4_0;
1471c1471
<    char *bzf_4_0;
---
>     *;
1471c1471
<    char *bzf_4_0;
---
>     ;
1471c1471
<    char *bzf_4_0;
---
>     *bzf_4_0
1471c1471
<    char *bzf_4_0;
---
>     bzf_4_0
1471c1471
<    char *bzf_4_0;
---
>     *
1471c1471
<    char *bzf_4_0;
---
>     
1471c1471
<    char *bzf_4_0;
---
>    char bzf_4_0;
1471c1471
<    char *bzf_4_0;
---
>    char ;
1471c1471
<    char *bzf_4_0;
---
>    char bzf_4_0
1471c1471
<    char *bzf_4_0;
---
>    char 
1471,1472c1471,1472
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0;
>     int bzf_4_1;
(89.2 %, 22153 bytes)
1471c1471
<    char bzf_4_0;
---
>    char ;
1471c1471
<    char bzf_4_0;
---
>    char 
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>     int bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>     int bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>    unsigned  bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>    unsigned  bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>      bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>      bzf_4_1;
1471c1471
<    char bzf_4_0;
---
>    char bzf_4_0
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      bzf_4_1;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned int ;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int ;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  ;
1471,1472c1471,1472
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      ;
1472c1472
<    unsigned int bzf_4_1;
---
>     int bzf_4_1;
1472c1472
<    unsigned int bzf_4_1;
---
>      bzf_4_1;
1472c1472
<    unsigned int bzf_4_1;
---
>     int ;
1472c1472
<    unsigned int bzf_4_1;
---
>      ;
1472c1472
<    unsigned int bzf_4_1;
---
>     int bzf_4_1
1472c1472
<    unsigned int bzf_4_1;
---
>      bzf_4_1
1472c1472
<    unsigned int bzf_4_1;
---
>     int 
(89.2 %, 22145 bytes)
1472c1472
<     int bzf_4_1;
---
>      bzf_4_1;
1472c1472
<     int bzf_4_1;
---
>      ;
1472c1472
<     int bzf_4_1;
---
>      bzf_4_1
1472c1472
<     int bzf_4_1;
---
>      
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>      bzf_4_1;
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>      ;
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>      bzf_4_1
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>      
>     bzf_3;
1472c1472
<     int bzf_4_1;
---
>     int ;
1472c1472
<     int bzf_4_1;
---
>     int 
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>    Bool ;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>    Bool ;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>     ;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>     ;
1472c1472
<     int bzf_4_1;
---
>     int bzf_4_1
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     bzf_3;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool ;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     ;
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool bzf_3
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     bzf_3
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool 
1472,1473c1472,1473
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     
1473c1473
<    Bool bzf_3;
---
>     bzf_3;
1473c1473
<    Bool bzf_3;
---
>     ;
1473c1473
<    Bool bzf_3;
---
>     bzf_3
1473c1473
<    Bool bzf_3;
---
>     
1473c1473
<    Bool bzf_3;
---
>     bzf_3;
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>     ;
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>     bzf_3
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>     
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool ;
1473c1473
<    Bool bzf_3;
---
>    Bool 
1473c1473
<    Bool bzf_3;
---
>    Bool ;
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool 
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool ;
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool 
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool ;
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool 
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool bzf_3
1473c1473
<    Bool bzf_3;
---
>    Bool bzf_3
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1473c1473
<    Bool bzf_3;
---
>    Bool bzf_3
1475c1475
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
(89.2 %, 22131 bytes)
1473c1473
<     bzf_3
---
>     
1475c1475
<    (BZ_OK);
---
>    (;
1473c1473
<     bzf_3
---
>     
1475c1475
<    (BZ_OK);
---
>    ;
1475c1475
<    (BZ_OK);
---
>    BZ_OK);
1475c1475
<    (BZ_OK);
---
>    );
1475c1475
<    (BZ_OK);
---
>    BZ_OK;
1475c1475
<    (BZ_OK);
---
>    ;
1475c1475
<    (BZ_OK);
---
>    BZ_OK)
1475c1475
<    (BZ_OK);
---
>    )
1475c1475
<    (BZ_OK);
---
>    BZ_OK
1475c1475
<    (BZ_OK);
---
>    
1475c1475
<    (BZ_OK);
---
>    ();
1475c1475
<    (BZ_OK);
---
>    (;
1475c1475
<    (BZ_OK);
---
>    ()
1475c1475
<    (BZ_OK);
---
>    (
1475,1476c1475,1476
<    (BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ();
>     (bzf == NULL || buf == NULL || len < 0)
(89.2 %, 22126 bytes)
1475c1475
<    ();
---
>    (;
1475c1475
<    ();
---
>    (
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (;
>     (bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (
>     (bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (;
>    if bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (
>    if bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (;
>     bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (
>     bzf == NULL || buf == NULL || len < 0)
1475c1475
<    ();
---
>    ()
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>     (bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>    if bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>     bzf == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>    if ( == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>     ( == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>    if  == NULL || buf == NULL || len < 0)
1475,1476c1475,1476
<    ();
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    ()
>      == NULL || buf == NULL || len < 0)
1476c1476
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     (bzf == NULL || buf == NULL || len < 0)
(89.2 %, 22121 bytes)
1476c1476
<     bzf == NULL || buf == NULL || len < 0)
---
>         buf == NULL || len < 0)
1476c1476
<     bzf == NULL || buf == NULL || len < 0)
---
>     bzf  NULL || buf == NULL || len < 0)
1476c1476
<     bzf == NULL || buf == NULL || len < 0)
---
>     bzf   || buf == NULL || len < 0)
(89.2 %, 22110 bytes)
1476c1476
<         buf == NULL || len < 0)
---
>             len < 0)
1476c1476
<         buf == NULL || len < 0)
---
>         buf  NULL || len < 0)
1476c1476
<         buf == NULL || len < 0)
---
>         buf   || len < 0)
(89.2 %, 22099 bytes)
1476c1476
<             len < 0)
---
>               
1476c1476
<             len < 0)
---
>             len  0)
1476c1476
<             len < 0)
---
>             len  )
1476c1476
<             len < 0)
---
>             len  0
1476c1476
<             len < 0)
---
>             len  
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len  0)
>       
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len  )
>       
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len  0
>       
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len  
>       
1476c1476
<             len < 0)
---
>             len < )
1476c1476
<             len < 0)
---
>             len < 
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len < )
>       
1476,1477c1476,1477
<             len < 0)
<       ;
---
>             len < 
>       
1476c1476
<             len < 0)
---
>             len < )
1478c1478
<    if (!bzf_3)
---
>     (!bzf_3)
1476c1476
<             len < 0)
---
>             len < 
1478c1478
<    if (!bzf_3)
---
>     (!bzf_3)
(89.2 %, 22097 bytes)
1476,1477c1476,1477
<             len  )
<       ;
---
>             len  
>       
1476c1476
<             len  )
---
>             len  
1478c1478
<    if (!bzf_3)
---
>     (!bzf_3)
1476,1478c1476,1478
<             len  )
<       ;
<    if (!bzf_3)
---
>             len  
>       
>     (!bzf_3)
1476c1476
<             len  )
---
>             len  
1478c1478
<    if (!bzf_3)
---
>    if !bzf_3)
1476,1478c1476,1478
<             len  )
<       ;
<    if (!bzf_3)
---
>             len  
>       
>    if !bzf_3)
1476c1476
<             len  )
---
>             len  
1478c1478
<    if (!bzf_3)
---
>     !bzf_3)
1476,1478c1476,1478
<             len  )
<       ;
<    if (!bzf_3)
---
>             len  
>       
>     !bzf_3)
1477c1477
<       ;
---
>       
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>     (!bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>    if !bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>     !bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>    if (bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>     (bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>    if bzf_3)
1477,1478c1477,1478
<       ;
<    if (!bzf_3)
---
>       
>     bzf_3)
1478c1478
<    if (!bzf_3)
---
>     (!bzf_3)
1478c1478
<    if (!bzf_3)
---
>     !bzf_3)
1478c1478
<    if (!bzf_3)
---
>     (bzf_3)
(89.2 %, 22095 bytes)
1478c1478
<     (!bzf_3)
---
>     !bzf_3)
1478c1478
<     (!bzf_3)
---
>     bzf_3)
1478c1478
<     (!bzf_3)
---
>     !)
1478c1478
<     (!bzf_3)
---
>     )
1478c1478
<     (!bzf_3)
---
>     !bzf_3
1478c1478
<     (!bzf_3)
---
>     bzf_3
(89.2 %, 22093 bytes)
1478c1478
<     !bzf_3
---
>     bzf_3
1480c1480
<    if (ferror(bzf->handle))
---
>     (ferror(bzf->handle))
1478c1478
<     !bzf_3
---
>     
1480c1480
<    if (ferror(bzf->handle))
---
>     (ferror(bzf->handle))
(89.2 %, 22090 bytes)
1478c1478
<     bzf_3
---
>     
1480c1480
<     (ferror(bzf->handle))
---
>     ((bzf->handle))
1478,1480c1478,1480
<     bzf_3
<       ;
<     (ferror(bzf->handle))
---
>     
>       
>     ((bzf->handle))
1478c1478
<     bzf_3
---
>     
1480c1480
<     (ferror(bzf->handle))
---
>     (bzf->handle))
1478,1480c1478,1480
<     bzf_3
<       ;
<     (ferror(bzf->handle))
---
>     
>       
>     (bzf->handle))
(89.2 %, 22079 bytes)
1479,1480c1479,1480
<       ;
<     ((bzf->handle))
---
>       
>     ((->handle))
1479,1480c1479,1480
<       ;
<     ((bzf->handle))
---
>       
>     (->handle))
1479,1480c1479,1480
<       ;
<     ((bzf->handle))
---
>       
>     (->handle))
1479,1480c1479,1480
<       ;
<     ((bzf->handle))
---
>       
>     ->handle))
1480c1480
<     ((bzf->handle))
---
>     (bzf->handle))
1480c1480
<     ((bzf->handle))
---
>     bzf->handle))
1480c1480
<     ((bzf->handle))
---
>     (->handle))
1480c1480
<     ((bzf->handle))
---
>     ->handle))
1480c1480
<     ((bzf->handle))
---
>     (bzfhandle))
1480c1480
<     ((bzf->handle))
---
>     bzfhandle))
1480c1480
<     ((bzf->handle))
---
>     (handle))
1480c1480
<     ((bzf->handle))
---
>     handle))
1480c1480
<     ((bzf->handle))
---
>     (bzf->handle))
1480c1480
<     ((bzf->handle))
---
>     (->handle))
1480c1480
<     ((bzf->handle))
---
>     (bzfhandle))
1480c1480
<     ((bzf->handle))
---
>     (handle))
1480c1480
<     ((bzf->handle))
---
>     (bzf->))
1480c1480
<     ((bzf->handle))
---
>     (->))
1480c1480
<     ((bzf->handle))
---
>     (bzf))
1480c1480
<     ((bzf->handle))
---
>     ())
1480c1480
<     ((bzf->handle))
---
>     ((->handle))
1480c1480
<     ((bzf->handle))
---
>     ((handle))
1480c1480
<     ((bzf->handle))
---
>     ((->))
1480c1480
<     ((bzf->handle))
---
>     (())
1480c1480
<     ((bzf->handle))
---
>     ((->handle)
1480c1480
<     ((bzf->handle))
---
>     ((handle)
1480c1480
<     ((bzf->handle))
---
>     ((->)
1480c1480
<     ((bzf->handle))
---
>     (()
1480c1480
<     ((bzf->handle))
---
>     ((bzfhandle))
1480c1480
<     ((bzf->handle))
---
>     ((bzf))
1480c1480
<     ((bzf->handle))
---
>     ((bzfhandle)
1480c1480
<     ((bzf->handle))
---
>     ((bzf)
1480c1480
<     ((bzf->handle))
---
>     ((bzfhandle)
1480c1480
<     ((bzf->handle))
---
>     ((bzf)
1480c1480
<     ((bzf->handle))
---
>     ((bzfhandle
1480c1480
<     ((bzf->handle))
---
>     ((bzf
1480c1480
<     ((bzf->handle))
---
>     ((bzf->))
1480c1480
<     ((bzf->handle))
---
>     ((bzf->)
1480c1480
<     ((bzf->handle))
---
>     ((bzf->)
1480c1480
<     ((bzf->handle))
---
>     ((bzf->
1480,1481c1480,1481
<     ((bzf->handle))
<       ;
---
>     ((bzf->))
>       
(89.2 %, 22071 bytes)
1480c1480
<     ((bzf))
---
>     ((bzf
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf
>       
1480c1480
<     ((bzf))
---
>     ((bzf)
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480c1480
<     ((bzf))
---
>     ((bzf
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf
>       
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480c1480
<     ((bzf))
---
>     ((bzf)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1480c1480
<     ((bzf))
---
>     ((bzf)
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1483c1483
<    if (len == 0)
---
>     (len == 0)
1480c1480
<     ((bzf))
---
>     ((bzf)
1483c1483
<    if (len == 0)
---
>    if len == 0)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1483c1483
<    if (len == 0)
---
>    if len == 0)
1480c1480
<     ((bzf))
---
>     ((bzf)
1483c1483
<    if (len == 0)
---
>     len == 0)
1480,1481c1480,1481
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1483c1483
<    if (len == 0)
---
>     len == 0)
1481c1481
<       ;
---
>       
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>     (len == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>    if len == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>     len == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>    if ( == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>     ( == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>    if  == 0)
1481c1481
<       ;
---
>       
1483c1483
<    if (len == 0)
---
>      == 0)
1483c1483
<    if (len == 0)
---
>     (len == 0)
1483c1483
<    if (len == 0)
---
>     len == 0)
1483c1483
<    if (len == 0)
---
>     ( == 0)
1483c1483
<    if (len == 0)
---
>      == 0)
1483c1483
<    if (len == 0)
---
>     (len  0)
1483c1483
<    if (len == 0)
---
>     len  0)
1483c1483
<    if (len == 0)
---
>     (  0)
(89.2 %, 22069 bytes)
1483c1483
<     (len == 0)
---
>     len == 0)
1483c1483
<     (len == 0)
---
>      == 0)
1483c1483
<     (len == 0)
---
>     len  0)
1483c1483
<     (len == 0)
---
>       0)
1483c1483
<     (len == 0)
---
>     len == )
1483c1483
<     (len == 0)
---
>      == )
1483c1483
<     (len == 0)
---
>     len  )
1483c1483
<     (len == 0)
---
>       )
1483c1483
<     (len == 0)
---
>     ( == 0)
1483c1483
<     (len == 0)
---
>     (  0)
1483c1483
<     (len == 0)
---
>     ( == )
1483c1483
<     (len == 0)
---
>     (  )
1483c1483
<     (len == 0)
---
>     ( == 0
1483c1483
<     (len == 0)
---
>     (  0
1483c1483
<     (len == 0)
---
>     ( == 
1483c1483
<     (len == 0)
---
>     (  
1483c1483
<     (len == 0)
---
>     (len  0)
1483c1483
<     (len == 0)
---
>     (len  )
(89.2 %, 22064 bytes)
1483c1483
<     (  0)
---
>     (  
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  )
>       
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  
>       
1483c1483
<     (  0)
---
>     (  )
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483c1483
<     (  0)
---
>     (  
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  )
>       
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  
>       
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483c1483
<     (  0)
---
>     (  0
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  0
>       
1483c1483
<     (  0)
---
>     (  0
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  0
>       
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1483c1483
<     (  0)
---
>     (  0
1486c1486
<    bzf_4_1 = len;
---
>    bzf_4_1  len;
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  0
>       
1486c1486
<    bzf_4_1 = len;
---
>    bzf_4_1  len;
1483c1483
<     (  0)
---
>     (  0
1486c1486
<    bzf_4_1 = len;
---
>      len;
1483,1484c1483,1484
<     (  0)
<       ;
---
>     (  0
>       
1486c1486
<    bzf_4_1 = len;
---
>      len;
1484c1484
<       ;
---
>       
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>    bzf_4_1  len;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>      len;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>    bzf_4_1 = ;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>     = ;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>    bzf_4_1  ;
1484c1484
<       ;
---
>       
1486c1486
<    bzf_4_1 = len;
---
>      ;
1486c1486
<    bzf_4_1 = len;
---
>     = len;
1486c1486
<    bzf_4_1 = len;
---
>      len;
(89.2 %, 22052 bytes)
1486,1487c1486,1487
<      ;
<    bzf_4_0  = buf;
---
>      
>       ;
1487c1487
<    bzf_4_0  = buf;
---
>      = buf;
1487c1487
<    bzf_4_0  = buf;
---
>       buf;
(89.2 %, 22040 bytes)
1487c1487
<       ;
---
>       
1489c1489
<    while (True) {
---
>     ) {
1489c1489
<    while (True) {
---
>     (True) {
1489c1489
<    while (True) {
---
>     True) {
1489c1489
<    while (True) {
---
>     () {
1489c1489
<    while (True) {
---
>     ) {
1489c1489
<    while (True) {
---
>     (True {
1489c1489
<    while (True) {
---
>     True {
1489c1489
<    while (True) {
---
>     ( {
1489c1489
<    while (True) {
---
>      {
1489c1489
<    while (True) {
---
>    while True) {
1489c1489
<    while (True) {
---
>    while ) {
1489c1489
<    while (True) {
---
>    while True {
1489c1489
<    while (True) {
---
>    while  {
1489c1489
<    while (True) {
---
>    while True) 
1489c1489
<    while (True) {
---
>    while ) 
1489c1489
<    while (True) {
---
>    while True 
1489c1489
<    while (True) {
---
>    while  
1489c1489
<    while (True) {
---
>    while () {
1489c1489
<    while (True) {
---
>    while ( {
1489c1489
<    while (True) {
---
>    while () 
1489c1489
<    while (True) {
---
>    while ( 
(89.3 %, 22029 bytes)
1489,1490c1489,1490
<      {
<       bzf_4_5 = BZ_MAX_UNUSED;
---
>      
>         ;
1490c1490
<       bzf_4_5 = BZ_MAX_UNUSED;
---
>        = BZ_MAX_UNUSED;
1490c1490
<       bzf_4_5 = BZ_MAX_UNUSED;
---
>         BZ_MAX_UNUSED;
1490c1490
<       bzf_4_5 = BZ_MAX_UNUSED;
---
>        = ;
1490c1490
<       bzf_4_5 = BZ_MAX_UNUSED;
---
>         ;
(89.3 %, 22021 bytes)
1490c1490
<         BZ_MAX_UNUSED;
---
>         
1490,1491c1490,1491
<         BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
---
>         ;
>        = bzf->buf;
1490,1491c1490,1491
<         BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
---
>         
>        = bzf->buf;
1490,1491c1490,1491
<         BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
---
>         ;
>       bzf_4_4  bzf->buf;
1490,1491c1490,1491
<         BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
---
>         
>       bzf_4_4  bzf->buf;
1490,1491c1490,1491
<         BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
---
>         ;
>         bzf->buf;
(89.3 %, 22007 bytes)
1491c1491
<       bzf_4_4 = bzf->buf;
---
>         bzf->buf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>        = ->buf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>         ->buf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>        = bzfbuf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>         bzfbuf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>        = buf;
1491c1491
<       bzf_4_4 = bzf->buf;
---
>         buf;
(89.3 %, 21999 bytes)
1491c1491
<         bzf->buf;
---
>         buf;
1491c1491
<         bzf->buf;
---
>         ->;
1491c1491
<         bzf->buf;
---
>         ;
1491c1491
<         bzf->buf;
---
>         ->buf
1491c1491
<         bzf->buf;
---
>         buf
1491c1491
<         bzf->buf;
---
>         ->
1491c1491
<         bzf->buf;
---
>         
(89.3 %, 21994 bytes)
1491c1491
<         buf;
---
>         
1491,1492c1491,1492
<         buf;
<       ret = 0;
---
>         ;
>        = 0;
1491,1492c1491,1492
<         buf;
<       ret = 0;
---
>         
>        = 0;
1491,1492c1491,1492
<         buf;
<       ret = 0;
---
>         ;
>       ret  0;
1491,1492c1491,1492
<         buf;
<       ret = 0;
---
>         
>       ret  0;
1491,1492c1491,1492
<         buf;
<       ret = 0;
---
>         ;
>         0;
(89.3 %, 21990 bytes)
1492c1492
<       ret = 0;
---
>         0;
1492c1492
<       ret = 0;
---
>        = ;
1492c1492
<       ret = 0;
---
>         ;
(89.3 %, 21986 bytes)
1492c1492
<         0;
---
>         
1492,1493c1492,1493
<         0;
<       if (ret != BZ_RUN_OK)
---
>         ;
>        (ret != BZ_RUN_OK)
(89.3 %, 21984 bytes)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>        ret != BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>        ( != BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>         != BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>        (ret  BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>        ret  BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>        (  BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>          BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if ret != BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if  != BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if ret  BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if   BZ_RUN_OK)
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if ret != )
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if  != )
1493c1493
<       if (ret != BZ_RUN_OK)
---
>       if ret  )
(89.3 %, 21977 bytes)
1493,1494c1493,1494
<        (  BZ_RUN_OK)
<          ;
---
>          BZ_RUN_OK
>          
1493,1494c1493,1494
<        (  BZ_RUN_OK)
<          ;
---
>          
>          
1493c1493
<        (  BZ_RUN_OK)
---
>        (  )
1493c1493
<        (  BZ_RUN_OK)
---
>        (  
1493,1494c1493,1494
<        (  BZ_RUN_OK)
<          ;
---
>        (  )
>          
1493,1494c1493,1494
<        (  BZ_RUN_OK)
<          ;
---
>        (  
>          
1493c1493
<        (  BZ_RUN_OK)
---
>        (  )
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>        (bzf_4_5 < BZ_MAX_UNUSED) 
1493c1493
<        (  BZ_RUN_OK)
---
>        (  
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>        (bzf_4_5 < BZ_MAX_UNUSED) 
(89.3 %, 21965 bytes)
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>          BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5 < BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if  < BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5  BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if   BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5 < ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if  < ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5  ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if   ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if ( < BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if ( < ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (  ) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if ( < BZ_MAX_UNUSED 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if ( <  
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (   
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5  BZ_MAX_UNUSED) 
1496c1496
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5  ) 
(89.3 %, 21957 bytes)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (   
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  ) 
1498c1498
<       if (bzf_4_1 == 0)
---
>        (bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (   
1498c1498
<       if (bzf_4_1 == 0)
---
>        (bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  ) 
1498c1498
<       if (bzf_4_1 == 0)
---
>       if bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (   
1498c1498
<       if (bzf_4_1 == 0)
---
>       if bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  ) 
1498c1498
<       if (bzf_4_1 == 0)
---
>        bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (   
1498c1498
<       if (bzf_4_1 == 0)
---
>        bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>        (bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>       if bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>        bzf_4_1 == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>       if ( == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>        ( == 0)
1496c1496
<       if (  BZ_MAX_UNUSED) 
---
>       if (  BZ_MAX_UNUSED 
1498c1498
<       if (bzf_4_1 == 0)
---
>       if  == 0)
(89.3 %, 21940 bytes)
1498c1498
<        bzf_4_1 == 0)
---
>          
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1  0)
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1  )
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1  0
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1  
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1  0)
>          
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1  )
>          
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1  0
>          
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1  
>          
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1 == )
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1 == 
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1 == )
>          
1498,1499c1498,1499
<        bzf_4_1 == 0)
<          ;
---
>        bzf_4_1 == 
>          
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1 == )
1500c1500
<    }
---
>    
1498c1498
<        bzf_4_1 == 0)
---
>        bzf_4_1 == 
1500c1500
<    }
---
>    
(89.3 %, 21937 bytes)
1498,1499c1498,1499
<        bzf_4_1  )
<          ;
---
>        bzf_4_1  
>          
1498c1498
<        bzf_4_1  )
---
>        bzf_4_1  
1500c1500
<    }
---
>    
1498,1500c1498,1500
<        bzf_4_1  )
<          ;
<    }
---
>        bzf_4_1  
>          
>    
1498c1498
<        bzf_4_1  )
---
>        bzf_4_1  
1501c1501
< }
---
> 
1498,1499c1498,1499
<        bzf_4_1  )
<          ;
---
>        bzf_4_1  
>          
1501c1501
< }
---
> 
1498c1498
<        bzf_4_1  )
---
>        bzf_4_1  
1500,1501c1500,1501
<    }
< }
---
>    
> 
1498,1501c1498,1501
<        bzf_4_1  )
<          ;
<    }
< }
---
>        bzf_4_1  
>          
>    
> 
1499c1499
<          ;
---
>          
1499,1500c1499,1500
<          ;
<    }
---
>          
>    
1499c1499
<          ;
---
>          
1501c1501
< }
---
> 
1499,1501c1499,1501
<          ;
<    }
< }
---
>          
>    
> 
1499c1499
<          ;
---
>          
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
1499,1500c1499,1500
<          ;
<    }
---
>          
>    
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
1499c1499
<          ;
---
>          
1501d1500
< }
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
1499,1501c1499,1500
<          ;
<    }
< }
---
>          
>    
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
1500c1500
<    }
---
>    
1500,1501c1500,1501
<    }
< }
---
>    
> 
1500c1500
<    }
---
>    
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
1500,1501c1500
<    }
< }
---
>    
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
1500c1500
<    }
---
>    
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
> void 
1500,1501c1500
<    }
< }
---
>    
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
> void 
1500c1500
<    }
---
>    
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  
1500,1501c1500
<    }
< }
---
>    
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  
1501c1501
< }
---
> 
1501d1500
< }
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
1501d1500
< }
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
> void 
1501d1500
< }
1505c1504,1505
< void BZ_APIBZ2_bzWriteClose
---
> 
>  
1501c1501
< }
---
> 
1506c1506
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1501d1500
< }
1505,1506c1504,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  BZ_APIBZ2_bzWriteClose
>                    int*          bzerror, 
1501d1500
< }
1505,1506c1504,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
1501d1500
< }
1505,1506c1504,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
>  
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                    int*          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                   ( *          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                    *          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
1505c1505
< void BZ_APIBZ2_bzWriteClose
---
> void 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
1505,1506c1505,1506
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                              bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                    int*          , 
1506c1506
<                   ( int*          bzerror, 
---
>                    *          , 
1506c1506
<                   ( int*          bzerror, 
---
>                    int          , 
1506c1506
<                   ( int*          bzerror, 
---
>                              , 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( *          , 
1506c1506
<                   ( int*          bzerror, 
---
>                   (           , 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
1506c1506
<                   ( int*          bzerror, 
---
>                   (           bzerror 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( *           
1506c1506
<                   ( int*          bzerror, 
---
>                   (            
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int          , 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int           
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int*          , 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int*           
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
1506c1506
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
1506,1507c1506,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
1507c1507
<                     BZFILE*       b, 
---
>                     *       b, 
1507c1507
<                     BZFILE*       b, 
---
>                            b, 
1507c1507
<                     BZFILE*       b, 
---
>                     *       , 
1507c1507
<                     BZFILE*       b, 
---
>                            , 
1507c1507
<                     BZFILE*       b, 
---
>                     *       b 
1507c1507
<                     BZFILE*       b, 
---
>                            b 
1507c1507
<                     BZFILE*       b, 
---
>                     *        
1507c1507
<                     BZFILE*       b, 
---
>                             
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE       , 
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE       b 
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE        
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE*        
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                     int           ,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           ,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                ,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                ,
1507c1507
<                     BZFILE*       b, 
---
>                     BZFILE*       b 
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           ,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                ,
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           abandon
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           
1507,1508c1507,1508
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                
1508c1508
<                     int           abandon,
---
>                                abandon,
1508c1508
<                     int           abandon,
---
>                                ,
1508c1508
<                     int           abandon,
---
>                                abandon
1508c1508
<                     int           abandon,
---
>                                
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon,
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                ,
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                
>                      int* nbytes_in,
1508c1508
<                     int           abandon,
---
>                     int           ,
1508c1508
<                     int           abandon,
---
>                     int           
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                     unsigned * nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned * nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      * nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      * nbytes_in,
1508c1508
<                     int           abandon,
---
>                     int           abandon
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int* nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned * nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      * nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned int nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned  nbytes_in,
1508,1509c1508,1509
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                       nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      int* nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      * nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      int nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                       nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      int* ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      * ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                      int ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                       ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned * ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned  ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned * 
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned  
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned int nbytes_in,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned int ,
1509c1509
<                     unsigned int* nbytes_in,
---
>                     unsigned int nbytes_in
(89.3 %, 21934 bytes)
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in,
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned  ,
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned  
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in,
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  ,
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  
>                      int* nbytes_out )
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned * 
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                     unsigned * nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned * nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      * nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      * nbytes_out )
1509c1509
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int* nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned * nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      * nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned int nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned  nbytes_out )
1509,1510c1509,1510
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                       nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      int* nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      * nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      int nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                       nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      int*  )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      *  )
1510c1510
<                     unsigned int* nbytes_out )
---
>                      int  )
1510c1510
<                     unsigned int* nbytes_out )
---
>                        )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned *  )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned   )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out 
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out 
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned *  
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned   
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned int nbytes_out )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned int  )
1510c1510
<                     unsigned int* nbytes_out )
---
>                     unsigned int nbytes_out 
(89.3 %, 21931 bytes)
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out )
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned   )
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned   
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out )
> 
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   )
> 
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out 
> 
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   
> 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned *  
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  )
> 
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  
> 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( bzerror, b, abandon, 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned *  
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( bzerror, b, abandon, 
1510,1512c1510,1512
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned *  )
> 
>     ( bzerror, b, abandon, 
1510,1512c1510,1512
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned *  
> 
>     ( bzerror, b, abandon, 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
1510,1511c1510,1511
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out 
> 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( bzerror, b, abandon, 
1510,1512c1510,1512
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>     ( bzerror, b, abandon, 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
1510,1512c1510,1512
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
1510c1510
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>      bzerror, b, abandon, 
1510,1512c1510,1512
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>      bzerror, b, abandon, 
1511c1511
< {
---
> 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>     ( bzerror, b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>      bzerror, b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>    BZ2_bzWriteClose64 ( , b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>     ( , b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>    BZ2_bzWriteClose64  , b, abandon, 
1511,1512c1511,1512
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> 
>      , b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( bzerror, b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>      bzerror, b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( , b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>      , b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     ( bzerror b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>      bzerror b, abandon, 
1512c1512
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>     (  b, abandon, 
(89.3 %, 21913 bytes)
1512c1512
<     ( bzerror, b, abandon, 
---
>      bzerror, b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>      , b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>      bzerror b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>       b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>      bzerror, , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>      , , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>      bzerror , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>       , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     ( , b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     (  b, abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     ( , , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     (  , abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     ( , b abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     (  b abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     ( ,  abandon, 
1512c1512
<     ( bzerror, b, abandon, 
---
>     (   abandon, 
(89.3 %, 21905 bytes)
1512c1512
<     (  b, abandon, 
---
>     (   abandon, 
1512c1512
<     (  b, abandon, 
---
>     (  , , 
1512c1512
<     (  b, abandon, 
---
>     (   , 
1512c1512
<     (  b, abandon, 
---
>     (  , abandon 
1512c1512
<     (  b, abandon, 
---
>     (   abandon 
1512c1512
<     (  b, abandon, 
---
>     (  ,  
1512c1512
<     (  b, abandon, 
---
>     (    
(89.3 %, 21903 bytes)
1512c1512
<     (   abandon, 
---
>     (    
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (   , 
>                         , NULL, nbytes_out, NULL );
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (    
>                         , NULL, nbytes_out, NULL );
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (   , 
>                         nbytes_in NULL, nbytes_out, NULL );
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (    
>                         nbytes_in NULL, nbytes_out, NULL );
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (   , 
>                          NULL, nbytes_out, NULL );
1512,1513c1512,1513
<     (   abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     (    
>                          NULL, nbytes_out, NULL );
(89.3 %, 21895 bytes)
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                          NULL, nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         , , nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                          , nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         , NULL nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                          NULL nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         ,  nbytes_out, NULL );
1513c1513
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                           nbytes_out, NULL );
(89.3 %, 21885 bytes)
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                           nbytes_out, NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                          , , NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                           , NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                          , nbytes_out NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                           nbytes_out NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                          ,  NULL );
1513c1513
<                          NULL, nbytes_out, NULL );
---
>                            NULL );
(89.3 %, 21880 bytes)
1513c1513
<                           nbytes_out, NULL );
---
>                            NULL );
1513c1513
<                           nbytes_out, NULL );
---
>                           ,  );
1513c1513
<                           nbytes_out, NULL );
---
>                             );
1513c1513
<                           nbytes_out, NULL );
---
>                           , NULL ;
1513c1513
<                           nbytes_out, NULL );
---
>                            NULL ;
1513c1513
<                           nbytes_out, NULL );
---
>                           ,  ;
1513c1513
<                           nbytes_out, NULL );
---
>                             ;
1513c1513
<                           nbytes_out, NULL );
---
>                           nbytes_out NULL );
1513c1513
<                           nbytes_out, NULL );
---
>                           nbytes_out  );
(89.3 %, 21869 bytes)
1513c1513
<                            NULL );
---
>                             ;
1513c1513
<                            NULL );
---
>                             )
1513c1513
<                            NULL );
---
>                             
1513,1514c1513,1514
<                            NULL );
< }
---
>                             );
> 
1513,1514c1513,1514
<                            NULL );
< }
---
>                             ;
> 
1513,1514c1513,1514
<                            NULL );
< }
---
>                             )
> 
1513,1514c1513,1514
<                            NULL );
< }
---
>                             
> 
1513c1513
<                            NULL );
---
>                            NULL ;
1513c1513
<                            NULL );
---
>                            NULL 
1513,1514c1513,1514
<                            NULL );
< }
---
>                            NULL ;
> 
1513,1514c1513,1514
<                            NULL );
< }
---
>                            NULL 
> 
1513c1513
<                            NULL );
---
>                            NULL ;
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
1513c1513
<                            NULL );
---
>                            NULL 
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
1513,1514c1513
<                            NULL );
< }
---
>                            NULL ;
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
1513,1514c1513
<                            NULL );
< }
---
>                            NULL 
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
1513c1513
<                            NULL );
---
>                            NULL )
1513,1514c1513,1514
<                            NULL );
< }
---
>                            NULL )
> 
1513c1513
<                            NULL );
---
>                            NULL )
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
1513,1514c1513
<                            NULL );
< }
---
>                            NULL )
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
1513c1513
<                            NULL );
---
>                            NULL )
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
> void 
1513,1514c1513
<                            NULL );
< }
---
>                            NULL )
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
> void 
1513c1513
<                            NULL );
---
>                            NULL )
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  
1513,1514c1513
<                            NULL );
< }
---
>                            NULL )
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  
1514c1514
< }
---
> 
1514d1513
< }
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
1514d1513
< }
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
> void 
1514d1513
< }
1517c1516,1517
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  
1514c1514
< }
---
> 
1518c1518
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1514d1513
< }
1517,1518c1516,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  BZ_APIBZ2_bzWriteClose64
>                    int*          bzerror, 
1514d1513
< }
1517,1518c1516,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
1514d1513
< }
1517,1518c1516,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
>  
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                    int*          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                   ( *          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                    *          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
1517c1517
< void BZ_APIBZ2_bzWriteClose64
---
> void 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
1517,1518c1517,1518
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
(89.3 %, 21865 bytes)
1517c1517
<  BZ_APIBZ2_bzWriteClose64
---
>  
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   ( int          bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    int          bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   (           bzerror, 
1517,1518c1517,1518
<  BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                              bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                              bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                    int*          , 
1518c1518
<                   ( int*          bzerror, 
---
>                    *          , 
1518c1518
<                   ( int*          bzerror, 
---
>                    int          , 
1518c1518
<                   ( int*          bzerror, 
---
>                              , 
1518c1518
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
1518c1518
<                   ( int*          bzerror, 
---
>                   ( *          , 
1518c1518
<                   ( int*          bzerror, 
---
>                   (           , 
1518c1518
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
1518c1518
<                   ( int*          bzerror, 
---
>                   (           bzerror 
1518c1518
<                   ( int*          bzerror, 
---
>                   ( *           
1518c1518
<                   ( int*          bzerror, 
---
>                   (            
1518c1518
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
(89.3 %, 21853 bytes)
1519c1519
<                     BZFILE*       b, 
---
>                             
1519c1519
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
(89.3 %, 21844 bytes)
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                
>                      int* nbytes_in_lo32,
1520c1520
<                     int           abandon,
---
>                     int           ,
1520c1520
<                     int           abandon,
---
>                     int           
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      int* nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int* nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                     unsigned * nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned * nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      * nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      * nbytes_in_lo32,
1520c1520
<                     int           abandon,
---
>                     int           abandon
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int* nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned * nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      * nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned int nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned  nbytes_in_lo32,
1520,1521c1520,1521
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                       nbytes_in_lo32,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      int* nbytes_in_lo32,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                       nbytes_in_lo32,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      int* ,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      * ,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                      int ,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                       ,
1521c1521
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
(89.3 %, 21836 bytes)
1521c1521
<                      int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
1521c1521
<                      int* nbytes_in_lo32,
---
>                       nbytes_in_lo32,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      * ,
1521c1521
<                      int* nbytes_in_lo32,
---
>                       ,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32
1521c1521
<                      int* nbytes_in_lo32,
---
>                       nbytes_in_lo32
1521c1521
<                      int* nbytes_in_lo32,
---
>                      * 
1521c1521
<                      int* nbytes_in_lo32,
---
>                       
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int ,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int 
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_lo32,
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int ,
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_lo32
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int 
>                      int* nbytes_in_hi32,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int* ,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int* 
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* 
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
>                     unsigned * nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* 
>                     unsigned * nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
>                      * nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* 
>                      * nbytes_in_hi32,
1521c1521
<                      int* nbytes_in_lo32,
---
>                      int* nbytes_in_lo32
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                      int* nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                     unsigned * nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                      * nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                     unsigned int nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                      int nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                     unsigned  nbytes_in_hi32,
1521,1522c1521,1522
<                      int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_lo32
>                       nbytes_in_hi32,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_hi32,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                       nbytes_in_hi32,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      * ,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                      int ,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                       ,
1522c1522
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
(89.3 %, 21828 bytes)
1522c1522
<                      int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
1522c1522
<                      int* nbytes_in_hi32,
---
>                       nbytes_in_hi32,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      * ,
1522c1522
<                      int* nbytes_in_hi32,
---
>                       ,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32
1522c1522
<                      int* nbytes_in_hi32,
---
>                       nbytes_in_hi32
1522c1522
<                      int* nbytes_in_hi32,
---
>                      * 
1522c1522
<                      int* nbytes_in_hi32,
---
>                       
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int ,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int 
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_in_hi32,
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int ,
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_in_hi32
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int 
>                      int* nbytes_out_lo32,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int* ,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int* 
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* 
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
>                     unsigned * nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* 
>                     unsigned * nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
>                      * nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* 
>                      * nbytes_out_lo32,
1522c1522
<                      int* nbytes_in_hi32,
---
>                      int* nbytes_in_hi32
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                      int* nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                     unsigned * nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                      * nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                     unsigned int nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                      int nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                     unsigned  nbytes_out_lo32,
1522,1523c1522,1523
<                      int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_in_hi32
>                       nbytes_out_lo32,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_out_lo32,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                       nbytes_out_lo32,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      * ,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                      int ,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                       ,
1523c1523
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
(89.4 %, 21820 bytes)
1523c1523
<                      int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
1523c1523
<                      int* nbytes_out_lo32,
---
>                       nbytes_out_lo32,
1523c1523
<                      int* nbytes_out_lo32,
---
>                      * ,
1523c1523
<                      int* nbytes_out_lo32,
---
>                       ,
1523c1523
<                      int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32
1523c1523
<                      int* nbytes_out_lo32,
---
>                       nbytes_out_lo32
1523c1523
<                      int* nbytes_out_lo32,
---
>                      * 
1523c1523
<                      int* nbytes_out_lo32,
---
>                       
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32,
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int ,
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int 
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_lo32,
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int ,
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_lo32
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int 
>                      int* nbytes_out_hi32 )
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int* ,
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int* 
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* ,
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* 
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* ,
>                     unsigned * nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* 
>                     unsigned * nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* ,
>                      * nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* 
>                      * nbytes_out_hi32 )
1523c1523
<                      int* nbytes_out_lo32,
---
>                      int* nbytes_out_lo32
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                      int* nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                     unsigned * nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                      * nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                     unsigned int nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                      int nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                     unsigned  nbytes_out_hi32 )
1523,1524c1523,1524
<                      int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32
>                       nbytes_out_hi32 )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      int*  )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      *  )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                      int  )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                        )
1524c1524
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
(89.4 %, 21812 bytes)
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      *  )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                        )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      *  
1524c1524
<                      int* nbytes_out_hi32 )
---
>                        
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int  )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int  
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int nbytes_out_hi32 )
> 
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int  )
> 
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int nbytes_out_hi32 
> 
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int  
> 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int*  )
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int*  
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int*  )
> 
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int*  
> 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int*  )
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int*  
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int*  )
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int*  
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int* nbytes_out_hi32 
> 
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int* nbytes_out_hi32 
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int* nbytes_out_hi32 
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1524c1524
<                      int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1524,1525c1524,1525
<                      int* nbytes_out_hi32 )
< {
---
>                      int* nbytes_out_hi32 
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1525c1525
< {
---
> 
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1525c1525
< {
---
> 
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = *)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   *)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  *)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  ()b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  )b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile)b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = )b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *b;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFileb;
1527c1527
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(89.4 %, 21804 bytes)
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = ;
>     bzf_3;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = b
>     bzf_3;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = 
>     bzf_3;
1527c1527
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *;
1527c1527
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *;
>     bzf_3;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *
>     bzf_3;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *;
>    Bool ;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *
>    Bool ;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *;
>     ;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *
>     ;
1527c1527
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *b
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>     bzf_3;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>    Bool ;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>     ;
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>    Bool bzf_3
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>     bzf_3
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>    Bool 
1527,1528c1527,1528
<    bzFile* bzf = *b;
<    Bool bzf_3;
---
>    bzFile* bzf = *b
>     
1528c1528
<    Bool bzf_3;
---
>     bzf_3;
1528c1528
<    Bool bzf_3;
---
>     ;
1528c1528
<    Bool bzf_3;
---
>     bzf_3
1528c1528
<    Bool bzf_3;
---
>     
1528c1528
<    Bool bzf_3;
---
>     bzf_3;
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>     ;
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>     bzf_3
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>     
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool ;
1528c1528
<    Bool bzf_3;
---
>    Bool 
1528c1528
<    Bool bzf_3;
---
>    Bool ;
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool 
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool ;
1530c1530
<    if (bzf == NULL)
---
>    if bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool 
1530c1530
<    if (bzf == NULL)
---
>    if bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool ;
1530c1530
<    if (bzf == NULL)
---
>     bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool 
1530c1530
<    if (bzf == NULL)
---
>     bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool bzf_3
1528c1528
<    Bool bzf_3;
---
>    Bool bzf_3
1530c1530
<    if (bzf == NULL)
---
>     (bzf == NULL)
1528c1528
<    Bool bzf_3;
---
>    Bool bzf_3
1530c1530
<    if (bzf == NULL)
---
>    if bzf == NULL)
(89.4 %, 21797 bytes)
1528c1528
<     bzf_3
---
>     
1530c1530
<     (bzf == NULL)
---
>     (  NULL)
1528c1528
<     bzf_3
---
>     
1530c1530
<     (bzf == NULL)
---
>       NULL)
1530c1530
<     (bzf == NULL)
---
>     bzf == NULL)
1530c1530
<     (bzf == NULL)
---
>      == NULL)
1530c1530
<     (bzf == NULL)
---
>     bzf  NULL)
1530c1530
<     (bzf == NULL)
---
>       NULL)
1530c1530
<     (bzf == NULL)
---
>     bzf == )
1530c1530
<     (bzf == NULL)
---
>      == )
1530c1530
<     (bzf == NULL)
---
>     bzf  )
1530c1530
<     (bzf == NULL)
---
>       )
1530c1530
<     (bzf == NULL)
---
>     ( == NULL)
1530c1530
<     (bzf == NULL)
---
>     (  NULL)
1530c1530
<     (bzf == NULL)
---
>     ( == )
1530c1530
<     (bzf == NULL)
---
>     (  )
(89.4 %, 21792 bytes)
1530c1530
<     (  NULL)
---
>     (  
1530,1531c1530,1531
<     (  NULL)
<       ;
---
>     (  )
>       
1530,1531c1530,1531
<     (  NULL)
<       ;
---
>     (  
>       
1530c1530
<     (  NULL)
---
>     (  )
1532c1532
<    if (!bzf_3)
---
>     (!bzf_3)
1530c1530
<     (  NULL)
---
>     (  
1532c1532
<    if (!bzf_3)
---
>     (!bzf_3)
1530,1532c1530,1532
<     (  NULL)
<       ;
<    if (!bzf_3)
---
>     (  )
>       
>     (!bzf_3)
1530,1532c1530,1532
<     (  NULL)
<       ;
<    if (!bzf_3)
---
>     (  
>       
>     (!bzf_3)
1530c1530
<     (  NULL)
---
>     (  NULL
1530,1531c1530,1531
<     (  NULL)
<       ;
---
>     (  NULL
>       
1530c1530
<     (  NULL)
---
>     (  NULL
1532c1532
<    if (!bzf_3)
---
>     (!bzf_3)
1530,1532c1530,1532
<     (  NULL)
<       ;
<    if (!bzf_3)
---
>     (  NULL
>       
>     (!bzf_3)
1530c1530
<     (  NULL)
---
>     (  NULL
1532c1532
<    if (!bzf_3)
---
>    if !bzf_3)
1530,1532c1530,1532
<     (  NULL)
<       ;
<    if (!bzf_3)
---
>     (  NULL
>       
>    if !bzf_3)
1530c1530
<     (  NULL)
---
>     (  NULL
1532c1532
<    if (!bzf_3)
---
>     !bzf_3)
1530,1532c1530,1532
<     (  NULL)
<       ;
<    if (!bzf_3)
---
>     (  NULL
>       
>     !bzf_3)
(89.4 %, 21786 bytes)
1530c1530
<     (  )
---
>     (  
1532c1532
<     (!bzf_3)
---
>     (bzf_3)
1530,1532c1530,1532
<     (  )
<       ;
<     (!bzf_3)
---
>     (  
>       
>     (bzf_3)
1530c1530
<     (  )
---
>     (  
1532c1532
<     (!bzf_3)
---
>     bzf_3)
1530,1532c1530,1532
<     (  )
<       ;
<     (!bzf_3)
---
>     (  
>       
>     bzf_3)
1531c1531
<       ;
---
>       
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     !bzf_3)
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     (bzf_3)
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     bzf_3)
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     (!)
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     !)
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     ()
1531,1532c1531,1532
<       ;
<     (!bzf_3)
---
>       
>     )
1532c1532
<     (!bzf_3)
---
>     !bzf_3)
1532c1532
<     (!bzf_3)
---
>     bzf_3)
1532c1532
<     (!bzf_3)
---
>     !)
1532c1532
<     (!bzf_3)
---
>     )
(89.4 %, 21782 bytes)
1532,1534c1532,1534
<     bzf_3)
<       ;
<    if (ferror(bzf->handle))
---
>     
>       
>     (ferror(bzf->handle))
1532c1532
<     bzf_3)
---
>     bzf_3
1532,1533c1532,1533
<     bzf_3)
<       ;
---
>     bzf_3
>       
1532c1532
<     bzf_3)
---
>     bzf_3
1534c1534
<    if (ferror(bzf->handle))
---
>     (ferror(bzf->handle))
1532,1534c1532,1534
<     bzf_3)
<       ;
<    if (ferror(bzf->handle))
---
>     bzf_3
>       
>     (ferror(bzf->handle))
1532c1532
<     bzf_3)
---
>     bzf_3
1534c1534
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle))
1532,1534c1532,1534
<     bzf_3)
<       ;
<    if (ferror(bzf->handle))
---
>     bzf_3
>       
>    if ferror(bzf->handle))
1532c1532
<     bzf_3)
---
>     bzf_3
1534c1534
<    if (ferror(bzf->handle))
---
>     ferror(bzf->handle))
1532,1534c1532,1534
<     bzf_3)
<       ;
<    if (ferror(bzf->handle))
---
>     bzf_3
>       
>     ferror(bzf->handle))
1533c1533
<       ;
---
>       
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>     (ferror(bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>    if ferror(bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>     ferror(bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>    if ((bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>     ((bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>    if (bzf->handle))
1533,1534c1533,1534
<       ;
<    if (ferror(bzf->handle))
---
>       
>     (bzf->handle))
1534c1534
<    if (ferror(bzf->handle))
---
>     (ferror(bzf->handle))
1534c1534
<    if (ferror(bzf->handle))
---
>     ferror(bzf->handle))
1534c1534
<    if (ferror(bzf->handle))
---
>     ((bzf->handle))
(89.4 %, 21780 bytes)
1534c1534
<     (ferror(bzf->handle))
---
>     ferror(bzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (bzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ferrorbzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     bzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ferror(->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ferror->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ((bzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (bzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ((->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     ((bzfhandle))
1534c1534
<     (ferror(bzf->handle))
---
>     (bzfhandle))
1534c1534
<     (ferror(bzf->handle))
---
>     ((handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (ferrorbzf->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (ferror->handle))
1534c1534
<     (ferror(bzf->handle))
---
>     (ferrorbzfhandle))
1534c1534
<     (ferror(bzf->handle))
---
>     (ferrorhandle))
1534c1534
<     (ferror(bzf->handle))
---
>     (ferrorbzf->))
(89.4 %, 21774 bytes)
1534c1534
<     ((bzf->handle))
---
>     (bzf->handle))
1534c1534
<     ((bzf->handle))
---
>     (->handle))
1534c1534
<     ((bzf->handle))
---
>     (bzfhandle))
1534c1534
<     ((bzf->handle))
---
>     (handle))
1534c1534
<     ((bzf->handle))
---
>     (bzf->))
1534c1534
<     ((bzf->handle))
---
>     (->))
1534c1534
<     ((bzf->handle))
---
>     (bzf))
1534c1534
<     ((bzf->handle))
---
>     ())
1534c1534
<     ((bzf->handle))
---
>     ((->handle))
1534c1534
<     ((bzf->handle))
---
>     ((handle))
1534c1534
<     ((bzf->handle))
---
>     ((->))
1534c1534
<     ((bzf->handle))
---
>     (())
1534c1534
<     ((bzf->handle))
---
>     ((->handle)
1534c1534
<     ((bzf->handle))
---
>     ((handle)
1534c1534
<     ((bzf->handle))
---
>     ((->)
1534c1534
<     ((bzf->handle))
---
>     (()
1534c1534
<     ((bzf->handle))
---
>     ((bzfhandle))
1534c1534
<     ((bzf->handle))
---
>     ((bzf))
1534c1534
<     ((bzf->handle))
---
>     ((bzfhandle)
1534c1534
<     ((bzf->handle))
---
>     ((bzf)
1534c1534
<     ((bzf->handle))
---
>     ((bzfhandle)
1534c1534
<     ((bzf->handle))
---
>     ((bzf)
1534c1534
<     ((bzf->handle))
---
>     ((bzfhandle
1534c1534
<     ((bzf->handle))
---
>     ((bzf
1534c1534
<     ((bzf->handle))
---
>     ((bzf->))
1534c1534
<     ((bzf->handle))
---
>     ((bzf->)
1534c1534
<     ((bzf->handle))
---
>     ((bzf->)
1534c1534
<     ((bzf->handle))
---
>     ((bzf->
1534,1535c1534,1535
<     ((bzf->handle))
<       ;
---
>     ((bzf->))
>       
1534,1535c1534,1535
<     ((bzf->handle))
<       ;
---
>     ((bzf->)
>       
(89.4 %, 21766 bytes)
1534c1534
<     ((bzf))
---
>     ((bzf
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf
>       
1534c1534
<     ((bzf))
---
>     ((bzf)
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534c1534
<     ((bzf))
---
>     ((bzf
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534c1534
<     ((bzf))
---
>     ((bzf)
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1534c1534
<     ((bzf))
---
>     ((bzf)
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534c1534
<     ((bzf))
---
>     ((bzf)
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534c1534
<     ((bzf))
---
>     ((bzf)
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1534,1535c1534,1535
<     ((bzf))
<       ;
---
>     ((bzf)
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if ( != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     ( != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  != NULL) *nbytes_in_lo32 = 0;
1535c1535
<       ;
---
>       
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>      != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     ( != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>      != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (nbytes_in_lo32  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>     (  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>       NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if   NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  != ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32  ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if   ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if ( != NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if ( != ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (  ) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if ( != NULL *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if ( !=  *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (   *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (nbytes_in_lo32  NULL) *nbytes_in_lo32 = 0;
1537c1537
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (nbytes_in_lo32  ) *nbytes_in_lo32 = 0;
(89.4 %, 21750 bytes)
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (   *nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  ) nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (   nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  ) * = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (   * = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  )  = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (    = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL *nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL * = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL  = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL *nbytes_in_lo32  0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL nbytes_in_lo32  0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL *  0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL   0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL) nbytes_in_lo32 = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL)  = 0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL) nbytes_in_lo32  0;
1537c1537
<    if (  NULL) *nbytes_in_lo32 = 0;
---
>    if (  NULL)   0;
(89.4 %, 21749 bytes)
1537c1537
<    if (  NULL) nbytes_in_lo32 = 0;
---
>    if (  NULL)  = 0;
1537c1537
<    if (  NULL) nbytes_in_lo32 = 0;
---
>    if (  NULL)   0;
1537c1537
<    if (  NULL) nbytes_in_lo32 = 0;
---
>    if (  NULL)  = ;
1537c1537
<    if (  NULL) nbytes_in_lo32 = 0;
---
>    if (  NULL)   ;
(89.4 %, 21734 bytes)
1537c1537
<    if (  NULL)   0;
---
>    if (  NULL)   
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   ;
>     (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   
>     (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   ;
>    if nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   
>    if nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   ;
>     nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   
>     nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537c1537
<    if (  NULL)   0;
---
>    if (  NULL)   0
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   0
>     (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   0
>    if nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   0
>     nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1537,1538c1537,1538
<    if (  NULL)   0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   0
>    if ( != NULL) *nbytes_in_hi32 = 0;
(89.4 %, 21732 bytes)
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>     ( != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>      != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>     (nbytes_in_hi32  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>     (  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>       NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if   NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  != ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32  ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if   ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ( != NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ( != ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  ) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ( != NULL *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ( !=  *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (   *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_hi32  NULL) *nbytes_in_hi32 = 0;
1538c1538
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_hi32  ) *nbytes_in_hi32 = 0;
(89.4 %, 21716 bytes)
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (   *nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  ) nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (   nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  ) * = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (   * = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  )  = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (    = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL *nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL * = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL  = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL *nbytes_in_hi32  0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL nbytes_in_hi32  0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL *  0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL   0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL) nbytes_in_hi32 = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)  = 0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL) nbytes_in_hi32  0;
1538c1538
<    if (  NULL) *nbytes_in_hi32 = 0;
---
>    if (  NULL)   0;
(89.4 %, 21715 bytes)
1538c1538
<    if (  NULL) nbytes_in_hi32 = 0;
---
>    if (  NULL)  = 0;
1538c1538
<    if (  NULL) nbytes_in_hi32 = 0;
---
>    if (  NULL)   0;
1538c1538
<    if (  NULL) nbytes_in_hi32 = 0;
---
>    if (  NULL)  = ;
1538c1538
<    if (  NULL) nbytes_in_hi32 = 0;
---
>    if (  NULL)   ;
(89.4 %, 21700 bytes)
1538c1538
<    if (  NULL)   0;
---
>    if (  NULL)   
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   ;
>     (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   
>     (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   ;
>    if nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   
>    if nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   ;
>     nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   
>     nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538c1538
<    if (  NULL)   0;
---
>    if (  NULL)   0
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0
>     (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0
>    if nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0
>     nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0
>    if ( != NULL) *nbytes_out_lo32 = 0;
1538,1539c1538,1539
<    if (  NULL)   0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0
>     ( != NULL) *nbytes_out_lo32 = 0;
(89.4 %, 21698 bytes)
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>     ( != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>      != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>     (nbytes_out_lo32  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>     (  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>       NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if   NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  != ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32  ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if   ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ( != NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ( != ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  ) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ( != NULL *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ( !=  *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (   *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_out_lo32  NULL) *nbytes_out_lo32 = 0;
1539c1539
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_out_lo32  ) *nbytes_out_lo32 = 0;
(89.4 %, 21681 bytes)
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (   *nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  ) nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (   nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  ) * = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (   * = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  )  = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (    = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL *nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL * = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL  = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL *nbytes_out_lo32  0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL nbytes_out_lo32  0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL *  0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL   0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL) nbytes_out_lo32 = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)  = 0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL) nbytes_out_lo32  0;
1539c1539
<    if (  NULL) *nbytes_out_lo32 = 0;
---
>    if (  NULL)   0;
(89.4 %, 21680 bytes)
1539c1539
<    if (  NULL) nbytes_out_lo32 = 0;
---
>    if (  NULL)  = 0;
1539c1539
<    if (  NULL) nbytes_out_lo32 = 0;
---
>    if (  NULL)   0;
1539c1539
<    if (  NULL) nbytes_out_lo32 = 0;
---
>    if (  NULL)  = ;
1539c1539
<    if (  NULL) nbytes_out_lo32 = 0;
---
>    if (  NULL)   ;
(89.4 %, 21664 bytes)
1539c1539
<    if (  NULL)   0;
---
>    if (  NULL)   
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   ;
>     (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   
>     (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   ;
>    if nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   
>    if nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   ;
>     nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   
>     nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539c1539
<    if (  NULL)   0;
---
>    if (  NULL)   0
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0
>     (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0
>    if nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0
>     nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0
>    if ( != NULL) *nbytes_out_hi32 = 0;
1539,1540c1539,1540
<    if (  NULL)   0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0
>     ( != NULL) *nbytes_out_hi32 = 0;
(89.4 %, 21662 bytes)
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>     ( != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>      != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>     (nbytes_out_hi32  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>     (  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>       NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if   NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  != ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32  ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if   ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ( != NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ( != ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  ) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ( != NULL *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ( !=  *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (   *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_hi32  NULL) *nbytes_out_hi32 = 0;
1540c1540
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_hi32  ) *nbytes_out_hi32 = 0;
(89.4 %, 21645 bytes)
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (   *nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  ) nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (   nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  ) * = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (   * = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  )  = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (    = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL *nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL * = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL  = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL *nbytes_out_hi32  0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL nbytes_out_hi32  0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL *  0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL   0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL) nbytes_out_hi32 = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)  = 0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL) nbytes_out_hi32  0;
1540c1540
<    if (  NULL) *nbytes_out_hi32 = 0;
---
>    if (  NULL)   0;
(89.4 %, 21644 bytes)
1540c1540
<    if (  NULL) nbytes_out_hi32 = 0;
---
>    if (  NULL)  = 0;
1540c1540
<    if (  NULL) nbytes_out_hi32 = 0;
---
>    if (  NULL)   0;
1540c1540
<    if (  NULL) nbytes_out_hi32 = 0;
---
>    if (  NULL)  = ;
1540c1540
<    if (  NULL) nbytes_out_hi32 = 0;
---
>    if (  NULL)   ;
(89.4 %, 21628 bytes)
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   ;
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     (!abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     (!abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   ;
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   ;
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   0
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   0
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     (!abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   0
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   0
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     !abandon && bzf->lastErr == BZ_OK) 
1540c1540
<    if (  NULL)   0;
---
>    if (  NULL)   0
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon && bzf->lastErr == BZ_OK) 
(89.4 %, 21626 bytes)
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     !abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     (abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     (! && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     ! && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>     ( && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>      && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if ! && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if  && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !abandon  bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if abandon  bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if !  bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if   bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  bzf->lastErr == BZ_OK) 
1542c1542
<    if (!abandon && bzf->lastErr == BZ_OK) 
---
>    if (  bzf->lastErr == BZ_OK) 
(89.4 %, 21625 bytes)
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (  bzf->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if ( && ->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (  ->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if ( && bzflastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (  bzflastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if ( && lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (  lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  bzf->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  ->lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  bzflastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  lastErr == BZ_OK) 
1542c1542
<    if (abandon && bzf->lastErr == BZ_OK) 
---
>    if (abandon  bzf-> == BZ_OK) 
(89.5 %, 21616 bytes)
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  lastErr == BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  -> == BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (   == BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  ->lastErr  BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  lastErr  BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  ->  BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (    BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  bzflastErr == BZ_OK) 
1542c1542
<    if (  bzf->lastErr == BZ_OK) 
---
>    if (  bzf == BZ_OK) 
(89.5 %, 21602 bytes)
1542c1542
<    if (    BZ_OK) 
---
>    if (     
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>      !abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>     ( !abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  !abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>      !abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>     ( abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  abandon && !ferror ( bzf->handle ) ) 
1542c1542
<    if (    BZ_OK) 
---
>    if (    BZ_OK 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>      abandon && !ferror ( bzf->handle ) ) 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>     ( !abandon && !ferror ( bzf->handle ) ) 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>      !abandon && !ferror ( bzf->handle ) ) 
1544c1544
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>     ( abandon && !ferror ( bzf->handle ) ) 
(89.5 %, 21593 bytes)
1544c1544
<      !abandon && !ferror ( bzf->handle ) ) 
---
>        ferror ( bzf->handle ) ) 
1544c1544
<      !abandon && !ferror ( bzf->handle ) ) 
---
>      ! && !ferror ( bzf->handle ) ) 
1544c1544
<      !abandon && !ferror ( bzf->handle ) ) 
---
>      !  !ferror ( bzf->handle ) ) 
(89.5 %, 21582 bytes)
1544c1544
<        ferror ( bzf->handle ) ) 
---
>          handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  bzf->handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  ->handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  bzfhandle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  bzf-> ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  -> ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror  bzf ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror   ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( ->handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( handle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( -> ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror (  ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( ->handle  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( handle  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( ->  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror (   ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzfhandle ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzfhandle  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzfhandle )  
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf )  
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzfhandle   
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf   
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf-> ) ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf->  ) 
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf-> )  
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf->   
1544c1544
<        ferror ( bzf->handle ) ) 
---
>        ferror ( bzf-> ) ) 
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32 != NULL)
(89.5 %, 21574 bytes)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf   
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf  ) 
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf   
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf  ) 
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf   
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf  ) 
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf   
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     nbytes_in_lo32 != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if ( != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     ( != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if  != NULL)
1544c1544
<        ferror ( bzf ) ) 
---
>        ferror ( bzf )  
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>      != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32 != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     nbytes_in_lo32 != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     ( != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>      != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (nbytes_in_lo32  NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     nbytes_in_lo32  NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>     (  NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>       NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if  != NULL)
1546c1546
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32  NULL)
(89.5 %, 21556 bytes)
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       
>       nbytes_in_lo32 = bzf->strm.total_in_lo32;
1546c1546
<      != NULL)
---
>      != )
1546c1546
<      != NULL)
---
>      != 
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != )
>       nbytes_in_lo32 = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != 
>       nbytes_in_lo32 = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != )
>       * = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != 
>       * = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != )
>        = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != 
>        = bzf->strm.total_in_lo32;
1546c1546
<      != NULL)
---
>      != NULL
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>       nbytes_in_lo32 = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>       * = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>        = bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>       *nbytes_in_lo32  bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>       nbytes_in_lo32  bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>       *  bzf->strm.total_in_lo32;
1546,1547c1546,1547
<      != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>      != NULL
>         bzf->strm.total_in_lo32;
1547c1547
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32 = bzf->strm.total_in_lo32;
1547c1547
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        = bzf->strm.total_in_lo32;
1547c1547
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  bzf->strm.total_in_lo32;
1547c1547
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         bzf->strm.total_in_lo32;
(89.5 %, 21555 bytes)
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        = bzf->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         bzf->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        = ->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         ->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        = bzfstrm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         bzfstrm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        = strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  bzf->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  ->strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  bzfstrm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  strm.total_in_lo32;
1547c1547
<       nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>       nbytes_in_lo32  bzf->.total_in_lo32;
(89.5 %, 21540 bytes)
1547c1547
<         bzf->strm.total_in_lo32;
---
>         strm.total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         ->.total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         .total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         ->strmtotal_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         strmtotal_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         ->total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzfstrm.total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf.total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzfstrmtotal_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzftotal_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzfstrm.;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf.;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzfstrm;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->.total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->total_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->.;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->.total_in_lo32
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->total_in_lo32
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->.
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->strmtotal_in_lo32;
1547c1547
<         bzf->strm.total_in_lo32;
---
>         bzf->strm;
(89.5 %, 21520 bytes)
1547,1548c1547,1548
<         bzf;
<    if (nbytes_in_hi32 != NULL)
---
>         bzf
>      != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     (nbytes_in_hi32 != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     nbytes_in_hi32 != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     ( != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>      != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     (nbytes_in_hi32  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     nbytes_in_hi32  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>     (  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>       NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if  != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if   NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if  != )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32  )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if   )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if ( != NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if ( != )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (  )
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if ( != NULL
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (  NULL
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if ( != 
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (  
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (nbytes_in_hi32  NULL)
1548c1548
<    if (nbytes_in_hi32 != NULL)
---
>    if (nbytes_in_hi32  )
(89.5 %, 21504 bytes)
1548c1548
<    if (  NULL)
---
>    if (  
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  )
>       nbytes_in_hi32 = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  
>       nbytes_in_hi32 = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  )
>       * = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  
>       * = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  )
>        = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  
>        = bzf->strm.total_in_hi32;
1548c1548
<    if (  NULL)
---
>    if (  NULL
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>       nbytes_in_hi32 = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>       * = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>        = bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>       *nbytes_in_hi32  bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>       nbytes_in_hi32  bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>       *  bzf->strm.total_in_hi32;
1548,1549c1548,1549
<    if (  NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>    if (  NULL
>         bzf->strm.total_in_hi32;
1549c1549
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32 = bzf->strm.total_in_hi32;
1549c1549
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>        = bzf->strm.total_in_hi32;
1549c1549
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  bzf->strm.total_in_hi32;
1549c1549
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>         bzf->strm.total_in_hi32;
(89.5 %, 21503 bytes)
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>        = bzf->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>         bzf->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>        = ->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>         ->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>        = bzfstrm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>         bzfstrm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>        = strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>         strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  bzf->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  ->strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  bzfstrm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  strm.total_in_hi32;
1549c1549
<       nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       nbytes_in_hi32  bzf->.total_in_hi32;
(89.5 %, 21488 bytes)
1549c1549
<         bzf->strm.total_in_hi32;
---
>         strm.total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         ->.total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         .total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         ->strmtotal_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         strmtotal_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         ->total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzfstrm.total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf.total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzfstrmtotal_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzftotal_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzfstrm.;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf.;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzfstrm;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->.total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->total_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->.;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->.total_in_hi32
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->total_in_hi32
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->.
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->strmtotal_in_hi32;
1549c1549
<         bzf->strm.total_in_hi32;
---
>         bzf->strm;
(89.5 %, 21468 bytes)
1549,1550c1549,1550
<         bzf;
<    if (nbytes_out_lo32 != NULL)
---
>         bzf
>      != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     (nbytes_out_lo32 != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     nbytes_out_lo32 != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     ( != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>      != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     (nbytes_out_lo32  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     nbytes_out_lo32  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>     (  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>       NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if  != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if   NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if  != )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32  )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if   )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if ( != NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if ( != )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (  )
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if ( != NULL
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (  NULL
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if ( != 
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (  
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_out_lo32  NULL)
1550c1550
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_out_lo32  )
(89.5 %, 21451 bytes)
1550c1550
<    if (  NULL)
---
>    if (  
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  )
>       nbytes_out_lo32 = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  
>       nbytes_out_lo32 = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  )
>       * = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  
>       * = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  )
>        = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  
>        = bzf->strm.total_out_lo32;
1550c1550
<    if (  NULL)
---
>    if (  NULL
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>       nbytes_out_lo32 = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>       * = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>        = bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>       *nbytes_out_lo32  bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>       nbytes_out_lo32  bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>       *  bzf->strm.total_out_lo32;
1550,1551c1550,1551
<    if (  NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>    if (  NULL
>         bzf->strm.total_out_lo32;
1551c1551
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32 = bzf->strm.total_out_lo32;
1551c1551
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>        = bzf->strm.total_out_lo32;
1551c1551
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  bzf->strm.total_out_lo32;
1551c1551
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>         bzf->strm.total_out_lo32;
(89.5 %, 21450 bytes)
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>        = bzf->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>         bzf->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>        = ->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>         ->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>        = bzfstrm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>         bzfstrm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>        = strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>         strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  bzf->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  ->strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  bzfstrm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  strm.total_out_lo32;
1551c1551
<       nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       nbytes_out_lo32  bzf->.total_out_lo32;
(89.5 %, 21434 bytes)
1551c1551
<         bzf->strm.total_out_lo32;
---
>         strm.total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         ->.total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         .total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         ->strmtotal_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         strmtotal_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         ->total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzfstrm.total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf.total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzfstrmtotal_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzftotal_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzfstrm.;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf.;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzfstrm;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->.total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->total_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->.;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->.total_out_lo32
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->total_out_lo32
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->.
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->strmtotal_out_lo32;
1551c1551
<         bzf->strm.total_out_lo32;
---
>         bzf->strm;
(89.6 %, 21413 bytes)
1551,1552c1551,1552
<         bzf;
<    if (nbytes_out_hi32 != NULL)
---
>         bzf
>      != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     (nbytes_out_hi32 != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     nbytes_out_hi32 != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     ( != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>      != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     (nbytes_out_hi32  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     nbytes_out_hi32  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>     (  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>       NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if  != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if   NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if  != )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32  )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if   )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if ( != NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if ( != )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (  )
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if ( != NULL
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (  NULL
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if ( != 
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (  
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_out_hi32  NULL)
1552c1552
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_out_hi32  )
(89.6 %, 21396 bytes)
1552c1552
<    if (  NULL)
---
>    if (  
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  )
>       nbytes_out_hi32 = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  
>       nbytes_out_hi32 = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  )
>       * = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  
>       * = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  )
>        = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  
>        = bzf->strm.total_out_hi32;
1552c1552
<    if (  NULL)
---
>    if (  NULL
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>       nbytes_out_hi32 = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>       * = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>        = bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>       *nbytes_out_hi32  bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>       nbytes_out_hi32  bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>       *  bzf->strm.total_out_hi32;
1552,1553c1552,1553
<    if (  NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>    if (  NULL
>         bzf->strm.total_out_hi32;
1553c1553
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32 = bzf->strm.total_out_hi32;
1553c1553
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>        = bzf->strm.total_out_hi32;
1553c1553
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  bzf->strm.total_out_hi32;
1553c1553
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>         bzf->strm.total_out_hi32;
(89.6 %, 21395 bytes)
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>        = bzf->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>         bzf->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>        = ->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>         ->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>        = bzfstrm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>         bzfstrm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>        = strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>         strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  bzf->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  ->strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  bzfstrm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  strm.total_out_hi32;
1553c1553
<       nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       nbytes_out_hi32  bzf->.total_out_hi32;
(89.6 %, 21379 bytes)
1553c1553
<         bzf->strm.total_out_hi32;
---
>         strm.total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         ->.total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         .total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         ->strmtotal_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         strmtotal_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         ->total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzfstrm.total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf.total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzfstrmtotal_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzftotal_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzfstrm.;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf.;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzfstrm;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->.total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->total_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->.;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->.total_out_hi32
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->total_out_hi32
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->.
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->strmtotal_out_hi32;
1553c1553
<         bzf->strm.total_out_hi32;
---
>         bzf->strm;
(89.6 %, 21358 bytes)
1553c1553
<         bzf;
---
>         bzf
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    );
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    ();
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    );
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1555c1555
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.6 %, 21349 bytes)
1555c1555
<    (BZ_OK);
---
>    BZ_OK);
1555c1555
<    (BZ_OK);
---
>    );
1555c1555
<    (BZ_OK);
---
>    BZ_OK;
1555c1555
<    (BZ_OK);
---
>    ;
1555c1555
<    (BZ_OK);
---
>    BZ_OK)
(89.6 %, 21347 bytes)
1555,1556c1555,1556
<    BZ_OK;
<    0;
---
>    ;
>    ;
1555,1556c1555,1556
<    BZ_OK;
<    0;
---
>    
>    ;
(89.6 %, 21341 bytes)
1554a1555
>    
1557d1557
<    0;
1554a1555,1556
>    
>    
1556,1557d1557
<    ;
<    0;
(89.6 %, 21339 bytes)
1555a1556
>    
1557,1558c1558
<    ;
< }
---
> 
1556,1558c1556,1558
<    ;
<    ;
< }
---
>    
>    
> 
1556c1556
<    ;
---
>    
1562c1562
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> * BZ_APIBZ2_bzReadOpen 
1556,1557c1556,1557
<    ;
<    ;
---
>    
>    
1562c1562
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> * BZ_APIBZ2_bzReadOpen 
(89.6 %, 21332 bytes)
1557c1557
<    ;
---
>    
1562c1562
< * BZ_APIBZ2_bzReadOpen 
---
> *  
1557,1558c1557
<    ;
< }
---
>    
1562c1561,1562
< * BZ_APIBZ2_bzReadOpen 
---
> 
> *  
1557c1557
<    ;
---
>    
1562c1562
< * BZ_APIBZ2_bzReadOpen 
---
>   
1557,1558c1557
<    ;
< }
---
>    
1562c1561,1562
< * BZ_APIBZ2_bzReadOpen 
---
> 
>   
1558c1558
< }
---
> 
1558d1557
< }
1562c1561,1562
< * BZ_APIBZ2_bzReadOpen 
---
> 
>  BZ_APIBZ2_bzReadOpen 
1558d1557
< }
1562c1561,1562
< * BZ_APIBZ2_bzReadOpen 
---
> 
> *  
1558d1557
< }
1562c1561,1562
< * BZ_APIBZ2_bzReadOpen 
---
> 
>   
1558c1558
< }
---
> 
1563c1563
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1558d1557
< }
1562,1563c1561,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> 
>  BZ_APIBZ2_bzReadOpen 
>                     int*  bzerror, 
1558d1557
< }
1562,1563c1561,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> 
> *  
>                     int*  bzerror, 
1558d1557
< }
1562,1563c1561,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> 
>   
>                     int*  bzerror, 
1562c1562
< * BZ_APIBZ2_bzReadOpen 
---
>  BZ_APIBZ2_bzReadOpen 
1562c1562
< * BZ_APIBZ2_bzReadOpen 
---
>   
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                     int*  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int*  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                    ( *  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    ( *  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                     *  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     *  bzerror, 
1562c1562
< * BZ_APIBZ2_bzReadOpen 
---
> *  
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int*  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( *  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     *  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( int  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int  bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    (   bzerror, 
1562,1563c1562,1563
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                       bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                     int  bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                       bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                     int*  , 
1563c1563
<                    ( int*  bzerror, 
---
>                     *  , 
1563c1563
<                    ( int*  bzerror, 
---
>                     int  , 
1563c1563
<                    ( int*  bzerror, 
---
>                       , 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                    (   bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( *  , 
1563c1563
<                    ( int*  bzerror, 
---
>                    (   , 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( *  bzerror 
1563c1563
<                    ( int*  bzerror, 
---
>                    (   bzerror 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( *   
1563c1563
<                    ( int*  bzerror, 
---
>                    (    
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int  bzerror, 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int  , 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int  bzerror 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int   
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror, 
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  , 
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror 
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int   
>                      * f, 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int*  , 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int*   
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      FILE f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                       f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                       f, 
1563c1563
<                    ( int*  bzerror, 
---
>                    ( int*  bzerror 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      * f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                       f, 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE* , 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      * , 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE , 
1563,1564c1563,1564
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                       , 
1564c1564
<                      FILE* f, 
---
>                      * f, 
1564c1564
<                      FILE* f, 
---
>                       f, 
1564c1564
<                      FILE* f, 
---
>                      * , 
1564c1564
<                      FILE* f, 
---
>                       , 
1564c1564
<                      FILE* f, 
---
>                      * f 
1564c1564
<                      FILE* f, 
---
>                       f 
1564c1564
<                      FILE* f, 
---
>                      *  
1564c1564
<                      FILE* f, 
---
>                        
1564c1564
<                      FILE* f, 
---
>                      FILE f, 
1564c1564
<                      FILE* f, 
---
>                      FILE , 
1564c1564
<                      FILE* f, 
---
>                      FILE f 
1564c1564
<                      FILE* f, 
---
>                      FILE  
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f, 
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE , 
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f 
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE  
>                         verbosity,
1564c1564
<                      FILE* f, 
---
>                      FILE* , 
1564c1564
<                      FILE* f, 
---
>                      FILE*  
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                      int   ,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                      int   ,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                         ,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                         ,
1564c1564
<                      FILE* f, 
---
>                      FILE* f 
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         verbosity,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   ,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         ,
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   verbosity
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         verbosity
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   
1564,1565c1564,1565
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         
1565c1565
<                      int   verbosity,
---
>                         verbosity,
1565c1565
<                      int   verbosity,
---
>                         ,
1565c1565
<                      int   verbosity,
---
>                         verbosity
1565c1565
<                      int   verbosity,
---
>                         
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                         verbosity,
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                         ,
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                         verbosity
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                         
>                         small,
1565c1565
<                      int   verbosity,
---
>                      int   ,
1565c1565
<                      int   verbosity,
---
>                      int   
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                      int   ,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                      int   ,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         ,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         ,
1565c1565
<                      int   verbosity,
---
>                      int   verbosity
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         small,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   ,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         ,
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   small
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         small
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   
1565,1566c1565,1566
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         
1566c1566
<                      int   small,
---
>                         small,
1566c1566
<                      int   small,
---
>                         ,
1566c1566
<                      int   small,
---
>                         small
1566c1566
<                      int   small,
---
>                         
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                         small,
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                         ,
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                         small
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                         
>                      * unused,
1566c1566
<                      int   small,
---
>                      int   ,
1566c1566
<                      int   small,
---
>                      int   
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      void unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   
>                      void unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                       unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   
>                       unused,
1566c1566
<                      int   small,
---
>                      int   small
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      * unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                       unused,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void* ,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      * ,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void ,
1566,1567c1566,1567
<                      int   small,
<                      void* unused,
---
>                      int   small
>                       ,
1567c1567
<                      void* unused,
---
>                      * unused,
1567c1567
<                      void* unused,
---
>                       unused,
1567c1567
<                      void* unused,
---
>                      * ,
1567c1567
<                      void* unused,
---
>                       ,
1567c1567
<                      void* unused,
---
>                      * unused
1567c1567
<                      void* unused,
---
>                       unused
1567c1567
<                      void* unused,
---
>                      * 
1567c1567
<                      void* unused,
---
>                       
1567c1567
<                      void* unused,
---
>                      void unused,
1567c1567
<                      void* unused,
---
>                      void ,
1567c1567
<                      void* unused,
---
>                      void unused
1567c1567
<                      void* unused,
---
>                      void 
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void unused,
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void ,
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void unused
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void 
>                         nUnused )
1567c1567
<                      void* unused,
---
>                      void* ,
1567c1567
<                      void* unused,
---
>                      void* 
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                      int    )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                      int    )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                          )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                          )
1567c1567
<                      void* unused,
---
>                      void* unused
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                         nUnused )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int    )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                          )
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int   nUnused 
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                         nUnused 
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int    
1567,1568c1567,1568
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                          
1568c1568
<                      int   nUnused )
---
>                         nUnused )
1568c1568
<                      int   nUnused )
---
>                          )
1568c1568
<                      int   nUnused )
---
>                         nUnused 
1568c1568
<                      int   nUnused )
---
>                          
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                         nUnused )
> 
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                          )
> 
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                         nUnused 
> 
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                          
> 
1568c1568
<                      int   nUnused )
---
>                      int    )
1568c1568
<                      int   nUnused )
---
>                      int    
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                      int    )
> 
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                      int    
> 
1568c1568
<                      int   nUnused )
---
>                      int    )
1570c1570
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
1568c1568
<                      int   nUnused )
---
>                      int    
1570c1570
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
1568,1570c1568,1570
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int    )
> 
>    * bzf = NULL;
1568,1570c1568,1570
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int    
> 
>    * bzf = NULL;
1568c1568
<                      int   nUnused )
---
>                      int   nUnused 
1568,1569c1568,1569
<                      int   nUnused )
< {
---
>                      int   nUnused 
> 
1568c1568
<                      int   nUnused )
---
>                      int   nUnused 
1570c1570
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
1568,1570c1568,1570
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   nUnused 
> 
>    * bzf = NULL;
1568c1568
<                      int   nUnused )
---
>                      int   nUnused 
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile bzf = NULL;
1568,1570c1568,1570
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   nUnused 
> 
>    bzFile bzf = NULL;
1568c1568
<                      int   nUnused )
---
>                      int   nUnused 
1570c1570
<    bzFile* bzf = NULL;
---
>     bzf = NULL;
1568,1570c1568,1570
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   nUnused 
> 
>     bzf = NULL;
1569c1569
< {
---
> 
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>    * bzf = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>    bzFile bzf = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>     bzf = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>    bzFile*  = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>    *  = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>    bzFile  = NULL;
1569,1570c1569,1570
< {
<    bzFile* bzf = NULL;
---
> 
>      = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>     bzf = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    *  = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>      = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    * bzf  NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>     bzf  NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    *   NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>       NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile bzf = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile  = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile bzf  NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile   NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile bzf = ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile  = ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile bzf  ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile   ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*  = ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*   ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*  = 
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile*   
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf  NULL;
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf  ;
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf  NULL
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>     *bzf_4_0;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf = ;
1570c1570
<    bzFile* bzf = NULL;
---
>    bzFile* bzf = 
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf = ;
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf = 
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
---
>    bzFile* bzf = ;
>    char bzf_4_0;
(89.6 %, 21327 bytes)
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>     *bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>    char bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>     bzf_4_0;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>    char *;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>     *;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>    char ;
1570,1571c1570,1571
<    bzFile* bzf  ;
<    char *bzf_4_0;
---
>    bzFile* bzf  
>     ;
1571c1571
<    char *bzf_4_0;
---
>     *bzf_4_0;
1571c1571
<    char *bzf_4_0;
---
>     bzf_4_0;
1571c1571
<    char *bzf_4_0;
---
>     *;
1571c1571
<    char *bzf_4_0;
---
>     ;
1571c1571
<    char *bzf_4_0;
---
>     *bzf_4_0
1571c1571
<    char *bzf_4_0;
---
>     bzf_4_0
1571c1571
<    char *bzf_4_0;
---
>     *
1571c1571
<    char *bzf_4_0;
---
>     
1571c1571
<    char *bzf_4_0;
---
>    char bzf_4_0;
1571c1571
<    char *bzf_4_0;
---
>    char ;
1571c1571
<    char *bzf_4_0;
---
>    char bzf_4_0
1571c1571
<    char *bzf_4_0;
---
>    char 
1571,1572c1571,1572
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0;
>     int bzf_4_1;
(89.6 %, 21326 bytes)
1571c1571
<    char bzf_4_0;
---
>    char ;
1571c1571
<    char bzf_4_0;
---
>    char 
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>     int bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>     int bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>    unsigned  bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>    unsigned  bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>      bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>      bzf_4_1;
1571c1571
<    char bzf_4_0;
---
>    char bzf_4_0
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      bzf_4_1;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned int ;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int ;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  ;
1571,1572c1571,1572
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      ;
1572c1572
<    unsigned int bzf_4_1;
---
>     int bzf_4_1;
1572c1572
<    unsigned int bzf_4_1;
---
>      bzf_4_1;
1572c1572
<    unsigned int bzf_4_1;
---
>     int ;
1572c1572
<    unsigned int bzf_4_1;
---
>      ;
1572c1572
<    unsigned int bzf_4_1;
---
>     int bzf_4_1
1572c1572
<    unsigned int bzf_4_1;
---
>      bzf_4_1
1572c1572
<    unsigned int bzf_4_1;
---
>     int 
1572c1572
<    unsigned int bzf_4_1;
---
>      
1572c1572
<    unsigned int bzf_4_1;
---
>    unsigned  bzf_4_1;
(89.6 %, 21318 bytes)
1572c1572
<     int bzf_4_1;
---
>      bzf_4_1;
1572c1572
<     int bzf_4_1;
---
>      ;
1572c1572
<     int bzf_4_1;
---
>      bzf_4_1
1572c1572
<     int bzf_4_1;
---
>      
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>      bzf_4_1;
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>      ;
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>      bzf_4_1
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>      
>     bzf_3;
1572c1572
<     int bzf_4_1;
---
>     int ;
1572c1572
<     int bzf_4_1;
---
>     int 
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>    Bool ;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>    Bool ;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int ;
>     ;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int 
>     ;
1572c1572
<     int bzf_4_1;
---
>     int bzf_4_1
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     bzf_3;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool ;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     ;
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool bzf_3
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     bzf_3
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>    Bool 
1572,1573c1572,1573
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1
>     
1573c1573
<    Bool bzf_3;
---
>     bzf_3;
1573c1573
<    Bool bzf_3;
---
>     ;
1573c1573
<    Bool bzf_3;
---
>     bzf_3
1573c1573
<    Bool bzf_3;
---
>     
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>     bzf_3;
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>     ;
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>     bzf_3
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>     
>     bzf_2;
1573c1573
<    Bool bzf_3;
---
>    Bool ;
1573c1573
<    Bool bzf_3;
---
>    Bool 
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool ;
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool 
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool ;
>    Int32 ;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool 
>    Int32 ;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool ;
>     ;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool 
>     ;
1573c1573
<    Bool bzf_3;
---
>    Bool bzf_3
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>     bzf_2;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>    Int32 ;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>     ;
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>    Int32 bzf_2
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>     bzf_2
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>    Int32 
1573,1574c1573,1574
<    Bool bzf_3;
<    Int32 bzf_2;
---
>    Bool bzf_3
>     
1574c1574
<    Int32 bzf_2;
---
>     bzf_2;
1574c1574
<    Int32 bzf_2;
---
>     ;
1574c1574
<    Int32 bzf_2;
---
>     bzf_2
1574c1574
<    Int32 bzf_2;
---
>     
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>     bzf_2;
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>     ;
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>     bzf_2
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>     
>     bzf_6;
1574c1574
<    Int32 bzf_2;
---
>    Int32 ;
1574c1574
<    Int32 bzf_2;
---
>    Int32 
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 ;
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 ;
>    Bool ;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 
>    Bool ;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 ;
>     ;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 
>     ;
1574c1574
<    Int32 bzf_2;
---
>    Int32 bzf_2
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>     bzf_6;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>    Bool ;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>     ;
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>    Bool bzf_6
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>     bzf_6
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>    Bool 
1574,1575c1574,1575
<    Int32 bzf_2;
<    Bool bzf_6;
---
>    Int32 bzf_2
>     
1575c1575
<    Bool bzf_6;
---
>     bzf_6;
1575c1575
<    Bool bzf_6;
---
>     ;
1575c1575
<    Bool bzf_6;
---
>     bzf_6
1575c1575
<    Bool bzf_6;
---
>     
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>     bzf_6;
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>     ;
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>     bzf_6
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>     
>         ret;
1575c1575
<    Bool bzf_6;
---
>    Bool ;
1575c1575
<    Bool bzf_6;
---
>    Bool 
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool ;
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool 
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool ;
>    int     ;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool 
>    int     ;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool ;
>         ;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool 
>         ;
1575c1575
<    Bool bzf_6;
---
>    Bool bzf_6
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>         ret;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>    int     ;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>         ;
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>    int     ret
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>         ret
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>    int     
1575,1576c1575,1576
<    Bool bzf_6;
<    int     ret;
---
>    Bool bzf_6
>         
1576c1576
<    int     ret;
---
>         ret;
1576c1576
<    int     ret;
---
>         ;
1576c1576
<    int     ret;
---
>         ret
1576c1576
<    int     ret;
---
>         
1576c1576
<    int     ret;
---
>         ret;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>         ;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>         ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>         
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>    int     ;
1576c1576
<    int     ret;
---
>    int     
1576c1576
<    int     ret;
---
>    int     ;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>    int     
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>    int     ;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1576c1576
<    int     ret;
---
>    int     
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1576c1576
<    int     ret;
---
>    int     ;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1576c1576
<    int     ret;
---
>    int     
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1576c1576
<    int     ret;
---
>    int     ret
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    ();
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
1576c1576
<    int     ret;
---
>    int     ret
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    );
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    ();
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    );
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1578c1578
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.6 %, 21309 bytes)
1578c1578
<    (BZ_OK);
---
>    BZ_OK);
1578c1578
<    (BZ_OK);
---
>    );
1578c1578
<    (BZ_OK);
---
>    BZ_OK;
1578c1578
<    (BZ_OK);
---
>    ;
(89.6 %, 21307 bytes)
1578c1578
<    BZ_OK;
---
>    ;
1580c1580
<    if (f == NULL || 
---
>     (f == NULL || 
1578c1578
<    BZ_OK;
---
>    
1580c1580
<    if (f == NULL || 
---
>     (f == NULL || 
(89.6 %, 21300 bytes)
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>     ( == NULL || 
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>      == NULL || 
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>     (f  NULL || 
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>     f  NULL || 
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>     (  NULL || 
1578c1578
<    ;
---
>    
1580c1580
<     (f == NULL || 
---
>       NULL || 
1580c1580
<     (f == NULL || 
---
>     f == NULL || 
1580c1580
<     (f == NULL || 
---
>      == NULL || 
1580c1580
<     (f == NULL || 
---
>     f  NULL || 
1580c1580
<     (f == NULL || 
---
>       NULL || 
1580c1580
<     (f == NULL || 
---
>     f ==  || 
1580c1580
<     (f == NULL || 
---
>      ==  || 
1580c1580
<     (f == NULL || 
---
>     f   || 
1580c1580
<     (f == NULL || 
---
>        || 
1580c1580
<     (f == NULL || 
---
>     ( == NULL || 
(89.6 %, 21296 bytes)
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>       NULL  
>         != 0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>         
>         != 0 && small != 1 ||
1580c1580
<     (  NULL || 
---
>     (   || 
1580c1580
<     (  NULL || 
---
>     (    
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (   || 
>         != 0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (    
>         != 0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (   || 
>        small  0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (    
>        small  0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (   || 
>          0 && small != 1 ||
1580,1581c1580,1581
<     (  NULL || 
<        small != 0 && small != 1 ||
---
>     (    
>          0 && small != 1 ||
(89.6 %, 21290 bytes)
1581c1581
<        small != 0 && small != 1 ||
---
>          0 && small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>         !=  && small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>           && small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>         != 0  small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>          0  small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>         !=   small != 1 ||
1581c1581
<        small != 0 && small != 1 ||
---
>            small != 1 ||
(89.6 %, 21283 bytes)
1581c1581
<          0 && small != 1 ||
---
>            small != 1 ||
1581c1581
<          0 && small != 1 ||
---
>           &&  != 1 ||
1581c1581
<          0 && small != 1 ||
---
>             != 1 ||
1581c1581
<          0 && small != 1 ||
---
>           && small  1 ||
1581c1581
<          0 && small != 1 ||
---
>            small  1 ||
1581c1581
<          0 && small != 1 ||
---
>           &&   1 ||
1581c1581
<          0 && small != 1 ||
---
>              1 ||
(89.6 %, 21280 bytes)
1581c1581
<            small != 1 ||
---
>              1 ||
1581c1581
<            small != 1 ||
---
>             !=  ||
1581c1581
<            small != 1 ||
---
>               ||
1581c1581
<            small != 1 ||
---
>             != 1 
1581c1581
<            small != 1 ||
---
>              1 
1581c1581
<            small != 1 ||
---
>             !=  
1581c1581
<            small != 1 ||
---
>               
(89.6 %, 21273 bytes)
1581c1581
<              1 ||
---
>               
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>         < 0 || verbosity > 4 ||
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>         < 0 || verbosity > 4 ||
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>        verbosity  0 || verbosity > 4 ||
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>        verbosity  0 || verbosity > 4 ||
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>          0 || verbosity > 4 ||
1581,1582c1581,1582
<              1 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>          0 || verbosity > 4 ||
(89.6 %, 21270 bytes)
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>          0 || verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>         <  || verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>           || verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>         < 0  verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>          0  verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>         <   verbosity > 4 ||
1582c1582
<        verbosity < 0 || verbosity > 4 ||
---
>            verbosity > 4 ||
(89.6 %, 21260 bytes)
1582c1582
<          0 || verbosity > 4 ||
---
>            verbosity > 4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>           ||  > 4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>             > 4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>           || verbosity  4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>            verbosity  4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>           ||   4 ||
1582c1582
<          0 || verbosity > 4 ||
---
>              4 ||
(89.6 %, 21257 bytes)
1582c1582
<            verbosity > 4 ||
---
>              4 ||
1582c1582
<            verbosity > 4 ||
---
>             >  ||
1582c1582
<            verbosity > 4 ||
---
>               ||
1582c1582
<            verbosity > 4 ||
---
>             > 4 
1582c1582
<            verbosity > 4 ||
---
>              4 
1582c1582
<            verbosity > 4 ||
---
>             >  
1582c1582
<            verbosity > 4 ||
---
>               
(89.6 %, 21247 bytes)
1582c1582
<              4 ||
---
>               
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               ||
>         == NULL && nUnused != 0 ||
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               
>         == NULL && nUnused != 0 ||
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               ||
>        unused  NULL && nUnused != 0 ||
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               
>        unused  NULL && nUnused != 0 ||
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               ||
>          NULL && nUnused != 0 ||
1582,1583c1582,1583
<              4 ||
<        unused == NULL && nUnused != 0 ||
---
>               
>          NULL && nUnused != 0 ||
(89.6 %, 21244 bytes)
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>          NULL && nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>         ==  && nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>           && nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>         == NULL  nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>          NULL  nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>         ==   nUnused != 0 ||
1583c1583
<        unused == NULL && nUnused != 0 ||
---
>            nUnused != 0 ||
(89.6 %, 21236 bytes)
1583c1583
<          NULL && nUnused != 0 ||
---
>            nUnused != 0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>           &&  != 0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>             != 0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>           && nUnused  0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>            nUnused  0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>           &&   0 ||
1583c1583
<          NULL && nUnused != 0 ||
---
>              0 ||
(89.6 %, 21230 bytes)
1583c1583
<            nUnused != 0 ||
---
>              0 ||
1583c1583
<            nUnused != 0 ||
---
>             !=  ||
1583c1583
<            nUnused != 0 ||
---
>               ||
1583c1583
<            nUnused != 0 ||
---
>             != 0 
1583c1583
<            nUnused != 0 ||
---
>              0 
1583c1583
<            nUnused != 0 ||
---
>             !=  
1583c1583
<            nUnused != 0 ||
---
>               
(89.6 %, 21221 bytes)
1583c1583
<              0 ||
---
>               
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               ||
>         != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               
>         != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               ||
>        unused  NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               
>        unused  NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               ||
>          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1583,1584c1583,1584
<              0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               
>          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
(89.6 %, 21218 bytes)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>         !=  && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>           && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>         != NULL  nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>          NULL  nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>         !=   nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
(89.7 %, 21210 bytes)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>           &&  < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>             < 0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>           && nUnused  0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>            nUnused  0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>           &&   0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<          NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>              0 || nUnused > BZ_MAX_UNUSED)
(89.7 %, 21204 bytes)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>              0 || nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>             <  || nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>               || nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>             < 0  nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>              0  nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>             <   nUnused > BZ_MAX_UNUSED)
1584c1584
<            nUnused < 0 || nUnused > BZ_MAX_UNUSED)
---
>                nUnused > BZ_MAX_UNUSED)
(89.7 %, 21196 bytes)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>                nUnused > BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>               ||  > BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>                 > BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>               || nUnused  BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>                nUnused  BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>               ||   BZ_MAX_UNUSED)
1584c1584
<              0 || nUnused > BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED)
(89.7 %, 21193 bytes)
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED)
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                 > )
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                  )
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                 > BZ_MAX_UNUSED
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                 > 
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                  
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                nUnused  BZ_MAX_UNUSED)
1584c1584
<                nUnused > BZ_MAX_UNUSED)
---
>                nUnused  )
(89.7 %, 21185 bytes)
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  )
>       
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  
>       
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  )
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  )
>       
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  
>       
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  BZ_MAX_UNUSED
>       
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  BZ_MAX_UNUSED
>       
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED
1587c1587
<    if (ferror(f))
---
>    if ferror(f))
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  BZ_MAX_UNUSED
>       
1587c1587
<    if (ferror(f))
---
>    if ferror(f))
1584c1584
<                  BZ_MAX_UNUSED)
---
>                  BZ_MAX_UNUSED
1587c1587
<    if (ferror(f))
---
>     ferror(f))
1584,1585c1584,1585
<                  BZ_MAX_UNUSED)
<       ;
---
>                  BZ_MAX_UNUSED
>       
1587c1587
<    if (ferror(f))
---
>     ferror(f))
1585c1585
<       ;
---
>       
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>    if ferror(f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>     ferror(f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>    if ((f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>     ((f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>    if (f))
1585c1585
<       ;
---
>       
1587c1587
<    if (ferror(f))
---
>     (f))
1587c1587
<    if (ferror(f))
---
>     (ferror(f))
1587c1587
<    if (ferror(f))
---
>     ferror(f))
1587c1587
<    if (ferror(f))
---
>     ((f))
(89.7 %, 21183 bytes)
1587c1587
<     (ferror(f))
---
>     ferror(f))
1587c1587
<     (ferror(f))
---
>     (f))
1587c1587
<     (ferror(f))
---
>     ferrorf))
1587c1587
<     (ferror(f))
---
>     f))
1587c1587
<     (ferror(f))
---
>     ferror())
1587c1587
<     (ferror(f))
---
>     ())
1587c1587
<     (ferror(f))
---
>     ferror))
1587c1587
<     (ferror(f))
---
>     ))
1587c1587
<     (ferror(f))
---
>     ((f))
1587c1587
<     (ferror(f))
---
>     (f))
1587c1587
<     (ferror(f))
---
>     (())
1587c1587
<     (ferror(f))
---
>     ())
1587c1587
<     (ferror(f))
---
>     ((f)
1587c1587
<     (ferror(f))
---
>     (f)
(89.7 %, 21177 bytes)
1587c1587
<     ((f))
---
>     (f))
1587c1587
<     ((f))
---
>     ())
1587c1587
<     ((f))
---
>     (f)
1587c1587
<     ((f))
---
>     ()
1587c1587
<     ((f))
---
>     (f)
(89.7 %, 21175 bytes)
1587,1588c1587,1588
<     (f)
<       ;
---
>     ()
>       
1587,1588c1587,1588
<     (f)
<       ;
---
>     (
>       
1587c1587
<     (f)
---
>     ()
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587c1587
<     (f)
---
>     (
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587,1588c1587,1588
<     (f)
<       ;
---
>     ()
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587,1588c1587,1588
<     (f)
<       ;
---
>     (
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587c1587
<     (f)
---
>     (f
1587,1588c1587,1588
<     (f)
<       ;
---
>     (f
>       
1587c1587
<     (f)
---
>     (f
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587,1588c1587,1588
<     (f)
<       ;
---
>     (f
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1587c1587
<     (f)
---
>     (f
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1587,1588c1587,1588
<     (f)
<       ;
---
>     (f
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1587c1587
<     (f)
---
>     (f
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1587,1588c1587,1588
<     (f)
<       ;
---
>     (f
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1588c1588
<       ;
---
>       
1588c1588
<       ;
---
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     = malloc ( sizeof(bzFile) );
1588c1588
<       ;
---
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf  malloc ( sizeof(bzFile) );
1588c1588
<       ;
---
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>      malloc ( sizeof(bzFile) );
1588c1588
<       ;
---
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf =  ( sizeof(bzFile) );
1588c1588
<       ;
---
>       
1590c1590
<    bzf = malloc ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) );
(89.7 %, 21171 bytes)
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>       ( sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>      malloc  sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>        sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>      malloc ( (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>       ( (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>      malloc  (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>        (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =   sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =  ( (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =   (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =   sizeofbzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =  ( bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     =   bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  sizeof(bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  (bzFile) );
1590c1590
<     = malloc ( sizeof(bzFile) );
---
>     = malloc  sizeofbzFile) );
(89.7 %, 21165 bytes)
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   sizeof(bzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   (bzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   sizeofbzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   bzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   sizeof() );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   () );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   sizeof) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =   ) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( (bzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( bzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( () );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( ) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( (bzFile );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( bzFile );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( ( );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  (  );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof) );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile) ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof) ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeofbzFile ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() )
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( )
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof() 
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof( 
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile );
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile )
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile );
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile ;
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile )
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile 
>     (bzf == NULL) 
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) ;
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) ;
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) 
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) ;
>    if bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) 
>    if bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) ;
>     bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) 
>     bzf == NULL) 
1590c1590
<     =  ( sizeof(bzFile) );
---
>     =  ( sizeof(bzFile) )
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>     (bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>    if bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>     bzf == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>    if ( == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>     ( == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>    if  == NULL) 
1590,1591c1590,1591
<     =  ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>     =  ( sizeof(bzFile) )
>      == NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     (bzf == NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     bzf == NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     ( == NULL) 
1591c1591
<    if (bzf == NULL) 
---
>      == NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     (bzf  NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     bzf  NULL) 
1591c1591
<    if (bzf == NULL) 
---
>     (  NULL) 
(89.7 %, 21163 bytes)
1591c1591
<     (bzf == NULL) 
---
>     bzf == NULL) 
1591c1591
<     (bzf == NULL) 
---
>      == NULL) 
1591c1591
<     (bzf == NULL) 
---
>     bzf  NULL) 
1591c1591
<     (bzf == NULL) 
---
>       NULL) 
1591c1591
<     (bzf == NULL) 
---
>     bzf == ) 
1591c1591
<     (bzf == NULL) 
---
>      == ) 
1591c1591
<     (bzf == NULL) 
---
>     bzf  ) 
1591c1591
<     (bzf == NULL) 
---
>       ) 
1591c1591
<     (bzf == NULL) 
---
>     ( == NULL) 
1591c1591
<     (bzf == NULL) 
---
>     (  NULL) 
1591c1591
<     (bzf == NULL) 
---
>     ( == ) 
1591c1591
<     (bzf == NULL) 
---
>     (  ) 
1591c1591
<     (bzf == NULL) 
---
>     ( == NULL 
1591c1591
<     (bzf == NULL) 
---
>     (  NULL 
1591c1591
<     (bzf == NULL) 
---
>     ( ==  
1591c1591
<     (bzf == NULL) 
---
>     (   
1591c1591
<     (bzf == NULL) 
---
>     (bzf  NULL) 
1591c1591
<     (bzf == NULL) 
---
>     (bzf  ) 
(89.7 %, 21158 bytes)
1591c1591
<     (  NULL) 
---
>     (   
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  ) 
>       
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (   
>       
1591c1591
<     (  NULL) 
---
>     (  ) 
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591c1591
<     (  NULL) 
---
>     (   
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  ) 
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (   
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591c1591
<     (  NULL) 
---
>     (  NULL 
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  NULL 
>       
1591c1591
<     (  NULL) 
---
>     (  NULL 
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  NULL 
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1591c1591
<     (  NULL) 
---
>     (  NULL 
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  NULL 
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1591c1591
<     (  NULL) 
---
>     (  NULL 
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1591,1592c1591,1592
<     (  NULL) 
<       ;
---
>     (  NULL 
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1592c1592
<       ;
---
>       
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    ();
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
1592c1592
<       ;
---
>       
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    );
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    ();
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    );
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1594c1594
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.7 %, 21149 bytes)
1594c1594
<    (BZ_OK);
---
>    BZ_OK);
1594c1594
<    (BZ_OK);
---
>    );
1594c1594
<    (BZ_OK);
---
>    BZ_OK;
1594c1594
<    (BZ_OK);
---
>    ;
1594c1594
<    (BZ_OK);
---
>    BZ_OK)
(89.7 %, 21147 bytes)
1594c1594
<    BZ_OK;
---
>    ;
1596c1596
<    bzf_6 = False;
---
>     = False;
1594c1594
<    BZ_OK;
---
>    
1596c1596
<    bzf_6 = False;
---
>     = False;
1594c1594
<    BZ_OK;
---
>    ;
1596c1596
<    bzf_6 = False;
---
>    bzf_6  False;
1594c1594
<    BZ_OK;
---
>    
1596c1596
<    bzf_6 = False;
---
>    bzf_6  False;
1594c1594
<    BZ_OK;
---
>    ;
1596c1596
<    bzf_6 = False;
---
>      False;
1594c1594
<    BZ_OK;
---
>    
1596c1596
<    bzf_6 = False;
---
>      False;
1594c1594
<    BZ_OK;
---
>    BZ_OK
1594c1594
<    BZ_OK;
---
>    BZ_OK
1596c1596
<    bzf_6 = False;
---
>     = False;
1594c1594
<    BZ_OK;
---
>    BZ_OK
1596c1596
<    bzf_6 = False;
---
>    bzf_6  False;
(89.7 %, 21136 bytes)
1594c1594
<    ;
---
>    
1596,1597c1596,1597
<      False;
<    bzf->handle        = f;
---
>      False
>    ->handle        = f;
1594c1594
<    ;
---
>    
1596,1597c1596,1597
<      False;
<    bzf->handle        = f;
---
>      
>    ->handle        = f;
1596c1596
<      False;
---
>      ;
1596c1596
<      False;
---
>      
(89.7 %, 21131 bytes)
1596c1596
<      ;
---
>      
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    ->handle        = f;
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    bzfhandle        = f;
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    handle        = f;
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    bzf->        = f;
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    ->        = f;
1596,1597c1596,1597
<      ;
<    bzf->handle        = f;
---
>      
>    bzf        = f;
(89.7 %, 21130 bytes)
1597c1597
<    bzf->handle        = f;
---
>    ->handle        = f;
1597c1597
<    bzf->handle        = f;
---
>    handle        = f;
1597c1597
<    bzf->handle        = f;
---
>    ->        = f;
1597c1597
<    bzf->handle        = f;
---
>            = f;
1597c1597
<    bzf->handle        = f;
---
>    ->handle         f;
1597c1597
<    bzf->handle        = f;
---
>    handle         f;
1597c1597
<    bzf->handle        = f;
---
>    ->         f;
1597c1597
<    bzf->handle        = f;
---
>             f;
1597c1597
<    bzf->handle        = f;
---
>    bzfhandle        = f;
1597c1597
<    bzf->handle        = f;
---
>    bzf        = f;
(89.7 %, 21118 bytes)
1597,1598c1597,1598
<             f;
<    bzf_2          = 0;
---
>             
>               0;
1597c1597
<             f;
---
>             f
1597,1598c1597,1598
<             f;
<    bzf_2          = 0;
---
>             f
>              = 0;
(89.7 %, 21110 bytes)
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               
>            False;
1598c1598
<               0;
---
>               0
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>           = False;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>    bzf_3        False;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>            False;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>    bzf_3       = ;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>           = ;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>    bzf_3        ;
1598,1599c1598,1599
<               0;
<    bzf_3       = False;
---
>               0
>            ;
(89.7 %, 21102 bytes)
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            
>    strm.bzalloc  = NULL;
1599c1599
<            False;
---
>            False
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    ->strm.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    bzfstrm.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    strm.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    bzf->.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    ->.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    bzf.bzalloc  = NULL;
1599,1600c1599,1600
<            False;
<    bzf->strm.bzalloc  = NULL;
---
>            False
>    .bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    strm.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    ->.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    ->strmbzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    strmbzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    ->bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrmbzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf.  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bzalloc  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->  = NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc   NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bzalloc   NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.   NULL;
1600c1600
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->   NULL;
(89.7 %, 21088 bytes)
1600,1601c1600,1601
<    bzf  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf   
>    ->strm.bzfree   = NULL;
1600c1600
<    bzf  = NULL;
---
>    bzf  = ;
1600c1600
<    bzf  = NULL;
---
>    bzf  = 
(89.7 %, 21079 bytes)
1601c1601
<    ->strm.bzfree   = NULL;
---
>       = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->.bzfree   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->bzfree   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->.   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->.bzfree    NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->bzfree    NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->.    NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->    NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->strmbzfree   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->strm   = NULL;
1601c1601
<    ->strm.bzfree   = NULL;
---
>    ->strmbzfree    NULL;
(89.7 %, 21066 bytes)
1601,1602c1601,1602
<       = NULL;
<    bzf->strm.opaque   = NULL;
---
>        
>    ->strm.opaque   = NULL;
1601c1601
<       = NULL;
---
>       = ;
1601c1601
<       = NULL;
---
>       = 
(89.7 %, 21057 bytes)
1602c1602
<    ->strm.opaque   = NULL;
---
>       = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->.opaque   = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->opaque   = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->.   = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->   = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->.opaque    NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->opaque    NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->.    NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->    NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->strmopaque   = NULL;
1602c1602
<    ->strm.opaque   = NULL;
---
>    ->strm   = NULL;
(89.7 %, 21044 bytes)
1602c1602
<       = NULL;
---
>        
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused > 0) 
1602c1602
<       = NULL;
---
>       = ;
1602c1602
<       = NULL;
---
>       = 
1602c1602
<       = NULL;
---
>       = ;
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused > 0) 
1602c1602
<       = NULL;
---
>       = 
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused > 0) 
1602c1602
<       = NULL;
---
>       = ;
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused > 0) 
1602c1602
<       = NULL;
---
>       = 
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused > 0) 
1602c1602
<       = NULL;
---
>       = ;
1604c1604
<    while (nUnused > 0) 
---
>     nUnused > 0) 
1602c1602
<       = NULL;
---
>       = 
1604c1604
<    while (nUnused > 0) 
---
>     nUnused > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>     nUnused > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>    while ( > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>     ( > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>    while  > 0) 
1602c1602
<       = NULL;
---
>       = NULL
1604c1604
<    while (nUnused > 0) 
---
>      > 0) 
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused > 0) 
1604c1604
<    while (nUnused > 0) 
---
>     nUnused > 0) 
1604c1604
<    while (nUnused > 0) 
---
>     ( > 0) 
1604c1604
<    while (nUnused > 0) 
---
>      > 0) 
1604c1604
<    while (nUnused > 0) 
---
>     (nUnused  0) 
1604c1604
<    while (nUnused > 0) 
---
>     nUnused  0) 
1604c1604
<    while (nUnused > 0) 
---
>     (  0) 
1604c1604
<    while (nUnused > 0) 
---
>       0) 
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused > 0) 
1604c1604
<    while (nUnused > 0) 
---
>    while  > 0) 
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused  0) 
1604c1604
<    while (nUnused > 0) 
---
>    while   0) 
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused > ) 
1604c1604
<    while (nUnused > 0) 
---
>    while  > ) 
1604c1604
<    while (nUnused > 0) 
---
>    while nUnused  ) 
1604c1604
<    while (nUnused > 0) 
---
>    while   ) 
1604c1604
<    while (nUnused > 0) 
---
>    while ( > 0) 
1604c1604
<    while (nUnused > 0) 
---
>    while (  0) 
1604c1604
<    while (nUnused > 0) 
---
>    while ( > ) 
1604c1604
<    while (nUnused > 0) 
---
>    while (  ) 
1604c1604
<    while (nUnused > 0) 
---
>    while ( > 0 
1604c1604
<    while (nUnused > 0) 
---
>    while (  0 
1604c1604
<    while (nUnused > 0) 
---
>    while ( >  
1604c1604
<    while (nUnused > 0) 
---
>    while (   
1604c1604
<    while (nUnused > 0) 
---
>    while (nUnused  0) 
1604c1604
<    while (nUnused > 0) 
---
>    while (nUnused  ) 
(89.7 %, 21036 bytes)
1604c1604
<    while (  0) 
---
>    while (   
1604c1604
<    while (  0) 
---
>    while (  ) 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (   
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  ) 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret  BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (   
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret  BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  ) 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (   
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret  BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret =  ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     =  ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret   ( &bzf->strm, verbosity, small );
1604c1604
<    while (  0) 
---
>    while (  0 
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>       ( &bzf->strm, verbosity, small );
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>     =  ( &bzf->strm, verbosity, small );
1606c1606
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>       ( &bzf->strm, verbosity, small );
(89.7 %, 21032 bytes)
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>        &bzf->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>       ( bzf->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>        bzf->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>       ( &->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>        &->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>       ( ->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>        ->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit  &bzf->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit  bzf->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit  &->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit  ->strm, verbosity, small );
1606c1606
<      BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>      BZ2_bzDecompressInit  &bzfstrm, verbosity, small );
(89.7 %, 21011 bytes)
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        bzfstrm, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        strm, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        bzf->, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        ->, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        bzf, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>        , verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( ->strm, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( strm, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( ->, verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( , verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( ->strm verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( strm verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       ( -> verbosity, small );
1606c1606
<       ( bzf->strm, verbosity, small );
---
>       (  verbosity, small );
(89.7 %, 21006 bytes)
1606c1606
<       ( strm, verbosity, small );
---
>       (  verbosity, small );
1606c1606
<       ( strm, verbosity, small );
---
>       ( , , small );
1606c1606
<       ( strm, verbosity, small );
---
>       (  , small );
1606c1606
<       ( strm, verbosity, small );
---
>       ( , verbosity small );
1606c1606
<       ( strm, verbosity, small );
---
>       (  verbosity small );
1606c1606
<       ( strm, verbosity, small );
---
>       ( ,  small );
1606c1606
<       ( strm, verbosity, small );
---
>       (   small );
(89.8 %, 21001 bytes)
1606c1606
<       (  verbosity, small );
---
>       (   small );
1606c1606
<       (  verbosity, small );
---
>       (  ,  );
1606c1606
<       (  verbosity, small );
---
>       (    );
1606c1606
<       (  verbosity, small );
---
>       (  , small ;
1606c1606
<       (  verbosity, small );
---
>       (   small ;
1606c1606
<       (  verbosity, small );
---
>       (  ,  ;
1606c1606
<       (  verbosity, small );
---
>       (    ;
1606c1606
<       (  verbosity, small );
---
>       (  verbosity small );
1606c1606
<       (  verbosity, small );
---
>       (  verbosity  );
(89.8 %, 20991 bytes)
1606c1606
<       (   small );
---
>       (    ;
1606c1606
<       (   small );
---
>       (    )
1606c1606
<       (   small );
---
>       (    
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (    );
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (    ;
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (    )
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (    
>     (ret != BZ_OK)
1606c1606
<       (   small );
---
>       (   small ;
1606c1606
<       (   small );
---
>       (   small 
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small ;
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small 
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small ;
>    if ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small 
>    if ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small ;
>     ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small 
>     ret != BZ_OK)
1606c1606
<       (   small );
---
>       (   small )
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>     (ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>    if ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>     ret != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>    if ( != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>     ( != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>    if  != BZ_OK)
1606,1607c1606,1607
<       (   small );
<    if (ret != BZ_OK)
---
>       (   small )
>      != BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     (ret != BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     ret != BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     ( != BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>      != BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     (ret  BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     ret  BZ_OK)
1607c1607
<    if (ret != BZ_OK)
---
>     (  BZ_OK)
(89.8 %, 20989 bytes)
1607c1607
<     (ret != BZ_OK)
---
>     ret != BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>      != BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>     ret  BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>       BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>     ret != )
1607c1607
<     (ret != BZ_OK)
---
>      != )
1607c1607
<     (ret != BZ_OK)
---
>     ret  )
1607c1607
<     (ret != BZ_OK)
---
>       )
1607c1607
<     (ret != BZ_OK)
---
>     ( != BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>     (  BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>     ( != )
1607c1607
<     (ret != BZ_OK)
---
>     (  )
1607c1607
<     (ret != BZ_OK)
---
>     ( != BZ_OK
1607c1607
<     (ret != BZ_OK)
---
>     (  BZ_OK
1607c1607
<     (ret != BZ_OK)
---
>     ( != 
1607c1607
<     (ret != BZ_OK)
---
>     (  
1607c1607
<     (ret != BZ_OK)
---
>     (ret  BZ_OK)
1607c1607
<     (ret != BZ_OK)
---
>     (ret  )
(89.8 %, 20984 bytes)
1607c1607
<     (  BZ_OK)
---
>     (  
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  )
>       
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  
>       
1607c1607
<     (  BZ_OK)
---
>     (  )
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607c1607
<     (  BZ_OK)
---
>     (  
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  )
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607c1607
<     (  BZ_OK)
---
>     (  BZ_OK
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1607c1607
<     (  BZ_OK)
---
>     (  BZ_OK
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1607c1607
<     (  BZ_OK)
---
>     (  BZ_OK
1610c1610
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1  bzf_2;
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1  bzf_2;
1607c1607
<     (  BZ_OK)
---
>     (  BZ_OK
1610c1610
<    bzf_4_1 = bzf_2;
---
>      bzf_2;
1607,1608c1607,1608
<     (  BZ_OK)
<       ;
---
>     (  BZ_OK
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>      bzf_2;
1608c1608
<       ;
---
>       
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1  bzf_2;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>      bzf_2;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1 = ;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = ;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1  ;
1608c1608
<       ;
---
>       
1610c1610
<    bzf_4_1 = bzf_2;
---
>      ;
1610c1610
<    bzf_4_1 = bzf_2;
---
>     = bzf_2;
1610c1610
<    bzf_4_1 = bzf_2;
---
>      bzf_2;
(89.8 %, 20970 bytes)
1610,1611c1610,1611
<      ;
<    bzf_4_0  = bzf->buf;
---
>      
>       ->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>      = bzf->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>       bzf->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>      = ->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>       ->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>      = bzfbuf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>       bzfbuf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>      = buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>       buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>    bzf_4_0   bzf->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>    bzf_4_0   ->buf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>    bzf_4_0   bzfbuf;
1611c1611
<    bzf_4_0  = bzf->buf;
---
>    bzf_4_0   buf;
(89.8 %, 20962 bytes)
1611c1611
<       bzf->buf;
---
>       buf;
1611c1611
<       bzf->buf;
---
>       ->;
1611c1611
<       bzf->buf;
---
>       ;
1611c1611
<       bzf->buf;
---
>       ->buf
1611c1611
<       bzf->buf;
---
>       buf
1611c1611
<       bzf->buf;
---
>       ->
1611c1611
<       bzf->buf;
---
>       
(89.8 %, 20954 bytes)
1611c1611
<       ;
---
>       
1613c1613
<    bzf_6 = True;
---
>      True;
1611c1611
<       ;
---
>       
1613c1613
<    bzf_6 = True;
---
>    bzf_6 = ;
1611c1611
<       ;
---
>       
1613c1613
<    bzf_6 = True;
---
>     = ;
1611c1611
<       ;
---
>       
1613c1613
<    bzf_6 = True;
---
>    bzf_6  ;
(89.8 %, 20947 bytes)
1613,1614c1613,1614
<      True;
<    return bzf;   
---
>      
>     bzf;   
1613,1614c1613,1614
<      True;
<    return bzf;   
---
>      ;
>    return ;   
1613,1614c1613,1614
<      True;
<    return bzf;   
---
>      
>    return ;   
(89.8 %, 20936 bytes)
1614,1615c1614,1615
<     bzf;   
< }
---
>        
> 
1614c1614
<     bzf;   
---
>     ;   
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614c1614
<     bzf;   
---
>        
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614,1615c1614
<     bzf;   
< }
---
>     ;   
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614,1615c1614
<     bzf;   
< }
---
>        
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614c1614
<     bzf;   
---
>     bzf   
1614,1615c1614,1615
<     bzf;   
< }
---
>     bzf   
> 
1614c1614
<     bzf;   
---
>     bzf   
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614,1615c1614
<     bzf;   
< }
---
>     bzf   
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1614c1614
<     bzf;   
---
>     bzf   
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void  ( int *bzerror, BZFILE *b )
1614,1615c1614
<     bzf;   
< }
---
>     bzf   
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
> void  ( int *bzerror, BZFILE *b )
1614c1614
<     bzf;   
---
>     bzf   
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>   ( int *bzerror, BZFILE *b )
1614,1615c1614
<     bzf;   
< }
---
>     bzf   
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>   ( int *bzerror, BZFILE *b )
1615c1615
< }
---
> 
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
> void  ( int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>   ( int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>  BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
> void   int *bzerror, BZFILE *b )
1615d1614
< }
1619c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> 
>    int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>   ( int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>    int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose (  *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>   (  *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  BZ_APIBZ2_bzReadClose   *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>     *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void  ( int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void   int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void  (  *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void    *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void  ( int bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void   int bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void  (  bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void    bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose   *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose   bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose   *, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int , BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose   , BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  *bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  *, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  , BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  *bzerror BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  bzerror BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  * BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (   BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int bzerror, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int , BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int bzerror BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int  BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int bzerror,  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int ,  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int bzerror  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int   *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *, BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int * BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *,  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *, BZFILE b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int * BZFILE b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *,  b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *  b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror BZFILE *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror BZFILE b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror  b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror BZFILE * )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror  * )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror BZFILE  )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror   )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  *b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  * )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,   )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  *b 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  b 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,  * 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror,   
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE b )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE  )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE b 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE  
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE b )
> 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE  )
> 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE b 
> 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE  
> 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * )
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * )
> 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * 
> 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * )
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * 
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1619,1621c1619,1621
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * )
> 
>    * bzf = (bzFile*)b;
1619,1621c1619,1621
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE * 
> 
>    * bzf = (bzFile*)b;
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
1619,1620c1619,1620
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
> 
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1619,1621c1619,1621
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
> 
>    * bzf = (bzFile*)b;
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1619,1621c1619,1621
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
> 
>    bzFile bzf = (bzFile*)b;
1619c1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1619,1621c1619,1621
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b 
> 
>     bzf = (bzFile*)b;
1620c1620
< {
---
> 
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    * bzf = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile bzf = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>     bzf = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile*  = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    *  = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile  = (bzFile*)b;
1620,1621c1620,1621
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>      = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = *)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   *)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  *)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  ()b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  )b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile)b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = )b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *b;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFileb;
1621c1621
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(89.8 %, 20928 bytes)
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = ;
>     bzf_6;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = b
>     bzf_6;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = 
>     bzf_6;
1621c1621
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *;
1621c1621
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *;
>     bzf_6;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *
>     bzf_6;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *;
>    Bool ;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *
>    Bool ;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *;
>     ;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *
>     ;
1621c1621
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *b
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>     bzf_6;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>    Bool ;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>     ;
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>    Bool bzf_6
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>     bzf_6
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>    Bool 
1621,1622c1621,1622
<    bzFile* bzf = *b;
<    Bool bzf_6;
---
>    bzFile* bzf = *b
>     
1622c1622
<    Bool bzf_6;
---
>     bzf_6;
1622c1622
<    Bool bzf_6;
---
>     ;
1622c1622
<    Bool bzf_6;
---
>     bzf_6
1622c1622
<    Bool bzf_6;
---
>     
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>     bzf_6;
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>     ;
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>     bzf_6
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>     
>     bzf_3;
1622c1622
<    Bool bzf_6;
---
>    Bool ;
1622c1622
<    Bool bzf_6;
---
>    Bool 
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool ;
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool 
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool ;
>    Bool ;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool 
>    Bool ;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool ;
>     ;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool 
>     ;
1622c1622
<    Bool bzf_6;
---
>    Bool bzf_6
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>     bzf_3;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>    Bool ;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>     ;
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>    Bool bzf_3
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>     bzf_3
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>    Bool 
1622,1623c1622,1623
<    Bool bzf_6;
<    Bool bzf_3;
---
>    Bool bzf_6
>     
1623c1623
<    Bool bzf_3;
---
>     bzf_3;
1623c1623
<    Bool bzf_3;
---
>     ;
1623c1623
<    Bool bzf_3;
---
>     bzf_3
1623c1623
<    Bool bzf_3;
---
>     
1623c1623
<    Bool bzf_3;
---
>     bzf_3;
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>     ;
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>     bzf_3
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>     
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool ;
1623c1623
<    Bool bzf_3;
---
>    Bool 
1623c1623
<    Bool bzf_3;
---
>    Bool ;
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool 
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool ;
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool 
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool ;
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool 
1625c1625
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1623c1623
<    Bool bzf_3;
---
>    Bool bzf_3
(89.8 %, 20914 bytes)
1623c1623
<     bzf_3
---
>     
1625c1625
<    (BZ_OK);
---
>    (;
1623c1623
<     bzf_3
---
>     
1625c1625
<    (BZ_OK);
---
>    ;
1625c1625
<    (BZ_OK);
---
>    BZ_OK);
1625c1625
<    (BZ_OK);
---
>    );
1625c1625
<    (BZ_OK);
---
>    BZ_OK;
1625c1625
<    (BZ_OK);
---
>    ;
1625c1625
<    (BZ_OK);
---
>    BZ_OK)
1625c1625
<    (BZ_OK);
---
>    )
1625c1625
<    (BZ_OK);
---
>    BZ_OK
1625c1625
<    (BZ_OK);
---
>    
1625c1625
<    (BZ_OK);
---
>    ();
1625c1625
<    (BZ_OK);
---
>    (;
1625c1625
<    (BZ_OK);
---
>    ()
1625c1625
<    (BZ_OK);
---
>    (
1625,1626c1625,1626
<    (BZ_OK);
<    if (bzf == NULL)
---
>    ();
>     (bzf == NULL)
(89.8 %, 20909 bytes)
1625c1625
<    ();
---
>    (;
1625c1625
<    ();
---
>    (
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (;
>     (bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (
>     (bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (;
>    if bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (
>    if bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (;
>     bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    (
>     bzf == NULL)
1625c1625
<    ();
---
>    ()
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>     (bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>    if bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>     bzf == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>    if ( == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>     ( == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>    if  == NULL)
1625,1626c1625,1626
<    ();
<    if (bzf == NULL)
---
>    ()
>      == NULL)
1626c1626
<    if (bzf == NULL)
---
>     (bzf == NULL)
(89.8 %, 20904 bytes)
1626c1626
<     bzf == NULL)
---
>       
1626c1626
<     bzf == NULL)
---
>     bzf  NULL)
1626c1626
<     bzf == NULL)
---
>     bzf  )
1626c1626
<     bzf == NULL)
---
>     bzf  NULL
1626c1626
<     bzf == NULL)
---
>     bzf  
1626,1627c1626,1627
<     bzf == NULL)
<       ;
---
>     bzf  NULL)
>       
1626,1627c1626,1627
<     bzf == NULL)
<       ;
---
>     bzf  )
>       
1626,1627c1626,1627
<     bzf == NULL)
<       ;
---
>     bzf  NULL
>       
1626,1627c1626,1627
<     bzf == NULL)
<       ;
---
>     bzf  
>       
1626c1626
<     bzf == NULL)
---
>     bzf == )
1626c1626
<     bzf == NULL)
---
>     bzf == 
1626,1627c1626,1627
<     bzf == NULL)
<       ;
---
>     bzf == )
>       
(89.8 %, 20898 bytes)
1626,1627c1626,1627
<     bzf  )
<       ;
---
>     bzf  
>       
1626c1626
<     bzf  )
---
>     bzf  
1629c1629
<    if (bzf_3)
---
>     (bzf_3)
1626,1627c1626,1627
<     bzf  )
<       ;
---
>     bzf  
>       
1629c1629
<    if (bzf_3)
---
>     (bzf_3)
1626c1626
<     bzf  )
---
>     bzf  
1629c1629
<    if (bzf_3)
---
>    if bzf_3)
1626,1627c1626,1627
<     bzf  )
<       ;
---
>     bzf  
>       
1629c1629
<    if (bzf_3)
---
>    if bzf_3)
1626c1626
<     bzf  )
---
>     bzf  
1629c1629
<    if (bzf_3)
---
>     bzf_3)
1626,1627c1626,1627
<     bzf  )
<       ;
---
>     bzf  
>       
1629c1629
<    if (bzf_3)
---
>     bzf_3)
1627c1627
<       ;
---
>       
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>     (bzf_3)
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>    if bzf_3)
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>     bzf_3)
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>    if ()
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>     ()
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>    if )
1627c1627
<       ;
---
>       
1629c1629
<    if (bzf_3)
---
>     )
1629c1629
<    if (bzf_3)
---
>     (bzf_3)
1629c1629
<    if (bzf_3)
---
>     bzf_3)
1629c1629
<    if (bzf_3)
---
>     ()
1629c1629
<    if (bzf_3)
---
>     )
1629c1629
<    if (bzf_3)
---
>     (bzf_3
1629c1629
<    if (bzf_3)
---
>     bzf_3
(89.8 %, 20896 bytes)
1629c1629
<     (bzf_3)
---
>     bzf_3)
1629c1629
<     (bzf_3)
---
>     )
1629c1629
<     (bzf_3)
---
>     bzf_3
1629c1629
<     (bzf_3)
---
>     
(89.8 %, 20894 bytes)
1629c1629
<     bzf_3
---
>     
1632c1632
<    if (bzf_6)
---
>     (bzf_6)
1629,1630c1629,1630
<     bzf_3
<       ;
---
>     
>       
1632c1632
<    if (bzf_6)
---
>     (bzf_6)
1629c1629
<     bzf_3
---
>     
1632c1632
<    if (bzf_6)
---
>    if bzf_6)
1629,1630c1629,1630
<     bzf_3
<       ;
---
>     
>       
1632c1632
<    if (bzf_6)
---
>    if bzf_6)
1629c1629
<     bzf_3
---
>     
1632c1632
<    if (bzf_6)
---
>     bzf_6)
1629,1630c1629,1630
<     bzf_3
<       ;
---
>     
>       
1632c1632
<    if (bzf_6)
---
>     bzf_6)
1630c1630
<       ;
---
>       
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>     (bzf_6)
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>    if bzf_6)
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>     bzf_6)
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>    if ()
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>     ()
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>    if )
1630c1630
<       ;
---
>       
1632c1632
<    if (bzf_6)
---
>     )
1632c1632
<    if (bzf_6)
---
>     (bzf_6)
1632c1632
<    if (bzf_6)
---
>     bzf_6)
1632c1632
<    if (bzf_6)
---
>     ()
1632c1632
<    if (bzf_6)
---
>     )
1632c1632
<    if (bzf_6)
---
>     (bzf_6
1632c1632
<    if (bzf_6)
---
>     bzf_6
1632c1632
<    if (bzf_6)
---
>     (
1632c1632
<    if (bzf_6)
---
>     
1632c1632
<    if (bzf_6)
---
>    if bzf_6)
1632c1632
<    if (bzf_6)
---
>    if )
1632c1632
<    if (bzf_6)
---
>    if bzf_6
1632c1632
<    if (bzf_6)
---
>    if 
1632,1633c1632,1633
<    if (bzf_6)
<       (void)0;
---
>    if bzf_6)
>       void)0;
1632,1633c1632,1633
<    if (bzf_6)
<       (void)0;
---
>    if )
>       void)0;
1632,1633c1632,1633
<    if (bzf_6)
<       (void)0;
---
>    if bzf_6
>       void)0;
1632,1633c1632,1633
<    if (bzf_6)
<       (void)0;
---
>    if 
>       void)0;
1632c1632
<    if (bzf_6)
---
>    if ()
(89.8 %, 20885 bytes)
1633c1633
<       (void)0;
---
>       ;
1633c1633
<       (void)0;
---
>       ()0;
1633c1633
<       (void)0;
---
>       (0;
1633c1633
<       (void)0;
---
>       ();
1633c1633
<       (void)0;
---
>       (;
1633c1633
<       (void)0;
---
>       ()0
1633c1633
<       (void)0;
---
>       (0
1633c1633
<       (void)0;
---
>       ()
1633c1633
<       (void)0;
---
>       (
1633c1633
<       (void)0;
---
>       (void0;
(89.8 %, 20878 bytes)
1633,1635c1633,1635
<       ;
<    0;
< }
---
>       
>    
> 
1634c1634
<    0;
---
>    ;
1634c1634
<    0;
---
>    
(89.8 %, 20877 bytes)
1634c1634
<    ;
---
>    
1634,1635c1634,1635
<    ;
< }
---
>    
> 
1634c1634
<    ;
---
>    
1639c1639
< int BZ_APIBZ2_bzRead 
---
>  BZ_APIBZ2_bzRead 
(89.8 %, 20876 bytes)
1635c1635
< }
---
> 
1635d1634
< }
1639c1638,1639
< int BZ_APIBZ2_bzRead 
---
> 
>  BZ_APIBZ2_bzRead 
1635d1634
< }
1639c1638,1639
< int BZ_APIBZ2_bzRead 
---
> 
> int  
1635d1634
< }
1639c1638,1639
< int BZ_APIBZ2_bzRead 
---
> 
>   
1635c1635
< }
---
> 
1640c1640
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1635d1634
< }
1639,1640c1638,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>  BZ_APIBZ2_bzRead 
>             int*    bzerror, 
1635d1634
< }
1639,1640c1638,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> 
> int  
>             int*    bzerror, 
1635d1634
< }
1639,1640c1638,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>   
>             int*    bzerror, 
1639c1639
< int BZ_APIBZ2_bzRead 
---
>  BZ_APIBZ2_bzRead 
1639c1639
< int BZ_APIBZ2_bzRead 
---
>   
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>             int*    bzerror, 
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>            ( *    bzerror, 
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( *    bzerror, 
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>             *    bzerror, 
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             *    bzerror, 
1639c1639
< int BZ_APIBZ2_bzRead 
---
> int  
1639,1640c1639,1640
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> int  
>             int*    bzerror, 
(89.8 %, 20873 bytes)
1639c1639
<  BZ_APIBZ2_bzRead 
---
>   
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( *    bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             *    bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( int    bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int    bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            (     bzerror, 
1639,1640c1639,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>                 bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>             *    bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>             int    bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>                 bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>             int*    , 
1640c1640
<            ( int*    bzerror, 
---
>             *    , 
1640c1640
<            ( int*    bzerror, 
---
>             int    , 
1640c1640
<            ( int*    bzerror, 
---
>                 , 
1640c1640
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>            (     bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>            ( *    , 
1640c1640
<            ( int*    bzerror, 
---
>            (     , 
1640c1640
<            ( int*    bzerror, 
---
>            ( *    bzerror 
1640c1640
<            ( int*    bzerror, 
---
>            (     bzerror 
1640c1640
<            ( int*    bzerror, 
---
>            ( *     
1640c1640
<            ( int*    bzerror, 
---
>            (      
1640c1640
<            ( int*    bzerror, 
---
>            ( int    bzerror, 
1640c1640
<            ( int*    bzerror, 
---
>            ( int    , 
1640c1640
<            ( int*    bzerror, 
---
>            ( int    bzerror 
1640c1640
<            ( int*    bzerror, 
---
>            ( int     
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror, 
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    , 
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror 
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int     
>              * b, 
1640c1640
<            ( int*    bzerror, 
---
>            ( int*    , 
1640c1640
<            ( int*    bzerror, 
---
>            ( int*     
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              BZFILE b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              BZFILE b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>               b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>               b, 
1640c1640
<            ( int*    bzerror, 
---
>            ( int*    bzerror 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               b, 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE* , 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * , 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE , 
1640,1641c1640,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               , 
1641c1641
<              BZFILE* b, 
---
>              * b, 
1641c1641
<              BZFILE* b, 
---
>               b, 
1641c1641
<              BZFILE* b, 
---
>              * , 
1641c1641
<              BZFILE* b, 
---
>               , 
1641c1641
<              BZFILE* b, 
---
>              * b 
1641c1641
<              BZFILE* b, 
---
>               b 
1641c1641
<              BZFILE* b, 
---
>              *  
1641c1641
<              BZFILE* b, 
---
>                
1641c1641
<              BZFILE* b, 
---
>              BZFILE b, 
1641c1641
<              BZFILE* b, 
---
>              BZFILE , 
1641c1641
<              BZFILE* b, 
---
>              BZFILE b 
1641c1641
<              BZFILE* b, 
---
>              BZFILE  
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b, 
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE , 
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b 
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE  
>              *   buf, 
1641c1641
<              BZFILE* b, 
---
>              BZFILE* , 
1641c1641
<              BZFILE* b, 
---
>              BZFILE*  
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>              void   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>              void   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>                 buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>                 buf, 
1641c1641
<              BZFILE* b, 
---
>              BZFILE* b 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              *   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void   buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>                 buf, 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void*   , 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              *   , 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void   , 
1641,1642c1641,1642
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>                 , 
1642c1642
<              void*   buf, 
---
>              *   buf, 
1642c1642
<              void*   buf, 
---
>                 buf, 
1642c1642
<              void*   buf, 
---
>              *   , 
1642c1642
<              void*   buf, 
---
>                 , 
1642c1642
<              void*   buf, 
---
>              *   buf 
1642c1642
<              void*   buf, 
---
>                 buf 
1642c1642
<              void*   buf, 
---
>              *    
1642c1642
<              void*   buf, 
---
>                  
1642c1642
<              void*   buf, 
---
>              void   buf, 
1642c1642
<              void*   buf, 
---
>              void   , 
1642c1642
<              void*   buf, 
---
>              void   buf 
1642c1642
<              void*   buf, 
---
>              void    
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void   buf, 
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void   , 
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void   buf 
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void    
>                   len )
1642c1642
<              void*   buf, 
---
>              void*   , 
1642c1642
<              void*   buf, 
---
>              void*    
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*    
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   , 
>              int      )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*    
>              int      )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                    )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*    
>                    )
1642c1642
<              void*   buf, 
---
>              void*   buf 
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    )
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int     len 
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len 
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      
1642,1643c1642,1643
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    
1643c1643
<              int     len )
---
>                   len )
1643c1643
<              int     len )
---
>                    )
1643c1643
<              int     len )
---
>                   len 
1643c1643
<              int     len )
---
>                    
1643,1644c1643,1644
<              int     len )
< {
---
>                   len )
> 
1643,1644c1643,1644
<              int     len )
< {
---
>                    )
> 
1643,1644c1643,1644
<              int     len )
< {
---
>                   len 
> 
1643,1644c1643,1644
<              int     len )
< {
---
>                    
> 
1643c1643
<              int     len )
---
>              int      )
1643c1643
<              int     len )
---
>              int      
1643,1644c1643,1644
<              int     len )
< {
---
>              int      )
> 
1643,1644c1643,1644
<              int     len )
< {
---
>              int      
> 
1643c1643
<              int     len )
---
>              int      )
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643c1643
<              int     len )
---
>              int      
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643,1644c1643,1644
<              int     len )
< {
---
>              int      )
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643,1644c1643,1644
<              int     len )
< {
---
>              int      
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643c1643
<              int     len )
---
>              int     len 
1643,1644c1643,1644
<              int     len )
< {
---
>              int     len 
> 
1643c1643
<              int     len )
---
>              int     len 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643,1644c1643,1644
<              int     len )
< {
---
>              int     len 
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1643c1643
<              int     len )
---
>              int     len 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1643,1644c1643,1644
<              int     len )
< {
---
>              int     len 
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1643c1643
<              int     len )
---
>              int     len 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1643,1644c1643,1644
<              int     len )
< {
---
>              int     len 
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1644c1644
< {
---
> 
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1644c1644
< {
---
> 
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = *)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   *)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  *)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  ()b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  )b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile)b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = )b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *b;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFileb;
1646c1646
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(89.8 %, 20865 bytes)
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = ;
>     *bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = b
>     *bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = 
>     *bzf_4_4;
1646c1646
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *;
1646c1646
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>     *bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>     *bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>    char bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>    char bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *;
>     bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *
>     bzf_4_4;
1646c1646
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *b
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     *bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     bzf_4_4;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char *;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     *;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>    char ;
1646,1647c1646,1647
<    bzFile* bzf = *b;
<    char *bzf_4_4;
---
>    bzFile* bzf = *b
>     ;
1647c1647
<    char *bzf_4_4;
---
>     *bzf_4_4;
1647c1647
<    char *bzf_4_4;
---
>     bzf_4_4;
1647c1647
<    char *bzf_4_4;
---
>     *;
1647c1647
<    char *bzf_4_4;
---
>     ;
1647c1647
<    char *bzf_4_4;
---
>     *bzf_4_4
1647c1647
<    char *bzf_4_4;
---
>     bzf_4_4
1647c1647
<    char *bzf_4_4;
---
>     *
1647c1647
<    char *bzf_4_4;
---
>     
1647c1647
<    char *bzf_4_4;
---
>    char bzf_4_4;
1647c1647
<    char *bzf_4_4;
---
>    char ;
1647c1647
<    char *bzf_4_4;
---
>    char bzf_4_4
1647c1647
<    char *bzf_4_4;
---
>    char 
1647,1648c1647,1648
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4;
>     int bzf_4_5;
(89.8 %, 20864 bytes)
1647c1647
<    char bzf_4_4;
---
>    char ;
1647c1647
<    char bzf_4_4;
---
>    char 
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>     int bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>     int bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>    unsigned  bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>    unsigned  bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char ;
>      bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char 
>      bzf_4_5;
1647c1647
<    char bzf_4_4;
---
>    char bzf_4_4
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>     int bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned  bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>      bzf_4_5;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned int ;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>     int ;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>    unsigned  ;
1647,1648c1647,1648
<    char bzf_4_4;
<    unsigned int bzf_4_5;
---
>    char bzf_4_4
>      ;
1648c1648
<    unsigned int bzf_4_5;
---
>     int bzf_4_5;
1648c1648
<    unsigned int bzf_4_5;
---
>      bzf_4_5;
1648c1648
<    unsigned int bzf_4_5;
---
>     int ;
1648c1648
<    unsigned int bzf_4_5;
---
>      ;
1648c1648
<    unsigned int bzf_4_5;
---
>     int bzf_4_5
1648c1648
<    unsigned int bzf_4_5;
---
>      bzf_4_5
1648c1648
<    unsigned int bzf_4_5;
---
>     int 
1648c1648
<    unsigned int bzf_4_5;
---
>      
1648c1648
<    unsigned int bzf_4_5;
---
>    unsigned  bzf_4_5;
(89.8 %, 20856 bytes)
1648c1648
<     int bzf_4_5;
---
>      bzf_4_5;
1648c1648
<     int bzf_4_5;
---
>      ;
1648c1648
<     int bzf_4_5;
---
>      bzf_4_5
1648c1648
<     int bzf_4_5;
---
>      
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>      bzf_4_5;
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>      ;
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>      bzf_4_5
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>      
>     bzf_3;
1648c1648
<     int bzf_4_5;
---
>     int ;
1648c1648
<     int bzf_4_5;
---
>     int 
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int ;
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int 
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int ;
>    Bool ;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int 
>    Bool ;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int ;
>     ;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int 
>     ;
1648c1648
<     int bzf_4_5;
---
>     int bzf_4_5
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>     bzf_3;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>    Bool ;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>     ;
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>    Bool bzf_3
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>     bzf_3
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>    Bool 
1648,1649c1648,1649
<     int bzf_4_5;
<    Bool bzf_3;
---
>     int bzf_4_5
>     
1649c1649
<    Bool bzf_3;
---
>     bzf_3;
1649c1649
<    Bool bzf_3;
---
>     ;
1649c1649
<    Bool bzf_3;
---
>     bzf_3
1649c1649
<    Bool bzf_3;
---
>     
1649c1649
<    Bool bzf_3;
---
>     bzf_3;
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>     ;
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>     bzf_3
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>     
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool ;
1649c1649
<    Bool bzf_3;
---
>    Bool 
1649c1649
<    Bool bzf_3;
---
>    Bool ;
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool 
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool ;
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool 
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool ;
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1649c1649
<    Bool bzf_3;
---
>    Bool 
1651c1651
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
(89.8 %, 20842 bytes)
1649c1649
<     bzf_3
---
>     
1651c1651
<    (BZ_OK);
---
>    (;
1649c1649
<     bzf_3
---
>     
1651c1651
<    (BZ_OK);
---
>    ;
1651c1651
<    (BZ_OK);
---
>    BZ_OK);
1651c1651
<    (BZ_OK);
---
>    );
1651c1651
<    (BZ_OK);
---
>    BZ_OK;
1651c1651
<    (BZ_OK);
---
>    ;
1651c1651
<    (BZ_OK);
---
>    BZ_OK)
1651c1651
<    (BZ_OK);
---
>    )
1651c1651
<    (BZ_OK);
---
>    BZ_OK
1651c1651
<    (BZ_OK);
---
>    
1651c1651
<    (BZ_OK);
---
>    ();
1651c1651
<    (BZ_OK);
---
>    (;
1651c1651
<    (BZ_OK);
---
>    ()
1651c1651
<    (BZ_OK);
---
>    (
1651c1651
<    (BZ_OK);
---
>    ();
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     (bzf == NULL || buf == NULL || len < 0)
(89.8 %, 20837 bytes)
1651c1651
<    ();
---
>    (;
1651c1651
<    ();
---
>    (
1651c1651
<    ();
---
>    (;
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     (bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    (
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     (bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    (;
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    (
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    (;
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    (
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     (bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     bzf == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if ( == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>     ( == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if  == NULL || buf == NULL || len < 0)
1651c1651
<    ();
---
>    ()
1653c1653
<    if (bzf == NULL || buf == NULL || len < 0)
---
>      == NULL || buf == NULL || len < 0)
(89.8 %, 20832 bytes)
1653c1653
<     bzf == NULL || buf == NULL || len < 0)
---
>         buf == NULL || len < 0)
1653c1653
<     bzf == NULL || buf == NULL || len < 0)
---
>     bzf  NULL || buf == NULL || len < 0)
1653c1653
<     bzf == NULL || buf == NULL || len < 0)
---
>     bzf   || buf == NULL || len < 0)
(89.8 %, 20821 bytes)
1653c1653
<         buf == NULL || len < 0)
---
>             len < 0)
1653c1653
<         buf == NULL || len < 0)
---
>         buf  NULL || len < 0)
1653c1653
<         buf == NULL || len < 0)
---
>         buf   || len < 0)
(89.8 %, 20810 bytes)
1653c1653
<             len < 0)
---
>               
1653c1653
<             len < 0)
---
>             len  0)
1653c1653
<             len < 0)
---
>             len  )
1653c1653
<             len < 0)
---
>             len  0
1653c1653
<             len < 0)
---
>             len  
1653,1654c1653,1654
<             len < 0)
<       ;
---
>             len  0)
>       
1653,1654c1653,1654
<             len < 0)
<       ;
---
>             len  )
>       
1653,1654c1653,1654
<             len < 0)
<       ;
---
>             len  0
>       
1653,1654c1653,1654
<             len < 0)
<       ;
---
>             len  
>       
1653c1653
<             len < 0)
---
>             len < )
1653c1653
<             len < 0)
---
>             len < 
1653,1654c1653,1654
<             len < 0)
<       ;
---
>             len < )
>       
(89.8 %, 20808 bytes)
1653,1654c1653,1654
<             len  )
<       ;
---
>             len  
>       
1653c1653
<             len  )
---
>             len  
1656c1656
<    if (bzf_3)
---
>     (bzf_3)
1653,1654c1653,1654
<             len  )
<       ;
---
>             len  
>       
1656c1656
<    if (bzf_3)
---
>     (bzf_3)
1653c1653
<             len  )
---
>             len  
1656c1656
<    if (bzf_3)
---
>    if bzf_3)
1653,1654c1653,1654
<             len  )
<       ;
---
>             len  
>       
1656c1656
<    if (bzf_3)
---
>    if bzf_3)
1653c1653
<             len  )
---
>             len  
1656c1656
<    if (bzf_3)
---
>     bzf_3)
1653,1654c1653,1654
<             len  )
<       ;
---
>             len  
>       
1656c1656
<    if (bzf_3)
---
>     bzf_3)
1654c1654
<       ;
---
>       
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>     (bzf_3)
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>    if bzf_3)
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>     bzf_3)
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>    if ()
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>     ()
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>    if )
1654c1654
<       ;
---
>       
1656c1656
<    if (bzf_3)
---
>     )
1656c1656
<    if (bzf_3)
---
>     (bzf_3)
1656c1656
<    if (bzf_3)
---
>     bzf_3)
1656c1656
<    if (bzf_3)
---
>     ()
1656c1656
<    if (bzf_3)
---
>     )
1656c1656
<    if (bzf_3)
---
>     (bzf_3
1656c1656
<    if (bzf_3)
---
>     bzf_3
(89.8 %, 20806 bytes)
1656c1656
<     (bzf_3)
---
>     bzf_3)
1656c1656
<     (bzf_3)
---
>     )
1656c1656
<     (bzf_3)
---
>     bzf_3
1656c1656
<     (bzf_3)
---
>     
(89.8 %, 20804 bytes)
1656c1656
<     bzf_3
---
>     
1659c1659
<    if (len == 0)
---
>     (len == 0)
1656,1657c1656,1657
<     bzf_3
<       ;
---
>     
>       
1659c1659
<    if (len == 0)
---
>     (len == 0)
1656c1656
<     bzf_3
---
>     
1659c1659
<    if (len == 0)
---
>    if len == 0)
(89.9 %, 20797 bytes)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>     ( == 0)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>      == 0)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>     (len  0)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>     len  0)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>     (  0)
1657c1657
<       ;
---
>       
1659c1659
<     (len == 0)
---
>       0)
1659c1659
<     (len == 0)
---
>     len == 0)
1659c1659
<     (len == 0)
---
>      == 0)
1659c1659
<     (len == 0)
---
>     len  0)
1659c1659
<     (len == 0)
---
>       0)
1659c1659
<     (len == 0)
---
>     len == )
1659c1659
<     (len == 0)
---
>      == )
1659c1659
<     (len == 0)
---
>     len  )
1659c1659
<     (len == 0)
---
>       )
(89.9 %, 20791 bytes)
1659,1660c1659,1660
<     (  0)
<       ;
---
>       0
>       
1659,1660c1659,1660
<     (  0)
<       ;
---
>       
>       
1659c1659
<     (  0)
---
>     (  )
1659c1659
<     (  0)
---
>     (  
1659,1660c1659,1660
<     (  0)
<       ;
---
>     (  )
>       
1659,1660c1659,1660
<     (  0)
<       ;
---
>     (  
>       
1659c1659
<     (  0)
---
>     (  )
1662c1662
<    bzf_4_5 = len;
---
>     = len;
1659c1659
<     (  0)
---
>     (  
1662c1662
<    bzf_4_5 = len;
---
>     = len;
1659,1660c1659,1660
<     (  0)
<       ;
---
>     (  )
>       
1662c1662
<    bzf_4_5 = len;
---
>     = len;
1659,1660c1659,1660
<     (  0)
<       ;
---
>     (  
>       
1662c1662
<    bzf_4_5 = len;
---
>     = len;
(89.9 %, 20787 bytes)
1662c1662
<    bzf_4_5 = len;
---
>      
1662c1662
<    bzf_4_5 = len;
---
>    bzf_4_5  len;
1662c1662
<    bzf_4_5 = len;
---
>    bzf_4_5  ;
(89.9 %, 20775 bytes)
1663c1663
<    bzf_4_4 = buf;
---
>      
1663c1663
<    bzf_4_4 = buf;
---
>    bzf_4_4  buf;
1663c1663
<    bzf_4_4 = buf;
---
>    bzf_4_4  ;
(89.9 %, 20763 bytes)
1665c1665
<    while (True) 
---
>      
1665c1665
<    while (True) 
---
>    while True) 
1665c1665
<    while (True) 
---
>    while ) 
1665c1665
<    while (True) 
---
>    while True 
1665c1665
<    while (True) 
---
>    while  
1665c1665
<    while (True) 
---
>    while True) 
1667c1667
<    return 0; 
---
>     0; 
1665c1665
<    while (True) 
---
>    while ) 
1667c1667
<    return 0; 
---
>     0; 
1665c1665
<    while (True) 
---
>    while True 
1667c1667
<    return 0; 
---
>     0; 
(89.9 %, 20752 bytes)
1667,1668c1667,1668
<    return 0; 
< }
---
>      
> 
1667c1667
<    return 0; 
---
>    return ; 
1667c1667
<    return 0; 
---
>    return  
1667,1668c1667,1668
<    return 0; 
< }
---
>    return ; 
> 
1667,1668c1667,1668
<    return 0; 
< }
---
>    return  
> 
1667c1667
<    return 0; 
---
>    return ; 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>  BZ_APIBZ2_bzReadGetUnused 
1667c1667
<    return 0; 
---
>    return  
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>  BZ_APIBZ2_bzReadGetUnused 
1667,1668c1667
<    return 0; 
< }
---
>    return ; 
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>  BZ_APIBZ2_bzReadGetUnused 
1667,1668c1667
<    return 0; 
< }
---
>    return  
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>  BZ_APIBZ2_bzReadGetUnused 
1667c1667
<    return 0; 
---
>    return 0 
1667,1668c1667,1668
<    return 0; 
< }
---
>    return 0 
> 
1667c1667
<    return 0; 
---
>    return 0 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>  BZ_APIBZ2_bzReadGetUnused 
1667,1668c1667
<    return 0; 
< }
---
>    return 0 
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>  BZ_APIBZ2_bzReadGetUnused 
1667c1667
<    return 0; 
---
>    return 0 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> void  
1667,1668c1667
<    return 0; 
< }
---
>    return 0 
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
> void  
1667c1667
<    return 0; 
---
>    return 0 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>   
1667,1668c1667
<    return 0; 
< }
---
>    return 0 
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>   
1668c1668
< }
---
> 
1668d1667
< }
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>  BZ_APIBZ2_bzReadGetUnused 
1668d1667
< }
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
> void  
1668d1667
< }
1672c1671,1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> 
>   
1668c1668
< }
---
> 
1673c1673
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1668d1667
< }
1672,1673c1671,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> 
>  BZ_APIBZ2_bzReadGetUnused 
>                       int*    bzerror, 
1668d1667
< }
1672,1673c1671,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> 
> void  
>                       int*    bzerror, 
1668d1667
< }
1672,1673c1671,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> 
>   
>                       int*    bzerror, 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>  BZ_APIBZ2_bzReadGetUnused 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
>   
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                       int*    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       int*    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                      ( *    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                      ( *    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                       *    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       *    bzerror, 
1672c1672
< void BZ_APIBZ2_bzReadGetUnused 
---
> void  
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( *    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       *    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( int    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int    bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      (     bzerror, 
1672,1673c1672,1673
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                           bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                       *    bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                       int    bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                           bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                       int*    , 
1673c1673
<                      ( int*    bzerror, 
---
>                       *    , 
1673c1673
<                      ( int*    bzerror, 
---
>                       int    , 
1673c1673
<                      ( int*    bzerror, 
---
>                           , 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                      (     bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( *    , 
1673c1673
<                      ( int*    bzerror, 
---
>                      (     , 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( *    bzerror 
1673c1673
<                      ( int*    bzerror, 
---
>                      (     bzerror 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( *     
1673c1673
<                      ( int*    bzerror, 
---
>                      (      
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int    bzerror, 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int    , 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int    bzerror 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int     
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror, 
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    , 
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror 
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int     
>                        * b, 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int*    , 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int*     
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        BZFILE b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                         b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
1673c1673
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         b, 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE* , 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * , 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE , 
1673,1674c1673,1674
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         , 
1674c1674
<                        BZFILE* b, 
---
>                        * b, 
1674c1674
<                        BZFILE* b, 
---
>                         b, 
1674c1674
<                        BZFILE* b, 
---
>                        * , 
1674c1674
<                        BZFILE* b, 
---
>                         , 
1674c1674
<                        BZFILE* b, 
---
>                        * b 
1674c1674
<                        BZFILE* b, 
---
>                         b 
1674c1674
<                        BZFILE* b, 
---
>                        *  
1674c1674
<                        BZFILE* b, 
---
>                          
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE b, 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE , 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE b 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE  
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b, 
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE* , 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE*  
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        void*  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void*  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        *  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        *  unused, 
1674c1674
<                        BZFILE* b, 
---
>                        BZFILE* b 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        **  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void*  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        *  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void*  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        *  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void  unused, 
1674,1675c1674,1675
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                          unused, 
1675c1675
<                        void**  unused, 
---
>                        **  unused, 
1675c1675
<                        void**  unused, 
---
>                        *  unused, 
1675c1675
<                        void**  unused, 
---
>                        *  unused, 
1675c1675
<                        void**  unused, 
---
>                          unused, 
1675c1675
<                        void**  unused, 
---
>                        **  , 
1675c1675
<                        void**  unused, 
---
>                        *  , 
1675c1675
<                        void**  unused, 
---
>                        *  , 
1675c1675
<                        void**  unused, 
---
>                          , 
1675c1675
<                        void**  unused, 
---
>                        void*  unused, 
1675c1675
<                        void**  unused, 
---
>                        void  unused, 
1675c1675
<                        void**  unused, 
---
>                        void*  , 
1675c1675
<                        void**  unused, 
---
>                        void  , 
1675c1675
<                        void**  unused, 
---
>                        void*  unused 
1675c1675
<                        void**  unused, 
---
>                        void  unused 
1675c1675
<                        void**  unused, 
---
>                        void*   
1675c1675
<                        void**  unused, 
---
>                        void   
1675c1675
<                        void**  unused, 
---
>                        void*  unused, 
1675c1675
<                        void**  unused, 
---
>                        void*  , 
1675c1675
<                        void**  unused, 
---
>                        void*  unused 
1675c1675
<                        void**  unused, 
---
>                        void*   
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused, 
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  , 
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused 
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*   
>                        *    nUnused )
1675c1675
<                        void**  unused, 
---
>                        void**  , 
1675c1675
<                        void**  unused, 
---
>                        void**   
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        int    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                            nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
1675c1675
<                        void**  unused, 
---
>                        void**  unused 
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int    nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                            nUnused )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int*     )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *     )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int     )
1675,1676c1675,1676
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                             )
1676c1676
<                        int*    nUnused )
---
>                        *    nUnused )
1676c1676
<                        int*    nUnused )
---
>                            nUnused )
1676c1676
<                        int*    nUnused )
---
>                        *     )
1676c1676
<                        int*    nUnused )
---
>                             )
1676c1676
<                        int*    nUnused )
---
>                        *    nUnused 
1676c1676
<                        int*    nUnused )
---
>                            nUnused 
1676c1676
<                        int*    nUnused )
---
>                        *     
1676c1676
<                        int*    nUnused )
---
>                             
1676c1676
<                        int*    nUnused )
---
>                        int    nUnused )
1676c1676
<                        int*    nUnused )
---
>                        int     )
1676c1676
<                        int*    nUnused )
---
>                        int    nUnused 
1676c1676
<                        int*    nUnused )
---
>                        int     
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int    nUnused )
> 
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int     )
> 
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int    nUnused 
> 
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int     
> 
1676c1676
<                        int*    nUnused )
---
>                        int*     )
1676c1676
<                        int*    nUnused )
---
>                        int*     
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int*     )
> 
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int*     
> 
1676c1676
<                        int*    nUnused )
---
>                        int*     )
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1676c1676
<                        int*    nUnused )
---
>                        int*     
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1676,1678c1676,1678
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int*     )
> 
>    * bzf = (bzFile*)b;
1676,1678c1676,1678
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int*     
> 
>    * bzf = (bzFile*)b;
1676c1676
<                        int*    nUnused )
---
>                        int*    nUnused 
1676,1677c1676,1677
<                        int*    nUnused )
< {
---
>                        int*    nUnused 
> 
1676c1676
<                        int*    nUnused )
---
>                        int*    nUnused 
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1676,1678c1676,1678
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int*    nUnused 
> 
>    * bzf = (bzFile*)b;
1676c1676
<                        int*    nUnused )
---
>                        int*    nUnused 
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1676,1678c1676,1678
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int*    nUnused 
> 
>    bzFile bzf = (bzFile*)b;
1676c1676
<                        int*    nUnused )
---
>                        int*    nUnused 
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1676,1678c1676,1678
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int*    nUnused 
> 
>     bzf = (bzFile*)b;
1677c1677
< {
---
> 
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    * bzf = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile bzf = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>     bzf = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile*  = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    *  = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>    bzFile  = (bzFile*)b;
1677,1678c1677,1678
< {
<    bzFile* bzf = (bzFile*)b;
---
> 
>      = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile  = bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf  bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile   bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = (*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   (*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*  = *)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*   *)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  *)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  (bzFile)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  bzFile)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  ()b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf  )b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile)b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = )b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *b;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFileb;
1678c1678
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(89.9 %, 20744 bytes)
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = ;
>     *bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = b
>     *bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = 
>     *bzf_4_0;
1678c1678
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *;
1678c1678
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *;
>     *bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *
>     *bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *;
>    char bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *
>    char bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *;
>     bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *
>     bzf_4_0;
1678c1678
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *b
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>     *bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>    char bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>     bzf_4_0;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>    char *;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>     *;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>    char ;
1678,1679c1678,1679
<    bzFile* bzf = *b;
<    char *bzf_4_0;
---
>    bzFile* bzf = *b
>     ;
1679c1679
<    char *bzf_4_0;
---
>     *bzf_4_0;
1679c1679
<    char *bzf_4_0;
---
>     bzf_4_0;
1679c1679
<    char *bzf_4_0;
---
>     *;
1679c1679
<    char *bzf_4_0;
---
>     ;
1679c1679
<    char *bzf_4_0;
---
>     *bzf_4_0
1679c1679
<    char *bzf_4_0;
---
>     bzf_4_0
1679c1679
<    char *bzf_4_0;
---
>     *
1679c1679
<    char *bzf_4_0;
---
>     
1679c1679
<    char *bzf_4_0;
---
>    char bzf_4_0;
1679c1679
<    char *bzf_4_0;
---
>    char ;
1679c1679
<    char *bzf_4_0;
---
>    char bzf_4_0
1679c1679
<    char *bzf_4_0;
---
>    char 
1679,1680c1679,1680
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0;
>     int bzf_4_1;
(89.9 %, 20743 bytes)
1679c1679
<    char bzf_4_0;
---
>    char ;
1679c1679
<    char bzf_4_0;
---
>    char 
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>     int bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>     int bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>    unsigned  bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>    unsigned  bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char ;
>      bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char 
>      bzf_4_1;
1679c1679
<    char bzf_4_0;
---
>    char bzf_4_0
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      bzf_4_1;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned int ;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>     int ;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>    unsigned  ;
1679,1680c1679,1680
<    char bzf_4_0;
<    unsigned int bzf_4_1;
---
>    char bzf_4_0
>      ;
1680c1680
<    unsigned int bzf_4_1;
---
>     int bzf_4_1;
1680c1680
<    unsigned int bzf_4_1;
---
>      bzf_4_1;
1680c1680
<    unsigned int bzf_4_1;
---
>     int ;
1680c1680
<    unsigned int bzf_4_1;
---
>      ;
1680c1680
<    unsigned int bzf_4_1;
---
>     int bzf_4_1
1680c1680
<    unsigned int bzf_4_1;
---
>      bzf_4_1
1680c1680
<    unsigned int bzf_4_1;
---
>     int 
1680c1680
<    unsigned int bzf_4_1;
---
>      
1680c1680
<    unsigned int bzf_4_1;
---
>    unsigned  bzf_4_1;
(89.9 %, 20735 bytes)
1680c1680
<     int bzf_4_1;
---
>      bzf_4_1;
1680c1680
<     int bzf_4_1;
---
>      ;
1680c1680
<     int bzf_4_1;
---
>      bzf_4_1
1680c1680
<     int bzf_4_1;
---
>      
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>      bzf_4_1;
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>      ;
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>      bzf_4_1
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>      
>     bzf_5;
1680c1680
<     int bzf_4_1;
---
>     int ;
1680c1680
<     int bzf_4_1;
---
>     int 
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int ;
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int 
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int ;
>    Int32 ;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int 
>    Int32 ;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int ;
>     ;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int 
>     ;
1680c1680
<     int bzf_4_1;
---
>     int bzf_4_1
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>     bzf_5;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>    Int32 ;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>     ;
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>    Int32 bzf_5
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>     bzf_5
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>    Int32 
1680,1681c1680,1681
<     int bzf_4_1;
<    Int32 bzf_5;
---
>     int bzf_4_1
>     
1681c1681
<    Int32 bzf_5;
---
>     bzf_5;
1681c1681
<    Int32 bzf_5;
---
>     ;
1681c1681
<    Int32 bzf_5;
---
>     bzf_5
1681c1681
<    Int32 bzf_5;
---
>     
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>     bzf_5;
>     (bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>     ;
>     (bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>     bzf_5
>     (bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>     
>     (bzf == NULL)
1681c1681
<    Int32 bzf_5;
---
>    Int32 ;
1681c1681
<    Int32 bzf_5;
---
>    Int32 
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 ;
>     (bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 
>     (bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 ;
>    if bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 
>    if bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 ;
>     bzf == NULL)
1681,1682c1681,1682
<    Int32 bzf_5;
<    if (bzf == NULL)
---
>    Int32 
>     bzf == NULL)
(89.9 %, 20727 bytes)
1681,1682c1681,1682
<     bzf_5
<     (bzf == NULL)
---
>     
>     (  NULL)
1681,1682c1681,1682
<     bzf_5
<     (bzf == NULL)
---
>     
>       NULL)
1682c1682
<     (bzf == NULL)
---
>     bzf == NULL)
1682c1682
<     (bzf == NULL)
---
>      == NULL)
1682c1682
<     (bzf == NULL)
---
>     bzf  NULL)
1682c1682
<     (bzf == NULL)
---
>       NULL)
1682c1682
<     (bzf == NULL)
---
>     bzf == )
1682c1682
<     (bzf == NULL)
---
>      == )
1682c1682
<     (bzf == NULL)
---
>     bzf  )
1682c1682
<     (bzf == NULL)
---
>       )
1682c1682
<     (bzf == NULL)
---
>     ( == NULL)
1682c1682
<     (bzf == NULL)
---
>     (  NULL)
1682c1682
<     (bzf == NULL)
---
>     ( == )
1682c1682
<     (bzf == NULL)
---
>     (  )
(89.9 %, 20722 bytes)
1682c1682
<     (  NULL)
---
>     (  
1682,1683c1682,1683
<     (  NULL)
<       ;
---
>     (  )
>       
1682,1683c1682,1683
<     (  NULL)
<       ;
---
>     (  
>       
1682c1682
<     (  NULL)
---
>     (  )
1684c1684
<    if (bzf_5 != BZ_STREAM_END)
---
>     (bzf_5 != BZ_STREAM_END)
1682c1682
<     (  NULL)
---
>     (  
1684c1684
<    if (bzf_5 != BZ_STREAM_END)
---
>     (bzf_5 != BZ_STREAM_END)
1682,1684c1682,1684
<     (  NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
---
>     (  )
>       
>     (bzf_5 != BZ_STREAM_END)
1682,1684c1682,1684
<     (  NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
---
>     (  
>       
>     (bzf_5 != BZ_STREAM_END)
1682c1682
<     (  NULL)
---
>     (  NULL
1682,1683c1682,1683
<     (  NULL)
<       ;
---
>     (  NULL
>       
1682c1682
<     (  NULL)
---
>     (  NULL
1684c1684
<    if (bzf_5 != BZ_STREAM_END)
---
>     (bzf_5 != BZ_STREAM_END)
1682,1684c1682,1684
<     (  NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
---
>     (  NULL
>       
>     (bzf_5 != BZ_STREAM_END)
1682c1682
<     (  NULL)
---
>     (  NULL
1684c1684
<    if (bzf_5 != BZ_STREAM_END)
---
>    if bzf_5 != BZ_STREAM_END)
1682,1684c1682,1684
<     (  NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
---
>     (  NULL
>       
>    if bzf_5 != BZ_STREAM_END)
(89.9 %, 20716 bytes)
1682c1682
<     (  )
---
>     (  
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     ( != BZ_STREAM_END)
1682,1684c1682,1684
<     (  )
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>     (  
>       
>     ( != BZ_STREAM_END)
1682c1682
<     (  )
---
>     (  
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>      != BZ_STREAM_END)
1682,1684c1682,1684
<     (  )
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>     (  
>       
>      != BZ_STREAM_END)
1683c1683
<       ;
---
>       
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>     bzf_5 != BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>     ( != BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>      != BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>     (bzf_5  BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>     bzf_5  BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>     (  BZ_STREAM_END)
1683,1684c1683,1684
<       ;
<     (bzf_5 != BZ_STREAM_END)
---
>       
>       BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     bzf_5 != BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>      != BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     bzf_5  BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>       BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     bzf_5 != )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>      != )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     bzf_5  )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>       )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     ( != BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (  BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     ( != )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (  )
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     ( != BZ_STREAM_END
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (  BZ_STREAM_END
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     ( != 
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (  
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (bzf_5  BZ_STREAM_END)
1684c1684
<     (bzf_5 != BZ_STREAM_END)
---
>     (bzf_5  )
(89.9 %, 20709 bytes)
1684c1684
<     (  BZ_STREAM_END)
---
>     (  
1684,1685c1684,1685
<     (  BZ_STREAM_END)
<       ;
---
>     (  )
>       
1684,1685c1684,1685
<     (  BZ_STREAM_END)
<       ;
---
>     (  
>       
1684c1684
<     (  BZ_STREAM_END)
---
>     (  )
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (unused == NULL || nUnused == NULL)
1684c1684
<     (  BZ_STREAM_END)
---
>     (  
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (unused == NULL || nUnused == NULL)
1684,1686c1684,1686
<     (  BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>     (  )
>       
>     (unused == NULL || nUnused == NULL)
1684,1686c1684,1686
<     (  BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>     (  
>       
>     (unused == NULL || nUnused == NULL)
1684c1684
<     (  BZ_STREAM_END)
---
>     (  BZ_STREAM_END
1684,1685c1684,1685
<     (  BZ_STREAM_END)
<       ;
---
>     (  BZ_STREAM_END
>       
1684c1684
<     (  BZ_STREAM_END)
---
>     (  BZ_STREAM_END
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (unused == NULL || nUnused == NULL)
1684,1686c1684,1686
<     (  BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>     (  BZ_STREAM_END
>       
>     (unused == NULL || nUnused == NULL)
1684c1684
<     (  BZ_STREAM_END)
---
>     (  BZ_STREAM_END
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>    if unused == NULL || nUnused == NULL)
1684,1686c1684,1686
<     (  BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>     (  BZ_STREAM_END
>       
>    if unused == NULL || nUnused == NULL)
1684c1684
<     (  BZ_STREAM_END)
---
>     (  BZ_STREAM_END
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     unused == NULL || nUnused == NULL)
1684,1686c1684,1686
<     (  BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>     (  BZ_STREAM_END
>       
>     unused == NULL || nUnused == NULL)
1685c1685
<       ;
---
>       
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>     (unused == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>    if unused == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>     unused == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>    if ( == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>     ( == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>    if  == NULL || nUnused == NULL)
1685,1686c1685,1686
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       
>      == NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (unused == NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     unused == NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     ( == NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>      == NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (unused  NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     unused  NULL || nUnused == NULL)
1686c1686
<    if (unused == NULL || nUnused == NULL)
---
>     (  NULL || nUnused == NULL)
(89.9 %, 20707 bytes)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     unused == NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>      == NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     unused  NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>       NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     unused ==  || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>      ==  || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     unused   || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>        || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     ( == NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     (  NULL || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     ( ==  || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     (   || nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     ( == NULL  nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     (  NULL  nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     ( ==   nUnused == NULL)
1686c1686
<     (unused == NULL || nUnused == NULL)
---
>     (    nUnused == NULL)
(89.9 %, 20699 bytes)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (    nUnused == NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (   ||  == NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (     == NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (   || nUnused  NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (    nUnused  NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (   ||   NULL)
1686c1686
<     (  NULL || nUnused == NULL)
---
>     (      NULL)
(89.9 %, 20693 bytes)
1686c1686
<     (    nUnused == NULL)
---
>     (      NULL)
1686c1686
<     (    nUnused == NULL)
---
>     (     == )
1686c1686
<     (    nUnused == NULL)
---
>     (      )
1686c1686
<     (    nUnused == NULL)
---
>     (     == NULL
1686c1686
<     (    nUnused == NULL)
---
>     (      NULL
1686c1686
<     (    nUnused == NULL)
---
>     (     == 
1686c1686
<     (    nUnused == NULL)
---
>     (      
1686c1686
<     (    nUnused == NULL)
---
>     (    nUnused  NULL)
1686c1686
<     (    nUnused == NULL)
---
>     (    nUnused  )
(89.9 %, 20684 bytes)
1686c1686
<     (      NULL)
---
>     (      
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      )
>       
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      
>       
1686c1686
<     (      NULL)
---
>     (      )
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686c1686
<     (      NULL)
---
>     (      
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      )
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686c1686
<     (      NULL)
---
>     (      NULL
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      NULL
>       
1686c1686
<     (      NULL)
---
>     (      NULL
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      NULL
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1686c1686
<     (      NULL)
---
>     (      NULL
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      NULL
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1686c1686
<     (      NULL)
---
>     (      NULL
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1686,1687c1686,1687
<     (      NULL)
<       ;
---
>     (      NULL
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1687c1687
<       ;
---
>       
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    ();
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
1687c1687
<       ;
---
>       
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    );
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    ();
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    );
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
1689c1689
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(89.9 %, 20675 bytes)
1689c1689
<    (BZ_OK);
---
>    BZ_OK);
1689c1689
<    (BZ_OK);
---
>    );
1689c1689
<    (BZ_OK);
---
>    BZ_OK;
1689c1689
<    (BZ_OK);
---
>    ;
(89.9 %, 20673 bytes)
1689,1690c1689,1690
<    BZ_OK;
<    *nUnused = bzf_4_1;
---
>    ;
>    nUnused = bzf_4_1;
1689,1690c1689,1690
<    BZ_OK;
<    *nUnused = bzf_4_1;
---
>    
>    nUnused = bzf_4_1;
(89.9 %, 20667 bytes)
1689,1690c1689,1690
<    ;
<    nUnused = bzf_4_1;
---
>    
>    nUnused  bzf_4_1;
1689,1690c1689,1690
<    ;
<    nUnused = bzf_4_1;
---
>    
>      bzf_4_1;
1689,1690c1689,1690
<    ;
<    nUnused = bzf_4_1;
---
>    
>    nUnused = ;
1689,1690c1689,1690
<    ;
<    nUnused = bzf_4_1;
---
>    
>     = ;
1689,1690c1689,1690
<    ;
<    nUnused = bzf_4_1;
---
>    
>    nUnused  ;
(89.9 %, 20658 bytes)
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      
>    unused = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      ;
>    * = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      
>    * = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      ;
>     = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      
>     = bzf_4_0;
1690c1690
<      bzf_4_1;
---
>      bzf_4_1
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      bzf_4_1
>    unused = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      bzf_4_1
>    * = bzf_4_0;
1690,1691c1690,1691
<      bzf_4_1;
<    *unused = bzf_4_0;
---
>      bzf_4_1
>     = bzf_4_0;
(89.9 %, 20649 bytes)
1691c1691
<    unused = bzf_4_0;
---
>      ;
1691c1691
<    unused = bzf_4_0;
---
>     = bzf_4_0
1691c1691
<    unused = bzf_4_0;
---
>      bzf_4_0
1691c1691
<    unused = bzf_4_0;
---
>     = 
1691c1691
<    unused = bzf_4_0;
---
>      
(89.9 %, 20635 bytes)
1691,1692c1691
<      ;
< }
---
>      
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
1691c1691
<      ;
---
>      
1700c1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> int  
1691,1692c1691
<      ;
< }
---
>      
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
> int  
1691c1691
<      ;
---
>      
1700c1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
1691,1692c1691
<      ;
< }
---
>      
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>   
1692c1692
< }
---
> 
1692d1691
< }
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
1692d1691
< }
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
> int  
1692d1691
< }
1700c1699,1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>   
1692c1692
< }
---
> 
1701c1701
<                          ( char*         dest, 
---
>                           char*         dest, 
1692d1691
< }
1700,1701c1699,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           char*         dest, 
1692d1691
< }
1700,1701c1699,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
> int  
>                           char*         dest, 
1692d1691
< }
1700,1701c1699,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>   
>                           char*         dest, 
1700c1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
1700c1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           char*         dest, 
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char*         dest, 
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                          ( *         dest, 
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( *         dest, 
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           *         dest, 
1700,1701c1700,1701
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           *         dest, 
1700c1700
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> int  
(89.9 %, 20632 bytes)
1700c1700
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char*         dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( *         dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           *         dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( char         dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char         dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          (          dest, 
1700,1701c1700,1701
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                                    dest, 
1701c1701
<                          ( char*         dest, 
---
>                           char*         dest, 
1701c1701
<                          ( char*         dest, 
---
>                           *         dest, 
1701c1701
<                          ( char*         dest, 
---
>                           char         dest, 
1701c1701
<                          ( char*         dest, 
---
>                                    dest, 
1701c1701
<                          ( char*         dest, 
---
>                           char*         , 
1701c1701
<                          ( char*         dest, 
---
>                           *         , 
1701c1701
<                          ( char*         dest, 
---
>                           char         , 
1701c1701
<                          ( char*         dest, 
---
>                                    , 
1701c1701
<                          ( char*         dest, 
---
>                          ( *         dest, 
1701c1701
<                          ( char*         dest, 
---
>                          (          dest, 
1701c1701
<                          ( char*         dest, 
---
>                          ( *         , 
1701c1701
<                          ( char*         dest, 
---
>                          (          , 
1701c1701
<                          ( char*         dest, 
---
>                          ( *         dest 
1701c1701
<                          ( char*         dest, 
---
>                          (          dest 
1701c1701
<                          ( char*         dest, 
---
>                          ( *          
1701c1701
<                          ( char*         dest, 
---
>                          (           
1701c1701
<                          ( char*         dest, 
---
>                          ( char         dest, 
1701c1701
<                          ( char*         dest, 
---
>                          ( char         , 
1701c1701
<                          ( char*         dest, 
---
>                          ( char         dest 
1701c1701
<                          ( char*         dest, 
---
>                          ( char          
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest, 
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         , 
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest 
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char          
>                             int* destLen,
1701c1701
<                          ( char*         dest, 
---
>                          ( char*         , 
1701c1701
<                          ( char*         dest, 
---
>                          ( char*          
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                            unsigned * destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned * destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             * destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             * destLen,
1701c1701
<                          ( char*         dest, 
---
>                          ( char*         dest 
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int* destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned * destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             * destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned int destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned  destLen,
1701,1702c1701,1702
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                              destLen,
1702c1702
<                            unsigned int* destLen,
---
>                             int* destLen,
1702c1702
<                            unsigned int* destLen,
---
>                             * destLen,
1702c1702
<                            unsigned int* destLen,
---
>                             int destLen,
1702c1702
<                            unsigned int* destLen,
---
>                              destLen,
1702c1702
<                            unsigned int* destLen,
---
>                             int* ,
1702c1702
<                            unsigned int* destLen,
---
>                             * ,
1702c1702
<                            unsigned int* destLen,
---
>                             int ,
1702c1702
<                            unsigned int* destLen,
---
>                              ,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned  destLen,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned * ,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned  ,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned * destLen
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned  destLen
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned * 
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned  
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned int destLen,
1702c1702
<                            unsigned int* destLen,
---
>                            unsigned int ,
(89.9 %, 20629 bytes)
1702c1702
<                            unsigned * destLen,
---
>                            unsigned  destLen,
1702c1702
<                            unsigned * destLen,
---
>                            unsigned  ,
1702c1702
<                            unsigned * destLen,
---
>                            unsigned  destLen
1702c1702
<                            unsigned * destLen,
---
>                            unsigned  
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen,
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  ,
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  
>                            *         source, 
1702c1702
<                            unsigned * destLen,
---
>                            unsigned * ,
1702c1702
<                            unsigned * destLen,
---
>                            unsigned * 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            char         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                                     source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
1702c1702
<                            unsigned * destLen,
---
>                            unsigned * destLen
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     source, 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char*         , 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         , 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         , 
1702,1703c1702,1703
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     , 
1703c1703
<                            char*         source, 
---
>                            *         source, 
1703c1703
<                            char*         source, 
---
>                                     source, 
1703c1703
<                            char*         source, 
---
>                            *         , 
1703c1703
<                            char*         source, 
---
>                                     , 
1703c1703
<                            char*         source, 
---
>                            *         source 
1703c1703
<                            char*         source, 
---
>                                     source 
1703c1703
<                            char*         source, 
---
>                            *          
1703c1703
<                            char*         source, 
---
>                                      
1703c1703
<                            char*         source, 
---
>                            char         source, 
1703c1703
<                            char*         source, 
---
>                            char         , 
1703c1703
<                            char*         source, 
---
>                            char         source 
1703c1703
<                            char*         source, 
---
>                            char          
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source, 
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         , 
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source 
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char          
>                             int  sourceLen,
1703c1703
<                            char*         source, 
---
>                            char*         , 
1703c1703
<                            char*         source, 
---
>                            char*          
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                            unsigned   sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned   sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                               sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                               sourceLen,
1703c1703
<                            char*         source, 
---
>                            char*         source 
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               sourceLen,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned int  ,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  ,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   ,
1703,1704c1703,1704
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               ,
1704c1704
<                            unsigned int  sourceLen,
---
>                             int  sourceLen,
1704c1704
<                            unsigned int  sourceLen,
---
>                               sourceLen,
1704c1704
<                            unsigned int  sourceLen,
---
>                             int  ,
1704c1704
<                            unsigned int  sourceLen,
---
>                               ,
1704c1704
<                            unsigned int  sourceLen,
---
>                             int  sourceLen
1704c1704
<                            unsigned int  sourceLen,
---
>                               sourceLen
1704c1704
<                            unsigned int  sourceLen,
---
>                             int  
1704c1704
<                            unsigned int  sourceLen,
---
>                               
1704c1704
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen,
1704c1704
<                            unsigned int  sourceLen,
---
>                            unsigned   ,
1704c1704
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen
1704c1704
<                            unsigned int  sourceLen,
---
>                            unsigned   
1704,1705c1704,1705
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen,
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
1704c1704
<                            unsigned int  sourceLen,
---
>                            unsigned int  ,
(89.9 %, 20626 bytes)
1704c1704
<                            unsigned   sourceLen,
---
>                            unsigned   ,
1704c1704
<                            unsigned   sourceLen,
---
>                            unsigned   
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                            int           , 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int           , 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       , 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       , 
1704c1704
<                            unsigned   sourceLen,
---
>                            unsigned   sourceLen
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           , 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       , 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           blockSize100k 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k 
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int            
1704,1705c1704,1705
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                        
1705c1705
<                            int           blockSize100k, 
---
>                                       blockSize100k, 
1705c1705
<                            int           blockSize100k, 
---
>                                       , 
1705c1705
<                            int           blockSize100k, 
---
>                                       blockSize100k 
1705c1705
<                            int           blockSize100k, 
---
>                                        
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k, 
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       , 
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k 
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                        
>                                       verbosity, 
1705c1705
<                            int           blockSize100k, 
---
>                            int           , 
1705c1705
<                            int           blockSize100k, 
---
>                            int            
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                            int           , 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                            int           , 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       , 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       , 
1705c1705
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity, 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           , 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       , 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           verbosity 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity 
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int            
1705,1706c1705,1706
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                        
1706c1706
<                            int           verbosity, 
---
>                                       verbosity, 
1706c1706
<                            int           verbosity, 
---
>                                       , 
1706c1706
<                            int           verbosity, 
---
>                                       verbosity 
1706c1706
<                            int           verbosity, 
---
>                                        
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity, 
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       , 
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity 
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                                        
>                                       workFactor )
1706c1706
<                            int           verbosity, 
---
>                            int           , 
1706c1706
<                            int           verbosity, 
---
>                            int            
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                            int            )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                            int            )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                        )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                        )
1706c1706
<                            int           verbosity, 
---
>                            int           verbosity 
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        )
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int           workFactor 
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor 
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            
1706,1707c1706,1707
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        
1707c1707
<                            int           workFactor )
---
>                                       workFactor )
1707c1707
<                            int           workFactor )
---
>                                        )
1707c1707
<                            int           workFactor )
---
>                                       workFactor 
1707c1707
<                            int           workFactor )
---
>                                        
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                                       workFactor )
> 
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                                        )
> 
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                                       workFactor 
> 
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                                        
> 
1707c1707
<                            int           workFactor )
---
>                            int            )
1707c1707
<                            int           workFactor )
---
>                            int            
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                            int            )
> 
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                            int            
> 
1707c1707
<                            int           workFactor )
---
>                            int            )
1709c1709
<    bz_stream strm;
---
>     strm;
1707c1707
<                            int           workFactor )
---
>                            int            
1709c1709
<    bz_stream strm;
---
>     strm;
1707,1709c1707,1709
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int            )
> 
>     strm;
1707,1709c1707,1709
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int            
> 
>     strm;
1707c1707
<                            int           workFactor )
---
>                            int           workFactor 
1707,1708c1707,1708
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
1707c1707
<                            int           workFactor )
---
>                            int           workFactor 
1709c1709
<    bz_stream strm;
---
>     strm;
1707,1709c1707,1709
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           workFactor 
> 
>     strm;
1707c1707
<                            int           workFactor )
---
>                            int           workFactor 
1709c1709
<    bz_stream strm;
---
>    bz_stream ;
1707,1709c1707,1709
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           workFactor 
> 
>    bz_stream ;
1707c1707
<                            int           workFactor )
---
>                            int           workFactor 
1709c1709
<    bz_stream strm;
---
>     ;
1707,1709c1707,1709
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           workFactor 
> 
>     ;
1708c1708
< {
---
> 
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>     strm;
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>    bz_stream ;
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>     ;
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>    bz_stream strm
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>     strm
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>    bz_stream 
1708,1709c1708,1709
< {
<    bz_stream strm;
---
> 
>     
1709c1709
<    bz_stream strm;
---
>     strm;
1709c1709
<    bz_stream strm;
---
>     ;
1709c1709
<    bz_stream strm;
---
>     strm
1709c1709
<    bz_stream strm;
---
>     
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>     strm;
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>     ;
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>     strm
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>     
>     int strm_5;
1709c1709
<    bz_stream strm;
---
>    bz_stream ;
1709c1709
<    bz_stream strm;
---
>    bz_stream 
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>    unsigned  strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>    unsigned  strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream ;
>      strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream 
>      strm_5;
1709c1709
<    bz_stream strm;
---
>    bz_stream strm
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>     int strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned  strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>      strm_5;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned int ;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>     int ;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>    unsigned  ;
1709,1710c1709,1710
<    bz_stream strm;
<    unsigned int strm_5;
---
>    bz_stream strm
>      ;
1710c1710
<    unsigned int strm_5;
---
>     int strm_5;
1710c1710
<    unsigned int strm_5;
---
>      strm_5;
1710c1710
<    unsigned int strm_5;
---
>     int ;
1710c1710
<    unsigned int strm_5;
---
>      ;
1710c1710
<    unsigned int strm_5;
---
>     int strm_5
1710c1710
<    unsigned int strm_5;
---
>      strm_5
1710c1710
<    unsigned int strm_5;
---
>     int 
1710c1710
<    unsigned int strm_5;
---
>      
(89.9 %, 20618 bytes)
1710c1710
<     int strm_5;
---
>      strm_5;
1710c1710
<     int strm_5;
---
>      ;
1710c1710
<     int strm_5;
---
>      strm_5
1710c1710
<     int strm_5;
---
>      
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>      strm_5;
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>      ;
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>      strm_5
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>      
>     int strm_1;
1710c1710
<     int strm_5;
---
>     int ;
1710c1710
<     int strm_5;
---
>     int 
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>    unsigned  strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>    unsigned  strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int ;
>      strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int 
>      strm_1;
1710c1710
<     int strm_5;
---
>     int strm_5
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>     int strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned  strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>      strm_1;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned int ;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>     int ;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>    unsigned  ;
1710,1711c1710,1711
<     int strm_5;
<    unsigned int strm_1;
---
>     int strm_5
>      ;
1711c1711
<    unsigned int strm_1;
---
>     int strm_1;
1711c1711
<    unsigned int strm_1;
---
>      strm_1;
1711c1711
<    unsigned int strm_1;
---
>     int ;
1711c1711
<    unsigned int strm_1;
---
>      ;
1711c1711
<    unsigned int strm_1;
---
>     int strm_1
1711c1711
<    unsigned int strm_1;
---
>      strm_1
1711c1711
<    unsigned int strm_1;
---
>     int 
1711c1711
<    unsigned int strm_1;
---
>      
(89.9 %, 20610 bytes)
1711c1711
<     int strm_1;
---
>      strm_1;
1711c1711
<     int strm_1;
---
>      ;
1711c1711
<     int strm_1;
---
>      strm_1
1711c1711
<     int strm_1;
---
>      
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>      strm_1;
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>      ;
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>      strm_1
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>      
>     *strm_4;
1711c1711
<     int strm_1;
---
>     int ;
1711c1711
<     int strm_1;
---
>     int 
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int ;
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int 
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int ;
>    char strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int 
>    char strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int ;
>     strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int 
>     strm_4;
1711c1711
<     int strm_1;
---
>     int strm_1
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     *strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     strm_4;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char *;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     *;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>    char ;
1711,1712c1711,1712
<     int strm_1;
<    char *strm_4;
---
>     int strm_1
>     ;
1712c1712
<    char *strm_4;
---
>     *strm_4;
1712c1712
<    char *strm_4;
---
>     strm_4;
1712c1712
<    char *strm_4;
---
>     *;
1712c1712
<    char *strm_4;
---
>     ;
1712c1712
<    char *strm_4;
---
>     *strm_4
1712c1712
<    char *strm_4;
---
>     strm_4
1712c1712
<    char *strm_4;
---
>     *
1712c1712
<    char *strm_4;
---
>     
1712c1712
<    char *strm_4;
---
>    char strm_4;
1712c1712
<    char *strm_4;
---
>    char ;
1712c1712
<    char *strm_4;
---
>    char strm_4
1712c1712
<    char *strm_4;
---
>    char 
1712,1713c1712,1713
<    char *strm_4;
<    char *strm_0;
---
>    char strm_4;
>     *strm_0;
1712,1713c1712,1713
<    char *strm_4;
<    char *strm_0;
---
>    char ;
>     *strm_0;
1712,1713c1712,1713
<    char *strm_4;
<    char *strm_0;
---
>    char strm_4
>     *strm_0;
1712,1713c1712,1713
<    char *strm_4;
<    char *strm_0;
---
>    char 
>     *strm_0;
(89.9 %, 20609 bytes)
1712c1712
<    char strm_4;
---
>    char ;
1712c1712
<    char strm_4;
---
>    char 
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char ;
>     *strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char 
>     *strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char ;
>    char strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char 
>    char strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char ;
>     strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char 
>     strm_0;
1712c1712
<    char strm_4;
---
>    char strm_4
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     *strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     strm_0;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char *;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     *;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>    char ;
1712,1713c1712,1713
<    char strm_4;
<    char *strm_0;
---
>    char strm_4
>     ;
1713c1713
<    char *strm_0;
---
>     *strm_0;
1713c1713
<    char *strm_0;
---
>     strm_0;
1713c1713
<    char *strm_0;
---
>     *;
1713c1713
<    char *strm_0;
---
>     ;
1713c1713
<    char *strm_0;
---
>     *strm_0
1713c1713
<    char *strm_0;
---
>     strm_0
1713c1713
<    char *strm_0;
---
>     *
1713c1713
<    char *strm_0;
---
>     
1713c1713
<    char *strm_0;
---
>    char strm_0;
1713c1713
<    char *strm_0;
---
>    char ;
1713c1713
<    char *strm_0;
---
>    char strm_0
1713c1713
<    char *strm_0;
---
>    char 
1713,1714c1713,1714
<    char *strm_0;
<    int ret;
---
>    char strm_0;
>     ret;
1713,1714c1713,1714
<    char *strm_0;
<    int ret;
---
>    char ;
>     ret;
1713,1714c1713,1714
<    char *strm_0;
<    int ret;
---
>    char strm_0
>     ret;
1713,1714c1713,1714
<    char *strm_0;
<    int ret;
---
>    char 
>     ret;
(89.9 %, 20608 bytes)
1713c1713
<    char strm_0;
---
>    char ;
1713c1713
<    char strm_0;
---
>    char 
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char ;
>     ret;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char 
>     ret;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char ;
>    int ;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char 
>    int ;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char ;
>     ;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char 
>     ;
1713c1713
<    char strm_0;
---
>    char strm_0
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ret;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int ;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ;
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int ret
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>     ret
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>    int 
1713,1714c1713,1714
<    char strm_0;
<    int ret;
---
>    char strm_0
>     
1714c1714
<    int ret;
---
>     ret;
1714c1714
<    int ret;
---
>     ;
1714c1714
<    int ret;
---
>     ret
1714c1714
<    int ret;
---
>     
1714c1714
<    int ret;
---
>     ret;
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>     ;
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>     ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>     
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ;
1714c1714
<    int ret;
---
>    int 
1714c1714
<    int ret;
---
>    int ;
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ;
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ;
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     ( == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if  == NULL || destLen == NULL || 
1714c1714
<    int ret;
---
>    int ret
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>      == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     dest == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     ( == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>      == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (dest  NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     dest  NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>     (  NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>       NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if  == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest  NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if   NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest ==  || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if  ==  || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if dest   || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if    || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if (  NULL || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if ( ==  || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if (   || destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if ( == NULL  destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if (  NULL  destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if ( ==   destLen == NULL || 
1716c1716
<    if (dest == NULL || destLen == NULL || 
---
>    if (    destLen == NULL || 
(89.9 %, 20602 bytes)
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (    destLen == NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (   ||  == NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (     == NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (   || destLen  NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (    destLen  NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (   ||   NULL || 
1716c1716
<    if (  NULL || destLen == NULL || 
---
>    if (      NULL || 
(90.0 %, 20596 bytes)
1716c1716
<    if (    destLen == NULL || 
---
>    if (      NULL || 
1716c1716
<    if (    destLen == NULL || 
---
>    if (     ==  || 
1716c1716
<    if (    destLen == NULL || 
---
>    if (       || 
1716c1716
<    if (    destLen == NULL || 
---
>    if (     == NULL  
1716c1716
<    if (    destLen == NULL || 
---
>    if (      NULL  
1716c1716
<    if (    destLen == NULL || 
---
>    if (     ==   
1716c1716
<    if (    destLen == NULL || 
---
>    if (        
(90.0 %, 20587 bytes)
1716c1716
<    if (      NULL || 
---
>    if (        
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>         == NULL ||
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>         == NULL ||
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>        source  NULL ||
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>        source  NULL ||
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (       || 
>          NULL ||
1716,1717c1716,1717
<    if (      NULL || 
<        source == NULL ||
---
>    if (        
>          NULL ||
(90.0 %, 20581 bytes)
1717c1717
<        source == NULL ||
---
>          NULL ||
1717c1717
<        source == NULL ||
---
>         ==  ||
1717c1717
<        source == NULL ||
---
>           ||
1717c1717
<        source == NULL ||
---
>         == NULL 
1717c1717
<        source == NULL ||
---
>          NULL 
1717c1717
<        source == NULL ||
---
>         ==  
1717c1717
<        source == NULL ||
---
>           
(90.0 %, 20573 bytes)
1717c1717
<          NULL ||
---
>           
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           ||
>         < 1 || blockSize100k > 9 ||
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           
>         < 1 || blockSize100k > 9 ||
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           ||
>        blockSize100k  1 || blockSize100k > 9 ||
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           
>        blockSize100k  1 || blockSize100k > 9 ||
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           ||
>          1 || blockSize100k > 9 ||
1717,1718c1717,1718
<          NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           
>          1 || blockSize100k > 9 ||
(90.0 %, 20567 bytes)
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1 || blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <  || blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           || blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         < 1  blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1  blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <   blockSize100k > 9 ||
1718c1718
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
(90.0 %, 20553 bytes)
1718c1718
<          1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>           ||  > 9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>             > 9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>           || blockSize100k  9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>            blockSize100k  9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>           ||   9 ||
1718c1718
<          1 || blockSize100k > 9 ||
---
>              9 ||
(90.0 %, 20550 bytes)
1718c1718
<            blockSize100k > 9 ||
---
>              9 ||
1718c1718
<            blockSize100k > 9 ||
---
>             >  ||
1718c1718
<            blockSize100k > 9 ||
---
>               ||
1718c1718
<            blockSize100k > 9 ||
---
>             > 9 
1718c1718
<            blockSize100k > 9 ||
---
>              9 
1718c1718
<            blockSize100k > 9 ||
---
>             >  
1718c1718
<            blockSize100k > 9 ||
---
>               
(90.0 %, 20536 bytes)
1718c1718
<              9 ||
---
>               
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>         < 0 || verbosity > 4 ||
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>         < 0 || verbosity > 4 ||
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>        verbosity  0 || verbosity > 4 ||
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>        verbosity  0 || verbosity > 4 ||
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               ||
>          0 || verbosity > 4 ||
1718,1719c1718,1719
<              9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>               
>          0 || verbosity > 4 ||
(90.0 %, 20533 bytes)
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>          0 || verbosity > 4 ||
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>         <  || verbosity > 4 ||
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>           || verbosity > 4 ||
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>         < 0  verbosity > 4 ||
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>          0  verbosity > 4 ||
1719c1719
<        verbosity < 0 || verbosity > 4 ||
---
>         <   verbosity > 4 ||
(90.0 %, 20523 bytes)
1719c1719
<          0 || verbosity > 4 ||
---
>            verbosity > 4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>           ||  > 4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>             > 4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>           || verbosity  4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>            verbosity  4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>           ||   4 ||
1719c1719
<          0 || verbosity > 4 ||
---
>              4 ||
(90.0 %, 20520 bytes)
1719c1719
<            verbosity > 4 ||
---
>              4 ||
1719c1719
<            verbosity > 4 ||
---
>             >  ||
1719c1719
<            verbosity > 4 ||
---
>               ||
1719c1719
<            verbosity > 4 ||
---
>             > 4 
1719c1719
<            verbosity > 4 ||
---
>              4 
1719c1719
<            verbosity > 4 ||
---
>             >  
(90.0 %, 20510 bytes)
1719c1719
<              4 ||
---
>               
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               ||
>         < 0 || workFactor > 0) 
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               
>         < 0 || workFactor > 0) 
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               ||
>        workFactor  0 || workFactor > 0) 
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               
>        workFactor  0 || workFactor > 0) 
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               ||
>          0 || workFactor > 0) 
1719,1720c1719,1720
<              4 ||
<        workFactor < 0 || workFactor > 0) 
---
>               
>          0 || workFactor > 0) 
(90.0 %, 20507 bytes)
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>          0 || workFactor > 0) 
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>         <  || workFactor > 0) 
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>           || workFactor > 0) 
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>         < 0  workFactor > 0) 
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>          0  workFactor > 0) 
1720c1720
<        workFactor < 0 || workFactor > 0) 
---
>         <   workFactor > 0) 
(90.0 %, 20496 bytes)
1720c1720
<          0 || workFactor > 0) 
---
>            workFactor > 0) 
1720c1720
<          0 || workFactor > 0) 
---
>           ||  > 0) 
1720c1720
<          0 || workFactor > 0) 
---
>             > 0) 
1720c1720
<          0 || workFactor > 0) 
---
>           || workFactor  0) 
1720c1720
<          0 || workFactor > 0) 
---
>            workFactor  0) 
1720c1720
<          0 || workFactor > 0) 
---
>           ||   0) 
1720c1720
<          0 || workFactor > 0) 
---
>              0) 
(90.0 %, 20493 bytes)
1720c1720
<            workFactor > 0) 
---
>              0) 
1720c1720
<            workFactor > 0) 
---
>             > ) 
1720c1720
<            workFactor > 0) 
---
>              ) 
1720c1720
<            workFactor > 0) 
---
>             > 0 
1720c1720
<            workFactor > 0) 
---
>              0 
1720c1720
<            workFactor > 0) 
---
>             >  
(90.0 %, 20482 bytes)
1720c1720
<              0) 
---
>               
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              ) 
>        BZ_PARAM_ERROR;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>               
>        BZ_PARAM_ERROR;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              ) 
>       return ;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>               
>       return ;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              ) 
>        ;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>               
>        ;
1720c1720
<              0) 
---
>              0 
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>        BZ_PARAM_ERROR;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>       return ;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>        ;
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>       return BZ_PARAM_ERROR
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>        BZ_PARAM_ERROR
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>       return 
1720,1721c1720,1721
<              0) 
<       return BZ_PARAM_ERROR;
---
>              0 
>        
1721c1721
<       return BZ_PARAM_ERROR;
---
>        BZ_PARAM_ERROR;
1721c1721
<       return BZ_PARAM_ERROR;
---
>        ;
1721c1721
<       return BZ_PARAM_ERROR;
---
>        BZ_PARAM_ERROR
(90.0 %, 20476 bytes)
1721c1721
<        BZ_PARAM_ERROR;
---
>        ;
1721c1721
<        BZ_PARAM_ERROR;
---
>        
(90.0 %, 20462 bytes)
1721c1721
<        ;
---
>        
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1721c1721
<        ;
---
>        
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
(90.0 %, 20461 bytes)
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if   0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if  == ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if   ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (  ) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0 workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if ( ==  workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (   workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  0) workFactor = 0;
1723c1723
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  ) workFactor = 0;
(90.0 %, 20449 bytes)
1723c1723
<    if (  0) workFactor = 0;
---
>    if (   workFactor = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  )  = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (    = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  ) workFactor  0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (   workFactor  0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  )   0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (     0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0  = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0   0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = ;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0  = ;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  ;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0   ;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0)   0;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0)  = ;
1723c1723
<    if (  0) workFactor = 0;
---
>    if (  0)   ;
(90.0 %, 20438 bytes)
1723c1723
<    if (  0)   0;
---
>    if (  0)   
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   ;
>    .bzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   
>    .bzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   ;
>    strmbzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   
>    strmbzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   ;
>    bzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   
>    bzalloc = NULL;
1723c1723
<    if (  0)   0;
---
>    if (  0)   0
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   0
>    .bzalloc = NULL;
1723,1724c1723,1724
<    if (  0)   0;
<    strm.bzalloc = NULL;
---
>    if (  0)   0
>    strmbzalloc = NULL;
(90.0 %, 20436 bytes)
1724c1724
<    strm.bzalloc = NULL;
---
>    bzalloc = NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>    . = NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>     = NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>    .bzalloc  NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>    bzalloc  NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>    .  NULL;
1724c1724
<    strm.bzalloc = NULL;
---
>      NULL;
(90.0 %, 20430 bytes)
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      ;
>    .bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      NULL
>    .bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>      
>    .bzfree = NULL;
1724c1724
<    bzalloc  NULL;
---
>    bzalloc  ;
1724c1724
<    bzalloc  NULL;
---
>    bzalloc  
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    .bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    .bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    strmbzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    strmbzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  ;
>    bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  
>    bzfree = NULL;
1724c1724
<    bzalloc  NULL;
---
>    bzalloc  NULL
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    .bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strmbzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    bzfree = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strm. = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    . = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>    strm = NULL;
1724,1725c1724,1725
<    bzalloc  NULL;
<    strm.bzfree = NULL;
---
>    bzalloc  NULL
>     = NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    .bzfree = NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    bzfree = NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    . = NULL;
1725c1725
<    strm.bzfree = NULL;
---
>     = NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    .bzfree  NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    bzfree  NULL;
1725c1725
<    strm.bzfree = NULL;
---
>    .  NULL;
1725c1725
<    strm.bzfree = NULL;
---
>      NULL;
(90.0 %, 20424 bytes)
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      ;
>    .opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      NULL
>    .opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>      
>    .opaque = NULL;
1725c1725
<    bzfree  NULL;
---
>    bzfree  ;
1725c1725
<    bzfree  NULL;
---
>    bzfree  
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    .opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    .opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    strmopaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    strmopaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  ;
>    opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  
>    opaque = NULL;
1725c1725
<    bzfree  NULL;
---
>    bzfree  NULL
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    .opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strmopaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    opaque = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strm. = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    . = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>    strm = NULL;
1725,1726c1725,1726
<    bzfree  NULL;
<    strm.opaque = NULL;
---
>    bzfree  NULL
>     = NULL;
1726c1726
<    strm.opaque = NULL;
---
>    .opaque = NULL;
1726c1726
<    strm.opaque = NULL;
---
>    opaque = NULL;
1726c1726
<    strm.opaque = NULL;
---
>    . = NULL;
1726c1726
<    strm.opaque = NULL;
---
>     = NULL;
1726c1726
<    strm.opaque = NULL;
---
>    .opaque  NULL;
1726c1726
<    strm.opaque = NULL;
---
>    opaque  NULL;
1726c1726
<    strm.opaque = NULL;
---
>    .  NULL;
1726c1726
<    strm.opaque = NULL;
---
>      NULL;
(90.0 %, 20418 bytes)
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>      ;
>     = 0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>      NULL
>     = 0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>      
>     = 0;
1726c1726
<    opaque  NULL;
---
>    opaque  ;
1726c1726
<    opaque  NULL;
---
>    opaque  
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>     = 0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>     = 0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>    ret  0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>    ret  0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  ;
>      0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  
>      0;
1726c1726
<    opaque  NULL;
---
>    opaque  NULL
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>     = 0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret  0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>      0;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret = ;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>     = ;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>    ret  ;
1726,1727c1726,1727
<    opaque  NULL;
<    ret = 0;
---
>    opaque  NULL
>      ;
1727c1727
<    ret = 0;
---
>     = 0;
1727c1727
<    ret = 0;
---
>      0;
(90.0 %, 20412 bytes)
1727,1728c1727,1728
<      ;
<    if (ret != BZ_OK) return ret;
---
>      
>      != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     (ret != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     ret != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     ( != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>      != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     (ret  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     ret  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>     (  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>       BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if  != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ret  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if   BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ret != ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if  != ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ret  ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if   ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ( != BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ( != ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (  ) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ( != BZ_OK return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (  BZ_OK return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if ( !=  return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (   return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (ret  BZ_OK) return ret;
1728c1728
<    if (ret != BZ_OK) return ret;
---
>    if (ret  ) return ret;
(90.0 %, 20407 bytes)
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (   return ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  )  ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (    ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  ) return ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (   return ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  )  ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (    ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return ret
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  ret
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK return 
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK  
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK)  ret;
1728c1728
<    if (  BZ_OK) return ret;
---
>    if (  BZ_OK)  ;
(90.0 %, 20401 bytes)
1728c1728
<    if (  BZ_OK)  ret;
---
>    if (  BZ_OK)  ;
1728c1728
<    if (  BZ_OK)  ret;
---
>    if (  BZ_OK)  
(90.0 %, 20398 bytes)
1728c1728
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
1728c1728
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
1730c1730
<    strm_0 = source;
---
>     = source;
1728c1728
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
1730c1730
<    strm_0 = source;
---
>    strm_0  source;
1728c1728
<    if (  BZ_OK)  ;
---
>    if (  BZ_OK)  
1730c1730
<    strm_0 = source;
---
>      source;
(90.0 %, 20397 bytes)
1730c1730
<    strm_0 = source;
---
>     = source;
1730c1730
<    strm_0 = source;
---
>      source;
1730c1730
<    strm_0 = source;
---
>     = ;
1730c1730
<    strm_0 = source;
---
>      ;
(90.1 %, 20390 bytes)
1730c1730
<      source;
---
>      
1730,1731c1730,1731
<      source;
<    strm_4 = dest;
---
>      ;
>     = dest;
1730,1731c1730,1731
<      source;
<    strm_4 = dest;
---
>      
>     = dest;
1730,1731c1730,1731
<      source;
<    strm_4 = dest;
---
>      ;
>    strm_4  dest;
1730,1731c1730,1731
<      source;
<    strm_4 = dest;
---
>      
>    strm_4  dest;
1730,1731c1730,1731
<      source;
<    strm_4 = dest;
---
>      ;
>      dest;
(90.1 %, 20383 bytes)
1731c1731
<    strm_4 = dest;
---
>      dest;
1731c1731
<    strm_4 = dest;
---
>     = ;
1731c1731
<    strm_4 = dest;
---
>      ;
(90.1 %, 20376 bytes)
1731c1731
<      dest;
---
>      
1731,1732c1731,1732
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>     = sourceLen;
1731,1732c1731,1732
<      dest;
<    strm_1 = sourceLen;
---
>      
>     = sourceLen;
1731,1732c1731,1732
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>    strm_1  sourceLen;
1731,1732c1731,1732
<      dest;
<    strm_1 = sourceLen;
---
>      
>    strm_1  sourceLen;
1731,1732c1731,1732
<      dest;
<    strm_1 = sourceLen;
---
>      ;
>      sourceLen;
(90.1 %, 20371 bytes)
1732c1732
<    strm_1 = sourceLen;
---
>      sourceLen;
1732c1732
<    strm_1 = sourceLen;
---
>     = ;
1732c1732
<    strm_1 = sourceLen;
---
>      ;
(90.1 %, 20364 bytes)
1732c1732
<      sourceLen;
---
>      
1732,1733c1732,1733
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>     = *destLen;
1732,1733c1732,1733
<      sourceLen;
<    strm_5 = *destLen;
---
>      
>     = *destLen;
1732,1733c1732,1733
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>    strm_5  *destLen;
1732,1733c1732,1733
<      sourceLen;
<    strm_5 = *destLen;
---
>      
>    strm_5  *destLen;
1732,1733c1732,1733
<      sourceLen;
<    strm_5 = *destLen;
---
>      ;
>      *destLen;
(90.1 %, 20354 bytes)
1733c1733
<    strm_5 = *destLen;
---
>      *destLen;
1733c1733
<    strm_5 = *destLen;
---
>     = destLen;
1733c1733
<    strm_5 = *destLen;
---
>      destLen;
(90.1 %, 20347 bytes)
1733c1733
<      *destLen;
---
>      ;
1733c1733
<      *destLen;
---
>      destLen
1733c1733
<      *destLen;
---
>      
(90.1 %, 20339 bytes)
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>     = 0;
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>    ret  0;
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>      0;
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>    ret = ;
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>     = ;
1733c1733
<      ;
---
>      
1735c1735
<    ret = 0;
---
>    ret  ;
(90.1 %, 20334 bytes)
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      
>     (ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      ;
>    if ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      
>    if ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      ;
>     ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      
>     ret == BZ_FINISH_OK) goto output_overflow;
1735c1735
<      0;
---
>      0
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>     (ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>    if ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>     ret == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>    if ( == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>     ( == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>    if  == BZ_FINISH_OK) goto output_overflow;
1735,1736c1735,1736
<      0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      0
>      == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     (ret == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     ret == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     ( == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>      == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     (ret  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     ret  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>     (  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>       BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if  == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if   BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if  == ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret  ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if   ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ( == BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ( == ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (  ) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ( == BZ_FINISH_OK goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ( ==  goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (   goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (ret  BZ_FINISH_OK) goto output_overflow;
1736c1736
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if (ret  ) goto output_overflow;
(90.1 %, 20329 bytes)
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (   goto output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  )  output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (    output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  ) goto ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (   goto ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  )  ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (    ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK goto output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK  output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK goto ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK  ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK goto output_overflow
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK  output_overflow
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK goto 
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK  
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK)  output_overflow;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK)  ;
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK)  output_overflow
1736c1736
<    if (  BZ_FINISH_OK) goto output_overflow;
---
>    if (  BZ_FINISH_OK)  
(90.1 %, 20310 bytes)
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>     (ret != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>    if ret != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>     ret != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>    if ( != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>     ( != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>    if  != BZ_STREAM_END) goto errhandler;
1736,1737c1736,1737
<    if (  BZ_FINISH_OK)  ;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_FINISH_OK)  
>      != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (ret != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ret != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ( != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>      != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (ret  BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     ret  BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>     (  BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>       BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret  BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if   BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  != ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret  ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if   ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  ) goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( != BZ_STREAM_END goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ( !=  goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (   goto errhandler;
1737c1737
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (ret  BZ_STREAM_END) goto errhandler;
(90.1 %, 20305 bytes)
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (   goto errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  )  errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (    errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  ) goto ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (   goto ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  )  ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (    ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto errhandler
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  errhandler
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END goto 
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END  
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  errhandler;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  ;
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  errhandler
1737c1737
<    if (  BZ_STREAM_END) goto errhandler;
---
>    if (  BZ_STREAM_END)  
(90.1 %, 20291 bytes)
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>    destLen -= strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>    * -= strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>     -= strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>    *destLen  strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>    destLen  strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>    *  strm_5;   
1737c1737
<    if (  BZ_STREAM_END)  ;
---
>    if (  BZ_STREAM_END)  
1740c1740
<    *destLen -= strm_5;   
---
>      strm_5;   
(90.1 %, 20289 bytes)
1740c1740
<    destLen -= strm_5;   
---
>      strm_5;   
1740c1740
<    destLen -= strm_5;   
---
>     -= ;   
1740c1740
<    destLen -= strm_5;   
---
>      ;   
(90.1 %, 20280 bytes)
1740c1740
<      strm_5;   
---
>         
1740,1741c1740,1741
<      strm_5;   
<    0;
---
>      ;   
>    ;
1740,1741c1740,1741
<      strm_5;   
<    0;
---
>         
>    ;
(90.1 %, 20273 bytes)
1741c1741
<    0;
---
>    
1741,1742c1741,1742
<    0;
<    return BZ_OK;
---
>    ;
>     BZ_OK;
1741,1742c1741,1742
<    0;
<    return BZ_OK;
---
>    
>     BZ_OK;
(90.1 %, 20271 bytes)
1742c1742
<    return BZ_OK;
---
>     ;
1742c1742
<    return BZ_OK;
---
>     BZ_OK
1742c1742
<    return BZ_OK;
---
>     
(90.1 %, 20260 bytes)
1742c1742
<     ;
---
>     
1744c1744
<    output_overflow:
---
>    :
1742c1742
<     ;
---
>     
1744c1744
<    output_overflow:
---
>    output_overflow
1742c1742
<     ;
---
>     
1744c1744
<    output_overflow:
---
>    
1742c1742
<     ;
---
>     
1745c1745
<    0;
---
>    ;
1742c1742
<     ;
---
>     
1744,1745c1744,1745
<    output_overflow:
<    0;
---
>    :
>    ;
(90.1 %, 20243 bytes)
1745,1746c1745,1746
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    
>     BZ_OUTBUFF_FULL;
1745,1746c1745,1746
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    ;
>    return ;
1745,1746c1745,1746
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    
>    return ;
(90.1 %, 20235 bytes)
1746c1746
<     BZ_OUTBUFF_FULL;
---
>     
1748c1748
<    errhandler:
---
>    :
1746c1746
<     BZ_OUTBUFF_FULL;
---
>     ;
1748c1748
<    errhandler:
---
>    errhandler
1746c1746
<     BZ_OUTBUFF_FULL;
---
>     
1748c1748
<    errhandler:
---
>    errhandler
1746c1746
<     BZ_OUTBUFF_FULL;
---
>     ;
1748c1748
<    errhandler:
---
>    
1746c1746
<     BZ_OUTBUFF_FULL;
---
>     
1748c1748
<    errhandler:
---
>    
(90.1 %, 20209 bytes)
1746c1746
<     ;
---
>     
1749,1750c1749,1750
<    0;
<    return ret;
---
>    0
>     ret;
1746c1746
<     ;
---
>     
1749,1750c1749,1750
<    0;
<    return ret;
---
>    
>     ret;
1749c1749
<    0;
---
>    ;
(90.1 %, 20200 bytes)
1750,1751c1750
<     ret;
< }
---
>     
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>  char * BZ_APIBZ2_bzlibVersion(void)
1750c1750
<     ret;
---
>     ret
1750,1751c1750,1751
<     ret;
< }
---
>     ret
> 
1750c1750
<     ret;
---
>     ret
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>  char * BZ_APIBZ2_bzlibVersion(void)
1750,1751c1750
<     ret;
< }
---
>     ret
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>  char * BZ_APIBZ2_bzlibVersion(void)
1750c1750
<     ret;
---
>     ret
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const  * BZ_APIBZ2_bzlibVersion(void)
1750,1751c1750
<     ret;
< }
---
>     ret
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
> const  * BZ_APIBZ2_bzlibVersion(void)
1750c1750
<     ret;
---
>     ret
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>   * BZ_APIBZ2_bzlibVersion(void)
1750,1751c1750
<     ret;
< }
---
>     ret
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>   * BZ_APIBZ2_bzlibVersion(void)
1751c1751
< }
---
> 
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>  char * BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
> const  * BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>   * BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
> const char  BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>  char  BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
> const   BZ_APIBZ2_bzlibVersion(void)
1751d1750
< }
1764c1763,1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> 
>    BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>  char * BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>   * BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>  char  BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>    BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>  char * (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>   * (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>  char  (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
>    (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const  * BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const   BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const  * (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const   (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const  * BZ_APIBZ2_bzlibVersionvoid)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const   BZ_APIBZ2_bzlibVersionvoid)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const  * void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const   void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  BZ_APIBZ2_bzlibVersion(void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  BZ_APIBZ2_bzlibVersionvoid)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  BZ_APIBZ2_bzlibVersion()
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  ()
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  BZ_APIBZ2_bzlibVersion)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char  )
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * (void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * void)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * ()
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * )
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * (void
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * void
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * (
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * 
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersion)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersion
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersionvoid)
> 
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersion)
> 
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersionvoid
> 
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersion
> 
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersion()
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersion(
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersion()
> 
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
---
> const char * BZ_APIBZ2_bzlibVersion(
> 
1764c1764
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersion()
1766c1766
<    return BZ_VERSION;
---
>     BZ_VERSION;
(90.1 %, 20196 bytes)
1764c1764
< const char * BZ_APIBZ2_bzlibVersion()
---
> const char * BZ_APIBZ2_bzlibVersion(
1764,1765c1764,1765
< const char * BZ_APIBZ2_bzlibVersion()
< {
---
> const char * BZ_APIBZ2_bzlibVersion(
> 
1764c1764
< const char * BZ_APIBZ2_bzlibVersion()
---
> const char * BZ_APIBZ2_bzlibVersion(
1766c1766
<    return BZ_VERSION;
---
>     BZ_VERSION;
1764,1766c1764,1766
< const char * BZ_APIBZ2_bzlibVersion()
< {
<    return BZ_VERSION;
---
> const char * BZ_APIBZ2_bzlibVersion(
> 
>     BZ_VERSION;
1764c1764
< const char * BZ_APIBZ2_bzlibVersion()
---
> const char * BZ_APIBZ2_bzlibVersion(
1766c1766
<    return BZ_VERSION;
---
>    return ;
1764,1766c1764,1766
< const char * BZ_APIBZ2_bzlibVersion()
< {
<    return BZ_VERSION;
---
> const char * BZ_APIBZ2_bzlibVersion(
> 
>    return ;
1764c1764
< const char * BZ_APIBZ2_bzlibVersion()
---
> const char * BZ_APIBZ2_bzlibVersion(
1766c1766
<    return BZ_VERSION;
---
>     ;
1764,1766c1764,1766
< const char * BZ_APIBZ2_bzlibVersion()
< {
<    return BZ_VERSION;
---
> const char * BZ_APIBZ2_bzlibVersion(
> 
>     ;
1765c1765
< {
---
> 
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>     BZ_VERSION;
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>    return ;
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>     ;
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>    return BZ_VERSION
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>     BZ_VERSION
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>    return 
1765,1766c1765,1766
< {
<    return BZ_VERSION;
---
> 
>     
1766c1766
<    return BZ_VERSION;
---
>     BZ_VERSION;
1766c1766
<    return BZ_VERSION;
---
>     ;
1766c1766
<    return BZ_VERSION;
---
>     BZ_VERSION
(90.1 %, 20190 bytes)
1766c1766
<     BZ_VERSION;
---
>     ;
1766c1766
<     BZ_VERSION;
---
>     
(90.2 %, 20180 bytes)
1766c1766
<     ;
---
>     
1766,1767c1766,1767
<     ;
< }
---
>     
> 
1766c1766
<     ;
---
>     
1772c1772
< static
---
> 
(90.2 %, 20179 bytes)
1767c1767
< }
---
> 
1767d1766
< }
1772c1771,1772
< static
---
> 
> 
1767c1767
< }
---
> 
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>  * bzopen_or_bzdopen
1767d1766
< }
1772,1773c1771,1773
< static
< BZFILE * bzopen_or_bzdopen
---
> 
> 
>  * bzopen_or_bzdopen
1767c1767
< }
---
> 
1773c1773
< BZFILE * bzopen_or_bzdopen
---
> BZFILE  bzopen_or_bzdopen
1767d1766
< }
1772,1773c1771,1773
< static
< BZFILE * bzopen_or_bzdopen
---
> 
> 
> BZFILE  bzopen_or_bzdopen
1767c1767
< }
---
> 
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>   bzopen_or_bzdopen
1767d1766
< }
1772,1773c1771,1773
< static
< BZFILE * bzopen_or_bzdopen
---
> 
> 
>   bzopen_or_bzdopen
1772c1772
< static
---
> 
1772,1773c1772,1773
< static
< BZFILE * bzopen_or_bzdopen
---
> 
>  * bzopen_or_bzdopen
(90.2 %, 20173 bytes)
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>  * bzopen_or_bzdopen
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>   bzopen_or_bzdopen
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>  * 
1773c1773
< BZFILE * bzopen_or_bzdopen
---
>   
(90.2 %, 20167 bytes)
1773c1773
<  * bzopen_or_bzdopen
---
>   bzopen_or_bzdopen
1773c1773
<  * bzopen_or_bzdopen
---
>   
1773,1774c1773,1774
<  * bzopen_or_bzdopen
<                ( const char *path,   
---
>   bzopen_or_bzdopen
>                 const char *path,   
1773,1774c1773,1774
<  * bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                 const char *path,   
1773,1774c1773,1774
<  * bzopen_or_bzdopen
<                ( const char *path,   
---
>   bzopen_or_bzdopen
>                (  char *path,   
(90.2 %, 20166 bytes)
1773c1773
<   bzopen_or_bzdopen
---
>   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                 const char *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                (  char *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                  char *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                ( const  *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                 const  *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                (   *path,   
1773,1774c1773,1774
<   bzopen_or_bzdopen
<                ( const char *path,   
---
>   
>                   *path,   
1774c1774
<                ( const char *path,   
---
>                 const char *path,   
1774c1774
<                ( const char *path,   
---
>                  char *path,   
1774c1774
<                ( const char *path,   
---
>                 const  *path,   
1774c1774
<                ( const char *path,   
---
>                   *path,   
1774c1774
<                ( const char *path,   
---
>                 const char path,   
1774c1774
<                ( const char *path,   
---
>                  char path,   
1774c1774
<                ( const char *path,   
---
>                 const  path,   
1774c1774
<                ( const char *path,   
---
>                   path,   
1774c1774
<                ( const char *path,   
---
>                (  char *path,   
1774c1774
<                ( const char *path,   
---
>                (   *path,   
1774c1774
<                ( const char *path,   
---
>                (  char path,   
(90.2 %, 20161 bytes)
1774c1774
<                (  char *path,   
---
>                (   *path,   
1774c1774
<                (  char *path,   
---
>                (   path,   
1774c1774
<                (  char *path,   
---
>                (   *,   
1774c1774
<                (  char *path,   
---
>                (   ,   
1774c1774
<                (  char *path,   
---
>                (   *path   
1774c1774
<                (  char *path,   
---
>                (   path   
1774c1774
<                (  char *path,   
---
>                (   *   
1774c1774
<                (  char *path,   
---
>                (      
1774c1774
<                (  char *path,   
---
>                (  char path,   
1774c1774
<                (  char *path,   
---
>                (  char ,   
(90.2 %, 20160 bytes)
1774c1774
<                (  char path,   
---
>                (  char ,   
1774c1774
<                (  char path,   
---
>                (  char    
1774,1775c1774,1775
<                (  char path,   
<                  int d,             
---
>                (  char ,   
>                   d,             
1774,1775c1774,1775
<                (  char path,   
<                  int d,             
---
>                (  char    
>                   d,             
1774,1775c1774,1775
<                (  char path,   
<                  int d,             
---
>                (  char ,   
>                  int ,             
(90.2 %, 20156 bytes)
1774c1774
<                (  char ,   
---
>                (  char    
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                   d,             
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                  int ,             
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                   ,             
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                  int d             
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                   d             
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                  int              
1774,1775c1774,1775
<                (  char ,   
<                  int d,             
---
>                (  char    
>                                
1775c1775
<                  int d,             
---
>                   d,             
1775c1775
<                  int d,             
---
>                   ,             
1775c1775
<                  int d,             
---
>                   d             
1775c1775
<                  int d,             
---
>                                
1775,1776c1775,1776
<                  int d,             
<                  const char *mode,
---
>                   d,             
>                   char *mode,
1775,1776c1775,1776
<                  int d,             
<                  const char *mode,
---
>                   ,             
>                   char *mode,
1775,1776c1775,1776
<                  int d,             
<                  const char *mode,
---
>                   d             
>                   char *mode,
1775,1776c1775,1776
<                  int d,             
<                  const char *mode,
---
>                                
>                   char *mode,
1775c1775
<                  int d,             
---
>                  int ,             
1775c1775
<                  int d,             
---
>                  int              
1775,1776c1775,1776
<                  int d,             
<                  const char *mode,
---
>                  int ,             
>                   char *mode,
(90.2 %, 20155 bytes)
1775c1775
<                  int ,             
---
>                  int              
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                   char *mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                  const  *mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                    *mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                  const char mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                   char mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                  const  mode,
1775,1776c1775,1776
<                  int ,             
<                  const char *mode,
---
>                  int              
>                    mode,
1776c1776
<                  const char *mode,
---
>                   char *mode,
1776c1776
<                  const char *mode,
---
>                    *mode,
1776c1776
<                  const char *mode,
---
>                   char mode,
(90.2 %, 20150 bytes)
1776c1776
<                   char *mode,
---
>                    *mode,
1776c1776
<                   char *mode,
---
>                    mode,
1776c1776
<                   char *mode,
---
>                    *,
1776c1776
<                   char *mode,
---
>                    ,
1776c1776
<                   char *mode,
---
>                    *mode
1776c1776
<                   char *mode,
---
>                    mode
1776c1776
<                   char *mode,
---
>                    *
1776c1776
<                   char *mode,
---
>                    
1776c1776
<                   char *mode,
---
>                   char mode,
1776c1776
<                   char *mode,
---
>                   char ,
(90.2 %, 20149 bytes)
1776c1776
<                   char mode,
---
>                   char ,
1776c1776
<                   char mode,
---
>                   char 
1776,1777c1776,1777
<                   char mode,
<                  int open_mode)      
---
>                   char ,
>                   open_mode)      
1776,1777c1776,1777
<                   char mode,
<                  int open_mode)      
---
>                   char 
>                   open_mode)      
1776,1777c1776,1777
<                   char mode,
<                  int open_mode)      
---
>                   char ,
>                  int )      
(90.2 %, 20145 bytes)
1776c1776
<                   char ,
---
>                   char 
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                   open_mode)      
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                  int )      
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                   )      
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                  int open_mode      
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                   open_mode      
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                  int       
1776,1777c1776,1777
<                   char ,
<                  int open_mode)      
---
>                   char 
>                         
1777c1777
<                  int open_mode)      
---
>                   open_mode)      
1777c1777
<                  int open_mode)      
---
>                   )      
1777c1777
<                  int open_mode)      
---
>                   open_mode      
1777c1777
<                  int open_mode)      
---
>                         
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                   open_mode)      
> 
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                   )      
> 
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                   open_mode      
> 
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                         
> 
1777c1777
<                  int open_mode)      
---
>                  int )      
1777c1777
<                  int open_mode)      
---
>                  int       
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                  int )      
> 
1777,1778c1777,1778
<                  int open_mode)      
< ;
---
>                  int       
> 
1777c1777
<                  int open_mode)      
---
>                  int )      
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>  * BZ_APIBZ2_bzdopen
(90.2 %, 20136 bytes)
1777c1777
<                  int )      
---
>                  int       
1777,1778c1777,1778
<                  int )      
< ;
---
>                  int       
> 
1777c1777
<                  int )      
---
>                  int       
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>  * BZ_APIBZ2_bzdopen
1777,1778c1777
<                  int )      
< ;
---
>                  int       
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>  * BZ_APIBZ2_bzdopen
1777c1777
<                  int )      
---
>                  int       
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZFILE  BZ_APIBZ2_bzdopen
1777,1778c1777
<                  int )      
< ;
---
>                  int       
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
> BZFILE  BZ_APIBZ2_bzdopen
1777c1777
<                  int )      
---
>                  int       
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>   BZ_APIBZ2_bzdopen
1777,1778c1777
<                  int )      
< ;
---
>                  int       
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>   BZ_APIBZ2_bzdopen
1778c1778
< ;
---
> 
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>  * BZ_APIBZ2_bzdopen
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
> BZFILE  BZ_APIBZ2_bzdopen
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>   BZ_APIBZ2_bzdopen
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
> BZFILE * 
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>  * 
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
> BZFILE  
1778d1777
< ;
1787c1786,1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> 
>   
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>  * BZ_APIBZ2_bzdopen
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>   BZ_APIBZ2_bzdopen
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>  * 
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
>   
1787,1788c1787,1788
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * BZ_APIBZ2_bzdopen
>                 int fd,
1787,1788c1787,1788
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   BZ_APIBZ2_bzdopen
>                 int fd,
1787,1788c1787,1788
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                 int fd,
1787,1788c1787,1788
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   
>                 int fd,
1787c1787
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZFILE  BZ_APIBZ2_bzdopen
(90.2 %, 20130 bytes)
1787c1787
<  * BZ_APIBZ2_bzdopen
---
>   BZ_APIBZ2_bzdopen
1787c1787
<  * BZ_APIBZ2_bzdopen
---
>   
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   BZ_APIBZ2_bzdopen
>                 int fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   
>                 int fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   BZ_APIBZ2_bzdopen
>                (  fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   
>                (  fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   BZ_APIBZ2_bzdopen
>                  fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>   
>                  fd,
1787c1787
<  * BZ_APIBZ2_bzdopen
---
>  * 
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                 int fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                (  fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                  fd,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                ( int ,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                 int ,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                (  ,
1787,1788c1787,1788
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  * 
>                  ,
1788c1788
<                ( int fd,
---
>                 int fd,
1788c1788
<                ( int fd,
---
>                  fd,
1788c1788
<                ( int fd,
---
>                 int ,
1788c1788
<                ( int fd,
---
>                  ,
1788c1788
<                ( int fd,
---
>                 int fd
1788c1788
<                ( int fd,
---
>                  fd
1788c1788
<                ( int fd,
---
>                 int 
1788c1788
<                ( int fd,
---
>                  
1788c1788
<                ( int fd,
---
>                (  fd,
1788c1788
<                ( int fd,
---
>                (  ,
1788c1788
<                ( int fd,
---
>                (  fd
1788c1788
<                ( int fd,
---
>                (  
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                (  fd,
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                (  ,
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                (  fd
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                (  
>                   char *mode )
1788c1788
<                ( int fd,
---
>                ( int ,
1788c1788
<                ( int fd,
---
>                ( int 
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int ,
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int 
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int ,
>                  const  *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int 
>                  const  *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int ,
>                    *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int 
>                    *mode )
1788c1788
<                ( int fd,
---
>                ( int fd
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                   char *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                  const  *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                    *mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                  const char mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                   char mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                  const  mode )
1788,1789c1788,1789
<                ( int fd,
<                  const char *mode )
---
>                ( int fd
>                    mode )
1789c1789
<                  const char *mode )
---
>                   char *mode )
1789c1789
<                  const char *mode )
---
>                    *mode )
1789c1789
<                  const char *mode )
---
>                   char mode )
1789c1789
<                  const char *mode )
---
>                    mode )
1789c1789
<                  const char *mode )
---
>                   char * )
1789c1789
<                  const char *mode )
---
>                    * )
1789c1789
<                  const char *mode )
---
>                   char  )
1789c1789
<                  const char *mode )
---
>                     )
1789c1789
<                  const char *mode )
---
>                  const  *mode )
1789c1789
<                  const char *mode )
---
>                  const  mode )
1789c1789
<                  const char *mode )
---
>                  const  * )
1789c1789
<                  const char *mode )
---
>                  const   )
1789c1789
<                  const char *mode )
---
>                  const  *mode 
1789c1789
<                  const char *mode )
---
>                  const  mode 
1789c1789
<                  const char *mode )
---
>                  const  * 
1789c1789
<                  const char *mode )
---
>                  const   
1789c1789
<                  const char *mode )
---
>                  const char mode )
1789c1789
<                  const char *mode )
---
>                  const char  )
1789c1789
<                  const char *mode )
---
>                  const char mode 
1789c1789
<                  const char *mode )
---
>                  const char  
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char mode )
> 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char  )
> 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char mode 
> 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char  
> 
1789c1789
<                  const char *mode )
---
>                  const char * )
1789c1789
<                  const char *mode )
---
>                  const char * 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char * )
> 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char * 
> 
1789c1789
<                  const char *mode )
---
>                  const char * )
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789c1789
<                  const char *mode )
---
>                  const char * 
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789,1791c1789,1791
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char * )
> 
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789,1791c1789,1791
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char * 
> 
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789c1789
<                  const char *mode )
---
>                  const char *mode 
1789,1790c1789,1790
<                  const char *mode )
< {
---
>                  const char *mode 
> 
1789c1789
<                  const char *mode )
---
>                  const char *mode 
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789,1791c1789,1791
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode 
> 
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1789c1789
<                  const char *mode )
---
>                  const char *mode 
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return (NULL,fd,mode,1);
1789,1791c1789,1791
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode 
> 
>    return (NULL,fd,mode,1);
1789c1789
<                  const char *mode )
---
>                  const char *mode 
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (NULL,fd,mode,1);
1789,1791c1789,1791
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode 
> 
>     (NULL,fd,mode,1);
1790c1790
< {
---
> 
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>    return (NULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>     (NULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>    return bzopen_or_bzdopenNULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>     bzopen_or_bzdopenNULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>    return NULL,fd,mode,1);
1790,1791c1790,1791
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> 
>     NULL,fd,mode,1);
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopen(NULL,fd,mode,1);
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (NULL,fd,mode,1);
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopenNULL,fd,mode,1);
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     NULL,fd,mode,1);
1791c1791
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     bzopen_or_bzdopen(,fd,mode,1);
(90.2 %, 20124 bytes)
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (NULL,fd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     NULL,fd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (,fd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     ,fd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (NULLfd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     NULLfd,mode,1);
1791c1791
<     bzopen_or_bzdopen(NULL,fd,mode,1);
---
>     (fd,mode,1);
(90.2 %, 20107 bytes)
1791c1791
<     (NULL,fd,mode,1);
---
>     NULL,fd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     ,fd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     NULLfd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     fd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     NULL,,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     ,,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     NULL,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     ,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (,fd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (fd,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (,,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (,fdmode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (fdmode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (,mode,1);
1791c1791
<     (NULL,fd,mode,1);
---
>     (mode,1);
(90.2 %, 20102 bytes)
1791c1791
<     (fd,mode,1);
---
>     (mode,1);
1791c1791
<     (fd,mode,1);
---
>     (,,1);
1791c1791
<     (fd,mode,1);
---
>     (,1);
1791c1791
<     (fd,mode,1);
---
>     (,mode1);
1791c1791
<     (fd,mode,1);
---
>     (mode1);
1791c1791
<     (fd,mode,1);
---
>     (,1);
1791c1791
<     (fd,mode,1);
---
>     (1);
(90.2 %, 20099 bytes)
1791c1791
<     (mode,1);
---
>     (1);
1791c1791
<     (mode,1);
---
>     (,);
1791c1791
<     (mode,1);
---
>     ();
1791c1791
<     (mode,1);
---
>     (,1;
1791c1791
<     (mode,1);
---
>     (1;
1791c1791
<     (mode,1);
---
>     (,;
1791c1791
<     (mode,1);
---
>     (;
1791c1791
<     (mode,1);
---
>     (mode1);
1791c1791
<     (mode,1);
---
>     (mode);
(90.2 %, 20094 bytes)
1791c1791
<     (1);
---
>     (;
1791c1791
<     (1);
---
>     ()
1791c1791
<     (1);
---
>     (
1791,1792c1791,1792
<     (1);
< }
---
>     ();
> 
1791,1792c1791,1792
<     (1);
< }
---
>     (;
> 
1791,1792c1791,1792
<     (1);
< }
---
>     ()
> 
1791,1792c1791,1792
<     (1);
< }
---
>     (
> 
1791c1791
<     (1);
---
>     (1;
1791c1791
<     (1);
---
>     (1
1791,1792c1791,1792
<     (1);
< }
---
>     (1;
> 
1791,1792c1791,1792
<     (1);
< }
---
>     (1
> 
1791c1791
<     (1);
---
>     (1;
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791c1791
<     (1);
---
>     (1
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791,1792c1791
<     (1);
< }
---
>     (1;
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791,1792c1791
<     (1);
< }
---
>     (1
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791c1791
<     (1);
---
>     (1)
1791,1792c1791,1792
<     (1);
< }
---
>     (1)
> 
1791c1791
<     (1);
---
>     (1)
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791,1792c1791
<     (1);
< }
---
>     (1)
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1791c1791
<     (1);
---
>     (1)
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int  (BZFILE* b, void* buf, int len )
1791,1792c1791
<     (1);
< }
---
>     (1)
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
> int  (BZFILE* b, void* buf, int len )
1791c1791
<     (1);
---
>     (1)
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (BZFILE* b, void* buf, int len )
1791,1792c1791
<     (1);
< }
---
>     (1)
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>   (BZFILE* b, void* buf, int len )
1792c1792
< }
---
> 
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
> int  (BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>   (BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>  BZ_APIBZ2_bzread BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
> int  BZFILE* b, void* buf, int len )
1792d1791
< }
1796c1795,1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> 
>   BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread * b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   * b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int  (BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int  BZFILE* b, void* buf, int len )
1796c1796
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int  (* b, void* buf, int len )
(90.2 %, 20091 bytes)
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (BZFILE* b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   BZFILE* b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (* b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   * b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   (BZFILE b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   BZFILE b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>   ( b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>    b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread BZFILE* b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread * b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread BZFILE b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread  b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread BZFILE* , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread * , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread BZFILE , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread  , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (* b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread ( b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (* , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread ( , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (* b void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread ( b void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (*  void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (  void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE b, void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE b void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE  void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE b, * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE , * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE b * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE  * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* , void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE*  void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* , * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE*  * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* , void buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE*  void buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* ,  buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE*   buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b void* buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b void buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b  buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b void* , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b * , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b void , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b  , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, * buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b,  buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, * , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b,  , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, * buf int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b,  buf int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, *  int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b,   int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void buf, int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void buf int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void  int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void buf,  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void ,  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void buf  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void   len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* , int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void*  int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* ,  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void*   len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* , int  )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void*  int  )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* ,   )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void*    )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf int len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf int  )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf   )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf int len 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf  len 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf int  
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf   
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,  len )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,   )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,  len 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,   
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,  len )
> 
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,   )
> 
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,  len 
> 
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf,   
> 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  )
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  )
> 
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  
> 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  )
1798c1798
<    int bzerr, nread;
---
>     bzerr, nread;
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  
1798c1798
<    int bzerr, nread;
---
>     bzerr, nread;
1796,1798c1796,1798
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  )
> 
>     bzerr, nread;
1796,1798c1796,1798
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int  
> 
>     bzerr, nread;
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
1796,1797c1796,1797
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
> 
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
1798c1798
<    int bzerr, nread;
---
>     bzerr, nread;
1796,1798c1796,1798
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
> 
>     bzerr, nread;
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
1798c1798
<    int bzerr, nread;
---
>    int , nread;
1796,1798c1796,1798
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
> 
>    int , nread;
1796c1796
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
1798c1798
<    int bzerr, nread;
---
>     , nread;
1796,1798c1796,1798
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
>  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len 
> 
>     , nread;
1797c1797
< {
---
> 
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>     bzerr, nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>    int , nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>     , nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>    int bzerr nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>     bzerr nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>    int  nread;
1797,1798c1797,1798
< {
<    int bzerr, nread;
---
> 
>      nread;
1798c1798
<    int bzerr, nread;
---
>     bzerr, nread;
1798c1798
<    int bzerr, nread;
---
>     , nread;
1798c1798
<    int bzerr, nread;
---
>     bzerr nread;
1798c1798
<    int bzerr, nread;
---
>      nread;
1798c1798
<    int bzerr, nread;
---
>     bzerr, ;
1798c1798
<    int bzerr, nread;
---
>     , ;
1798c1798
<    int bzerr, nread;
---
>     bzerr ;
1798c1798
<    int bzerr, nread;
---
>      ;
1798c1798
<    int bzerr, nread;
---
>    int , nread;
1798c1798
<    int bzerr, nread;
---
>    int  nread;
1798c1798
<    int bzerr, nread;
---
>    int , ;
1798c1798
<    int bzerr, nread;
---
>    int  ;
1798c1798
<    int bzerr, nread;
---
>    int , nread
1798c1798
<    int bzerr, nread;
---
>    int  nread
1798c1798
<    int bzerr, nread;
---
>    int , 
1798c1798
<    int bzerr, nread;
---
>    int  
1798c1798
<    int bzerr, nread;
---
>    int bzerr nread;
1798c1798
<    int bzerr, nread;
---
>    int bzerr ;
1798c1798
<    int bzerr, nread;
---
>    int bzerr nread
1798c1798
<    int bzerr, nread;
---
>    int bzerr 
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr nread;
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr ;
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr nread
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr 
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798c1798
<    int bzerr, nread;
---
>    int bzerr, ;
1798c1798
<    int bzerr, nread;
---
>    int bzerr, 
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ;
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, 
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ;
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, 
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ;
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, 
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798c1798
<    int bzerr, nread;
---
>    int bzerr, nread
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>    if (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1798,1799c1798,1799
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread
>     (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>     bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if *)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (bzFile)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (()b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ()b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (()b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((*b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFileb)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((*)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((()b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((*b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((*))->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((())->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((*)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((()->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile)b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFileb)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile))->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile)b->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFileb->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*b->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*b)lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*blastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*))->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*))lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*))-> == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)-> == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)) == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*) == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)blastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b-> == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b->lastErr  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)blastErr  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b->  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)lastErr == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b) == BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)lastErr  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)  BZ_STREAM_END) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)lastErr == ) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b) == ) return 0;
1799c1799
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)lastErr  ) return 0;
(90.2 %, 20082 bytes)
1799c1799
<    if (((bzFile*)b) == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)  ) return 0;
1799c1799
<    if (((bzFile*)b) == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)  BZ_STREAM_END return 0;
1799c1799
<    if (((bzFile*)b) == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)   return 0;
1799c1799
<    if (((bzFile*)b) == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)  BZ_STREAM_END)  0;
1799c1799
<    if (((bzFile*)b) == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)  )  0;
(90.2 %, 20067 bytes)
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)    0;
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)   return ;
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)    ;
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)   return 0
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)    0
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)   return 
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)    
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)  )  0;
1799c1799
<    if (((bzFile*)b)  ) return 0;
---
>    if (((bzFile*)b)  )  ;
(90.2 %, 20061 bytes)
1799c1799
<    if (((bzFile*)b)  )  0;
---
>    if (((bzFile*)b)  )  ;
1799c1799
<    if (((bzFile*)b)  )  0;
---
>    if (((bzFile*)b)  )  
(90.2 %, 20060 bytes)
1799c1799
<    if (((bzFile*)b)  )  ;
---
>    if (((bzFile*)b)  )  
1799,1800c1799,1800
<    if (((bzFile*)b)  )  ;
<    nread = 0;
---
>    if (((bzFile*)b)  )  
>     = 0;
1799,1800c1799,1800
<    if (((bzFile*)b)  )  ;
<    nread = 0;
---
>    if (((bzFile*)b)  )  
>    nread  0;
1799,1800c1799,1800
<    if (((bzFile*)b)  )  ;
<    nread = 0;
---
>    if (((bzFile*)b)  )  
>      0;
(90.2 %, 20059 bytes)
1800c1800
<    nread = 0;
---
>     = 0;
1800c1800
<    nread = 0;
---
>      0;
1800c1800
<    nread = 0;
---
>     = ;
1800c1800
<    nread = 0;
---
>      ;
(90.2 %, 20053 bytes)
1800c1800
<      0;
---
>      
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      ;
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      ;
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      ;
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1800c1800
<      0;
---
>      0
1800,1801c1800,1801
<      0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      0
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
(90.2 %, 20051 bytes)
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>     ( == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>      == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>     (bzerr  BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>     bzerr  BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>     (  BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>       BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if  == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr  BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if   BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr ==  || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if  ==  || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr   || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if    || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (  BZ_OK || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ( ==  || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (   || bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_OK  bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (  BZ_OK  bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ( ==   bzerr == BZ_STREAM_END) {
1801c1801
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == BZ_STREAM_END) {
(90.2 %, 20044 bytes)
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (   ||  == BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (     == BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (   || bzerr  BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (   ||   BZ_STREAM_END) {
1801c1801
<    if (  BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (      BZ_STREAM_END) {
(90.2 %, 20037 bytes)
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (      BZ_STREAM_END) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (     == ) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (      ) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (     == BZ_STREAM_END {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (      BZ_STREAM_END {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (     ==  {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (       {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  BZ_STREAM_END) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  ) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  BZ_STREAM_END {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr   {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  BZ_STREAM_END) 
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  ) 
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr  BZ_STREAM_END 
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr   
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == ) {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr ==  {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == ) 
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr ==  
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == ) {
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr ==  {
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == ) 
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr ==  
>        nread;
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == BZ_STREAM_END {
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == BZ_STREAM_END 
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END {
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END 
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END {
>       return ;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END 
>       return ;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END {
>        ;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END 
>        ;
1801c1801
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    bzerr == BZ_STREAM_END) 
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>        nread;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>       return ;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>        ;
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>       return nread
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>        nread
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>       return 
1801,1802c1801,1802
<    if (    bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (    bzerr == BZ_STREAM_END) 
>        
1802c1802
<       return nread;
---
>        nread;
1802c1802
<       return nread;
---
>        ;
(90.2 %, 20031 bytes)
1802c1802
<        nread;
---
>        ;
1802c1802
<        nread;
---
>        
1802,1803c1802,1803
<        nread;
<    } else {
---
>        ;
>     else {
(90.2 %, 20026 bytes)
1802c1802
<        ;
---
>        
1802,1803c1802,1803
<        ;
<    } else {
---
>        
>     else {
1802,1803c1802,1803
<        ;
<    } else {
---
>        
>    }  {
(90.2 %, 20025 bytes)
1803c1803
<    } else {
---
>     else {
1803c1803
<    } else {
---
>      {
1803c1803
<    } else {
---
>     else 
1803c1803
<    } else {
---
>      
1803,1804c1803,1804
<    } else {
<       return -1;
---
>     else {
>        -1;
1803,1804c1803,1804
<    } else {
<       return -1;
---
>      {
>        -1;
1803,1804c1803,1804
<    } else {
<       return -1;
---
>     else 
>        -1;
1803,1804c1803,1804
<    } else {
<       return -1;
---
>      
>        -1;
(90.2 %, 20019 bytes)
1804c1804
<       return -1;
---
>        ;
1804c1804
<       return -1;
---
>        -1
1804c1804
<       return -1;
---
>        1
1804c1804
<       return -1;
---
>        -
1804c1804
<       return -1;
---
>        
(90.2 %, 20011 bytes)
1804,1806c1804,1806
<        ;
<    }
< }
---
>        
>    
> 
1804c1804
<        ;
---
>        
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose (BZFILE* b)
1804,1805c1804,1805
<        ;
<    }
---
>        
>    
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose (BZFILE* b)
1804c1804
<        ;
---
>        
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>  BZ_APIBZ2_bzclose (BZFILE* b)
1804,1806c1804,1805
<        ;
<    }
< }
---
>        
>    
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>  BZ_APIBZ2_bzclose (BZFILE* b)
1805c1805
<    }
---
>    
1805,1806c1805,1806
<    }
< }
---
>    
> 
1805c1805
<    }
---
>    
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose (BZFILE* b)
1805,1806c1805
<    }
< }
---
>    
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>  BZ_APIBZ2_bzclose (BZFILE* b)
1805c1805
<    }
---
>    
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  (BZFILE* b)
1805,1806c1805
<    }
< }
---
>    
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
> void  (BZFILE* b)
1805c1805
<    }
---
>    
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>   (BZFILE* b)
1805,1806c1805
<    }
< }
---
>    
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>   (BZFILE* b)
1806c1806
< }
---
> 
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>  BZ_APIBZ2_bzclose (BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
> void  (BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>   (BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
> void BZ_APIBZ2_bzclose BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>  BZ_APIBZ2_bzclose BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
> void  BZFILE* b)
1806d1805
< }
1818c1817,1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> 
>   BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose (BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>   (BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>   BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose (* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>   (* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>  BZ_APIBZ2_bzclose * b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
>   * b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  (BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  (* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  * b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  (BZFILE b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  BZFILE b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void  ( b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void   b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose * b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose  b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* )
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose * )
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE )
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose  )
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (* b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose ( b)
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (* )
1818c1818
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose ( )
(90.2 %, 20004 bytes)
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( 
1818,1819c1818,1819
< void BZ_APIBZ2_bzclose ( b)
< {
---
> void BZ_APIBZ2_bzclose ( )
> 
1818,1819c1818,1819
< void BZ_APIBZ2_bzclose ( b)
< {
---
> void BZ_APIBZ2_bzclose ( 
> 
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( )
1820c1820
<    int bzerr;
---
>     bzerr;
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( 
1820c1820
<    int bzerr;
---
>     bzerr;
1818,1820c1818,1820
< void BZ_APIBZ2_bzclose ( b)
< {
<    int bzerr;
---
> void BZ_APIBZ2_bzclose ( )
> 
>     bzerr;
1818,1820c1818,1820
< void BZ_APIBZ2_bzclose ( b)
< {
<    int bzerr;
---
> void BZ_APIBZ2_bzclose ( 
> 
>     bzerr;
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( b
1818,1819c1818,1819
< void BZ_APIBZ2_bzclose ( b)
< {
---
> void BZ_APIBZ2_bzclose ( b
> 
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( b
1820c1820
<    int bzerr;
---
>     bzerr;
1818,1820c1818,1820
< void BZ_APIBZ2_bzclose ( b)
< {
<    int bzerr;
---
> void BZ_APIBZ2_bzclose ( b
> 
>     bzerr;
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( b
1820c1820
<    int bzerr;
---
>    int ;
1818,1820c1818,1820
< void BZ_APIBZ2_bzclose ( b)
< {
<    int bzerr;
---
> void BZ_APIBZ2_bzclose ( b
> 
>    int ;
1818c1818
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( b
1820c1820
<    int bzerr;
---
>     ;
1818,1820c1818,1820
< void BZ_APIBZ2_bzclose ( b)
< {
<    int bzerr;
---
> void BZ_APIBZ2_bzclose ( b
> 
>     ;
1819c1819
< {
---
> 
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>     bzerr;
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>    int ;
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>     ;
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>    int bzerr
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>     bzerr
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>    int 
1819,1820c1819,1820
< {
<    int bzerr;
---
> 
>     
1820c1820
<    int bzerr;
---
>     bzerr;
1820c1820
<    int bzerr;
---
>     ;
1820c1820
<    int bzerr;
---
>     bzerr
1820c1820
<    int bzerr;
---
>     
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>     bzerr;
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>     ;
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>     bzerr
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>     
>     *fp = ((bzFile *)b)->handle;
1820c1820
<    int bzerr;
---
>    int ;
1820c1820
<    int bzerr;
---
>    int 
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int ;
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int 
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int ;
>    FILE fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int 
>    FILE fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int ;
>     fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int 
>     fp = ((bzFile *)b)->handle;
1820c1820
<    int bzerr;
---
>    int bzerr
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>     *fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>    FILE fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>     fp = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>    FILE * = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>     * = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>    FILE  = ((bzFile *)b)->handle;
1820,1821c1820,1821
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr
>      = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     *fp = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     fp = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     * = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>      = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     *fp  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     fp  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>     *  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>       ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE fp = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE  = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE fp  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE   ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE fp = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE  = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE fp  (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE   (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE * = ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE * = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *  (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE * = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *  (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE * = bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *  bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  ((bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  (( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  ( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp  ( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp   *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp =  *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = bzFile )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp =  )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( *b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ( b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( *)b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( *b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( *))->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( ))->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( *)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (( )->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile )b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile ))->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile )->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile )b->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile b->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile )->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile ->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *b)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *b->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *b)handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *bhandle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *))->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *))handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *))->;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)->;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *));
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *);
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b->handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)bhandle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b->;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b->handle
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)bhandle
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b->
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)handle;
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b);
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)handle
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)handle;
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b);
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)handle
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ((bzFile *)b)->;
(90.2 %, 19996 bytes)
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>    if b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>     b==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>    if (==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>     (==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>    if ==NULL) 
1821c1821
<    FILE *fp = ((bzFile *)b);
---
>    FILE *fp = ((bzFile *)b)
1823c1823
<    if (b==NULL) 
---
>     ==NULL) 
1823c1823
<    if (b==NULL) 
---
>     (b==NULL) 
1823c1823
<    if (b==NULL) 
---
>     b==NULL) 
1823c1823
<    if (b==NULL) 
---
>     (==NULL) 
1823c1823
<    if (b==NULL) 
---
>     ==NULL) 
1823c1823
<    if (b==NULL) 
---
>     (bNULL) 
1823c1823
<    if (b==NULL) 
---
>     bNULL) 
1823c1823
<    if (b==NULL) 
---
>     (NULL) 
1823c1823
<    if (b==NULL) 
---
>     NULL) 
1823c1823
<    if (b==NULL) 
---
>    if b==NULL) 
1823c1823
<    if (b==NULL) 
---
>    if ==NULL) 
1823c1823
<    if (b==NULL) 
---
>    if bNULL) 
1823c1823
<    if (b==NULL) 
---
>    if NULL) 
1823c1823
<    if (b==NULL) 
---
>    if b==) 
1823c1823
<    if (b==NULL) 
---
>    if ==) 
1823c1823
<    if (b==NULL) 
---
>    if b) 
1823c1823
<    if (b==NULL) 
---
>    if ) 
1823c1823
<    if (b==NULL) 
---
>    if (==NULL) 
1823c1823
<    if (b==NULL) 
---
>    if (NULL) 
1823c1823
<    if (b==NULL) 
---
>    if (==) 
1823c1823
<    if (b==NULL) 
---
>    if () 
1823c1823
<    if (b==NULL) 
---
>    if (==NULL 
1823c1823
<    if (b==NULL) 
---
>    if (NULL 
1823c1823
<    if (b==NULL) 
---
>    if (== 
1823c1823
<    if (b==NULL) 
---
>    if ( 
1823c1823
<    if (b==NULL) 
---
>    if (bNULL) 
(90.2 %, 19993 bytes)
1823c1823
<    if (NULL) 
---
>    if ( 
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if () 
>    (((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if ( 
>    (((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if () 
>    if((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if ( 
>    if((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if () 
>    ((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if ( 
>    ((bzFile*)b)->writing){
1823c1823
<    if (NULL) 
---
>    if (NULL 
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    (((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    if((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    ((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    if((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    ((bzFile*)b)->writing){
1823,1824c1823,1824
<    if (NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (NULL 
>    if(bzFile*)b)->writing){
(90.2 %, 19985 bytes)
1824c1824
<    ((bzFile*)b)->writing){
---
>    )b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (bzFile*)b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (*)b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (bzFile)b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ()b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (bzFile*b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (*b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (bzFileb)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((*)b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (()b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((*b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((*))->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (())->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((*)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    (()->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile)b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFileb)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile))->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile)b->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFileb->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*b)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*b->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*b)writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*bwriting){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*))->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*))writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*))->){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)->){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*))){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b->writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)bwriting){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b->){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b->writing{
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)bwriting{
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b->{
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b{
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)writing){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)writing{
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)writing)
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b))
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)writing
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)->){
1824c1824
<    ((bzFile*)b)->writing){
---
>    ((bzFile*)b)->{
(90.3 %, 19976 bytes)
1824c1824
<    ((bzFile*)b)){
---
>    ((bzFile*)b)
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b){
>       (&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b)
>       (&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b){
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b)
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b){
>       &bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b)
>       &bzerr,b,0,NULL,NULL);
1824c1824
<    ((bzFile*)b)){
---
>    ((bzFile*)b))
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       (&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       &bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       BZ2_bzWriteClose(bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       (bzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       BZ2_bzWriteClosebzerr,b,0,NULL,NULL);
1824,1825c1824,1825
<    ((bzFile*)b)){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ((bzFile*)b))
>       bzerr,b,0,NULL,NULL);
1825c1825
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       (&bzerr,b,0,NULL,NULL);
1825c1825
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       &bzerr,b,0,NULL,NULL);
1825c1825
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       (bzerr,b,0,NULL,NULL);
(90.3 %, 19960 bytes)
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       &bzerr,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       bzerr,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       &,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       ,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       &bzerrb,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       bzerrb,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       &b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       (bzerr,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       (,b,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       (bzerrb,0,NULL,NULL);
1825c1825
<       (&bzerr,b,0,NULL,NULL);
---
>       (b,0,NULL,NULL);
(90.3 %, 19959 bytes)
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (,b,0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (b,0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (,,0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (,0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (,b0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (b0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (,0,NULL,NULL);
1825c1825
<       (bzerr,b,0,NULL,NULL);
---
>       (0,NULL,NULL);
(90.3 %, 19953 bytes)
1825c1825
<       (b,0,NULL,NULL);
---
>       (0,NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (,,NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (,NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (,0NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (0NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (,NULL,NULL);
1825c1825
<       (b,0,NULL,NULL);
---
>       (NULL,NULL);
(90.3 %, 19951 bytes)
1825c1825
<       (0,NULL,NULL);
---
>       (NULL,NULL);
1825c1825
<       (0,NULL,NULL);
---
>       (,,NULL);
1825c1825
<       (0,NULL,NULL);
---
>       (,NULL);
1825c1825
<       (0,NULL,NULL);
---
>       (,NULLNULL);
1825c1825
<       (0,NULL,NULL);
---
>       (NULLNULL);
1825c1825
<       (0,NULL,NULL);
---
>       (,NULL);
1825c1825
<       (0,NULL,NULL);
---
>       (NULL);
(90.3 %, 19949 bytes)
1825c1825
<       (NULL,NULL);
---
>       (NULL);
1825c1825
<       (NULL,NULL);
---
>       (,);
1825c1825
<       (NULL,NULL);
---
>       ();
1825c1825
<       (NULL,NULL);
---
>       (,NULL;
1825c1825
<       (NULL,NULL);
---
>       (NULL;
1825c1825
<       (NULL,NULL);
---
>       (,;
1825c1825
<       (NULL,NULL);
---
>       (;
1825c1825
<       (NULL,NULL);
---
>       (NULLNULL);
(90.3 %, 19944 bytes)
1825c1825
<       (NULL);
---
>       (;
1825c1825
<       (NULL);
---
>       ()
1825c1825
<       (NULL);
---
>       (
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       ();
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (;
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       ()
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (
>       (bzerr != BZ_OK){
1825c1825
<       (NULL);
---
>       (NULL;
1825c1825
<       (NULL);
---
>       (NULL
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL;
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL;
>       ifbzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL
>       ifbzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL;
>       bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL
>       bzerr != BZ_OK){
1825c1825
<       (NULL);
---
>       (NULL)
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       (bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       ifbzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       bzerr != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       if( != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       ( != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>       if != BZ_OK){
1825,1826c1825,1826
<       (NULL);
<       if(bzerr != BZ_OK){
---
>       (NULL)
>        != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       (bzerr != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       bzerr != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       ( != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>        != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       (bzerr  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       bzerr  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       (  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>         BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       ifbzerr != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       ifbzerr  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       ifbzerr != ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if != ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       ifbzerr  ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if  ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if( != BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if( != ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(  ){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if( != BZ_OK{
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(  BZ_OK{
1826c1826
<       if(bzerr != BZ_OK){
---
>       if( != {
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(  {
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(bzerr  BZ_OK){
1826c1826
<       if(bzerr != BZ_OK){
---
>       if(bzerr  ){
(90.3 %, 19937 bytes)
1826c1826
<       if(  BZ_OK){
---
>       if(  {
1826c1826
<       if(  BZ_OK){
---
>       if(  )
1826c1826
<       if(  BZ_OK){
---
>       if(  
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  ){
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  {
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  )
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  
>          (NULL,b,1,NULL,NULL);
1826c1826
<       if(  BZ_OK){
---
>       if(  BZ_OK{
1826c1826
<       if(  BZ_OK){
---
>       if(  BZ_OK
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK{
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK{
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK{
>          NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK
>          NULL,b,1,NULL,NULL);
1826c1826
<       if(  BZ_OK){
---
>       if(  BZ_OK)
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          (NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          NULL,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          BZ2_bzWriteClose(,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          (,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          BZ2_bzWriteClose,b,1,NULL,NULL);
1826,1827c1826,1827
<       if(  BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(  BZ_OK)
>          ,b,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          (NULL,b,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          NULL,b,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          (,b,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          ,b,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          (NULLb,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          NULLb,1,NULL,NULL);
1827c1827
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          (b,1,NULL,NULL);
(90.3 %, 19921 bytes)
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          NULL,b,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          ,b,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          NULLb,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          b,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          NULL,,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          ,,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          NULL,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          ,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (,b,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (b,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (,,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (,b1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (b1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (,1,NULL,NULL);
1827c1827
<          (NULL,b,1,NULL,NULL);
---
>          (1,NULL,NULL);
(90.3 %, 19916 bytes)
1827c1827
<          (b,1,NULL,NULL);
---
>          (1,NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (,,NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (,NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (,1NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (1NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (,NULL,NULL);
1827c1827
<          (b,1,NULL,NULL);
---
>          (NULL,NULL);
(90.3 %, 19914 bytes)
1827c1827
<          (1,NULL,NULL);
---
>          (NULL,NULL);
1827c1827
<          (1,NULL,NULL);
---
>          (,,NULL);
1827c1827
<          (1,NULL,NULL);
---
>          (,NULL);
1827c1827
<          (1,NULL,NULL);
---
>          (,NULLNULL);
1827c1827
<          (1,NULL,NULL);
---
>          (NULLNULL);
1827c1827
<          (1,NULL,NULL);
---
>          (,NULL);
1827c1827
<          (1,NULL,NULL);
---
>          (NULL);
(90.3 %, 19912 bytes)
1827c1827
<          (NULL,NULL);
---
>          (NULL);
1827c1827
<          (NULL,NULL);
---
>          (,);
1827c1827
<          (NULL,NULL);
---
>          ();
1827c1827
<          (NULL,NULL);
---
>          (,NULL;
1827c1827
<          (NULL,NULL);
---
>          (NULL;
1827c1827
<          (NULL,NULL);
---
>          (,;
1827c1827
<          (NULL,NULL);
---
>          (;
1827c1827
<          (NULL,NULL);
---
>          (NULLNULL);
(90.3 %, 19907 bytes)
1827c1827
<          (NULL);
---
>          (;
1827c1827
<          (NULL);
---
>          ()
1827c1827
<          (NULL);
---
>          (
1827,1828c1827,1828
<          (NULL);
<       }
---
>          ();
>       
1827,1828c1827,1828
<          (NULL);
<       }
---
>          (;
>       
1827,1828c1827,1828
<          (NULL);
<       }
---
>          ()
>       
1827,1828c1827,1828
<          (NULL);
<       }
---
>          (
>       
1827c1827
<          (NULL);
---
>          (NULL;
1827c1827
<          (NULL);
---
>          (NULL
1827,1828c1827,1828
<          (NULL);
<       }
---
>          (NULL;
>       
1827,1828c1827,1828
<          (NULL);
<       }
---
>          (NULL
>       
1827c1827
<          (NULL);
---
>          (NULL;
1829c1829
<    }else
---
>    else
1827c1827
<          (NULL);
---
>          (NULL
1829c1829
<    }else
---
>    else
1827,1829c1827,1829
<          (NULL);
<       }
<    }else
---
>          (NULL;
>       
>    else
1827,1829c1827,1829
<          (NULL);
<       }
<    }else
---
>          (NULL
>       
>    else
1827c1827
<          (NULL);
---
>          (NULL)
1827,1828c1827,1828
<          (NULL);
<       }
---
>          (NULL)
>       
1827c1827
<          (NULL);
---
>          (NULL)
1829c1829
<    }else
---
>    else
1827,1829c1827,1829
<          (NULL);
<       }
<    }else
---
>          (NULL)
>       
>    else
1827c1827
<          (NULL);
---
>          (NULL)
1829c1829
<    }else
---
>    }
1827,1829c1827,1829
<          (NULL);
<       }
<    }else
---
>          (NULL)
>       
>    }
1827c1827
<          (NULL);
---
>          (NULL)
1829c1829
<    }else
---
>    
1827,1829c1827,1829
<          (NULL);
<       }
<    }else
---
>          (NULL)
>       
>    
1828c1828
<       }
---
>       
1828,1829c1828,1829
<       }
<    }else
---
>       
>    else
1828,1829c1828,1829
<       }
<    }else
---
>       
>    }
1828,1829c1828,1829
<       }
<    }else
---
>       
>    
1828c1828
<       }
---
>       
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (fp!=stdin && fp!=stdout){
1828,1830c1828,1830
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>       
>    else
>    (fp!=stdin && fp!=stdout){
1828,1830c1828,1830
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>       
>    }
>    (fp!=stdin && fp!=stdout){
1828,1830c1828,1830
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>       
>    
>    (fp!=stdin && fp!=stdout){
1829c1829
<    }else
---
>    else
1829c1829
<    }else
---
>    
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    else
>    (fp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    
>    (fp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    else
>    iffp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    
>    iffp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    else
>    fp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    
>    fp!=stdin && fp!=stdout){
1829c1829
<    }else
---
>    }
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    (fp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    iffp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    fp!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    if(!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    (!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    if!=stdin && fp!=stdout){
1829,1830c1829,1830
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>    }
>    !=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (fp!=stdin && fp!=stdout){
(90.3 %, 19903 bytes)
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (fp!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    fp!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    !=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (fpstdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    fpstdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    (stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    iffpstdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    ifstdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!= && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if!= && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    iffp && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(!=stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(stdin && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(!= && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if( && fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(!=stdin  fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(stdin  fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(!=  fp!=stdout){
1830c1830
<    if(fp!=stdin && fp!=stdout){
---
>    if(  fp!=stdout){
(90.3 %, 19899 bytes)
1830c1830
<    if(stdin && fp!=stdout){
---
>    if(  fp!=stdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if( && !=stdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if(  !=stdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if( && fpstdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if(  fpstdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if( && stdout){
1830c1830
<    if(stdin && fp!=stdout){
---
>    if(  stdout){
(90.3 %, 19892 bytes)
1830c1830
<    if(  fp!=stdout){
---
>    if(  stdout){
1830c1830
<    if(  fp!=stdout){
---
>    if(  !=){
1830c1830
<    if(  fp!=stdout){
---
>    if(  ){
1830c1830
<    if(  fp!=stdout){
---
>    if(  !=stdout{
1830c1830
<    if(  fp!=stdout){
---
>    if(  stdout{
1830c1830
<    if(  fp!=stdout){
---
>    if(  !={
1830c1830
<    if(  fp!=stdout){
---
>    if(  {
1830c1830
<    if(  fp!=stdout){
---
>    if(  fpstdout){
(90.3 %, 19888 bytes)
1830c1830
<    if(  stdout){
---
>    if(  {
1830c1830
<    if(  stdout){
---
>    if(  )
1830c1830
<    if(  stdout){
---
>    if(  
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  ){
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  {
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  )
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  
>       (fp);
1830c1830
<    if(  stdout){
---
>    if(  stdout{
1830c1830
<    if(  stdout){
---
>    if(  stdout
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout{
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout{
>       fclosefp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout
>       fclosefp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout{
>       fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout
>       fp);
1830c1830
<    if(  stdout){
---
>    if(  stdout)
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       (fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       fclosefp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       fp);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       fclose();
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       ();
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       fclose);
1830,1831c1830,1831
<    if(  stdout){
<       fclose(fp);
---
>    if(  stdout)
>       );
1831c1831
<       fclose(fp);
---
>       (fp);
1831c1831
<       fclose(fp);
---
>       fp);
1831c1831
<       fclose(fp);
---
>       ();
1831c1831
<       fclose(fp);
---
>       );
1831c1831
<       fclose(fp);
---
>       (fp;
1831c1831
<       fclose(fp);
---
>       fp;
(90.3 %, 19882 bytes)
1831c1831
<       (fp);
---
>       fp);
1831c1831
<       (fp);
---
>       );
1831c1831
<       (fp);
---
>       fp;
1831c1831
<       (fp);
---
>       ;
1831c1831
<       (fp);
---
>       fp)
(90.3 %, 19880 bytes)
1831,1832c1831,1832
<       fp;
<    }
---
>       ;
>    
1831,1832c1831,1832
<       fp;
<    }
---
>       
>    
1831c1831
<       fp;
---
>       ;
1833c1833
< }
---
> 
1831c1831
<       fp;
---
>       
1833c1833
< }
---
> 
1831,1833c1831,1833
<       fp;
<    }
< }
---
>       ;
>    
> 
1831,1833c1831,1833
<       fp;
<    }
< }
---
>       
>    
> 
1831c1831
<       fp;
---
>       fp
1831,1832c1831,1832
<       fp;
<    }
---
>       fp
>    
1831c1831
<       fp;
---
>       fp
1833c1833
< }
---
> 
1831,1833c1831,1833
<       fp;
<    }
< }
---
>       fp
>    
> 
1831c1831
<       fp;
---
>       fp
1838c1838
< static char *bzerrorstrings[] = {
---
>  char *bzerrorstrings[] = {
1831,1832c1831,1832
<       fp;
<    }
---
>       fp
>    
1838c1838
< static char *bzerrorstrings[] = {
---
>  char *bzerrorstrings[] = {
1831c1831
<       fp;
---
>       fp
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>  char *bzerrorstrings[] = {
1831,1833c1831,1832
<       fp;
<    }
< }
---
>       fp
>    
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>  char *bzerrorstrings[] = {
1832c1832
<    }
---
>    
1832,1833c1832,1833
<    }
< }
---
>    
> 
1832c1832
<    }
---
>    
1838c1838
< static char *bzerrorstrings[] = {
---
>  char *bzerrorstrings[] = {
1832,1833c1832
<    }
< }
---
>    
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>  char *bzerrorstrings[] = {
1832c1832
<    }
---
>    
1838c1838
< static char *bzerrorstrings[] = {
---
> static  *bzerrorstrings[] = {
1832,1833c1832
<    }
< }
---
>    
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
> static  *bzerrorstrings[] = {
1832c1832
<    }
---
>    
1838c1838
< static char *bzerrorstrings[] = {
---
>   *bzerrorstrings[] = {
1832,1833c1832
<    }
< }
---
>    
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>   *bzerrorstrings[] = {
1833c1833
< }
---
> 
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>  char *bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
> static  *bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>   *bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
> static char bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>  char bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
> static  bzerrorstrings[] = {
1833d1832
< }
1838c1837,1838
< static char *bzerrorstrings[] = {
---
> 
>   bzerrorstrings[] = {
1838c1838
< static char *bzerrorstrings[] = {
---
>  char *bzerrorstrings[] = {
1838c1838
< static char *bzerrorstrings[] = {
---
>   *bzerrorstrings[] = {
(90.3 %, 19874 bytes)
1838c1838
<  char *bzerrorstrings[] = {
---
>   *bzerrorstrings[] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   bzerrorstrings[] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   *[] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   [] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   *bzerrorstrings] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   bzerrorstrings] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   *] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>   ] = {
1838c1838
<  char *bzerrorstrings[] = {
---
>  char bzerrorstrings[] = {
(90.3 %, 19870 bytes)
1838c1838
<   *bzerrorstrings[] = {
---
>   bzerrorstrings[] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   [] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   bzerrorstrings] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   ] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   bzerrorstrings[ = {
1838c1838
<   *bzerrorstrings[] = {
---
>   [ = {
1838c1838
<   *bzerrorstrings[] = {
---
>   bzerrorstrings = {
1838c1838
<   *bzerrorstrings[] = {
---
>    = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *[] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *[ = {
1838c1838
<   *bzerrorstrings[] = {
---
>   * = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *[]  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *]  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *[  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings] = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings = {
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings]  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings  {
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings] = 
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings = 
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings]  
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings  
1838c1838
<   *bzerrorstrings[] = {
---
>   *bzerrorstrings[ = {
(90.3 %, 19868 bytes)
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings  
1838,1839c1838,1839
<   *bzerrorstrings = {
<        "OK"
---
>   *bzerrorstrings  {
>        
1838,1839c1838,1839
<   *bzerrorstrings = {
<        "OK"
---
>   *bzerrorstrings  
>        
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings  {
1840c1840
<       ,"SEQUENCE_ERROR"
---
>       "SEQUENCE_ERROR"
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings  
1840c1840
<       ,"SEQUENCE_ERROR"
---
>       "SEQUENCE_ERROR"
1838,1840c1838,1840
<   *bzerrorstrings = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>   *bzerrorstrings  {
>        
>       "SEQUENCE_ERROR"
1838,1840c1838,1840
<   *bzerrorstrings = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>   *bzerrorstrings  
>        
>       "SEQUENCE_ERROR"
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings = 
1838,1839c1838,1839
<   *bzerrorstrings = {
<        "OK"
---
>   *bzerrorstrings = 
>        
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings = 
1840c1840
<       ,"SEQUENCE_ERROR"
---
>       "SEQUENCE_ERROR"
1838,1840c1838,1840
<   *bzerrorstrings = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>   *bzerrorstrings = 
>        
>       "SEQUENCE_ERROR"
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings = 
1840c1840
<       ,"SEQUENCE_ERROR"
---
>       ,
1838,1840c1838,1840
<   *bzerrorstrings = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>   *bzerrorstrings = 
>        
>       ,
1838c1838
<   *bzerrorstrings = {
---
>   *bzerrorstrings = 
1840c1840
<       ,"SEQUENCE_ERROR"
---
>       
1838,1840c1838,1840
<   *bzerrorstrings = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>   *bzerrorstrings = 
>        
>       
1839c1839
<        "OK"
---
>        
1839,1840c1839,1840
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>        
>       "SEQUENCE_ERROR"
1839,1840c1839,1840
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>        
>       ,
1839,1840c1839,1840
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>        
>       
1839c1839
<        "OK"
---
>        
1841c1841
<       ,"PARAM_ERROR"
---
>       "PARAM_ERROR"
1839,1841c1839,1841
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>        
>       "SEQUENCE_ERROR"
>       "PARAM_ERROR"
(90.3 %, 19863 bytes)
1840,1841c1840,1841
<       "SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>       
>       "PARAM_ERROR"
1840,1841c1840,1841
<       "SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>       
>       ,
1840,1841c1840,1841
<       "SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>       
>       
1840c1840
<       "SEQUENCE_ERROR"
---
>       
1842c1842
<       ,"MEM_ERROR"
---
>       "MEM_ERROR"
1840,1842c1840,1842
<       "SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
>       
>       "PARAM_ERROR"
>       "MEM_ERROR"
(90.3 %, 19846 bytes)
1841,1842c1841,1842
<       "PARAM_ERROR"
<       ,"MEM_ERROR"
---
>       
>       "MEM_ERROR"
1841,1842c1841,1842
<       "PARAM_ERROR"
<       ,"MEM_ERROR"
---
>       
>       ,
1841,1842c1841,1842
<       "PARAM_ERROR"
<       ,"MEM_ERROR"
---
>       
>       
1841c1841
<       "PARAM_ERROR"
---
>       
1843c1843
<       ,"DATA_ERROR"
---
>       "DATA_ERROR"
1841,1843c1841,1843
<       "PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
>       
>       "MEM_ERROR"
>       "DATA_ERROR"
(90.3 %, 19832 bytes)
1842,1843c1842,1843
<       "MEM_ERROR"
<       ,"DATA_ERROR"
---
>       
>       "DATA_ERROR"
1842,1843c1842,1843
<       "MEM_ERROR"
<       ,"DATA_ERROR"
---
>       
>       ,
1842,1843c1842,1843
<       "MEM_ERROR"
<       ,"DATA_ERROR"
---
>       
>       
1842c1842
<       "MEM_ERROR"
---
>       
1844c1844
<       ,"DATA_ERROR_MAGIC"
---
>       "DATA_ERROR_MAGIC"
1842,1844c1842,1844
<       "MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
>       
>       "DATA_ERROR"
>       "DATA_ERROR_MAGIC"
1842,1844c1842,1844
<       "MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
>       
>       ,
>       "DATA_ERROR_MAGIC"
(90.3 %, 19820 bytes)
1843,1844c1843,1844
<       "DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
>       
>       "DATA_ERROR_MAGIC"
1843,1844c1843,1844
<       "DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
>       
>       ,
1843,1844c1843,1844
<       "DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
>       
>       
1843c1843
<       "DATA_ERROR"
---
>       
1845c1845
<       ,"IO_ERROR"
---
>       "IO_ERROR"
1843,1845c1843,1845
<       "DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
>       
>       "DATA_ERROR_MAGIC"
>       "IO_ERROR"
(90.3 %, 19807 bytes)
1844,1845c1844,1845
<       "DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
>       
>       "IO_ERROR"
1844,1845c1844,1845
<       "DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
>       
>       ,
1844,1845c1844,1845
<       "DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
>       
>       
1844c1844
<       "DATA_ERROR_MAGIC"
---
>       
1846c1846
<       ,"UNEXPECTED_EOF"
---
>       "UNEXPECTED_EOF"
1844,1846c1844,1846
<       "DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>       
>       "IO_ERROR"
>       "UNEXPECTED_EOF"
(90.3 %, 19788 bytes)
1845,1846c1845,1846
<       "IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>       
>       "UNEXPECTED_EOF"
1845,1846c1845,1846
<       "IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>       
>       ,
1845,1846c1845,1846
<       "IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>       
>       
1845c1845
<       "IO_ERROR"
---
>       
1847c1847
<       ,"OUTBUFF_FULL"
---
>       "OUTBUFF_FULL"
1845,1847c1845,1847
<       "IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       
>       "UNEXPECTED_EOF"
>       "OUTBUFF_FULL"
(90.3 %, 19777 bytes)
1846,1847c1846,1847
<       "UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       
>       "OUTBUFF_FULL"
1846,1847c1846,1847
<       "UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       
>       ,
1846,1847c1846,1847
<       "UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       
>       
1846c1846
<       "UNEXPECTED_EOF"
---
>       
1848c1848
<       ,"CONFIG_ERROR"
---
>       "CONFIG_ERROR"
1846,1848c1846,1848
<       "UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       
>       "OUTBUFF_FULL"
>       "CONFIG_ERROR"
(90.4 %, 19760 bytes)
1847,1848c1847,1848
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       
>       "CONFIG_ERROR"
1847,1848c1847,1848
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       
>       ,
1847,1848c1847,1848
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       
>       
1847c1847
<       "OUTBUFF_FULL"
---
>       
1849c1849
<       ,"???"   
---
>       "???"   
1847,1849c1847,1849
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
---
>       
>       "CONFIG_ERROR"
>       "???"   
(90.4 %, 19745 bytes)
1848,1849c1848,1849
<       "CONFIG_ERROR"
<       ,"???"   
---
>       
>       "???"   
1848,1849c1848,1849
<       "CONFIG_ERROR"
<       ,"???"   
---
>       
>       ,   
1848,1849c1848,1849
<       "CONFIG_ERROR"
<       ,"???"   
---
>       
>          
1848,1849c1848
<       "CONFIG_ERROR"
<       ,"???"   
---
>       
1850a1850
>       "???"   
1848,1850c1848,1850
<       "CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
---
>       
>       "???"   
>       "???"   
(90.4 %, 19730 bytes)
1848a1849
>          
1850d1850
<       ,"???"   
1849,1850c1849,1850
<       "???"   
<       ,"???"   
---
>          
>       ,   
1849,1850c1849,1850
<       "???"   
<       ,"???"   
---
>          
>          
1849,1850c1849
<       "???"   
<       ,"???"   
---
>          
1851a1851
>       "???"   
1848a1849,1850
>          
>       "???"   
1850,1851d1851
<       ,"???"   
<       ,"???"   
(90.4 %, 19724 bytes)
1849a1850
>          
1851d1851
<       ,"???"   
1850,1851c1850,1851
<       "???"   
<       ,"???"   
---
>          
>       ,   
1850,1851c1850,1851
<       "???"   
<       ,"???"   
---
>          
>          
1850,1851c1850
<       "???"   
<       ,"???"   
---
>          
1852a1852
>       "???"   
1849a1850,1851
>          
>       "???"   
1851,1852d1852
<       ,"???"   
<       ,"???"   
(90.4 %, 19718 bytes)
1850a1851
>          
1852d1852
<       ,"???"   
1851,1852c1851,1852
<       "???"   
<       ,"???"   
---
>          
>       ,   
1851,1852c1851,1852
<       "???"   
<       ,"???"   
---
>          
>          
1851,1852c1851
<       "???"   
<       ,"???"   
---
>          
1853a1853
>       "???"   
1850a1851,1852
>          
>       "???"   
1852,1853d1853
<       ,"???"   
<       ,"???"   
(90.4 %, 19712 bytes)
1851a1852
>          
1853d1853
<       ,"???"   
1852,1853c1852,1853
<       "???"   
<       ,"???"   
---
>          
>       ,   
1852,1853c1852,1853
<       "???"   
<       ,"???"   
---
>          
>          
1852,1853c1852
<       "???"   
<       ,"???"   
---
>          
1854a1854
>       "???"   
1851a1852,1853
>          
>       "???"   
1853,1854d1854
<       ,"???"   
<       ,"???"   
(90.4 %, 19706 bytes)
1852a1853
>          
1854d1854
<       ,"???"   
1853,1854c1853,1854
<       "???"   
<       ,"???"   
---
>          
>       ,   
1853,1854c1853,1854
<       "???"   
<       ,"???"   
---
>          
>          
1853c1853
<       "???"   
---
>          
1855c1855
< };
---
> ;
1852a1853
>          
1854,1855c1855
<       ,"???"   
< };
---
> ;
1853,1855c1853,1855
<       "???"   
<       ,"???"   
< };
---
>          
>       ,   
> ;
1853,1855c1853,1855
<       "???"   
<       ,"???"   
< };
---
>          
>          
> ;
1854c1854
<       ,"???"   
---
>       "???"   
(90.4 %, 19700 bytes)
1854,1855c1854,1855
<       "???"   
< };
---
>          
> ;
1854,1855c1854,1855
<       "???"   
< };
---
>          
> }
1854,1855c1854,1855
<       "???"   
< };
---
>          
> 
1854c1854
<       "???"   
---
>          
1856c1856
< static char *bzerrorstrings_0 = "OK";
---
>  char *bzerrorstrings_0 = "OK";
1854,1856c1854,1856
<       "???"   
< };
< static char *bzerrorstrings_0 = "OK";
---
>          
> ;
>  char *bzerrorstrings_0 = "OK";
1854,1856c1854,1856
<       "???"   
< };
< static char *bzerrorstrings_0 = "OK";
---
>          
> }
>  char *bzerrorstrings_0 = "OK";
1854,1856c1854,1856
<       "???"   
< };
< static char *bzerrorstrings_0 = "OK";
---
>          
> 
>  char *bzerrorstrings_0 = "OK";
1855c1855
< };
---
> ;
1855c1855
< };
---
> 
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> ;
>  char *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> 
>  char *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> ;
> static  *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> 
> static  *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> ;
>   *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> 
>   *bzerrorstrings_0 = "OK";
1855c1855
< };
---
> }
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
>  char *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
> static  *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
>   *bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
> static char bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
>  char bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
> static  bzerrorstrings_0 = "OK";
1855,1856c1855,1856
< };
< static char *bzerrorstrings_0 = "OK";
---
> }
>   bzerrorstrings_0 = "OK";
1856c1856
< static char *bzerrorstrings_0 = "OK";
---
>  char *bzerrorstrings_0 = "OK";
1856c1856
< static char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0 = "OK";
(90.4 %, 19694 bytes)
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0 = "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   * = "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>    = "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0  "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>   *  "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>     "OK";
1856c1856
<  char *bzerrorstrings_0 = "OK";
---
>  char bzerrorstrings_0 = "OK";
(90.4 %, 19690 bytes)
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>    = "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>     "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>    = ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>     ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   * = "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   *  "OK";
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   * = ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   *  ;
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   * = "OK"
1856c1856
<   *bzerrorstrings_0 = "OK";
---
>   *  "OK"
(90.4 %, 19684 bytes)
1856c1856
<   bzerrorstrings_0  ;
---
>     ;
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>   * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>     
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>   * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const  * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>   * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char  BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char  BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const   BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1856c1856
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>    BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>   * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char  BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>    BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char *  (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>   *  (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>  char   (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
>     (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const  * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const   BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const  *  (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const    (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const  * BZ_APIBZ2_bzerror BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const   BZ_APIBZ2_bzerror BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const  *  BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const    BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char  BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char   (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char  BZ_APIBZ2_bzerror BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char   BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char  BZ_APIBZ2_bzerror ( *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char   ( *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char  BZ_APIBZ2_bzerror  *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char    *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  (BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  ( *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *   *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  (BZFILE b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  BZFILE b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *  ( b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char *   b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror  *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror  b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror  *, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE , int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror  , int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( *b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( *, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( , int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( *b int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( b int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( * int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (  int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE b, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE , int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE b int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE  int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE b,  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE ,  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE b  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE   *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *, int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE * int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *,  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *, int errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE * int errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *,  errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *  errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b int *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b int errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b  errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b int *)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b  *)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b int )
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b  )
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  *errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  *)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  )
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  *errnum
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  errnum
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  *
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b,  
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int errnum)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int )
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int errnum
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int 
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int errnum)
> 
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int )
> 
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int errnum
> 
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int 
> 
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *)
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *)
> 
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *
> 
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *)
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err = ((bzFile *)b)->lastErr;
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err = ((bzFile *)b)->lastErr;
1859,1861c1859,1861
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *)
> 
>     err = ((bzFile *)b)->lastErr;
1859,1861c1859,1861
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *
> 
>     err = ((bzFile *)b)->lastErr;
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
1859,1860c1859,1860
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
> 
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err = ((bzFile *)b)->lastErr;
1859,1861c1859,1861
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
> 
>     err = ((bzFile *)b)->lastErr;
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int  = ((bzFile *)b)->lastErr;
1859,1861c1859,1861
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
> 
>    int  = ((bzFile *)b)->lastErr;
1859c1859
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>      = ((bzFile *)b)->lastErr;
1859,1861c1859,1861
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum
> 
>      = ((bzFile *)b)->lastErr;
1860c1860
< {
---
> 
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>     err = ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>    int  = ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>      = ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>    int err  ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>     err  ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>    int   ((bzFile *)b)->lastErr;
1860,1861c1860,1861
< {
<    int err = ((bzFile *)b)->lastErr;
---
> 
>       ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err = ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>      = ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err  ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>       ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>      = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>     err  (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>       (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int  = ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int   ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int  = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int   (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int  = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int   (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int  = bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int   bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  ((bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  (( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  ( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err  ( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err   *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err =  *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = bzFile )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err =  )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( *b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ( b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( *)b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( *b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( *))->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( ))->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( *)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (( )->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile )b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile ))->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile )->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile )b->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile b->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile )->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile ->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *b)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *b->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *b)lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *blastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *))->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *))lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *))->;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)->;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *));
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *);
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b->lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)blastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b->;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b->lastErr
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)blastErr
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b->
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)lastErr;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b);
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)lastErr
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)lastErr;
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b);
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)lastErr
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)->;
1861c1861
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b)->
(90.4 %, 19675 bytes)
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    iferr>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    err>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    if(>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    (>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    if>0) err = 0;
1861c1861
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)b)
1863c1863
<    if(err>0) err = 0;
---
>    >0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    (err>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    err>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    (>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    >0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    (err0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    err0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    (0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    iferr>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    iferr0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    iferr>) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if>) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    iferr) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(>0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(>) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if() err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(>0 err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(0 err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(> err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if( err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(err0) err = 0;
1863c1863
<    if(err>0) err = 0;
---
>    if(err) err = 0;
(90.4 %, 19671 bytes)
1863c1863
<    if(0) err = 0;
---
>    if( err = 0;
1863c1863
<    if(0) err = 0;
---
>    if()  = 0;
1863c1863
<    if(0) err = 0;
---
>    if(  = 0;
1863c1863
<    if(0) err = 0;
---
>    if() err  0;
1863c1863
<    if(0) err = 0;
---
>    if( err  0;
1863c1863
<    if(0) err = 0;
---
>    if()   0;
1863c1863
<    if(0) err = 0;
---
>    if(   0;
1863c1863
<    if(0) err = 0;
---
>    if(0 err = 0;
1863c1863
<    if(0) err = 0;
---
>    if(0  = 0;
1863c1863
<    if(0) err = 0;
---
>    if(0 err  0;
1863c1863
<    if(0) err = 0;
---
>    if(0   0;
1863c1863
<    if(0) err = 0;
---
>    if(0 err = ;
1863c1863
<    if(0) err = 0;
---
>    if(0  = ;
1863c1863
<    if(0) err = 0;
---
>    if(0 err  ;
1863c1863
<    if(0) err = 0;
---
>    if(0   ;
1863c1863
<    if(0) err = 0;
---
>    if(0)  = 0;
1863c1863
<    if(0) err = 0;
---
>    if(0)   0;
1863c1863
<    if(0) err = 0;
---
>    if(0)  = ;
1863c1863
<    if(0) err = 0;
---
>    if(0)   ;
(90.4 %, 19667 bytes)
1863c1863
<    if(0)   0;
---
>    if(0)   
1863,1864c1863,1864
<    if(0)   0;
<    *errnum = err;
---
>    if(0)   ;
>    errnum = err;
(90.4 %, 19665 bytes)
1864c1864
<    *errnum = err;
---
>     = err;
1864c1864
<    *errnum = err;
---
>    errnum  err;
1864c1864
<    *errnum = err;
---
>      err;
1864c1864
<    *errnum = err;
---
>    errnum = ;
1864c1864
<    *errnum = err;
---
>     = ;
1864c1864
<    *errnum = err;
---
>    errnum  ;
(90.4 %, 19657 bytes)
1864,1865c1864,1865
<      err;
<    return bzerrorstrings_0;
---
>      
>     bzerrorstrings_0;
1864,1865c1864,1865
<      err;
<    return bzerrorstrings_0;
---
>      ;
>    return ;
1864,1865c1864,1865
<      err;
<    return bzerrorstrings_0;
---
>      
>    return ;
(90.4 %, 19647 bytes)
1865,1866c1865,1866
<     bzerrorstrings_0;
< }
---
>     
> 
1865c1865
<     bzerrorstrings_0;
---
>     ;
1895c1895
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
1865c1865
<     bzerrorstrings_0;
---
>     
1895c1895
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
1865,1866c1865
<     bzerrorstrings_0;
< }
---
>     ;
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> define BZ_UNIX      1
1865,1866c1865
<     bzerrorstrings_0;
< }
---
>     
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> define BZ_UNIX      1
1865c1865
<     bzerrorstrings_0;
---
>     bzerrorstrings_0
1865,1866c1865,1866
<     bzerrorstrings_0;
< }
---
>     bzerrorstrings_0
> 
1865c1865
<     bzerrorstrings_0;
---
>     bzerrorstrings_0
1895c1895
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
1865,1866c1865
<     bzerrorstrings_0;
< }
---
>     bzerrorstrings_0
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> define BZ_UNIX      1
1865c1865
<     bzerrorstrings_0;
---
>     bzerrorstrings_0
1895c1895
< #define BZ_UNIX      1
---
> # BZ_UNIX      1
1865,1866c1865
<     bzerrorstrings_0;
< }
---
>     bzerrorstrings_0
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> # BZ_UNIX      1
1865c1865
<     bzerrorstrings_0;
---
>     bzerrorstrings_0
1895c1895
< #define BZ_UNIX      1
---
>  BZ_UNIX      1
1865,1866c1865
<     bzerrorstrings_0;
< }
---
>     bzerrorstrings_0
1895c1894,1895
< #define BZ_UNIX      1
---
> 
>  BZ_UNIX      1
1866c1866
< }
---
> 
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> define BZ_UNIX      1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> # BZ_UNIX      1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
>  BZ_UNIX      1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> #define       1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> define       1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
> #       1
1866d1865
< }
1895c1894,1895
< #define BZ_UNIX      1
---
> 
>        1
1895c1895
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
1895c1895
< #define BZ_UNIX      1
---
>  BZ_UNIX      1
1895c1895
< #define BZ_UNIX      1
---
> define       1
1895c1895
< #define BZ_UNIX      1
---
>        1
1895c1895
< #define BZ_UNIX      1
---
> define BZ_UNIX      
1895c1895
< #define BZ_UNIX      1
---
>  BZ_UNIX      
1895c1895
< #define BZ_UNIX      1
---
> define       
1895c1895
< #define BZ_UNIX      1
---
>        
1895c1895
< #define BZ_UNIX      1
---
> # BZ_UNIX      1
1895c1895
< #define BZ_UNIX      1
---
> #       1
(90.4 %, 19632 bytes)
1898c1898
< #define BZ_LCCWIN32  0
---
>    
1898c1898
< #define BZ_LCCWIN32  0
---
> # BZ_LCCWIN32  0
1898c1898
< #define BZ_LCCWIN32  0
---
> #   0
(90.4 %, 19613 bytes)
1904c1904
< #include <signal.h>
---
>  .h>
1904c1904
< #include <signal.h>
---
> # <signal.h>
1904c1904
< #include <signal.h>
---
> # signal.h>
1904c1904
< #include <signal.h>
---
> # <.h>
1904c1904
< #include <signal.h>
---
> # .h>
1904c1904
< #include <signal.h>
---
> # <signalh>
1904c1904
< #include <signal.h>
---
> # signalh>
1904c1904
< #include <signal.h>
---
> # <h>
1904c1904
< #include <signal.h>
---
> # h>
1904c1904
< #include <signal.h>
---
> #include signal.h>
1904c1904
< #include <signal.h>
---
> #include .h>
1904c1904
< #include <signal.h>
---
> #include signalh>
1904c1904
< #include <signal.h>
---
> #include h>
1904c1904
< #include <signal.h>
---
> #include signal.>
1904c1904
< #include <signal.h>
---
> #include .>
1904c1904
< #include <signal.h>
---
> #include signal>
1904c1904
< #include <signal.h>
---
> #include >
1904c1904
< #include <signal.h>
---
> #include <.h>
1904c1904
< #include <signal.h>
---
> #include <h>
1904c1904
< #include <signal.h>
---
> #include <.>
1904c1904
< #include <signal.h>
---
> #include <>
1904c1904
< #include <signal.h>
---
> #include <.h
1904c1904
< #include <signal.h>
---
> #include <h
1904c1904
< #include <signal.h>
---
> #include <.
1904c1904
< #include <signal.h>
---
> #include <
1904c1904
< #include <signal.h>
---
> #include <signalh>
1904c1904
< #include <signal.h>
---
> #include <signal>
1904c1904
< #include <signal.h>
---
> #include <signalh
1904c1904
< #include <signal.h>
---
> #include <signal
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh>
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal>
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal
> include <errno.h>
1904c1904
< #include <signal.h>
---
> #include <signal.>
1904c1904
< #include <signal.h>
---
> #include <signal.
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> # <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> # <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
>  <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
>  <errno.h>
1904c1904
< #include <signal.h>
---
> #include <signal.h
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  <errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> #include errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # errno.h>
1904,1905c1904,1905
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  errno.h>
1905c1905
< #include <errno.h>
---
> include <errno.h>
1905c1905
< #include <errno.h>
---
>  <errno.h>
1905c1905
< #include <errno.h>
---
> include errno.h>
1905c1905
< #include <errno.h>
---
>  errno.h>
1905c1905
< #include <errno.h>
---
> include <.h>
1905c1905
< #include <errno.h>
---
>  <.h>
1905c1905
< #include <errno.h>
---
> include .h>
1905c1905
< #include <errno.h>
---
>  .h>
1905c1905
< #include <errno.h>
---
> # <errno.h>
1905c1905
< #include <errno.h>
---
> # errno.h>
1905c1905
< #include <errno.h>
---
> # <.h>
1905c1905
< #include <errno.h>
---
> # .h>
1905c1905
< #include <errno.h>
---
> # <errnoh>
1905c1905
< #include <errno.h>
---
> # errnoh>
1905c1905
< #include <errno.h>
---
> # <h>
1905c1905
< #include <errno.h>
---
> # h>
1905c1905
< #include <errno.h>
---
> #include errno.h>
1905c1905
< #include <errno.h>
---
> #include .h>
1905c1905
< #include <errno.h>
---
> #include errnoh>
1905c1905
< #include <errno.h>
---
> #include h>
1905c1905
< #include <errno.h>
---
> #include errno.>
1905c1905
< #include <errno.h>
---
> #include .>
1905c1905
< #include <errno.h>
---
> #include errno>
1905c1905
< #include <errno.h>
---
> #include >
1905c1905
< #include <errno.h>
---
> #include <.h>
1905c1905
< #include <errno.h>
---
> #include <h>
1905c1905
< #include <errno.h>
---
> #include <.>
1905c1905
< #include <errno.h>
---
> #include <>
1905c1905
< #include <errno.h>
---
> #include <.h
1905c1905
< #include <errno.h>
---
> #include <h
1905c1905
< #include <errno.h>
---
> #include <.
1905c1905
< #include <errno.h>
---
> #include <
1905c1905
< #include <errno.h>
---
> #include <errnoh>
1905c1905
< #include <errno.h>
---
> #include <errno>
1905c1905
< #include <errno.h>
---
> #include <errnoh
1905c1905
< #include <errno.h>
---
> #include <errno
1905c1905
< #include <errno.h>
---
> #include <errnoh>
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno>
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errnoh
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.>
1905c1905
< #include <errno.h>
---
> #include <errno.
1905c1905
< #include <errno.h>
---
> #include <errno.>
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.>
1907c1907
< #define ERROR_IF_EOFi       
---
> # ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.
1907c1907
< #define ERROR_IF_EOFi       
---
> # ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.>
1907c1907
< #define ERROR_IF_EOFi       
---
>  ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.
1907c1907
< #define ERROR_IF_EOFi       
---
>  ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.h
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
> # ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
>  ERROR_IF_EOFi       
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
> #define        
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
> define        
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
> #        
1905c1905
< #include <errno.h>
---
> #include <errno.h
1907c1907
< #define ERROR_IF_EOFi       
---
>         
1907c1907
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
1907c1907
< #define ERROR_IF_EOFi       
---
>  ERROR_IF_EOFi       
1907c1907
< #define ERROR_IF_EOFi       
---
> define        
1907c1907
< #define ERROR_IF_EOFi       
---
>         
1907,1908c1907,1908
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
> define ERROR_IF_EOFi       
> define ERROR_IF_NOT_ZEROi  
1907,1908c1907,1908
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
>  ERROR_IF_EOFi       
> define ERROR_IF_NOT_ZEROi  
1907,1908c1907,1908
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
> define        
> define ERROR_IF_NOT_ZEROi  
1907,1908c1907,1908
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
>         
> define ERROR_IF_NOT_ZEROi  
1907c1907
< #define ERROR_IF_EOFi       
---
> # ERROR_IF_EOFi       
1907c1907
< #define ERROR_IF_EOFi       
---
> #        
(90.4 %, 19593 bytes)
1908c1908
< #define ERROR_IF_NOT_ZEROi  
---
>    
1908,1909c1908,1909
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> define ERROR_IF_NOT_ZEROi  
> define ERROR_IF_MINUS_ONEi 
1908,1909c1908,1909
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
>  ERROR_IF_NOT_ZEROi  
> define ERROR_IF_MINUS_ONEi 
1908,1909c1908,1909
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> define   
> define ERROR_IF_MINUS_ONEi 
1908,1909c1908,1909
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
>    
> define ERROR_IF_MINUS_ONEi 
1908c1908
< #define ERROR_IF_NOT_ZEROi  
---
> # ERROR_IF_NOT_ZEROi  
1908c1908
< #define ERROR_IF_NOT_ZEROi  
---
> #   
(90.5 %, 19568 bytes)
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
>   
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
> define ERROR_IF_MINUS_ONEi 
1915c1915
< #   include <fcntl.h>
---
>    include <fcntl.h>
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
>  ERROR_IF_MINUS_ONEi 
1915c1915
< #   include <fcntl.h>
---
>    include <fcntl.h>
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
> define  
1915c1915
< #   include <fcntl.h>
---
>    include <fcntl.h>
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
>   
1915c1915
< #   include <fcntl.h>
---
>    include <fcntl.h>
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
> # ERROR_IF_MINUS_ONEi 
1909c1909
< #define ERROR_IF_MINUS_ONEi 
---
> #  
(90.5 %, 19542 bytes)
1915c1915
< #   include <fcntl.h>
---
>     fcntl.h>
1915c1915
< #   include <fcntl.h>
---
>    include <.h>
1915c1915
< #   include <fcntl.h>
---
>     <.h>
1915c1915
< #   include <fcntl.h>
---
>    include .h>
1915c1915
< #   include <fcntl.h>
---
>     .h>
1915c1915
< #   include <fcntl.h>
---
> #    <fcntl.h>
1915c1915
< #   include <fcntl.h>
---
> #    fcntl.h>
1915c1915
< #   include <fcntl.h>
---
> #    <.h>
1915c1915
< #   include <fcntl.h>
---
> #    .h>
1915c1915
< #   include <fcntl.h>
---
> #    <fcntlh>
1915c1915
< #   include <fcntl.h>
---
> #    fcntlh>
1915c1915
< #   include <fcntl.h>
---
> #    <h>
1915c1915
< #   include <fcntl.h>
---
> #    h>
1915c1915
< #   include <fcntl.h>
---
> #   include fcntl.h>
1915c1915
< #   include <fcntl.h>
---
> #   include .h>
1915c1915
< #   include <fcntl.h>
---
> #   include fcntlh>
1915c1915
< #   include <fcntl.h>
---
> #   include h>
1915c1915
< #   include <fcntl.h>
---
> #   include fcntl.>
1915c1915
< #   include <fcntl.h>
---
> #   include .>
1915c1915
< #   include <fcntl.h>
---
> #   include fcntl>
1915c1915
< #   include <fcntl.h>
---
> #   include >
1915c1915
< #   include <fcntl.h>
---
> #   include <.h>
1915c1915
< #   include <fcntl.h>
---
> #   include <h>
1915c1915
< #   include <fcntl.h>
---
> #   include <.>
1915c1915
< #   include <fcntl.h>
---
> #   include <>
1915c1915
< #   include <fcntl.h>
---
> #   include <.h
1915c1915
< #   include <fcntl.h>
---
> #   include <h
1915c1915
< #   include <fcntl.h>
---
> #   include <.
1915c1915
< #   include <fcntl.h>
---
> #   include <
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntlh>
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntl>
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntlh
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntl
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntlh>
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl>
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntlh
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl
>    include <utime.h>
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntl.>
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntl.
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.>
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.>
> #    <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.
> #    <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.>
>     <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.
>     <utime.h>
1915c1915
< #   include <fcntl.h>
---
> #   include <fcntl.h
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
>    include <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
> #    <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
>     <utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
> #   include utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
>    include utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
> #    utime.h>
1915,1916c1915,1916
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   include <fcntl.h
>     utime.h>
1916c1916
< #   include <utime.h>
---
>    include <utime.h>
1916c1916
< #   include <utime.h>
---
>     <utime.h>
1916c1916
< #   include <utime.h>
---
>    include utime.h>
1916c1916
< #   include <utime.h>
---
>     utime.h>
1916c1916
< #   include <utime.h>
---
>    include <.h>
1916c1916
< #   include <utime.h>
---
>     <.h>
1916c1916
< #   include <utime.h>
---
>    include .h>
1916c1916
< #   include <utime.h>
---
>     .h>
1916c1916
< #   include <utime.h>
---
> #    <utime.h>
1916c1916
< #   include <utime.h>
---
> #    utime.h>
1916c1916
< #   include <utime.h>
---
> #    <.h>
1916c1916
< #   include <utime.h>
---
> #    .h>
1916c1916
< #   include <utime.h>
---
> #    <utimeh>
1916c1916
< #   include <utime.h>
---
> #    utimeh>
1916c1916
< #   include <utime.h>
---
> #    <h>
1916c1916
< #   include <utime.h>
---
> #    h>
1916c1916
< #   include <utime.h>
---
> #   include utime.h>
1916c1916
< #   include <utime.h>
---
> #   include .h>
1916c1916
< #   include <utime.h>
---
> #   include utimeh>
1916c1916
< #   include <utime.h>
---
> #   include h>
1916c1916
< #   include <utime.h>
---
> #   include utime.>
1916c1916
< #   include <utime.h>
---
> #   include .>
1916c1916
< #   include <utime.h>
---
> #   include utime>
1916c1916
< #   include <utime.h>
---
> #   include >
1916c1916
< #   include <utime.h>
---
> #   include <.h>
1916c1916
< #   include <utime.h>
---
> #   include <h>
1916c1916
< #   include <utime.h>
---
> #   include <.>
1916c1916
< #   include <utime.h>
---
> #   include <>
1916c1916
< #   include <utime.h>
---
> #   include <.h
1916c1916
< #   include <utime.h>
---
> #   include <h
1916c1916
< #   include <utime.h>
---
> #   include <.
1916c1916
< #   include <utime.h>
---
> #   include <
1916c1916
< #   include <utime.h>
---
> #   include <utimeh>
1916c1916
< #   include <utime.h>
---
> #   include <utime>
1916c1916
< #   include <utime.h>
---
> #   include <utimeh
1916c1916
< #   include <utime.h>
---
> #   include <utime
1916c1916
< #   include <utime.h>
---
> #   include <utimeh>
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime>
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utimeh
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.>
1916c1916
< #   include <utime.h>
---
> #   include <utime.
1916c1916
< #   include <utime.h>
---
> #   include <utime.>
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.>
1918c1918
< #   define PATH_SEP    '/'
---
> #    PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.
1918c1918
< #   define PATH_SEP    '/'
---
> #    PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.>
1918c1918
< #   define PATH_SEP    '/'
---
>     PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.
1918c1918
< #   define PATH_SEP    '/'
---
>     PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
> #    PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
>     PATH_SEP    '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
> #   define     '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
>    define     '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
> #        '/'
1916c1916
< #   include <utime.h>
---
> #   include <utime.h
1918c1918
< #   define PATH_SEP    '/'
---
>         '/'
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    '/'
1918c1918
< #   define PATH_SEP    '/'
---
>     PATH_SEP    '/'
1918c1918
< #   define PATH_SEP    '/'
---
>    define     '/'
1918c1918
< #   define PATH_SEP    '/'
---
>         '/'
1918c1918
< #   define PATH_SEP    '/'
---
>    define PATH_SEP    
1918c1918
< #   define PATH_SEP    '/'
---
>     PATH_SEP    
1918c1918
< #   define PATH_SEP    '/'
---
>    define     
1918c1918
< #   define PATH_SEP    '/'
---
>         
1918c1918
< #   define PATH_SEP    '/'
---
> #    PATH_SEP    '/'
1918c1918
< #   define PATH_SEP    '/'
---
> #        '/'
1918c1918
< #   define PATH_SEP    '/'
---
> #    PATH_SEP    
1918c1918
< #   define PATH_SEP    '/'
---
> #        
(90.5 %, 19524 bytes)
1919c1919
< #   define MY_LSTAT    lstat
---
>         
1919c1919
< #   define MY_LSTAT    lstat
---
> #    MY_LSTAT    lstat
1919c1919
< #   define MY_LSTAT    lstat
---
> #        lstat
1919c1919
< #   define MY_LSTAT    lstat
---
> #    MY_LSTAT    
1919c1919
< #   define MY_LSTAT    lstat
---
> #        
(90.5 %, 19504 bytes)
1920c1920
< #   define MY_STAT     stat
---
>          
1920c1920
< #   define MY_STAT     stat
---
> #    MY_STAT     stat
1920c1920
< #   define MY_STAT     stat
---
> #         stat
1920c1920
< #   define MY_STAT     stat
---
> #    MY_STAT     
1920c1920
< #   define MY_STAT     stat
---
> #         
(90.5 %, 19486 bytes)
1921c1921
< #   define MY_S_ISREG  S_ISREG
---
>       
1921c1921
< #   define MY_S_ISREG  S_ISREG
---
> #    MY_S_ISREG  S_ISREG
1921c1921
< #   define MY_S_ISREG  S_ISREG
---
> #      S_ISREG
1921c1921
< #   define MY_S_ISREG  S_ISREG
---
> #    MY_S_ISREG  
1921c1921
< #   define MY_S_ISREG  S_ISREG
---
> #      
(90.5 %, 19462 bytes)
1922c1922
< #   define MY_S_ISDIR  S_ISDIR
---
>       
1922c1922
< #   define MY_S_ISDIR  S_ISDIR
---
> #    MY_S_ISDIR  S_ISDIR
1922c1922
< #   define MY_S_ISDIR  S_ISDIR
---
> #      S_ISDIR
1922c1922
< #   define MY_S_ISDIR  S_ISDIR
---
> #    MY_S_ISDIR  
1922c1922
< #   define MY_S_ISDIR  S_ISDIR
---
> #      
(90.5 %, 19438 bytes)
1924c1924
< #   define APPEND_FILESPECroot, name \
---
>      name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    APPEND_FILESPECroot, name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    , name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    APPEND_FILESPECroot name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #     name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    APPEND_FILESPECroot,  \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    ,  \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #    APPEND_FILESPECroot  \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #      \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #   define , name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #   define  name \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #   define ,  \
1924c1924
< #   define APPEND_FILESPECroot, name \
---
> #   define   \
(90.5 %, 19418 bytes)
1924c1924
< #   define  name \
---
> #   define   
1924,1925c1924,1925
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       =snocStringroot, name
1924,1925c1924,1925
< #   define  name \
<       root=snocStringroot, name
---
> #   define   
>       =snocStringroot, name
1924,1925c1924,1925
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       rootsnocStringroot, name
1924,1925c1924,1925
< #   define  name \
<       root=snocStringroot, name
---
> #   define   
>       rootsnocStringroot, name
1924,1925c1924,1925
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       snocStringroot, name
(90.5 %, 19413 bytes)
1924,1925c1924,1925
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       rootsnocStringroot, 
1924,1925c1924,1925
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       , 
1924,1925c1924,1925
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       rootsnocStringroot 
1924,1925c1924,1925
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>        
1925c1925
<       rootsnocStringroot, name
---
>       , name
1925c1925
<       rootsnocStringroot, name
---
>        name
1925c1925
<       rootsnocStringroot, name
---
>       , 
1925c1925
<       rootsnocStringroot, name
---
>        
1925c1925
<       rootsnocStringroot, name
---
>       , name
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1925c1925
<       rootsnocStringroot, name
---
>        name
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1925c1925
<       rootsnocStringroot, name
---
>       , 
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1925c1925
<       rootsnocStringroot, name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1925c1925
<       rootsnocStringroot, name
---
>       rootsnocStringroot name
(90.5 %, 19394 bytes)
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    APPEND_FLAGroot, name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
>     APPEND_FLAGroot, name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #   define , name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define , name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    , name \
1925c1925
<        name
---
>        
1927c1927
< #   define APPEND_FLAGroot, name \
---
>     , name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot, name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>     APPEND_FLAGroot, name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define , name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>     , name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define APPEND_FLAGroot name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>     APPEND_FLAGroot name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>    define  name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
>      name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    APPEND_FLAGroot, name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    , name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    APPEND_FLAGroot name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #     name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    APPEND_FLAGroot,  \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    ,  \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #    APPEND_FLAGroot  \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #      \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #   define , name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #   define  name \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #   define ,  \
1927c1927
< #   define APPEND_FLAGroot, name \
---
> #   define   \
(90.5 %, 19378 bytes)
1927c1927
< #   define  name \
---
> #   define   
1927,1928c1927,1928
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       =snocStringroot, name
1927,1928c1927,1928
< #   define  name \
<       root=snocStringroot, name
---
> #   define   
>       =snocStringroot, name
1927,1928c1927,1928
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       rootsnocStringroot, name
1927,1928c1927,1928
< #   define  name \
<       root=snocStringroot, name
---
> #   define   
>       rootsnocStringroot, name
1927,1928c1927,1928
< #   define  name \
<       root=snocStringroot, name
---
> #   define   \
>       snocStringroot, name
(90.5 %, 19373 bytes)
1927,1928c1927,1928
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       rootsnocStringroot, 
1927,1928c1927,1928
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       , 
1927,1928c1927,1928
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>       rootsnocStringroot 
1927,1928c1927,1928
< #   define   \
<       rootsnocStringroot, name
---
> #   define   
>        
1928c1928
<       rootsnocStringroot, name
---
>       , name
1928c1928
<       rootsnocStringroot, name
---
>        name
1928c1928
<       rootsnocStringroot, name
---
>       , 
1928c1928
<       rootsnocStringroot, name
---
>        
1928c1928
<       rootsnocStringroot, name
---
>       , name
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1928c1928
<       rootsnocStringroot, name
---
>        name
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1928c1928
<       rootsnocStringroot, name
---
>       , 
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1928c1928
<       rootsnocStringroot, name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1928c1928
<       rootsnocStringroot, name
---
>       rootsnocStringroot name
(90.6 %, 19354 bytes)
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
> #    SET_BINARY_MODEd 
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
>     SET_BINARY_MODEd 
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
> #   define  
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define  
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
> #     
1928c1928
<        name
---
>        
1930c1930
< #   define SET_BINARY_MODEd 
---
>      
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1930c1930
< #   define SET_BINARY_MODEd 
---
>     SET_BINARY_MODEd 
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define  
1930c1930
< #   define SET_BINARY_MODEd 
---
>      
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define SET_BINARY_MODEd 
1932c1932
< #      define NORETURN 
---
>       define NORETURN 
1930c1930
< #   define SET_BINARY_MODEd 
---
>     SET_BINARY_MODEd 
1932c1932
< #      define NORETURN 
---
>       define NORETURN 
1930c1930
< #   define SET_BINARY_MODEd 
---
>    define  
1932c1932
< #      define NORETURN 
---
>       define NORETURN 
1930c1930
< #   define SET_BINARY_MODEd 
---
>      
1932c1932
< #      define NORETURN 
---
>       define NORETURN 
1930c1930
< #   define SET_BINARY_MODEd 
---
> #    SET_BINARY_MODEd 
1930c1930
< #   define SET_BINARY_MODEd 
---
> #     
(90.6 %, 19331 bytes)
1932c1932
< #      define NORETURN 
---
>         
1932c1932
< #      define NORETURN 
---
>       define NORETURN 
1939c1939
< #define True  Bool1
---
> define True  Bool1
1932c1932
< #      define NORETURN 
---
>        NORETURN 
1939c1939
< #define True  Bool1
---
> define True  Bool1
1932c1932
< #      define NORETURN 
---
>       define  
1939c1939
< #define True  Bool1
---
> define True  Bool1
1932c1932
< #      define NORETURN 
---
>         
1939c1939
< #define True  Bool1
---
> define True  Bool1
1932c1932
< #      define NORETURN 
---
> #       NORETURN 
1932c1932
< #      define NORETURN 
---
> #        
(90.6 %, 19316 bytes)
1939c1939
< #define True  Bool1
---
>    Bool1
1939c1939
< #define True  Bool1
---
> define True  
1939c1939
< #define True  Bool1
---
>  True  
1939c1939
< #define True  Bool1
---
> define   
1939c1939
< #define True  Bool1
---
>    
1939c1939
< #define True  Bool1
---
> # True  Bool1
1939c1939
< #define True  Bool1
---
> #   Bool1
1939c1939
< #define True  Bool1
---
> # True  
1939c1939
< #define True  Bool1
---
> #   
(90.6 %, 19300 bytes)
1940c1940
< #define False Bool0
---
>   
1940c1940
< #define False Bool0
---
> # False Bool0
1940c1940
< #define False Bool0
---
> #  Bool0
1940c1940
< #define False Bool0
---
> # False 
1940c1940
< #define False Bool0
---
> #  
(90.6 %, 19283 bytes)
1957c1957
< #define SM_I2O           1
---
>             
1957c1957
< #define SM_I2O           1
---
> # SM_I2O           1
1957c1957
< #define SM_I2O           1
---
> #            1
(90.6 %, 19269 bytes)
1958c1958
< #define SM_F2O           2
---
>             
1958c1958
< #define SM_F2O           2
---
> # SM_F2O           2
1958c1958
< #define SM_F2O           2
---
> #            2
1958c1958
< #define SM_F2O           2
---
> # SM_F2O           
(90.6 %, 19255 bytes)
1959c1959
< #define SM_F2F           3
---
>             
1959c1959
< #define SM_F2F           3
---
> # SM_F2F           3
1959c1959
< #define SM_F2F           3
---
> #            3
(90.6 %, 19241 bytes)
1962c1962
< #define OM_Z             1
---
>               
1962c1962
< #define OM_Z             1
---
> # OM_Z             1
1962c1962
< #define OM_Z             1
---
> #              1
(90.6 %, 19229 bytes)
1963c1963
< #define OM_UNZ           2
---
>             
1963c1963
< #define OM_UNZ           2
---
> # OM_UNZ           2
1963c1963
< #define OM_UNZ           2
---
> #            2
(90.6 %, 19215 bytes)
1964c1964
< #define OM_TEST          3
---
>            
1964c1964
< #define OM_TEST          3
---
> # OM_TEST          3
1964c1964
< #define OM_TEST          3
---
> #           3
1964c1964
< #define OM_TEST          3
---
> # OM_TEST          
(90.6 %, 19200 bytes)
1969c1969
< #define FILE_NAME_LEN 4
---
>   
1969c1969
< #define FILE_NAME_LEN 4
---
> # FILE_NAME_LEN 4
1969c1969
< #define FILE_NAME_LEN 4
---
> #  4
(90.6 %, 19179 bytes)
1998,2000c1998,2000
< typedef
<    struct  
<    UInt64;
---
> 
>      
>    
1999c1999
<    struct  
---
>      
1999,2000c1999,2000
<    struct  
<    UInt64;
---
>      
>    ;
(90.7 %, 19159 bytes)
2126c2126
< #define BZ_N_SUFFIX_PAIRS 4
---
>   
2126c2126
< #define BZ_N_SUFFIX_PAIRS 4
---
> # BZ_N_SUFFIX_PAIRS 4
2126c2126
< #define BZ_N_SUFFIX_PAIRS 4
---
> #  4
(90.7 %, 19134 bytes)
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
>   ->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> # ISFLAGs strcmpaa->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #  strcmpaa->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> # ISFLAGs ->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #  ->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> # ISFLAGs strcmpaaname, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #  strcmpaaname, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> # ISFLAGs name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #  name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #define  strcmpaa->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #define  ->name, s==0
2183c2183
< #define ISFLAGs strcmpaa->name, s==0
---
> #define  strcmpaaname, s==0
(90.7 %, 19127 bytes)
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  ->name, s==0
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  name, s==0
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  ->, s==0
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  , s==0
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  ->name s==0
2183c2183
< #define  strcmpaa->name, s==0
---
> #define  name s==0
(90.7 %, 19117 bytes)
2183c2183
< #define  name, s==0
---
> #define   s==0
2183c2183
< #define  name, s==0
---
> #define  , ==0
2183c2183
< #define  name, s==0
---
> #define   ==0
2183c2183
< #define  name, s==0
---
> #define  , s0
2183c2183
< #define  name, s==0
---
> #define   s0
(90.7 %, 19112 bytes)
2183c2183
< #define   s==0
---
> #define   0
2183c2183
< #define   s==0
---
> #define   ==
2183c2183
< #define   s==0
---
> #define   
2183c2183
< #define   s==0
---
> #define   ==0
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
2183c2183
< #define   s==0
---
> #define   0
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
2183c2183
< #define   s==0
---
> #define   ==
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
2183c2183
< #define   s==0
---
> #define   
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
2183c2183
< #define   s==0
---
> #define   s0
2183c2183
< #define   s==0
---
> #define   s
2183c2183
< #define   s==0
---
> #define   s0
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
(90.7 %, 19110 bytes)
2185c2185
< int main ( int argc, char *argv[] )
---
>  main ( int argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>   ( int argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>  main  int argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>    int argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>  main (  argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>   (  argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>  main   argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
>     argc, char *argv[] )
2185c2185
< int main ( int argc, char *argv[] )
---
> int  ( int argc, char *argv[] )
(90.7 %, 19107 bytes)
2185c2185
<  main ( int argc, char *argv[] )
---
>   ( int argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>    int argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>   (  argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>     argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>   ( int , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>    int , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>   (  , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>     , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main  int argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main   argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main  int , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main   , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main  int argc char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main   argc char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main  int  char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main    char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  argc, char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  argc char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (   char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  argc,  *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  ,  *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (  argc  *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main (    *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main ( int , char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main ( int  char *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main ( int ,  *argv[] )
2185c2185
<  main ( int argc, char *argv[] )
---
>  main ( int   *argv[] )
(90.7 %, 19103 bytes)
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int  char *argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int   *argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int  char argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int   argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int  char *[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int   *[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int  char [] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int   [] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  *argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  *[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  [] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  *argv] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  argv] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  *] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int ,  ] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char argv[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char [] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char argv] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char ] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char argv[ )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char [ )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char argv )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char  )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char *[] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char *] )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char *[ )
2185c2185
<  main ( int , char *argv[] )
---
>  main ( int , char * )
(90.7 %, 19099 bytes)
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *] )
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char * )
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *] 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char * 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *] )
> 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char * )
> 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *] 
> 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char * 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[ )
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[ 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[ )
> 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[ 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[ )
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[ 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[ )
> 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[ 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[] 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[] 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[] 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[] 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[] 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[] 
> 
2185c2185
<  main ( int , char *[] )
---
>  main ( int , char *[] 
2185,2186c2185,2186
<  main ( int , char *[] )
< ;
---
>  main ( int , char *[] 
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
2186c2186
< ;
---
> 
Termination check: size was 31914; now 19099
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: param-to-global >===
61c61
<       bz_stream* , 
---
>        , 
1142,1143c1142,1144
<  BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  bz_stream * BZ_APIBZ2_bzCompressInit_strm;
> BZ_APIBZ2_bzCompressInit 
>                     (  
62c62
<       int        , 
---
>               , 
1142c1142,1143
<  BZ_APIBZ2_bzCompressInit 
---
>  int BZ_APIBZ2_bzCompressInit_blockSize100k;
> BZ_APIBZ2_bzCompressInit 
1144c1145
<                      int        blockSize100k,
---
>                      
63c63
<       int        , 
---
>               , 
1142c1142,1143
<  BZ_APIBZ2_bzCompressInit 
---
>  int BZ_APIBZ2_bzCompressInit_verbosity;
> BZ_APIBZ2_bzCompressInit 
1145c1146
<                      int        verbosity,
---
>                      
63,64c63
<       int        , 
<       int         
---
>       int        t         
1142c1141,1142
<  BZ_APIBZ2_bzCompressInit 
---
>  int BZ_APIBZ2_bzCompressInit_workFactor;
> BZ_APIBZ2_bzCompressInit 
1145,1146c1145
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity )
68c68
<       bz_stream* , 
---
>        , 
1244c1244,1245
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  bz_stream * BZ_APIBZ2_bzCompress_strm;
> BZ_APIBZ2_bzCompress (  int action )
68,69c68
<       bz_stream* , 
<       int  
---
>       bz_stream* t  
1244c1243,1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  int BZ_APIBZ2_bzCompress_action;
> BZ_APIBZ2_bzCompress ( bz_stream *strm )
(90.7 %, 19085 bytes)
67c67
<       bz_stream* , 
---
>        , 
1243c1243,1244
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  bz_stream * BZ_APIBZ2_bzCompress_strm;
> BZ_APIBZ2_bzCompress (  int action )
67,68c67
<       bz_stream* , 
<       int  
---
>       bz_stream* t  
1243c1242,1243
<  BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>  int BZ_APIBZ2_bzCompress_action;
> BZ_APIBZ2_bzCompress ( bz_stream *strm )
107c107
<       int*    , 
---
>           , 
1618c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> int * BZ_APIBZ2_bzReadClose_bzerror;
> void BZ_APIBZ2_bzReadClose (  BZFILE *b )
107,108c107
<       int*    , 
<       BZFILE*  
---
>       int*    *  
1618c1617,1618
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZFILE * BZ_APIBZ2_bzReadClose_b;
> void BZ_APIBZ2_bzReadClose ( int *bzerror )
1620c1620
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzReadClose_b;
112c112
<       int*    , 
---
>           , 
1670a1671
> int * BZ_APIBZ2_bzReadGetUnused_bzerror;
1672c1673
<                      ( int*    bzerror, 
---
>                      (  
(90.7 %, 19095 bytes)
106c106
<       int*    , 
---
>           , 
1618c1618,1619
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> int * BZ_APIBZ2_bzReadClose_bzerror;
> void BZ_APIBZ2_bzReadClose (  BZFILE *b )
106,107c106
<       int*    , 
<       BZFILE*  
---
>       int*    *  
1618c1617,1618
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZFILE * BZ_APIBZ2_bzReadClose_b;
> void BZ_APIBZ2_bzReadClose ( int *bzerror )
1620c1620
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzReadClose_b;
111c111
<       int*    , 
---
>           , 
1670a1671
> int * BZ_APIBZ2_bzReadGetUnused_bzerror;
1672c1673
<                      ( int*    bzerror, 
---
>                      (  
112c112
<       BZFILE* , 
---
>        , 
1670a1671
> BZFILE * BZ_APIBZ2_bzReadGetUnused_b;
1673c1674
<                        BZFILE* b, 
---
>                         
1677c1678
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzReadGetUnused_b;
113c113
<       void**  ,  
---
>         ,  
1670a1671
> void ** BZ_APIBZ2_bzReadGetUnused_unused;
1674c1675
<                        void**  unused, 
---
>                         
113,114c113
<       void**  ,  
<       int*     
---
>       void**  *     
1670a1670
> int * BZ_APIBZ2_bzReadGetUnused_nUnused;
1674,1675c1674
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
118c118
<       int*    , 
---
>           , 
1638,1639c1638,1640
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  int * BZ_APIBZ2_bzRead_bzerror;
> BZ_APIBZ2_bzRead 
>            (  
119c119
<       BZFILE* , 
---
>        , 
1638c1638,1639
<  BZ_APIBZ2_bzRead 
---
>  BZFILE * BZ_APIBZ2_bzRead_b;
> BZ_APIBZ2_bzRead 
1640c1641
<              BZFILE* b, 
---
>               
1645c1646
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzRead_b;
120c120
<       void*   , 
---
>          , 
1638c1638,1639
<  BZ_APIBZ2_bzRead 
---
>  void * BZ_APIBZ2_bzRead_buf;
> BZ_APIBZ2_bzRead 
1641c1642
<              void*   buf, 
---
>               
120,121c120
<       void*   , 
<       int      
---
>       void*   t      
1638c1637,1638
<  BZ_APIBZ2_bzRead 
---
>  int BZ_APIBZ2_bzRead_len;
> BZ_APIBZ2_bzRead 
1641,1642c1641
<              void*   buf, 
<              int     len )
---
>              void*   buf )
1652c1651
<             len  )
---
>             BZ_APIBZ2_bzRead_len  )
133c133
<       int*    , 
---
>           , 
1459a1460
> int * BZ_APIBZ2_bzWrite_bzerror;
1461c1462
<              ( int*    bzerror, 
---
>              (  
134c134
<       BZFILE* , 
---
>        , 
1459a1460
> BZFILE * BZ_APIBZ2_bzWrite_b;
1462c1463
<                BZFILE* b, 
---
>                 
1467c1468
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzWrite_b;
135c135
<       void*   , 
---
>          , 
1459a1460
> void * BZ_APIBZ2_bzWrite_buf;
1463c1464
<                void*   buf, 
---
>                 
(90.7 %, 19100 bytes)
132c132
<       int*    , 
---
>           , 
1458a1459
> int * BZ_APIBZ2_bzWrite_bzerror;
1460c1461
<              ( int*    bzerror, 
---
>              (  
133c133
<       BZFILE* , 
---
>        , 
1458a1459
> BZFILE * BZ_APIBZ2_bzWrite_b;
1461c1462
<                BZFILE* b, 
---
>                 
1466c1467
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *BZ_APIBZ2_bzWrite_b;
134c134
<       void*   , 
---
>          , 
1458a1459
> void * BZ_APIBZ2_bzWrite_buf;
1462c1463
<                void*   buf, 
---
>                 
134,135c134
<       void*   , 
<       int      
---
>       void*   t      
1458a1458
> int BZ_APIBZ2_bzWrite_len;
1462,1463c1462
<                void*   buf, 
<                int     len )
---
>                void*   buf )
1474c1473
<             len  )
---
>             BZ_APIBZ2_bzWrite_len  )
139c139
<       int*          , 
---
>                 , 
1502a1503
> int * BZ_APIBZ2_bzWriteClose_bzerror;
1504c1505
<                   ( int*          bzerror, 
---
>                   (  
140c140
<       BZFILE*       , 
---
>              , 
1502a1503
> BZFILE * BZ_APIBZ2_bzWriteClose_b;
1505c1506
<                     BZFILE*       b, 
---
>                      
(90.7 %, 19105 bytes)
138c138
<       int*          , 
---
>                 , 
1501a1502
> int * BZ_APIBZ2_bzWriteClose_bzerror;
1503c1504
<                   ( int*          bzerror, 
---
>                   (  
139c139
<       BZFILE*       , 
---
>              , 
1501a1502
> BZFILE * BZ_APIBZ2_bzWriteClose_b;
1504c1505
<                     BZFILE*       b, 
---
>                      
140c140
<       int           , 
---
>                  , 
1501a1502
> int BZ_APIBZ2_bzWriteClose_abandon;
1505c1506
<                     int           abandon,
---
>                     
141c141
<       unsigned * , 
---
>        , 
1501a1502
> unsigned int * BZ_APIBZ2_bzWriteClose_nbytes_in;
1506c1507
<                     unsigned * nbytes_in,
---
>                     
141,142c141
<       unsigned * , 
<       unsigned *  
---
>       unsigned * *  
1501a1501
> unsigned int * BZ_APIBZ2_bzWriteClose_nbytes_out;
1506,1507c1506
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in )
159c159
<       char*         , 
---
>                , 
1697,1698c1697,1699
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  char * BZ_APIBZ2_bzBuffToBuffCompress_dest;
> BZ_APIBZ2_bzBuffToBuffCompress 
>                          (  
160c160
<       unsigned * ,
---
>        ,
1697c1697,1698
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  unsigned int * BZ_APIBZ2_bzBuffToBuffCompress_destLen;
> BZ_APIBZ2_bzBuffToBuffCompress 
1699c1700
<                            unsigned * destLen,
---
>                            
161c161
<       char*         , 
---
>                , 
1697c1697,1698
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  char * BZ_APIBZ2_bzBuffToBuffCompress_source;
> BZ_APIBZ2_bzBuffToBuffCompress 
1700c1701
<                            char*         source, 
---
>                             
162c162
<       unsigned   ,
---
>          ,
1697c1697,1698
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  unsigned int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
> BZ_APIBZ2_bzBuffToBuffCompress 
1701c1702
<                            unsigned   sourceLen,
---
>                            
163c163
<       int           , 
---
>                  , 
1697c1697,1698
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
> BZ_APIBZ2_bzBuffToBuffCompress 
1702c1703
<                            int           blockSize100k, 
---
>                             
164c164
<       int           , 
---
>                  , 
1697c1697,1698
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
> BZ_APIBZ2_bzBuffToBuffCompress 
1703c1704
<                            int           verbosity, 
---
>                             
164,165c164
<       int           , 
<       int            
---
>       int           t            
1697c1696,1697
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
> BZ_APIBZ2_bzBuffToBuffCompress 
1703,1704c1703
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
169c169
<       char*         , 
---
>                , 
176,177c176,178
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  char * BZ_APIBZ2_bzBuffToBuffDecompress_dest;
> BZ_APIBZ2_bzBuffToBuffDecompress 
>                            (  
170c170
<       unsigned * ,
---
>        ,
176c176,177
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  unsigned int * BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
> BZ_APIBZ2_bzBuffToBuffDecompress 
178c179
<                              unsigned * destLen,
---
>                              
171c171
<       char*         , 
---
>                , 
176c176,177
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  char * BZ_APIBZ2_bzBuffToBuffDecompress_source;
> BZ_APIBZ2_bzBuffToBuffDecompress 
179c180
<                              char*         source, 
---
>                               
172c172
<       unsigned   ,
---
>          ,
176c176,177
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  unsigned int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
> BZ_APIBZ2_bzBuffToBuffDecompress 
180c181
<                              unsigned   sourceLen,
---
>                              
(90.7 %, 19087 bytes)
168c168
<       char*         , 
---
>                , 
175,176c175,177
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  char * BZ_APIBZ2_bzBuffToBuffDecompress_dest;
> BZ_APIBZ2_bzBuffToBuffDecompress 
>                            (  
169c169
<       unsigned * ,
---
>        ,
175c175,176
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  unsigned int * BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
> BZ_APIBZ2_bzBuffToBuffDecompress 
177c178
<                              unsigned * destLen,
---
>                              
170c170
<       char*         , 
---
>                , 
175c175,176
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  char * BZ_APIBZ2_bzBuffToBuffDecompress_source;
> BZ_APIBZ2_bzBuffToBuffDecompress 
178c179
<                              char*         source, 
---
>                               
171c171
<       unsigned   ,
---
>          ,
175c175,176
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  unsigned int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
> BZ_APIBZ2_bzBuffToBuffDecompress 
179c180
<                              unsigned   sourceLen,
---
>                              
172c172
<       int           , 
---
>                  , 
175c175,176
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_small;
> BZ_APIBZ2_bzBuffToBuffDecompress 
180c181
<                              int           small,
---
>                              
172,173c172
<       int           , 
<       int            
---
>       int           t            
175c174,175
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
> BZ_APIBZ2_bzBuffToBuffDecompress 
180,181c180
<                              int           small,
<                              int           verbosity )
---
>                              int           small )
235c235
<       const char *,
---
>       ,
238,239c238,240
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  const char * BZ_APIBZ2_bzopen_path;
> * BZ_APIBZ2_bzopen
>                ( 
235,236c235
<       const char *,
<       const char *
---
>       const char **
238,240c237,239
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
>  const char * BZ_APIBZ2_bzopen_mode;
> * BZ_APIBZ2_bzopen
>                ( const char *path )
246c246
<       int        ,
---
>               ,
1783,1784c1783,1785
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  int BZ_APIBZ2_bzdopen_fd;
> * BZ_APIBZ2_bzdopen
>                ( 
246,247c246
<       int        ,
<       const char *
---
>       int        *
1783,1785c1782,1784
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
>  const char * BZ_APIBZ2_bzdopen_mode;
> * BZ_APIBZ2_bzdopen
>                ( int fd )
(90.7 %, 19070 bytes)
234c234
<       const char *,
---
>       ,
237,238c237,239
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>  const char * BZ_APIBZ2_bzopen_path;
> * BZ_APIBZ2_bzopen
>                ( 
234,235c234
<       const char *,
<       const char *
---
>       const char **
237,239c236,238
<  * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
>  const char * BZ_APIBZ2_bzopen_mode;
> * BZ_APIBZ2_bzopen
>                ( const char *path )
245c245
<       int        ,
---
>               ,
1782,1783c1782,1784
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
---
>  int BZ_APIBZ2_bzdopen_fd;
> * BZ_APIBZ2_bzdopen
>                ( 
245,246c245
<       int        ,
<       const char *
---
>       int        *
1782,1784c1781,1783
<  * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
>  const char * BZ_APIBZ2_bzdopen_mode;
> * BZ_APIBZ2_bzdopen
>                ( int fd )
250c250
<       BZFILE* , 
---
>        , 
1791c1791,1792
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  BZFILE * BZ_APIBZ2_bzread_b;
> BZ_APIBZ2_bzread ( void* buf, int len )
1794c1795
<    if (((bzFile*)b)  )  
---
>    if (((bzFile*)BZ_APIBZ2_bzread_b)  )  
251c251
<       void* , 
---
>        , 
1791c1791,1792
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  void * BZ_APIBZ2_bzread_buf;
> BZ_APIBZ2_bzread (BZFILE* b,  int len )
251,252c251
<       void* , 
<       int  
---
>       void* t  
1791c1790,1791
<  BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>  int BZ_APIBZ2_bzread_len;
> BZ_APIBZ2_bzread (BZFILE* b, void* buf )
256c256
<       BZFILE* , 
---
>        , 
260c260,261
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZFILE * BZ_APIBZ2_bzwrite_b;
> BZ_APIBZ2_bzwrite ( void* buf, int len )
257c257
<       void*   , 
---
>          , 
260c260,261
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  void * BZ_APIBZ2_bzwrite_buf;
> BZ_APIBZ2_bzwrite (BZFILE* b,  int len )
257,258c257
<       void*   , 
<       int      
---
>       void*   t      
260c259,260
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  int BZ_APIBZ2_bzwrite_len;
> BZ_APIBZ2_bzwrite (BZFILE* b, void* buf )
(90.7 %, 19076 bytes)
255c255
<       BZFILE* , 
---
>        , 
259c259,260
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  BZFILE * BZ_APIBZ2_bzwrite_b;
> BZ_APIBZ2_bzwrite ( void* buf, int len )
256c256
<       void*   , 
---
>          , 
259c259,260
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  void * BZ_APIBZ2_bzwrite_buf;
> BZ_APIBZ2_bzwrite (BZFILE* b,  int len )
256,257c256
<       void*   , 
<       int      
---
>       void*   t      
259c258,259
<  BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>  int BZ_APIBZ2_bzwrite_len;
> BZ_APIBZ2_bzwrite (BZFILE* b, void* buf )
285c285
<       BZFILE *, 
---
>       , 
1854c1854,1855
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> BZFILE * BZ_APIBZ2_bzerror_b;
> const char * BZ_APIBZ2_bzerror ( int *errnum)
1856c1857
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)BZ_APIBZ2_bzerror_b);
285,286c285
<       BZFILE *, 
<       int    *
---
>       BZFILE **
1854c1853,1854
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int * BZ_APIBZ2_bzerror_errnum;
> const char * BZ_APIBZ2_bzerror (BZFILE *b)
959c959,960
<  makeMaps_e ( EState* s )
---
>  EState * makeMaps_e_s;
> makeMaps_e ( void )
964,965c965,966
<        s) {
<          s->unseqToSeq[i]  
---
>        makeMaps_e_s) {
>          makeMaps_e_s->unseqToSeq[i]  
(90.7 %, 19083 bytes)
285c285
<       BZFILE *, 
---
>       , 
1854c1854,1855
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> BZFILE * BZ_APIBZ2_bzerror_b;
> const char * BZ_APIBZ2_bzerror ( int *errnum)
1856c1857
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)BZ_APIBZ2_bzerror_b);
285,286c285
<       BZFILE *, 
<       int    *
---
>       BZFILE **
1854c1853,1854
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int * BZ_APIBZ2_bzerror_errnum;
> const char * BZ_APIBZ2_bzerror (BZFILE *b)
959c959,960
<  makeMaps_e ( EState* s )
---
>  EState * makeMaps_e_s;
> makeMaps_e ( void )
964,965c965,966
<        s) {
<          s->unseqToSeq[i]  
---
>        makeMaps_e_s) {
>          makeMaps_e_s->unseqToSeq[i]  
973c973,974
<  generateMTFValues ( EState* s )
---
>  EState * generateMTFValues_s;
> generateMTFValues ( void )
994c995
<    for (  ;   ; ) s->mtfFreq[i]  
---
>    for (  ;   ; ) generateMTFValues_s->mtfFreq[i]  
1004c1005
<         s;
---
>         generateMTFValues_s;
1023c1024
<               ; ; s->mtfFreq[1];
---
>               ; ; generateMTFValues_s->mtfFreq[1];
1031c1032
<       ; s->mtfFreq;
---
>       ; generateMTFValues_s->mtfFreq;
(90.7 %, 19123 bytes)
974c974,975
<  generateMTFValues ( EState* s )
---
>  EState * generateMTFValues_s;
> generateMTFValues ( void )
995c996
<    for (  ;   ; ) s->mtfFreq[i]  
---
>    for (  ;   ; ) generateMTFValues_s->mtfFreq[i]  
1005c1006
<         s;
---
>         generateMTFValues_s;
1024c1025
<               ; ; s->mtfFreq[1];
---
>               ; ; generateMTFValues_s->mtfFreq[1];
1032c1033
<       ; s->mtfFreq;
---
>       ; generateMTFValues_s->mtfFreq;
1257c1257,1258
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  bz_stream * BZ_APIBZ2_bzCompressEnd_strm;
> BZ_APIBZ2_bzCompressEnd  ( void )
(90.6 %, 19220 bytes)
1258c1258,1259
<  BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>  bz_stream * BZ_APIBZ2_bzCompressEnd_strm;
> BZ_APIBZ2_bzCompressEnd  ( void )
1283,1284c1283,1285
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  bz_stream * BZ_APIBZ2_bzDecompressInit_strm;
> BZ_APIBZ2_bzDecompressInit 
>                      (  
(90.6 %, 19251 bytes)
1284,1285c1284,1286
<  BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  bz_stream * BZ_APIBZ2_bzDecompressInit_strm;
> BZ_APIBZ2_bzDecompressInit 
>                      (  
1284c1284,1285
<  BZ_APIBZ2_bzDecompressInit 
---
>  int BZ_APIBZ2_bzDecompressInit_verbosity;
> BZ_APIBZ2_bzDecompressInit 
1286c1287
<                        int        verbosity,
---
>                        
(90.6 %, 19280 bytes)
1284a1285
> int BZ_APIBZ2_bzDecompressInit_verbosity;
1287c1288
<                        int        verbosity,
---
>                        
1284a1285
> int BZ_APIBZ2_bzDecompressInit_small;
1287,1288c1288
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity )
(90.6 %, 19301 bytes)
1285a1286
> int BZ_APIBZ2_bzDecompressInit_small;
1289c1290
<                        int        small )
---
>                        void )
1516c1516,1517
<  BZ_APIBZ2_bzWriteClose64
---
>  int BZ_APIBZ2_bzWriteClose64_abandon;
> BZ_APIBZ2_bzWriteClose64
1519c1520
<                     int           abandon,
---
>                     
(90.6 %, 19327 bytes)
1517c1517,1518
<  BZ_APIBZ2_bzWriteClose64
---
>  int BZ_APIBZ2_bzWriteClose64_abandon;
> BZ_APIBZ2_bzWriteClose64
1520c1521
<                     int           abandon,
---
>                     
1517c1517,1518
<  BZ_APIBZ2_bzWriteClose64
---
>  int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
> BZ_APIBZ2_bzWriteClose64
1521c1522
<                      int* nbytes_in_lo32,
---
>                      
(90.6 %, 19343 bytes)
1517a1518
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
1522c1523
<                      int* nbytes_in_lo32,
---
>                      
1517a1518
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
1523c1524
<                      int* nbytes_in_hi32,
---
>                      
(90.5 %, 19370 bytes)
1518a1519
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
1524c1525
<                      int* nbytes_in_hi32,
---
>                      
1518a1519
> int * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
1525c1526
<                      int* nbytes_out_lo32,
---
>                      
(90.5 %, 19397 bytes)
1519a1520
> int * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
1526c1527
<                      int* nbytes_out_lo32,
---
>                      
1519a1520
> int * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
1526,1527c1527
<                      int* nbytes_out_lo32,
<                      int* nbytes_out_hi32 )
---
>                      int* nbytes_out_lo32 )
(90.5 %, 19424 bytes)
1520a1521
> int * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
1528c1529
<                      int* nbytes_out_hi32 )
---
>                      void )
(90.5 %, 19456 bytes)
===< pass_clang :: callexpr-to-value >===
1473,1476c1473
<     bzf_3
< 
<    (
<             BZ_APIBZ2_bzWrite_len  )
---
>     0
1533,1537c1533
<     bzf_3
< 
<     (  
<       
<     bzf_3)
---
>     0
(90.5 %, 19409 bytes)
1530,1534c1530
<     bzf_3
< 
<     (  
<       
<     bzf_3)
---
>     0
1625,1628c1625
<     bzf_3
< 
<    (
<     bzf  )
---
>     0
1651,1655c1651
<     bzf_3
< 
<    (
< 
<             BZ_APIBZ2_bzRead_len  )
---
>     0
(90.5 %, 19378 bytes)
1621,1624c1621
<     bzf_3
< 
<    (
<     bzf  )
---
>     0
1647,1651c1647
<     bzf_3
< 
<    (
< 
<             BZ_APIBZ2_bzRead_len  )
---
>     0
1679,1680c1679
<     bzf_5
<     (  )
---
>     0
(90.6 %, 19331 bytes)
1675,1676c1675
<     bzf_5
<     (  )
---
>     0
(90.6 %, 19318 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: simplify-struct >===
===< pass_special :: b >===
Termination check: size was 19099; now 19318
===< pass_clang :: rename-fun >===
60c60
<   BZ_APIBZ2_bzCompressInit ( 
---
>   fn1 ( 
66c66
<   BZ_APIBZ2_bzCompress ( 
---
>   fn2 ( 
71c71
<        strm 
---
>        fn3 
80c80
<   BZ_APIBZ2_bzDecompress ( 
---
>   fn4 ( 
84c84
<   BZ_APIBZ2_bzDecompressEnd ( 
---
>   fn5 ( 
96c96
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  * fn6 ( 
105c105
<  void BZ_APIBZ2_bzReadClose ( 
---
>  void fn7 ( 
110c110
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void fn8 ( 
117c117
<   BZ_APIBZ2_bzRead ( 
---
>   fn9 ( 
123c123
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  * fn10 ( 
131c131
<  void BZ_APIBZ2_bzWrite ( 
---
>  void fn11 ( 
137c137
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void fn12 ( 
145c145
<   BZ2_bzWriteClose64 ( 
---
>   fn13 ( 
158c158
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   fn14 ( 
167c167
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   fn15 ( 
175c175
< BZ_APIBZ2_bzBuffToBuffDecompress 
---
> fn15 
229c229
<  const char * BZ_APIBZ2_bzlibVersion (
---
>  const char * fn16 (
233c233
<   * BZ_APIBZ2_bzopen (
---
>   * fn17 (
237c237
<  * BZ_APIBZ2_bzopen
---
>  * fn17
244c244
<   * BZ_APIBZ2_bzdopen (
---
>   * fn18 (
249c249
<   BZ_APIBZ2_bzread (
---
>   fn19 (
254c254
<   BZ_APIBZ2_bzwrite (
---
>   fn20 (
259c259
< BZ_APIBZ2_bzwrite (BZFILE* b, void* buf )
---
> fn20 (BZFILE* b, void* buf )
272c272
<        b
---
>        fn21
280c280
<  void BZ_APIBZ2_bzclose (
---
>  void fn22 (
284c284
<  const char * BZ_APIBZ2_bzerror (
---
>  const char * fn23 (
960c960
< makeMaps_e ( void )
---
> fn24 ( void )
975c975
< generateMTFValues ( void )
---
> fn25 ( void )
1113c1113
<  default_bzalloc (   Int32    )
---
>  fn26 (   Int32    )
1117c1117
<  default_bzfree (   void  )
---
>  fn27 (   void  )
1123c1123
<     s 
---
>     fn28 
1138c1138
< BZ_APIBZ2_bzCompressInit 
---
> fn1 
1234c1234
<  handle_compress (   )
---
>  fn29 (   )
1240c1240
< BZ_APIBZ2_bzCompress ( bz_stream *strm )
---
> fn2 ( bz_stream *strm )
1259c1259
< BZ_APIBZ2_bzCompressEnd  ( void )
---
> fn30  ( void )
1287c1287
< BZ_APIBZ2_bzDecompressInit 
---
> fn31 
1336c1336
<  unRLE_obuf_to_output_FAST (   )
---
>  fn32 (   )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  fn4 ( bz_stream *strm )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  fn5  ( bz_stream *strm )
1462c1462
< void BZ_APIBZ2_bzWrite
---
> void fn11
1502c1502
< void BZ_APIBZ2_bzWriteClose
---
> void fn12
1519c1519
< BZ_APIBZ2_bzWriteClose64
---
> fn34
1529c1529
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *fn21;
1617c1617
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void fn7 ( int *bzerror, BZFILE *b )
1621c1621
<     bzf_3
---
>     fn36
1627c1627
<     bzf_3
---
>     fn36
1638c1638
< BZ_APIBZ2_bzRead 
---
> fn9 
1666c1666
< void BZ_APIBZ2_bzReadGetUnused 
---
> void fn8 
1694c1694
< BZ_APIBZ2_bzBuffToBuffCompress 
---
> fn14 
1757c1757
< const char * BZ_APIBZ2_bzlibVersion()
---
> const char * fn16()
1766c1766
<   bzopen_or_bzdopen
---
>   fn37
1780c1780
<  * BZ_APIBZ2_bzdopen
---
>  * fn18
1790c1790
< BZ_APIBZ2_bzread (BZFILE* b, void* buf )
---
> fn19 (BZFILE* b, void* buf )
1812c1812
< void BZ_APIBZ2_bzclose ( b)
---
> void fn22 ( b)
1853c1853
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * fn23 (BZFILE *b, int *errnum)
===< pass_clang :: rename-param >===
63c63
<       int        t         
---
>       int        p3         
67c67
<       bz_stream* t  
---
>       bz_stream* p1  
120c120
<       void*   t      
---
>       void*   p3      
134c134
<       void*   t      
---
>       void*   p3      
164c164
<       int           t            
---
>       int           p6            
172c172
<       int           t            
---
>       int           p5            
176,180c176,180
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                            ( char*         p1, 
>                              unsigned * p2,
>                              char*         p3, 
>                              unsigned   p4,
>                              int           p5 )
238,239c238,239
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *p1,
>                  const char *p2 )
251c251
<       void* t  
---
>       void* p2  
256c256
<       void*   t      
---
>       void*   p2      
259c259
< BZ_APIBZ2_bzwrite (BZFILE* b, void* buf )
---
> BZ_APIBZ2_bzwrite (BZFILE* p1, void* p2 )
1139,1141c1139,1141
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity )
---
>                     ( bz_stream* p1, 
>                      int        p2,
>                      int        p3 )
1240c1240
< BZ_APIBZ2_bzCompress ( bz_stream *strm )
---
> BZ_APIBZ2_bzCompress ( bz_stream *p1 )
1350c1350
<  BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompress ( bz_stream *p1 )
1368c1368
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *p1 )
1463,1465c1463,1465
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf )
---
>              ( int*    p1, 
>                BZFILE* p2, 
>                void*   p3 )
1468c1468
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *p2;
1503,1507c1503,1507
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          p1, 
>                     BZFILE*       p2, 
>                     int           p3,
>                     unsigned * p4,
>                     unsigned * p5 )
1617c1617
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *p1, BZFILE *p2 )
1619c1619
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *p2;
1639,1641c1639,1641
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf )
---
>            ( int*    p1, 
>              BZFILE* p2, 
>              void*   p3 )
1644c1644
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *p2;
1667,1670c1667,1670
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    p1, 
>                        BZFILE* p2, 
>                        void**  p3, 
>                        int*    p4 )
1672c1672
<    bzFile* bzf = *b;
---
>    bzFile* bzf = *p2;
1695,1700c1695,1700
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
---
>                          ( char*         p1, 
>                            unsigned * p2,
>                            char*         p3, 
>                            unsigned   p4,
>                            int           p5, 
>                            int           p6 )
1781,1782c1781,1782
<                ( int fd,
<                  const char *mode )
---
>                ( int p1,
>                  const char *p2 )
1790c1790
< BZ_APIBZ2_bzread (BZFILE* b, void* buf )
---
> BZ_APIBZ2_bzread (BZFILE* p1, void* p2 )
1793c1793
<    if (((bzFile*)b)  )  
---
>    if (((bzFile*)p1)  )  
1812c1812
< void BZ_APIBZ2_bzclose ( b)
---
> void BZ_APIBZ2_bzclose ( p1)
1818c1818
<    ((bzFile*)b)){
---
>    ((bzFile*)p1)){
1853c1853
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *p1, int *p2)
1855c1855
<    int err = ((bzFile *)b);
---
>    int err = ((bzFile *)p1);
(90.6 %, 19191 bytes)
===< pass_clang :: rename-var >===
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
---
>  int a;
182,187c182,187
<    bz_stream strm;
<     int strm_5;
<     int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
---
>    bz_stream b;
>     int c;
>     int d;
>    char e;
>    char f;
>    int g;
258c258
<  int BZ_APIBZ2_bzwrite_len;
---
>  int h;
261c261
<    int bzerr
---
>    int k
959c959
<  EState * makeMaps_e_s;
---
>  EState * l;
965,966c965,966
<        makeMaps_e_s) {
<          makeMaps_e_s->unseqToSeq[i]  
---
>        l) {
>          l->unseqToSeq[i]  
974c974
<  EState * generateMTFValues_s;
---
>  EState * m;
978,979c978,979
<     char yy_1;
<    unsigned char yy_0;
---
>     char o;
>    unsigned char p;
981,983c981,983
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB
---
>    Int32   q;
>    Int32   r;
>    Int32   t
987c987
<    UInt32 ptr_0;
---
>    UInt32 u;
989c989
<    unsigned  block_0;
---
>    unsigned  v;
991c991
<    unsigned  mtfv_0
---
>    unsigned  w
996c996
<    for (  ;   ; ) generateMTFValues_s->mtfFreq[i]  
---
>    for (  ;   ; ) m->mtfFreq[i]  
1003c1003
<        char ll_i;
---
>        char x;
1006c1006
<         generateMTFValues_s;
---
>         m;
1009c1009
<       if (  ll_i) { 
---
>       if (  x) { 
1015,1017c1015,1017
<               char  rtmp;
<              unsigned char* ryy_j;
<               char  rll_i
---
>               char  y;
>              unsigned char* z;
>               char  t1
1022c1022
<              (   rtmp ) 
---
>              (   y ) 
1025c1025
<               ; ; generateMTFValues_s->mtfFreq[1];
---
>               ; ; m->mtfFreq[1];
1033c1033
<       ; generateMTFValues_s->mtfFreq;
---
>       ; m->mtfFreq;
1035c1035
<      wr;
---
>      r;
1137c1137
<  int BZ_APIBZ2_bzCompressInit_workFactor;
---
>  int t2;
1145,1158c1145,1158
<    UInt32 s_8;
<     short s_10;
<     char s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 s_6;
<    UInt32 s_5;
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 t3;
>     short t4;
>     char t5;
>    Int32 t6;
>    Int32 t7;
>    Int32 t8;
>    Int32 t9;
>    UInt32 t10;
>    Int32 t11;
>    Int32 t12;
>    UInt32 t13;
>    UInt32 t14;
>    UInt32 t15;
>    bz_stream *t16;
1198c1198
<                    s_4
---
>                    t15
1239c1239
<  int BZ_APIBZ2_bzCompress_action;
---
>  int t17;
1244,1245c1244,1245
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 t18;
>    bz_stream *t19;
1258c1258
<  bz_stream * BZ_APIBZ2_bzCompressEnd_strm;
---
>  bz_stream * t20;
1262c1262
<    bz_stream *s_0;
---
>    bz_stream *t21;
1284,1286c1284,1286
<  bz_stream * BZ_APIBZ2_bzDecompressInit_strm;
< int BZ_APIBZ2_bzDecompressInit_verbosity;
< int BZ_APIBZ2_bzDecompressInit_small;
---
>  bz_stream * t22;
> int t23;
> int t24;
1293,1300c1293,1300
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
---
>    Int32 t25;
>    Int32 t26;
>    Bool t27;
>    UInt32 t28;
>    UInt32 t29;
>    Int32 t30;
>    Int32 t31;
>    bz_stream *t32;
1353c1353
<    bz_stream *s_0;
---
>    bz_stream *t33;
1371c1371
<    bz_stream *s_0;
---
>    bz_stream *t34;
1461c1461
< int BZ_APIBZ2_bzWrite_len;
---
> int t37;
1467,1472c1467,1472
<    Int32   ret;
<    bzFile* bzf = *p2;
<    char bzf_4_4;
<     int bzf_4_5;
<    char bzf_4_0;
<     int bzf_4_1;
---
>    Int32   t38;
>    bzFile* t39 = *p2;
>    char t40;
>     int t41;
>    char t42;
>     int t43;
1477c1477
<     ((bzf))
---
>     ((t39))
1495c1495
<        bzf_4_1  )
---
>        t43  )
1514,1518c1514,1518
<  int BZ_APIBZ2_bzWriteClose64_abandon;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
>  int t44;
> int * t45;
> int * t46;
> int * t47;
> int * t48;
1529c1529
<    bzFile* bzf = *b;
---
>    bzFile* t49 = *b;
1532c1532
<     ((bzf))
---
>     ((t49))
1619,1620c1619,1620
<    bzFile* bzf = *p2;
<    Bool bzf_6;
---
>    bzFile* t57 = *p2;
>    Bool t58;
1624c1624
<     bzf  )
---
>     t57  )
1637c1637
<  int BZ_APIBZ2_bzRead_len;
---
>  int t59;
1644,1646c1644,1646
<    bzFile* bzf = *p2;
<    char bzf_4_4;
<     int bzf_4_5;
---
>    bzFile* t60 = *p2;
>    char t61;
>     int t62;
1672,1674c1672,1674
<    bzFile* bzf = *p2;
<    char bzf_4_0;
<     int bzf_4_1;
---
>    bzFile* t63 = *p2;
>    char t64;
>     int t65;
1693c1693
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  int t66;
1702,1707c1702,1707
<    bz_stream strm;
<     int strm_5;
<     int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
---
>    bz_stream t67;
>     int t68;
>     int t69;
>    char t70;
>    char t71;
>    int t72;
1743c1743
<     ret;
---
>     t72;
1789c1789
<  int BZ_APIBZ2_bzread_len;
---
>  int t73;
1792c1792
<    int bzerr, nread;
---
>    int t74, t75;
1795c1795
<    if (    bzerr == BZ_STREAM_END) {
---
>    if (    t74 == BZ_STREAM_END) {
1814c1814
<    int bzerr;
---
>    int t76;
1832c1832
<   *bzerrorstrings = {
---
>   *t77 = {
1850c1850
<   bzerrorstrings_0  ;
---
>   t78  ;
1855c1855
<    int err = ((bzFile *)p1);
---
>    int t79 = ((bzFile *)p1);
1859c1859
<     bzerrorstrings_0;
---
>     t78;
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len;
258c258
<  int BZ_APIBZ2_bzwrite_len;
---
>  
959c959
<  EState * makeMaps_e_s;
---
>  EState * makeMaps_e_s,  * generateMTFValues_s;
974c974
<  EState * generateMTFValues_s;
---
>  
(90.6 %, 19189 bytes)
959c959
<  EState * makeMaps_e_s;
---
>  EState * makeMaps_e_s,  * generateMTFValues_s;
974c974
<  EState * generateMTFValues_s;
---
>  
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor;
1137c1137
<  int BZ_APIBZ2_bzCompressInit_workFactor;
---
>  
(90.6 %, 19184 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor;
1137c1137
<  int BZ_APIBZ2_bzCompressInit_workFactor;
---
>  
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompress_action;
1239c1239
<  int BZ_APIBZ2_bzCompress_action;
---
>  
(90.6 %, 19182 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action;
1239c1239
<  int BZ_APIBZ2_bzCompress_action;
---
>  
1258c1258
<  bz_stream * BZ_APIBZ2_bzCompressEnd_strm;
---
>  bz_stream * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
1284c1284
<  bz_stream * BZ_APIBZ2_bzDecompressInit_strm;
---
>  
(90.6 %, 19180 bytes)
1258c1258
<  bz_stream * BZ_APIBZ2_bzCompressEnd_strm;
---
>  bz_stream * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
1284c1284
<  bz_stream * BZ_APIBZ2_bzDecompressInit_strm;
---
>  
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity;
1285c1285
< int BZ_APIBZ2_bzDecompressInit_verbosity;
---
> 
(90.6 %, 19172 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity;
1285c1285
< int BZ_APIBZ2_bzDecompressInit_verbosity;
---
> 
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_small;
1286c1286
< int BZ_APIBZ2_bzDecompressInit_small;
---
> 
(90.6 %, 19170 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small;
1286c1286
< int BZ_APIBZ2_bzDecompressInit_small;
---
> 
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzWrite_len;
1461c1461
< int BZ_APIBZ2_bzWrite_len;
---
> 
(90.6 %, 19168 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len;
1461c1461
< int BZ_APIBZ2_bzWrite_len;
---
> 
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWriteClose64_abandon;
1514c1514
<  int BZ_APIBZ2_bzWriteClose64_abandon;
---
>  
(90.6 %, 19166 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon;
1514c1514
<  int BZ_APIBZ2_bzWriteClose64_abandon;
---
>  
1515,1516c1515,1516
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
> 
(90.6 %, 19164 bytes)
1515,1516c1515,1516
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
> 
1515c1515
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
1517c1517
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
---
> 
(90.6 %, 19162 bytes)
1515c1515,1516
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
> 
1517d1517
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
1515c1515
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
1518c1518
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
> 
(90.7 %, 19160 bytes)
1515c1515,1516
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
> 
1518d1518
< int * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len;
1637c1637
<  int BZ_APIBZ2_bzRead_len;
---
>  
(90.7 %, 19158 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len;
1637c1637
<  int BZ_APIBZ2_bzRead_len;
---
>  
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
1693c1693
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  
(90.7 %, 19156 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
1693c1693
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzread_len;
1789c1789
<  int BZ_APIBZ2_bzread_len;
---
>  
(90.7 %, 19154 bytes)
174c174
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len;
1789c1789
<  int BZ_APIBZ2_bzread_len;
---
>  
1515c1515,1537
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
> 
> 
> 
> 
>   *bzerrorstrings = {
>        
>       
>       
>       
>       
>       
>       
>       
>       
>       
>          
>          
>          
>          
>          
>       "???"   
> };
1832,1849c1854
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       "???"   
< };
---
>   
(90.7 %, 19152 bytes)
1515c1515,1537
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
> 
> 
> 
> 
>   *bzerrorstrings = {
>        
>       
>       
>       
>       
>       
>       
>       
>       
>       
>          
>          
>          
>          
>          
>       "???"   
> };
1832,1849c1854
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       "???"   
< };
---
>   
174c174,175
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
>   bzerrorstrings_0  ;
1850c1851
<   bzerrorstrings_0  ;
---
>   
(90.7 %, 19160 bytes)
174c174,180
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len;
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
> 
> 
> 
> 
>   
>   bzerrorstrings_0  ;
1855c1861
<   bzerrorstrings_0  ;
---
>   
(90.6 %, 19171 bytes)
===< pass_clang :: combine-local-var >===
189,190c189,190
<     int strm_5;
<     int strm_1;
---
>     int strm_5,  strm_1;
>     
191,192c191,192
<    char strm_4;
<    char strm_0;
---
>    char strm_4,  strm_0;
>    
(90.6 %, 19169 bytes)
191,192c191,192
<    char strm_4;
<    char strm_0;
---
>    char strm_4,  strm_0;
>    
189c189
<     int strm_5,  strm_1;
---
>     int strm_5,  strm_1,  ret;
193c193
<    int ret;
---
>    
(90.6 %, 19166 bytes)
189c189
<     int strm_5,  strm_1;
---
>     int strm_5,  strm_1,  ret;
193c193
<    int ret;
---
>    
986,987c986,987
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j, zPend;
>    
(90.6 %, 19164 bytes)
986,987c986,987
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, j, zPend;
>    
986c986
<    Int32   i, j;
---
>    Int32   i, j, wr;
988c988
<    Int32   wr;
---
>    
(90.7 %, 19157 bytes)
986c986,987
<    Int32   i, j, zPend;
---
>    Int32   i, j, zPend, wr;
>    
988d988
<    Int32   wr;
986,989c986
<    Int32   i, j, zPend;
<    
<    Int32   wr;
<    Int32   EOB
---
>    Int32   i, j, zPend, EOB
992a990,992
>    
>    Int32   wr;
>    
(90.7 %, 19150 bytes)
986,989c986
<    Int32   i, j, zPend, wr;
<    
<    
<    Int32   EOB
---
>    Int32   i, j, zPend, wr, EOB
992a990,992
>    
>    
>    
986c986
<    Int32   i, j, zPend, wr;
---
>    Int32   i, j, zPend, wr, ptr_0;
993c993
<    UInt32 ptr_0;
---
>    
(90.7 %, 19143 bytes)
986c986
<    Int32   i, j, zPend, wr, EOB
---
>    Int32   i, j, zPend, wr, EOB, ptr_0
993c993
<    UInt32 ptr_0;
---
>    
995,997c995
<    unsigned  block_0;
<         
<    unsigned  mtfv_0
---
>    unsigned  block_0,   mtfv_0
1000a999,1000
>         
>    
(90.7 %, 19137 bytes)
995,997c995
<    unsigned  block_0;
<         
<    unsigned  mtfv_0
---
>    unsigned  block_0,   mtfv_0
1000a999,1000
>         
>    
1021,1023c1021
<               char  rtmp;
<              unsigned char* ryy_j;
<               char  rll_i
---
>               char  rtmp,   rll_i
1027a1026,1027
>              unsigned char* ryy_j;
>               
(90.7 %, 19130 bytes)
1021,1023c1021
<               char  rtmp;
<              unsigned char* ryy_j;
<               char  rll_i
---
>               char  rtmp,   rll_i
1027a1026,1027
>              unsigned char* ryy_j;
>               
1149c1149
<    Int32   n;
---
>    Int32   n, s_8;
1151c1151
<    UInt32 s_8;
---
>    
(90.7 %, 19127 bytes)
1149c1149
<    Int32   n;
---
>    Int32   n, s_8;
1151c1151
<    UInt32 s_8;
---
>    
1149c1149
<    Int32   n;
---
>    Int32   n, s_12;
1154c1154
<    Int32 s_12;
---
>    
(90.7 %, 19121 bytes)
1149c1149
<    Int32   n, s_8;
---
>    Int32   n, s_8, s_12;
1154c1154
<    Int32 s_12;
---
>    
1149c1149
<    Int32   n, s_8;
---
>    Int32   n, s_8, s_28;
1155c1155
<    Int32 s_28;
---
>    
(90.7 %, 19116 bytes)
1149c1149
<    Int32   n, s_8, s_12;
---
>    Int32   n, s_8, s_12, s_28;
1155c1155
<    Int32 s_28;
---
>    
1149c1149
<    Int32   n, s_8, s_12;
---
>    Int32   n, s_8, s_12, s_18;
1156c1156
<    Int32 s_18;
---
>    
(90.7 %, 19111 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28;
---
>    Int32   n, s_8, s_12, s_28, s_18;
1156c1156
<    Int32 s_18;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28;
---
>    Int32   n, s_8, s_12, s_28, s_30;
1157c1157
<    Int32 s_30;
---
>    
(90.7 %, 19106 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30;
1157c1157
<    Int32 s_30;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_27;
1158c1158
<    UInt32 s_27;
---
>    
(90.7 %, 19101 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27;
1158c1158
<    UInt32 s_27;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_1;
1159c1159
<    Int32 s_1;
---
>    
(90.7 %, 19095 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1;
1159c1159
<    Int32 s_1;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_2;
1160c1160
<    Int32 s_2;
---
>    
(90.7 %, 19090 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2;
1160c1160
<    Int32 s_2;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_6;
1161c1161
<    UInt32 s_6;
---
>    
(90.7 %, 19085 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6;
1161c1161
<    UInt32 s_6;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_5;
1162c1162
<    UInt32 s_5;
---
>    
(90.7 %, 19079 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5;
1162c1162
<    UInt32 s_5;
---
>    
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_4;
1163c1163
<    UInt32 s_4;
---
>    
1299,1300c1299,1300
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12, s_11;
>    
(90.7 %, 19073 bytes)
1149c1149
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5;
---
>    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
1163c1163
<    UInt32 s_4;
---
>    
1299,1300c1299,1300
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12, s_11;
>    
(90.7 %, 19067 bytes)
1299,1300c1299,1300
<    Int32 s_12;
<    Int32 s_11;
---
>    Int32 s_12, s_11;
>    
1299c1299
<    Int32 s_12;
---
>    Int32 s_12, s_10;
1301c1301
<    Bool s_10;
---
>    
(90.7 %, 19062 bytes)
1299c1299,1300
<    Int32 s_12, s_11;
---
>    Int32 s_12, s_11, s_10;
>    
1301d1301
<    Bool s_10;
1299c1299
<    Int32 s_12, s_11;
---
>    Int32 s_12, s_11, s_26;
1302c1302
<    UInt32 s_26;
---
>    
(90.7 %, 19058 bytes)
1299c1299,1300
<    Int32 s_12, s_11, s_10;
---
>    Int32 s_12, s_11, s_10, s_26;
>    
1302d1302
<    UInt32 s_26;
1299c1299
<    Int32 s_12, s_11, s_10;
---
>    Int32 s_12, s_11, s_10, s_7;
1303c1303
<    UInt32 s_7;
---
>    
(90.7 %, 19052 bytes)
1299c1299,1300
<    Int32 s_12, s_11, s_10, s_26;
---
>    Int32 s_12, s_11, s_10, s_26, s_7;
>    
1303d1303
<    UInt32 s_7;
1299c1299
<    Int32 s_12, s_11, s_10, s_26;
---
>    Int32 s_12, s_11, s_10, s_26, s_8;
1304c1304
<    Int32 s_8;
---
>    
(90.7 %, 19046 bytes)
1299c1299,1300
<    Int32 s_12, s_11, s_10, s_26, s_7;
---
>    Int32 s_12, s_11, s_10, s_26, s_7, s_8;
>    
1304d1304
<    Int32 s_8;
1299c1299
<    Int32 s_12, s_11, s_10, s_26, s_7;
---
>    Int32 s_12, s_11, s_10, s_26, s_7, s_1;
1305c1305
<    Int32 s_1;
---
>    
(90.7 %, 19041 bytes)
1299c1299,1300
<    Int32 s_12, s_11, s_10, s_26, s_7, s_8;
---
>    Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
>    
1305d1305
<    Int32 s_1;
1473c1473
<    Int32   ret;
---
>    Int32   ret,  bzf_4_5;
1476c1476
<     int bzf_4_5;
---
>     
(90.7 %, 19036 bytes)
1473c1473
<    Int32   ret;
---
>    Int32   ret,  bzf_4_5;
1476c1476
<     int bzf_4_5;
---
>     
1475c1475
<    char bzf_4_4;
---
>    char bzf_4_4,  bzf_4_0;
1477c1477
<    char bzf_4_0;
---
>    
(90.7 %, 19034 bytes)
1475c1475
<    char bzf_4_4;
---
>    char bzf_4_4,  bzf_4_0;
1477c1477
<    char bzf_4_0;
---
>    
1473c1473
<    Int32   ret,  bzf_4_5;
---
>    Int32   ret,  bzf_4_5,  bzf_4_1;
1478c1478
<     int bzf_4_1;
---
>     
(90.7 %, 19031 bytes)
1473c1473
<    Int32   ret,  bzf_4_5;
---
>    Int32   ret,  bzf_4_5,  bzf_4_1;
1478c1478
<     int bzf_4_1;
---
>     
1598,1599c1598,1599
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1, bzf_3;
>    
(90.7 %, 19029 bytes)
1598,1599c1598,1599
<     int bzf_4_1;
<    Bool bzf_3;
---
>     int bzf_4_1, bzf_3;
>    
1598c1598
<     int bzf_4_1;
---
>     int bzf_4_1, bzf_2;
1600c1600
<    Int32 bzf_2;
---
>    
(90.7 %, 19025 bytes)
1598c1598,1599
<     int bzf_4_1, bzf_3;
---
>     int bzf_4_1, bzf_3, bzf_2;
>    
1600d1600
<    Int32 bzf_2;
1598c1598
<     int bzf_4_1, bzf_3;
---
>     int bzf_4_1, bzf_3, bzf_6;
1601c1601
<    Bool bzf_6;
---
>    
1598c1598
<     int bzf_4_1, bzf_3;
---
>     int bzf_4_1, bzf_3,      ret;
1602c1602
<    int     ret;
---
>    
(90.7 %, 19020 bytes)
1598c1598,1599
<     int bzf_4_1, bzf_3, bzf_2;
---
>     int bzf_4_1, bzf_3, bzf_2, bzf_6;
>    
1601d1601
<    Bool bzf_6;
1598c1598
<     int bzf_4_1, bzf_3, bzf_2;
---
>     int bzf_4_1, bzf_3, bzf_2,      ret;
1602c1602
<    int     ret;
---
>    
(90.7 %, 19016 bytes)
1598c1598,1599
<     int bzf_4_1, bzf_3, bzf_2, bzf_6;
---
>     int bzf_4_1, bzf_3, bzf_2, bzf_6,      ret;
>    
1602d1602
<    int     ret;
1731,1732c1731,1732
<     int strm_5;
<     int strm_1;
---
>     int strm_5,  strm_1;
>     
(90.7 %, 19014 bytes)
1731,1732c1731,1732
<     int strm_5;
<     int strm_1;
---
>     int strm_5,  strm_1;
>     
1733,1734c1733,1734
<    char strm_4;
<    char strm_0;
---
>    char strm_4,  strm_0;
>    
1731c1731
<     int strm_5;
---
>     int strm_5,  ret;
1735c1735
<    int ret;
---
>    
(90.7 %, 19012 bytes)
1733,1734c1733,1734
<    char strm_4;
<    char strm_0;
---
>    char strm_4,  strm_0;
>    
1731c1731
<     int strm_5,  strm_1;
---
>     int strm_5,  strm_1,  ret;
1735c1735
<    int ret;
---
>    
(90.7 %, 19009 bytes)
1731c1731
<     int strm_5,  strm_1;
---
>     int strm_5,  strm_1,  ret;
1735c1735
<    int ret;
---
>    
(90.7 %, 19007 bytes)
===< pass_clang :: simplify-struct-union-decl >===
496c496
<    EState
---
>    EState,  * makeMaps_e_s,  * generateMTFValues_s
965c965
<  EState * makeMaps_e_s,  * generateMTFValues_s;
---
>  
48c48
<    bz_stream;
---
>    bz_stream,  * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
1264c1264
<  bz_stream * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
---
>  
(90.7 %, 18999 bytes)
===< pass_clang :: move-global-var >===
60c60,61
<   BZ_APIBZ2_bzCompressInit ( 
---
>   typedef  BZFILE;
> BZ_APIBZ2_bzCompressInit ( 
94c95
< typedef  BZFILE;
---
> 
60c60,67
<   BZ_APIBZ2_bzCompressInit ( 
---
>   int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
> 
> 
> 
> 
>   
>   bzerrorstrings_0  ;
> BZ_APIBZ2_bzCompressInit ( 
174,180c181
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
< 
< 
< 
< 
<   
<   bzerrorstrings_0  ;
---
>  
(90.7 %, 19000 bytes)
60a61,67
> int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
> 
> 
> 
> 
>   
>   bzerrorstrings_0  ;
175,181c182
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
< 
< 
< 
< 
<   
<   bzerrorstrings_0  ;
---
>  
60a61
> typedef     Bool;
314c315
< typedef     Bool;
---
> 
(90.7 %, 19001 bytes)
67a68
> typedef     Bool;
315c316
< typedef     Bool;
---
> 
67a68
> typedef              Int32;
317c318
< typedef              Int32;
---
> 
(90.7 %, 19002 bytes)
68a69
> typedef              Int32;
318c319
< typedef              Int32;
---
> 
68a69
> typedef      UInt32;
319c320
< typedef      UInt32;
---
> 
(90.7 %, 19003 bytes)
69a70
> typedef      UInt32;
320c321
< typedef      UInt32;
---
> 
69a70,149
> struct {
>       
>        
> 
>       
>       
>           
>           
> 
>       
>          ;
> 
>       
>       UInt32  arr1;
>       UInt32  arr2;
>       UInt32  ftab
>           ;
> 
>       
>       UInt32  ptr;
>        char   block;
>        short  mtfv;
>        char   zbits
> 
>       
>           
> 
>       
>          
>           ;
>       
> 
>       
>       Int32    nblock
>           
>           
>           ;
> 
>       
>       Int32    nInUse;
>       Bool     inUse[6];
>        char    unseqToSeq[6]
> 
>       
>          
>           
> 
>       
>          
>          
> 
>       
>           ;
>       Int32    blockNo
>           ;
> 
>       
>       Int32    nMTF;
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
>        char       ;
>        char    ;
> 
>        char    len     
>               
>              
>       
>          
> 
>    }
>    EState
> 
> 
> 
> 
> 
> 
> 
> 
> 
> ;
431,510c511
<    struct {
<       
<        
< 
<       
<       
<           
<           
< 
<       
<          ;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32  ftab
<           ;
< 
<       
<       UInt32  ptr;
<        char   block;
<        short  mtfv;
<        char   zbits
< 
<       
<           
< 
<       
<          
<           ;
<       
< 
<       
<       Int32    nblock
<           
<           
<           ;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<        char    unseqToSeq[6]
< 
<       
<          
<           
< 
<       
<          
<          
< 
<       
<           ;
<       Int32    blockNo
<           ;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<        char       ;
<        char    ;
< 
<        char    len     
<               
<              
<       
<          
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    
69a70,160
> struct {
>       
>        
> 
>       
>           
> 
>       
>        char    
>           
>            
>       
> 
>       
>          
>           
> 
>       
>           
>            
>           
>           
> 
>       
>           
>          
>           
>           ;
>           ;
>       Int32    ;
>       Int32    ;
> 
>       
>       UInt32   tt;
> 
>       
>        short   ll16;
>        char    ll4
> 
>       
>          
>          
>          
>          
> 
>       
>           ;
>       Bool     ;
>       Bool     ;
>        char    ;
> 
>       
>        char       ;
>       Int32    mtfbase[  MTFL_SIZE]
>               [BZ_MAX_SELECTORS]
>            [BZ_MAX_SELECTORS]
>              [BZ_MAX_ALPHA_SIZE]
> 
>             
>              
>              
>           
> 
>       
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>            
>           
>           
>           
>           
>          
>          
>          ;
> 
>    }
>    DState;
577,667c668
<    struct {
<       
<        
< 
<       
<           
< 
<       
<        char    
<           
<            
<       
< 
<       
<          
<           
< 
<       
<           
<            
<           
<           
< 
<       
<           
<          
<           
<           ;
<           ;
<       Int32    ;
<       Int32    ;
< 
<       
<       UInt32   tt;
< 
<       
<        short   ll16;
<        char    ll4
< 
<       
<          
<          
<          
<          
< 
<       
<           ;
<       Bool     ;
<       Bool     ;
<        char    ;
< 
<       
<        char       ;
<       Int32    mtfbase[  MTFL_SIZE]
<               [BZ_MAX_SELECTORS]
<            [BZ_MAX_SELECTORS]
<              [BZ_MAX_ALPHA_SIZE]
< 
<             
<              
<              
<           
< 
<       
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<            
<           
<           
<           
<           
<          
<          
<          ;
< 
<    }
<    DState;
---
>    
69a70
> EState * makeMaps_e_s,  * generateMTFValues_s;
969c970
<  EState * makeMaps_e_s,  * generateMTFValues_s;
---
>  
69a70,118
> ;
> 
> #define                      \
>        lll                      
>      
> 
> #define                         \
>    GET_BITSllluuu8
> 
> #define                           \
>    GET_BITSllluuu1
> 
> 
> #define lval           
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     
> 
> 
> 
> 
> static
>  default_bzalloc (   Int32    )
> ;
1076,1124c1125
<    ;
< 
< #define                      \
<        lll                      
<      
< 
< #define                         \
<    GET_BITSllluuu8
< 
< #define                           \
<    GET_BITSllluuu1
< 
< 
< #define lval           
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     
< 
< 
< 
< 
< static
<  default_bzalloc (   Int32    )
< ;
---
>    
(90.7 %, 19004 bytes)
70a71,150
> struct {
>       
>        
> 
>       
>       
>           
>           
> 
>       
>          ;
> 
>       
>       UInt32  arr1;
>       UInt32  arr2;
>       UInt32  ftab
>           ;
> 
>       
>       UInt32  ptr;
>        char   block;
>        short  mtfv;
>        char   zbits
> 
>       
>           
> 
>       
>          
>           ;
>       
> 
>       
>       Int32    nblock
>           
>           
>           ;
> 
>       
>       Int32    nInUse;
>       Bool     inUse[6];
>        char    unseqToSeq[6]
> 
>       
>          
>           
> 
>       
>          
>          
> 
>       
>           ;
>       Int32    blockNo
>           ;
> 
>       
>       Int32    nMTF;
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
>        char       ;
>        char    ;
> 
>        char    len     
>               
>              
>       
>          
> 
>    }
>    EState
> 
> 
> 
> 
> 
> 
> 
> 
> 
> ;
432,511c512
<    struct {
<       
<        
< 
<       
<       
<           
<           
< 
<       
<          ;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32  ftab
<           ;
< 
<       
<       UInt32  ptr;
<        char   block;
<        short  mtfv;
<        char   zbits
< 
<       
<           
< 
<       
<          
<           ;
<       
< 
<       
<       Int32    nblock
<           
<           
<           ;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<        char    unseqToSeq[6]
< 
<       
<          
<           
< 
<       
<          
<          
< 
<       
<           ;
<       Int32    blockNo
<           ;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<        char       ;
<        char    ;
< 
<        char    len     
<               
<              
<       
<          
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    
70a71,161
> struct {
>       
>        
> 
>       
>           
> 
>       
>        char    
>           
>            
>       
> 
>       
>          
>           
> 
>       
>           
>            
>           
>           
> 
>       
>           
>          
>           
>           ;
>           ;
>       Int32    ;
>       Int32    ;
> 
>       
>       UInt32   tt;
> 
>       
>        short   ll16;
>        char    ll4
> 
>       
>          
>          
>          
>          
> 
>       
>           ;
>       Bool     ;
>       Bool     ;
>        char    ;
> 
>       
>        char       ;
>       Int32    mtfbase[  MTFL_SIZE]
>               [BZ_MAX_SELECTORS]
>            [BZ_MAX_SELECTORS]
>              [BZ_MAX_ALPHA_SIZE]
> 
>             
>              
>              
>           
> 
>       
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>           
>            
>           
>           
>           
>           
>          
>          
>          ;
> 
>    }
>    DState;
578,668c669
<    struct {
<       
<        
< 
<       
<           
< 
<       
<        char    
<           
<            
<       
< 
<       
<          
<           
< 
<       
<           
<            
<           
<           
< 
<       
<           
<          
<           
<           ;
<           ;
<       Int32    ;
<       Int32    ;
< 
<       
<       UInt32   tt;
< 
<       
<        short   ll16;
<        char    ll4
< 
<       
<          
<          
<          
<          
< 
<       
<           ;
<       Bool     ;
<       Bool     ;
<        char    ;
< 
<       
<        char       ;
<       Int32    mtfbase[  MTFL_SIZE]
<               [BZ_MAX_SELECTORS]
<            [BZ_MAX_SELECTORS]
<              [BZ_MAX_ALPHA_SIZE]
< 
<             
<              
<              
<           
< 
<       
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<            
<           
<           
<           
<           
<          
<          
<          ;
< 
<    }
<    DState;
---
>    
70a71
> EState * makeMaps_e_s,  * generateMTFValues_s;
970c971
<  EState * makeMaps_e_s,  * generateMTFValues_s;
---
>  
70a71,119
> ;
> 
> #define                      \
>        lll                      
>      
> 
> #define                         \
>    GET_BITSllluuu8
> 
> #define                           \
>    GET_BITSllluuu1
> 
> 
> #define lval           
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     
> 
> 
> 
> 
> static
>  default_bzalloc (   Int32    )
> ;
1077,1125c1126
<    ;
< 
< #define                      \
<        lll                      
<      
< 
< #define                         \
<    GET_BITSllluuu8
< 
< #define                           \
<    GET_BITSllluuu1
< 
< 
< #define lval           
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     
< 
< 
< 
< 
< static
<  default_bzalloc (   Int32    )
< ;
---
>    
70a71,80
> struct {
>       FILE*     handle;
>       char      buf;
>       Int32     bufN;
>       Bool      writing;
>       bz_stream strm;
>       Int32     lastErr;
>       Bool      initialisedOk
>    }
>    bzFile;
1407,1416c1417
<    struct {
<       FILE*     handle;
<       char      buf;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk
<    }
<    bzFile;
---
>    
70a71,93
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
> 
> 
> 
> 
>   *bzerrorstrings = {
>        
>       
>       
>       
>       
>       
>       
>       
>       
>       
>          
>          
>          
>          
>          
>       "???"   
> };
1526,1528d1548
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
< 
< 
1530,1548d1549
< 
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       "???"   
< };
(90.7 %, 19005 bytes)
116a117,126
> struct {
>       FILE*     handle;
>       char      buf;
>       Int32     bufN;
>       Bool      writing;
>       bz_stream strm;
>       Int32     lastErr;
>       Bool      initialisedOk
>    }
>    bzFile;
1408,1417c1418
<    struct {
<       FILE*     handle;
<       char      buf;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk
<    }
<    bzFile;
---
>    
116a117,139
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
> 
> 
> 
> 
>   *bzerrorstrings = {
>        
>       
>       
>       
>       
>       
>       
>       
>       
>       
>          
>          
>          
>          
>          
>       "???"   
> };
1527,1529d1549
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
< 
< 
1531,1549d1550
< 
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       "???"   
< };
(90.7 %, 19006 bytes)
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
138c138
<       "???"   
---
>       ""   
387c387
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  ""
(90.7 %, 19003 bytes)
387c387
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  ""
1087c1087
<        (    "generateMTFValues1" )
---
>        (    "" )
(90.7 %, 18985 bytes)
1087c1087
<        (    "generateMTFValues1" )
---
>        (    "" )
1090c1090
<        (    "generateMTFValuesa" );
---
>        (    "" );
(90.7 %, 18967 bytes)
1090c1090
<        (    "generateMTFValuesa" );
---
>        (    "" );
(90.8 %, 18949 bytes)
===< pass_indent :: final >===
1,13d0
<  
< 
< 
< 
< 
< 
< 
< 
<  
< 
<                 
<               
<              
17c4
<            
---
> 
20c7
< #     1
---
> #1
23,25c10,12
< #         4
< #   5
< #           6
---
> #4
> #5
> #6
30,50c17,31
< typedef 
<    struct {
<        ;
<        int avail_in;
<        int total_in_lo32;
<        int total_in_hi32
< 
<        
<         ;
<        int total_out_lo32;
<        int total_out_hi32;
< 
<       void *state;
< 
<       void (*bzalloc)( );
<       void (*bzfree)( void );
<       void *opaque
<    } 
<    bz_stream,  * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
< 
< 
---
> typedef struct
> {
>   ;
>   int avail_in;
>   int total_in_lo32;
>   int total_in_hi32;
>   int total_out_lo32;
>   int total_out_hi32;
> 
>   void *state;
> 
>   void ( *bzalloc ) (  );
>   void ( *bzfree ) ( void );
> void *opaque}
> bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;
54,61c35,36
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<   typedef  BZFILE;
< int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
---
> #define BZ_API
> #define BZ_EXTERN
63,70c38,47
< 
< 
< 
<   
<   bzerrorstrings_0  ;
< typedef     Bool;
< typedef              Int32;
< typedef      UInt32;
---
> typedef BZFILE;
> int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity, BZ_APIBZ2_bzwrite_len,
>   BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
>   BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
>   BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
>   BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>   BZ_APIBZ2_bzread_len, bzerrorstrings_0;
> typedef Bool;
> typedef Int32;
> typedef UInt32;
74,75c51
<        lll                      
<      
---
>        lll
82a59
> #define lval
84,103c61,64
< #define lval           
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> int *BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,
>   *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
>   *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>   *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
104a66,69
>   ""
> };
> static default_bzalloc ( Int32 );
> BZ_APIBZ2_bzCompressInit ( bz_stream *, int, int p3 );
105a71
> BZ_APIBZ2_bzCompress ( bz_stream * p1 );
106a73
> strm ( int );
107a75
> BZ_APIBZ2_bzDecompress (  );
108a77
> BZ_APIBZ2_bzDecompressEnd (  );
109a79
> #define BZ_MAX_UNUSED 0
110a81
> *BZ_APIBZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
112c83
<     
---
> void BZ_APIBZ2_bzReadClose ( int *, BZFILE * );
113a85
> void BZ_APIBZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
114a87
> BZ_APIBZ2_bzRead ( int *, BZFILE *, void *p3 );
115a89
> *BZ_APIBZ2_bzWriteOpen ( int *, FILE *, int, int, int );
117c91
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
---
> void BZ_APIBZ2_bzWrite ( int *, BZFILE *, void *p3 );
118a93
> void BZ_APIBZ2_bzWriteClose ( int *, BZFILE *, int, unsigned *, unsigned * );
119a95
> BZ2_bzWriteClose64 ( int, BZFILE, int, int, int, int, int );
120a97,98
> BZ_APIBZ2_bzBuffToBuffCompress ( char *,
> 				 unsigned *, char *, unsigned, int, int p6 );
122,169c100,101
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       ""   
< };
< static
<  default_bzalloc (   Int32    )
< ;
< BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* , 
<       int        , 
<       int        p3         
<    );
< 
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* p1  
<    );
< 
<     
<        strm 
<    
< 
<    ( 
<         
<       int        
<              
<    );
< 
<   BZ_APIBZ2_bzDecompress ( 
<         
<    );
< 
<   BZ_APIBZ2_bzDecompressEnd ( 
<         
<    );
---
> BZ_APIBZ2_bzBuffToBuffDecompress ( char *,
> 				   unsigned *, char *, unsigned, int p5 );
170a103,107
> BZ_APIBZ2_bzBuffToBuffDecompress
>   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5 )
> {
>   bz_stream strm;
>   int strm_5, strm_1, ret;
171a109
>   char strm_4, strm_0;
172a111
>   if ( 4 )
173a113,116
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   if ( BZ_OK )
175c118,120
< #define BZ_MAX_UNUSED 0
---
>     0;
>   if ( BZ_OK ) ;
>   if ( BZ_STREAM_END )
176a122,123
>     if ( 0 )
>       {
177a125
>       }
179,306d126
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    );
< 
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    , 
<       BZFILE*  
<    );
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
<       void*   p3      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
<       void*   p3      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<   BZ2_bzWriteClose64 ( 
<       int          , 
<       BZFILE       , 
<       int           , 
<        int , 
<        int , 
<        int , 
<        int 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           p6            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           p5            
<    );
<  
< BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         p1, 
<                              unsigned * p2,
<                              char*         p3, 
<                              unsigned   p4,
<                              int           p5 )
< {
<    bz_stream strm;
<     int strm_5,  strm_1,  ret;
<     
<    char strm_4,  strm_0;
<    
<    
< 
<    if (        
<           
<               
<              4) 
<            
< 
<    bzalloc  NULL;
<    bzfree  NULL;
<    opaque  NULL
<      ;
<    if (  BZ_OK)  
< 
<      
<      
<      
<      
< 
<      0;
<    if (  BZ_OK)  ;
<    if (  BZ_STREAM_END)  
< 
<    
<      
<    
<     
< 
<    
<    if (  0) {
<       
<        
<    }        
< 
<    
<    
<      
308a129
> const char *BZ_APIBZ2_bzlibVersion (  );
310,342c131,132
< 
< 
<  const char * BZ_APIBZ2_bzlibVersion (
<       
<    );
< 
<   * BZ_APIBZ2_bzopen (
<       const char *,
<       const char *
<    );
<  * BZ_APIBZ2_bzopen
<                ( const char *p1,
<                  const char *p2 )
< {
<     
< }
< 
<   * BZ_APIBZ2_bzdopen (
<       int        ,
<       const char *
<    );
<          
<   BZ_APIBZ2_bzread (
<       BZFILE* , 
<       void* p2  
<    );
< 
<   BZ_APIBZ2_bzwrite (
<       BZFILE* , 
<       void*   p2      
<    );
<  
< BZ_APIBZ2_bzwrite (BZFILE* p1, void* p2 )
---
> *BZ_APIBZ2_bzopen ( const char *, const char * );
> *BZ_APIBZ2_bzopen ( const char *p1, const char *p2 )
344d133
<    int bzerr
346,351d134
<    ;
<    if(  BZ_OK){
<        
<    
<        
<    }
354,372c137
<    
<        b
<    
<   ( )
< 
<    
<     ;
< 
< 
<  void BZ_APIBZ2_bzclose (
<        
<    );
< 
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *, 
<       int    *
<    );
< 
< 
---
> *BZ_APIBZ2_bzdopen ( int, const char * );
373a139
> BZ_APIBZ2_bzread ( BZFILE *, void *p2 );
374a141
> BZ_APIBZ2_bzwrite ( BZFILE *, void *p2 );
375a143,147
> BZ_APIBZ2_bzwrite ( BZFILE * p1, void *p2 )
> {
>   int bzerr;
>   if ( BZ_OK )
>     {
376a149,150
>     }
> }
377a152
> b (  );
378a154
> void BZ_APIBZ2_bzclose (  );
380c156
<  
---
> const char *BZ_APIBZ2_bzerror ( BZFILE *, int * );
384,386d159
< 
< 
< 
389,396d161
< 
< 
< 
< 
< 
< 
< 
< 
400c165
<    
---
> #\
401a167
> #\
403,406d168
< #  \
<    
< #  \
<    
420d181
< 
424,433d184
< 
< 
< 
<      
<      
<      
<      
<   
< 
< 
435,438d185
<      
< 
<   
<   
442d188
<    
446,451d191
< 
< 
< 
< 
< 
< 
454c194
<                                      
---
> 
458d197
<                                      
460d198
<   
464,470d201
<    
< 
< 
< 
< 
< 
< 
472d202
<                
473a204
> #
475c206
< #                 
---
> #\
478,485d208
< #               \
< 
< 
< 
< 
< 
< 
<        
487,488d209
<    
<   
490d210
<      
493,495c213,215
< #define BZ_N_RADIX 
< #define BZ_N_QSORT 
< #define BZ_N_SHELL 
---
> #define BZ_N_RADIX
> #define BZ_N_QSORT
> #define BZ_N_SHELL
497a218,219
> typedef struct
> {
498a221
>   ;
499a223,225
>   UInt32 arr1;
>   UInt32 arr2;
>   UInt32 ftab;
500a227,230
>   UInt32 ptr;
>   char block;
>   short mtfv;
>   char zbits;
501a232
>   Int32 nblock;
503,590c234,237
< typedef
<    struct {
<       
<        
< 
<       
<       
<           
<           
< 
<       
<          ;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32  ftab
<           ;
< 
<       
<       UInt32  ptr;
<        char   block;
<        short  mtfv;
<        char   zbits
< 
<       
<           
< 
<       
<          
<           ;
<       
< 
<       
<       Int32    nblock
<           
<           
<           ;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<        char    unseqToSeq[6]
< 
<       
<          
<           
< 
<       
<          
<          
< 
<       
<           ;
<       Int32    blockNo
<           ;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<        char       ;
<        char    ;
< 
<        char    len     
<               
<              
<       
<          
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
---
>   Int32 nInUse;
>   Bool inUse[6];
>   char unseqToSeq[6];
>   Int32 blockNo;
591a239,242
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   char;
>   char;
593,594c244,245
<          
<        
---
> char len}
> EState;
597,640d247
<       
<       
<       
<      
<      
<      
<      
<      
<      
<        
<        
<        
<        
<       
<     
<     
<     
<     
<     
<    
<    
<    
<      
<      
<      
<         
<         
<         
<         
<         
<         
<      
<      
<      
<      
<      
<        
<        
<        
<        
< 
< 
< 
< 
644a252,253
> typedef struct
> {
645a255,258
>   char;
>    ;
>     Int32;
>     Int32;
646a260
>   UInt32 tt;
647a262,266
>   short ll16;
>   char ll4;
>     Bool;
>     Bool;
>   char;
649,743c268,270
< typedef
<    struct {
<       
<        
< 
<       
<           
< 
<       
<        char    
<           
<            
<       
< 
<       
<          
<           
< 
<       
<           
<            
<           
<           
< 
<       
<           
<          
<           
<           ;
<           ;
<       Int32    ;
<       Int32    ;
< 
<       
<       UInt32   tt;
< 
<       
<        short   ll16;
<        char    ll4
< 
<       
<          
<          
<          
<          
< 
<       
<           ;
<       Bool     ;
<       Bool     ;
<        char    ;
< 
<       
<        char       ;
<       Int32    mtfbase[  MTFL_SIZE]
<               [BZ_MAX_SELECTORS]
<            [BZ_MAX_SELECTORS]
<              [BZ_MAX_ALPHA_SIZE]
< 
<             
<              
<              
<           
< 
<       
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<            
<           
<           
<           
<           
<          
<          
<          ;
< 
<    }
<    DState;
< 
< 
< 
---
>   char;
>   Int32 mtfbase[MTFL_SIZE]
>     [BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
744a272,273
> }
> DState;
749c278
<       
---
> 
754c283,285
<     c_tPos  
---
>     c_tPos
> 
> #\
756,757d286
< #                                           \
<    
760c289,291
<    ll4i          
---
>    ll4i
> 
> #\
762,763d292
< #                           \
<    
766c295
<    ll16i    
---
>    ll16i
770,851d298
<         
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #   \
<    
< 
< #define   zzn       
< 
< 
< 
< #define      a  
< 
< #  
< 
< #  
< 
<   
<     
< 
< 
< 
< 
< # 
<  
<  
<  
<  
<  
<  
< 
< 
< 
< 
< 
< #define         zz        
< #define       zz        
< #define       zz        
< #define        zz  
< #define   zz  
< 
< 
< 
<        
<      
<      
<       
<  
< 
< 
853a301
> #\
855a304
> #define   zzn
856a306
> #define      a
857a308
> #
858a310
> #
859a312
> #
860a314,318
> #define         zz
> #define       zz
> #define       zz
> #define        zz
> #define   zz
861a320
> #\
863a323
> #define   zzn
864a325
> #define      a
865a327
> #define dz
866a329
> #define dz
867a331
> #define  az
868a333
> #\
870a336
> #define    BZ_N_QSORT
872,873c338
< #   \
<    
---
> #
875c340,342
< #define   zzn       
---
> #define  ftabb1
> #1
> #
876a344
> #
877a346,348
> #define   zz0
> #define    zz1
> #define        zz3
878a350,351
> #define                            \
>    WEIGHTOFzw1WEIGHTOFzw2                     \
880d352
< #define      a  
882c354
< #define dz 
---
> #
884c356,364
< #define dz 
---
> EState *makeMaps_e_s, *generateMTFValues_s;
> makeMaps_e ( void )
> {
>   Int32 i = 0;
>   for ( ;; makeMaps_e_s )
>     {
>       makeMaps_e_s->unseqToSeq[i]++;
>     }
> }
885a366,367
> generateMTFValues ( void )
> {
887c369,401
< #define  az
---
>   char yy_1;
>   unsigned char yy_0;
>   Int32 i, j, zPend, wr, EOB, ptr_0;
> 
>   unsigned block_0, mtfv_0 = +1;
> 
>   for ( ;; )
>     generateMTFValues_s->mtfFreq[i];
>   for ( ;; )
>     i;
> 
>   for ( ;; )
>     {
>       char ll_i;
>       ( "" ) - 1;
>       if ( 0 )
> 	generateMTFValues_s;
>       ( "" );
> 
>       if ( ll_i )
> 	{
> 
> 	}
>       {
> 
> 	if ( 0 )
> 	  {
> 	    char rtmp, rll_i;
> 	    unsigned char *ryy_j;
> 
> 	    ( rtmp );;
> 	    generateMTFValues_s->mtfFreq[1];
> 	  }
889,890c403,404
< #                                         \
<    
---
>       }
>     }
891a406
>   if ( 0 )
893,895c408,409
<   
< #define    BZ_N_QSORT
<   
---
>     ;
>   generateMTFValues_s->mtfFreq;
896a411,412
>   wr;
> }
897a414
> default_bzfree ( void );
899,908c416
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
---
> s (  );
909a418,421
> BZ_APIBZ2_bzCompressInit ( bz_stream * p1, int p2, int p3 )
> {
>   Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
>   EState *s;
910a423,424
>   short s_10;
>   char s_9;
911a426
>   bz_stream *s_0;
912a428
>   if ( 0 )
914,916c430
< #define  ftabb1      
< #    1
< #  
---
>     if ( 0 )
917a432,435
>       if ( 0 )
> 	if ( bzalloc NULL )
> 	  default_bzalloc;
>   if ( bzfree NULL )
918a437,438
>     BZALLOC (  );
>   if ( NULL )
920,922c440,444
< # 
<  
<  
---
>     arr1 NULL;
>   arr2 NULL;
>   ftab NULL * BZALLOC (  );
>   +sizeof ( UInt32 );
>   ( sizeof ( UInt32 ) );
923a446
>   if ( NULL )
924a448,452
>     ( char ) ( short ) s_4;
>   zbits NULL;
>   s_4 = 0;
>   0;
>   0;
925a454,455
>   return BZ_OK;
> }
926a457
> #\
928a460
> handle_compress (  );
929a462,463
> BZ_APIBZ2_bzCompress ( bz_stream * p1 )
> {
930a465,471
>   EState *s;
>   Int32 s_1;
>   bz_stream *s_0;
>   if ( NULL )
>     ;
>   if ( NULL )
>     if ( strm )
931a473,474
>       return BZ_OK;
> }
932a476,483
> BZ_APIBZ2_bzCompressEnd ( void )
> {
>   EState *s;
>   bz_stream *s_0;
>   if ( NULL )
>     ;
>   if ( NULL )
>     if ( strm )
933a485,490
>       if ( arr1 NULL )
> 	( arr1 );
>   if ( arr2 NULL )
>     ( arr2 );
>   if ( ftab NULL )
>     ( ftab ) (  );
934a492
>   ;
935a494
> }
936a496,499
> BZ_APIBZ2_bzDecompressInit ( void )
> {
>   DState *s;
>   Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
937a501
>   bz_stream *s_0;
938a503
>   if ( 0 )
939a505,507
>     if ( NULL )
>       if ( 1 )
> 	if ( 4 )
941,943c509,511
< #define   zz0  
< #define    zz1  
< #define        zz3
---
> 	  if ( bzalloc NULL )
> 	    default_bzalloc;
>   if ( bzfree NULL )
945,947c513,514
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<      
---
>     BZALLOC (  );
>   if ( NULL )
949c516,519
<                                       
---
>     0;
>   0;
>   0;
>   0;
950a521,524
>   ;
>   ll4 NULL;
>   ll16 NULL;
>   tt NULL;
952c526
< #                                    
---
> }
953a528
> unRLE_obuf_to_output_FAST (  );
954a530,537
> BZ_APIBZ2_bzDecompress ( bz_stream * p1 )
> {
>   DState *s;
>   bz_stream *s_0;
>   if ( NULL )
>     ;
>   if ( NULL )
>     if ( strm )
955a539,540
>       AssertH (  );
> }
956a542,549
> BZ_APIBZ2_bzDecompressEnd ( bz_stream * p1 )
> {
>   DState *s;
>   bz_stream *s_0;
>   if ( NULL )
>     ;
>   if ( NULL )
>     if ( strm )
957a551,557
>       if ( tt NULL )
> 	( tt );
>   if ( ll16 NULL )
>     ( ll16 );
>   if ( ll4 NULL )
>     ( ll4 ) (  );
>   ;
958a559
> }
959a561,570
> typedef struct
> {
>   FILE *handle;
>   char buf;
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
> Bool initialisedOk}
> bzFile;
960a572,576
> *BZ_APIBZ2_bzWriteOpen
>   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
> {
>   Int32 ret;
>   bzFile *bzf;
961a578
>   ( 4 );
962a580,581
>   ( f ) = ( sizeof ( bzFile ) );
>   ( NULL );
963a583,586
>   BZ_OK;
>   False;
>   0;
>   f = bzf = NULL;
964a588,590
>   if ( 0 )
>     ( workFactor );
>   ( BZ_OK );
965a592
>   bzf;
966a594
> }
967a596,600
> void BZ_APIBZ2_bzWrite ( int *p1, BZFILE * p2, void *p3 )
> {
>   Int32 ret, bzf_4_5, bzf_4_1;
>   bzFile *bzf = *p2;
>   char bzf_4_4, bzf_4_0;
968a602
>   0;
969a604,605
>   ;
>   ( ( bzf ) );
970a607
>   ( 0 );
971a609
>   {
972a611,614
>     if ( bzf_4_1 )
>       ;
>   }
> }
973a616,620
> void BZ_APIBZ2_bzWriteClose
>   ( int *p1, BZFILE * p2, int p3, unsigned *p4, unsigned *p5 )
> {
>   ( NULL );
> }
974a622,623
> BZ_APIBZ2_bzWriteClose64 ( void )
> {
975a625,627
>   bzFile *bzf = *b;
>   0;
>   ( ( bzf ) );
976a629,632
>   if ( NULL )
>     if ( NULL )
>       if ( NULL )
> 	if ( NULL )
977a634,641
> 	  if ( ferror ( bzf ) != NULL )
> 	    bzf;
>   if ( NULL )
>     bzf;
>   if ( NULL )
>     bzf;
>   if ( NULL )
>     bzf;
978a643,644
>   ;
> }
979a646,652
> *BZ_APIBZ2_bzReadOpen
>   ( int *bzerror,
>     FILE * f, int verbosity, int small, void *unused, int nUnused )
> {
>   bzFile *bzf;
>   char bzf_4_0;
>   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
980a654
>   ( BZ_MAX_UNUSED );
981a656,657
>   ( f ) = ( sizeof ( bzFile ) );
>   ( NULL );
982a659
>   ;
983a661,662
>   False;
>   bzf = NULL;
984a664
>   while ( 0 )
985a666,667
>     ( small );
>   ( BZ_OK );
986a669,670
>   bzf;
> }
987a672,677
> void
> BZ_APIBZ2_bzReadClose ( int *p1, BZFILE * p2 )
> {
>   bzFile *bzf = *p2;
>   Bool bzf_6;
>   bzf_3 ( bzf );
988a679
>   bzf_3;
989a681
>   ;
990a683
> }
991a685,686
> BZ_APIBZ2_bzRead ( int *p1, BZFILE * p2, void *p3 )
> {
992a688,691
>   bzFile *bzf = *p2;
>   char bzf_4_4;
>   int bzf_4_5;
>   0;
993a693,694
>   return 0;
> }
994a696,703
> void BZ_APIBZ2_bzReadGetUnused ( int *p1, BZFILE * p2, void **p3, int *p4 )
> {
>   bzFile *bzf = *p2;
>   char bzf_4_0;
>   int bzf_4_1;
>   0;
>   ( BZ_STREAM_END );
>   ( NULL );
995a705,706
>   ;
> }
996a708,712
> BZ_APIBZ2_bzBuffToBuffCompress
>   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5, int p6 )
> {
>   bz_stream strm;
>   int strm_5, strm_1, ret;
997a714
>   char strm_4, strm_0;
998a716
>   if ( 0 )
999a718,722
>     if ( 0 )
>       bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   if ( BZ_OK )
1000a724,726
>     0;
>   if ( BZ_FINISH_OK ) ;
>   if ( BZ_STREAM_END )
1001a728,729
>     ret;
> }
1002a731,733
> const char *
> BZ_APIBZ2_bzlibVersion (  )
> {
1003a735
> }
1004a737
> bzopen_or_bzdopen ( char, int, char, int );
1005a739,742
> *BZ_APIBZ2_bzdopen ( int p1, const char *p2 )
> {
>   ( 1 );
> }
1006a744,747
> BZ_APIBZ2_bzread ( BZFILE * p1, void *p2 )
> {
>   int bzerr, nread;
>   if ( ( ( bzFile * ) p1 ) )
1007a749,750
>     if ( bzerr == BZ_STREAM_END )
>       {
1008a752,754
> 	;
>       }
> }
1009a756,760
> void
> BZ_APIBZ2_bzclose ( p1 )
> {
>   int bzerr;
>   FILE *fp = ( ( bzFile * ) b );
1010a762,774
>   if ( ( ( bzFile * ) p1 ) )
>     {
>       ( NULL );
>       if ( BZ_OK )
> 	{
> 	  ( NULL );
> 	}
>     }
>   if ( stdout )
>     {
>       fp;
>     }
> }
1011a776,779
> const char *
> BZ_APIBZ2_bzerror ( BZFILE * p1, int *p2 )
> {
>   int err = ( ( bzFile * ) p1 );
1012a781
>   if ( 0 )
1013a783,784
>     bzerrorstrings_0;
> }
1014a786,787
> #include <signal.h>
> #include <errno.h>
1015a789,790
> #include <fcntl.h>
> #include <utime.h>
1016a792,793
> #define   \
>        name
1018,2193c795,796
< 
< 
<                             
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  EState * makeMaps_e_s,  * generateMTFValues_s;
< makeMaps_e ( void )
< {
<    Int32 i
<     = 0;
<    for (  ;   ; 
<        makeMaps_e_s) {
<          makeMaps_e_s->unseqToSeq[i]  
<          ++;
<       }
< }
< 
< 
< 
< 
<  
< generateMTFValues ( void )
< {
<        
<     char yy_1;
<    unsigned char yy_0;
<    Int32   i, j, zPend, wr, EOB, ptr_0
< 
<    
<         ;
<    
<    
<    
<    
<         
<    unsigned  block_0,   mtfv_0
< 
<    
<     = +1;
<         
<    
< 
<    for (  ;   ; ) generateMTFValues_s->mtfFreq[i]  
< 
<      
<      ;
<    for (  ;   ; )     i;
< 
<    for (  ;   ; ) {
<        char ll_i;
<        (    "" )
<         -1; if (  0)   
<         generateMTFValues_s;
<        (    "" );
< 
<       if (  ll_i) { 
<          
<       }  {
< 
<          if (  0) 
<          {
<               char  rtmp,   rll_i
<                
<               
<               
<               ;
<              unsigned char* ryy_j;
<               
<              (   rtmp ) 
<               
<                 
<               ; ; generateMTFValues_s->mtfFreq[1];
<          }
< 
<       }
<    }
< 
<    if (  0) 
< 
<       ; generateMTFValues_s->mtfFreq;
< 
<      wr;
< }
< 
< 
< 
<    
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<                                 
<    
< 
< 
<  default_bzfree (   void  )
< ;
< 
< 
< 
< 
<     s 
< 
< 
< 
< 
< 
< 
< 
< 
<   (   )
< ;
< 
< 
< 
<  
< BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* p1, 
<                      int        p2,
<                      int        p3 )
< {
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
<    EState* s;
<    
<     short s_10;
<     char s_9;
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    bz_stream *s_0;
< 
<    if (0)  
< 
<    if (    
<               
<              0)
<       
< 
<    if (  0)   
<    if (bzalloc  NULL)   default_bzalloc;
<    if (bzfree  NULL)   
< 
<      BZALLOC(  );
<    if (  NULL)  
<      
< 
<    arr1  NULL;
<    arr2  NULL;
<    ftab  NULL
< 
<             * 
<      BZALLOC(                     );
<       +  sizeof(UInt32) ;
<      (                sizeof(UInt32) );
< 
<    if (          NULL) 
< 
<                
<                  
<                   
<            
<          
<                  
<              
<             
< 
<                  ( char)
<                   ( short)s_4;
<    zbits              NULL;
<                    s_4
< 
<              = 
<       0;
<       0;
<      0;
<      
<    
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #                \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  handle_compress (   )
< ;
< 
< 
< 
<  
< BZ_APIBZ2_bzCompress ( bz_stream *p1 )
< {
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<    
<      
<    return BZ_OK; 
< }
< 
< 
< 
<  
< BZ_APIBZ2_bzCompressEnd  ( void )
< {
<    EState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<    if (arr1  NULL) (arr1);
<    if (arr2  NULL) (arr2);
<    if (ftab  NULL) (ftab)
<    ();
< 
<      ;   
< 
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< BZ_APIBZ2_bzDecompressInit 
<                      (  
<                        
<                        void )
< {
<    DState* s;
<    Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
<    
<    
<    
<    
<    
<    
<    bz_stream *s_0;
< 
<    if (0)  
< 
<    if (  NULL)  
<    if (      1)  
<    if (      4)  
< 
<    if (bzalloc  NULL)   default_bzalloc;
<    if (bzfree  NULL)   
< 
<      BZALLOC(  );
<    if (  NULL)  
<                       
<                   
<                      
<                     
<                     
<      0;
<           0;
<           0;
<          0;
<          
<            ;
<    ll4                    NULL;
<    ll16                   NULL;
<    tt                     NULL
<                
<                  ;
< 
<     
< }
< 
< 
< 
< 
<  unRLE_obuf_to_output_FAST (   )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzDecompress ( bz_stream *p1 )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<      
< 
<    AssertH (   )
< 
<     ;  
< }
< 
< 
< 
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *p1 )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<    if (tt    NULL) (tt);
<    if (ll16  NULL) (ll16);
<    if (ll4   NULL) (ll4)
< 
<    ();
<      ;
< 
<     
< }
< 
< 
< 
< 
< 
< 
<                      \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf  ;
< 
<    
< 
<     (   
<               
<               
<              4)
<       ;
< 
<     (f)
<       
< 
<     =  ( sizeof(bzFile) );
<     (  NULL)
<       ;
< 
<    BZ_OK;
<      False;
<               0;
<             f
<           = 
<    bzf   
<        
<       = NULL;
< 
<    if (  0)   
<       (   
<                                workFactor );
<     (  BZ_OK)
<       ;
< 
<    bzf  
<      ;
<        
< }
< 
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    p1, 
<                BZFILE* p2, 
<                void*   p3 )
< {
<    Int32   ret,  bzf_4_5,  bzf_4_1;
<    bzFile* bzf = *p2;
<    char bzf_4_4,  bzf_4_0;
<     
<    
<     
<     0
<       ;
<     
<       ;
<     ((bzf))
<       ;
< 
<     (  0)
<       
< 
<      
<       ;
< 
<      {
<         
<         
<         
<          
<          
< 
<       if (   
< 
<        bzf_4_1  )
<          ;
<    }
< }
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          p1, 
<                     BZFILE*       p2, 
<                     int           p3,
<                     unsigned * p4,
<                     unsigned * p5 )
< {
<     (    
<                            NULL );
< }
< 
< 
<  
< 
< 
< 
< 
< BZ_APIBZ2_bzWriteClose64
<                   (            
<                             
<                     
<                      
<                      
<                      
<                      void )
< {
<    
<    bzFile* bzf = *b;
<     0
<       ;
<     ((bzf))
<       ;
< 
<    if (  NULL)   
<    if (  NULL)   
<    if (  NULL)   
<    if (  NULL)   
< 
<    if (     
< 
<        ferror ( bzf )  
< 
<      != NULL)
<         bzf;
<    if (  NULL)
<         bzf;
<    if (  NULL)
<         bzf;
<    if (  NULL)
<         bzf;
< 
<    
<    
<    ;
< }
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf  ;
<    char bzf_4_0;
<     int bzf_4_1, bzf_3, bzf_2, bzf_6,      ret;
<    
<    
<    
<    
< 
<    
< 
<     (    
<               
<               
<               
<                  BZ_MAX_UNUSED)
<       ;
< 
<     (f)
<       
< 
<     =  ( sizeof(bzFile) );
<     (  NULL) 
<       ;
< 
<    ;
< 
<      
<             
<               
<            False;
<    bzf   
<        
<       = NULL;
<    
<    while (  0) 
< 
<       (   small );
<     (  BZ_OK)
<       
< 
<      ;
<       
< 
<      
<     bzf;   
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *p1, BZFILE *p2 )
< {
<    bzFile* bzf = *p2;
<    Bool bzf_6;
<     bzf_3
< 
<    (
<     bzf  )
<       ;
< 
<     bzf_3
<       ;
< 
<     
<       ;
<    
< }
< 
< 
< 
<  
< BZ_APIBZ2_bzRead 
<            ( int*    p1, 
<              BZFILE* p2, 
<              void*   p3 )
< {
<    
<    bzFile* bzf = *p2;
<    char bzf_4_4;
<     int bzf_4_5;
<     0
<       ;
< 
<     
<       
< 
<       
<       
< 
<      
<      
< 
<      
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    p1, 
<                        BZFILE* p2, 
<                        void**  p3, 
<                        int*    p4 )
< {
<    bzFile* bzf = *p2;
<    char bzf_4_0;
<     int bzf_4_1;
<     0
<       ;
<     (  BZ_STREAM_END)
<       ;
<     (      NULL)
<       ;
< 
<    
<      
<      ;
< }
< 
< 
< 
< 
< 
< 
< 
<  
< BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         p1, 
<                            unsigned * p2,
<                            char*         p3, 
<                            unsigned   p4,
<                            int           p5, 
<                            int           p6 )
< {
<    bz_stream strm;
<     int strm_5,  strm_1,  ret;
<     
<    char strm_4,  strm_0;
<    
<    
< 
<    if (        
<           
<               
<               
<              0) 
<        
< 
<    if (  0)   
<    bzalloc  NULL;
<    bzfree  NULL;
<    opaque  NULL
<      ;
<    if (  BZ_OK)  
< 
<      
<      
<      
<      
< 
<      0;
<    if (  BZ_FINISH_OK)  ;
<    if (  BZ_STREAM_END)  
< 
<    
<         
<    
<     
< 
<    
<    
<     
< 
<    
<    
<     ret;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersion()
< {
<     
< }
< 
< 
< 
< 
< 
<   bzopen_or_bzdopen
<                (  char ,   
<                  int ,             
<                   char ,
<                  int )      
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  * BZ_APIBZ2_bzdopen
<                ( int p1,
<                  const char *p2 )
< {
<     (1);
< }
< 
< 
< 
<  
< BZ_APIBZ2_bzread (BZFILE* p1, void* p2 )
< {
<    int bzerr, nread;
<    if (((bzFile*)p1)  )  
<      
<    if (    bzerr == BZ_STREAM_END) {
<        
<      
<        ;
<    }
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ_APIBZ2_bzclose ( p1)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b);
<    
<    if ( 
<    ((bzFile*)p1)){
<       (NULL);
<       if(  BZ_OK){
<          (NULL);
<       }
<    }
<    if(  stdout){
<       fp;
<    }
< }
< 
< 
< 
< 
<   
<   
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *p1, int *p2)
< {
<    int err = ((bzFile *)p1);
< 
<    if(0)   
<      
<     bzerrorstrings_0;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<        
< 
< 
<    
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
<         
<    
<   
< 
< 
< 
< 
< 
< #   include <fcntl.h>
< #   include <utime.h>
< 
<         
<         
<          
<       
<       
< 
< #   define   \
<        name
< 
< #   define   \
<        name
< 
<      
< 
<         
< 
< 
< 
< 
< 
<                                        
<    
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<             
<             
<             
< 
< 
<               
<             
<            
< 
< 
< 
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<      
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> #define   \
>        name
2197,2203c800
<  main ( int , char *[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> main ( int, char *[] );
1d0
<  
9d7
<  
11,13c9,13
<                 
<               
<              
---
> 
> 
> 
> 
> 
17c17
<            
---
> 
30,35c30,35
< typedef 
<    struct {
<        ;
<        int avail_in;
<        int total_in_lo32;
<        int total_in_hi32
---
> typedef
> struct {
>     ;
>     int avail_in;
>     int total_in_lo32;
>     int total_in_hi32
37,40d36
<        
<         ;
<        int total_out_lo32;
<        int total_out_hi32;
42c38,42
<       void *state;
---
>     ;
>     int total_out_lo32;
>     int total_out_hi32;
> 
>     void *state;
44,48c44,48
<       void (*bzalloc)( );
<       void (*bzfree)( void );
<       void *opaque
<    } 
<    bz_stream,  * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
---
>     void (*bzalloc)( );
>     void (*bzfree)( void );
>     void *opaque
> }
> bz_stream,  * BZ_APIBZ2_bzCompressEnd_strm,  * BZ_APIBZ2_bzDecompressInit_strm;
54,55c54,55
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #   define BZ_API
> #   define BZ_EXTERN
60,61c60,61
<   typedef  BZFILE;
< int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len, 
---
> typedef  BZFILE;
> int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzCompressInit_workFactor,  BZ_APIBZ2_bzCompress_action,  BZ_APIBZ2_bzDecompressInit_verbosity,  BZ_APIBZ2_bzDecompressInit_small,  BZ_APIBZ2_bzWrite_len,  BZ_APIBZ2_bzWriteClose64_abandon,  BZ_APIBZ2_bzRead_len,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzread_len,
66,67c66,67
<   
<   bzerrorstrings_0  ;
---
> 
>     bzerrorstrings_0  ;
74,75c74,75
<        lll                      
<      
---
>        lll
> 
84c84,100
< #define lval           
---
> #define lval
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
100a117
> int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
104a122
> *bzerrorstrings = {
112d129
<     
117d133
< int * BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  * BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, 
122,138c138
<   *bzerrorstrings = {
<        
<       
<       
<       
<       
<       
<       
<       
<       
<       
<          
<          
<          
<          
<          
<       ""   
---
>     ""
141c141
<  default_bzalloc (   Int32    )
---
> default_bzalloc (   Int32    )
143,169c143,169
< BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* , 
<       int        , 
<       int        p3         
<    );
< 
<   BZ_APIBZ2_bzCompress ( 
<       bz_stream* p1  
<    );
< 
<     
<        strm 
<    
< 
<    ( 
<         
<       int        
<              
<    );
< 
<   BZ_APIBZ2_bzDecompress ( 
<         
<    );
< 
<   BZ_APIBZ2_bzDecompressEnd ( 
<         
<    );
---
> BZ_APIBZ2_bzCompressInit (
>     bz_stream* ,
>     int        ,
>     int        p3
> );
> 
> BZ_APIBZ2_bzCompress (
>     bz_stream* p1
> );
> 
> 
> strm
> 
> 
> (
> 
>     int
> 
> );
> 
> BZ_APIBZ2_bzDecompress (
> 
> );
> 
> BZ_APIBZ2_bzDecompressEnd (
> 
> );
179,263c179,263
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    );
< 
<  void BZ_APIBZ2_bzReadClose ( 
<       int*    , 
<       BZFILE*  
<    );
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
<       void*   p3      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
<       void*   p3      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<   BZ2_bzWriteClose64 ( 
<       int          , 
<       BZFILE       , 
<       int           , 
<        int , 
<        int , 
<        int , 
<        int 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           p6            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           p5            
<    );
<  
< BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         p1, 
<                              unsigned * p2,
<                              char*         p3, 
<                              unsigned   p4,
<                              int           p5 )
---
> * BZ_APIBZ2_bzReadOpen (
>     int*  ,
>     FILE* ,
>     int   ,
>     int   ,
>     void* ,
>     int
> );
> 
> void BZ_APIBZ2_bzReadClose (
>     int*    ,
>     BZFILE*
> );
> 
> void BZ_APIBZ2_bzReadGetUnused (
>     int*    ,
>     BZFILE* ,
>     void**  ,
>     int*
> );
> 
> BZ_APIBZ2_bzRead (
>     int*    ,
>     BZFILE* ,
>     void*   p3
> );
> 
> * BZ_APIBZ2_bzWriteOpen (
>     int*  ,
>     FILE* ,
>     int   ,
>     int   ,
>     int
> );
> 
> void BZ_APIBZ2_bzWrite (
>     int*    ,
>     BZFILE* ,
>     void*   p3
> );
> 
> void BZ_APIBZ2_bzWriteClose (
>     int*          ,
>     BZFILE*       ,
>     int           ,
>     unsigned * ,
>     unsigned *
> );
> 
> BZ2_bzWriteClose64 (
>     int          ,
>     BZFILE       ,
>     int           ,
>     int ,
>     int ,
>     int ,
>     int
> );
> 
> 
> 
> 
> BZ_APIBZ2_bzBuffToBuffCompress (
>     char*         ,
>     unsigned * ,
>     char*         ,
>     unsigned   ,
>     int           ,
>     int           p6
> );
> 
> BZ_APIBZ2_bzBuffToBuffDecompress (
>     char*         ,
>     unsigned * ,
>     char*         ,
>     unsigned   ,
>     int           p5
> );
> 
> BZ_APIBZ2_bzBuffToBuffDecompress
> ( char*         p1,
>   unsigned * p2,
>   char*         p3,
>   unsigned   p4,
>   int           p5 )
265c265
<    bz_stream strm;
---
>     bz_stream strm;
267,306c267,306
<     
<    char strm_4,  strm_0;
<    
<    
< 
<    if (        
<           
<               
<              4) 
<            
< 
<    bzalloc  NULL;
<    bzfree  NULL;
<    opaque  NULL
<      ;
<    if (  BZ_OK)  
< 
<      
<      
<      
<      
< 
<      0;
<    if (  BZ_OK)  ;
<    if (  BZ_STREAM_END)  
< 
<    
<      
<    
<     
< 
<    
<    if (  0) {
<       
<        
<    }        
< 
<    
<    
<      
---
> 
>     char strm_4,  strm_0;
> 
> 
> 
>     if (
> 
> 
>         4)
> 
> 
>         bzalloc  NULL;
>     bzfree  NULL;
>     opaque  NULL
>     ;
>     if (  BZ_OK)
> 
> 
> 
> 
> 
> 
>         0;
>     if (  BZ_OK)  ;
>     if (  BZ_STREAM_END)
> 
> 
> 
> 
> 
> 
> 
>         if (  0) {
> 
> 
>         }
> 
> 
> 
> 
312,342c312,322
<  const char * BZ_APIBZ2_bzlibVersion (
<       
<    );
< 
<   * BZ_APIBZ2_bzopen (
<       const char *,
<       const char *
<    );
<  * BZ_APIBZ2_bzopen
<                ( const char *p1,
<                  const char *p2 )
< {
<     
< }
< 
<   * BZ_APIBZ2_bzdopen (
<       int        ,
<       const char *
<    );
<          
<   BZ_APIBZ2_bzread (
<       BZFILE* , 
<       void* p2  
<    );
< 
<   BZ_APIBZ2_bzwrite (
<       BZFILE* , 
<       void*   p2      
<    );
<  
< BZ_APIBZ2_bzwrite (BZFILE* p1, void* p2 )
---
> const char * BZ_APIBZ2_bzlibVersion (
> 
> );
> 
> * BZ_APIBZ2_bzopen (
>     const char *,
>     const char *
> );
> * BZ_APIBZ2_bzopen
> ( const char *p1,
>   const char *p2 )
344d323
<    int bzerr
346,351d324
<    ;
<    if(  BZ_OK){
<        
<    
<        
<    }
354,357c327,344
<    
<        b
<    
<   ( )
---
> * BZ_APIBZ2_bzdopen (
>     int        ,
>     const char *
> );
> 
> BZ_APIBZ2_bzread (
>     BZFILE* ,
>     void* p2
> );
> 
> BZ_APIBZ2_bzwrite (
>     BZFILE* ,
>     void*   p2
> );
> 
> BZ_APIBZ2_bzwrite (BZFILE* p1, void* p2 )
> {
>     int bzerr
359d345
<    
360a347
>     if(  BZ_OK) {
363,365d349
<  void BZ_APIBZ2_bzclose (
<        
<    );
367,370c351,371
<  const char * BZ_APIBZ2_bzerror (
<       BZFILE *, 
<       int    *
<    );
---
>     }
> }
> 
> 
> b
> 
> ( )
> 
> 
> ;
> 
> 
> void BZ_APIBZ2_bzclose (
> 
> );
> 
> const char * BZ_APIBZ2_bzerror (
>     BZFILE *,
>     int    *
> );
> 
380d380
<  
400c400
<    
---
> 
404c404
<    
---
>  
406c406
<    
---
>  
427,431c427,431
<      
<      
<      
<      
<   
---
> 
> 
> 
> 
> 
435d434
<      
437,438c436,438
<   
<   
---
> 
> 
> 
442c442
<    
---
> 
454c454
<                                      
---
>  
458c458,459
<                                      
---
>  
> 
460d460
<   
464c464
<    
---
>  
472d471
<                
475c474,475
< #                 
---
> 
> #
478a479
>  
485d485
<        
487,488d486
<    
<   
490c488,490
<      
---
> 
> 
> 
493,495c493,495
< #define BZ_N_RADIX 
< #define BZ_N_QSORT 
< #define BZ_N_SHELL 
---
> #define BZ_N_RADIX
> #define BZ_N_QSORT
> #define BZ_N_SHELL
504,570c504
<    struct {
<       
<        
< 
<       
<       
<           
<           
< 
<       
<          ;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32  ftab
<           ;
< 
<       
<       UInt32  ptr;
<        char   block;
<        short  mtfv;
<        char   zbits
< 
<       
<           
< 
<       
<          
<           ;
<       
< 
<       
<       Int32    nblock
<           
<           
<           ;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<        char    unseqToSeq[6]
< 
<       
<          
<           
< 
<       
<          
<          
< 
<       
<           ;
<       Int32    blockNo
<           ;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<        char       ;
<        char    ;
< 
<        char    len     
<               
<              
<       
<          
---
> struct {
572,573d505
<    }
<    EState
581a514
>     ;
583d515
< ;
584a517,520
>     UInt32  arr1;
>     UInt32  arr2;
>     UInt32  ftab
>     ;
586a523,526
>     UInt32  ptr;
>     char   block;
>     short  mtfv;
>     char   zbits
593,594c533
<          
<        
---
>     ;
596,636d534
< #define BZ_X_MAGIC_1     0
<       
<       
<       
<      
<      
<      
<      
<      
<      
<        
<        
<        
<        
<       
<     
<     
<     
<     
<     
<    
<    
<    
<      
<      
<      
<         
<         
<         
<         
<         
<         
<      
<      
<      
<      
<      
<        
<        
<        
<        
638a537
>     Int32    nblock
640a540
>     ;
642,643d541
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
644a543,545
>     Int32    nInUse;
>     Bool     inUse[6];
>     char    unseqToSeq[6]
649,737d549
< typedef
<    struct {
<       
<        
< 
<       
<           
< 
<       
<        char    
<           
<            
<       
< 
<       
<          
<           
< 
<       
<           
<            
<           
<           
< 
<       
<           
<          
<           
<           ;
<           ;
<       Int32    ;
<       Int32    ;
< 
<       
<       UInt32   tt;
< 
<       
<        short   ll16;
<        char    ll4
< 
<       
<          
<          
<          
<          
< 
<       
<           ;
<       Bool     ;
<       Bool     ;
<        char    ;
< 
<       
<        char       ;
<       Int32    mtfbase[  MTFL_SIZE]
<               [BZ_MAX_SELECTORS]
<            [BZ_MAX_SELECTORS]
<              [BZ_MAX_ALPHA_SIZE]
< 
<             
<              
<              
<           
< 
<       
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<            
<           
<           
<           
<           
<          
<          
<          ;
739,740d550
<    }
<    DState;
746,749c556,558
< #define                      \
<       stPos                 \
<                    \
<       
---
>     ;
>     Int32    blockNo
>     ;
751,754d559
< #define                    \
<                           \
<                     \
<     c_tPos  
756,757c561,564
< #                                           \
<    
---
>     Int32    nMTF;
>     Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
>     char       ;
>     char    ;
759,760c566
< #define                              \
<    ll4i          
---
>     char    len
762,763d567
< #                           \
<    
765,766d568
< #define  \
<    ll16i    
768,770d569
< #define                             \
<            scftab     \
<         
772a572,573
> }
> EState
781a583
> ;
793a596
> #define BZ_X_MAGIC_1     0
806,807d608
< #   \
<    
809d609
< #define   zzn       
813d612
< #define      a  
815d613
< #  
817d614
< #  
819,820d615
<   
<     
825,831d619
< # 
<  
<  
<  
<  
<  
<  
837,841d624
< #define         zz        
< #define       zz        
< #define       zz        
< #define        zz  
< #define   zz  
845,849d627
<        
<      
<      
<       
<  
863a642,643
> #define MTFA_SIZE 4096
> #define MTFL_SIZE 6
868a649,650
> typedef
> struct {
872,873d653
< #   \
<    
875d654
< #define   zzn       
878a658
>     char
880d659
< #define      a  
882d660
< #define dz 
884d661
< #define dz 
887d663
< #define  az
889,890d664
< #                                         \
<    
893,895d666
<   
< #define    BZ_N_QSORT
<   
899,908d669
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
914,916d674
< #define  ftabb1      
< #    1
< #  
918a677,681
>     ;
>     ;
>     Int32    ;
>     Int32    ;
> 
920,922c683
< # 
<  
<  
---
>     UInt32   tt;
924a686,687
>     short   ll16;
>     char    ll4
932a696,699
>     ;
>     Bool     ;
>     Bool     ;
>     char    ;
934a702,706
>     char       ;
>     Int32    mtfbase[  MTFL_SIZE]
>     [BZ_MAX_SELECTORS]
>     [BZ_MAX_SELECTORS]
>     [BZ_MAX_ALPHA_SIZE]
941,943d712
< #define   zz0  
< #define    zz1  
< #define        zz3
945,947d713
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<      
949d714
<                                       
952d716
< #                                    
972a737
>     ;
973a739,740
> }
> DState;
978a746,749
> #define                      \
>       stPos                 \
>                    \
>  
979a751,754
> #define                    \
>                           \
>                     \
>     c_tPos
980a756,757
> #                                           \
>  
981a759,760
> #define                              \
>    ll4i
982a762,763
> #                           \
>  
983a765,766
> #define  \
>    ll16i
984a768,770
> #define                             \
>            scftab     \
>  
1020c806,807
<                             
---
> #   \
>  
1021a809
> #define   zzn
1024a813
> #define      a
1025a815
> #
1026a817
> #
1033a825
> #
1042,1052d833
<  EState * makeMaps_e_s,  * generateMTFValues_s;
< makeMaps_e ( void )
< {
<    Int32 i
<     = 0;
<    for (  ;   ; 
<        makeMaps_e_s) {
<          makeMaps_e_s->unseqToSeq[i]  
<          ++;
<       }
< }
1055a837,841
> #define         zz
> #define       zz
> #define       zz
> #define        zz
> #define   zz
1057,1063d842
<  
< generateMTFValues ( void )
< {
<        
<     char yy_1;
<    unsigned char yy_0;
<    Int32   i, j, zPend, wr, EOB, ptr_0
1065,1072d843
<    
<         ;
<    
<    
<    
<    
<         
<    unsigned  block_0,   mtfv_0
1074,1077d844
<    
<     = +1;
<         
<    
1079d845
<    for (  ;   ; ) generateMTFValues_s->mtfFreq[i]  
1081,1083d846
<      
<      ;
<    for (  ;   ; )     i;
1085,1090d847
<    for (  ;   ; ) {
<        char ll_i;
<        (    "" )
<         -1; if (  0)   
<         generateMTFValues_s;
<        (    "" );
1092,1094d848
<       if (  ll_i) { 
<          
<       }  {
1096,1109d849
<          if (  0) 
<          {
<               char  rtmp,   rll_i
<                
<               
<               
<               ;
<              unsigned char* ryy_j;
<               
<              (   rtmp ) 
<               
<                 
<               ; ; generateMTFValues_s->mtfFreq[1];
<          }
1111,1112d850
<       }
<    }
1114d851
<    if (  0) 
1116d852
<       ; generateMTFValues_s->mtfFreq;
1118,1119d853
<      wr;
< }
1123,1124d856
<    
<   
1139a872,873
> #   \
>  
1140a875
> #define   zzn
1144a880
> #define      a
1145a882
> #define dz
1146a884
> #define dz
1148,1149d885
<                                 
<    
1150a887
> #define  az
1152,1153c889,890
<  default_bzfree (   void  )
< ;
---
> #                                         \
>  
1156a894
> #define    BZ_N_QSORT
1158d895
<     s 
1161a899
> #
1167,1168d904
<   (   )
< ;
1172,1243d907
<  
< BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* p1, 
<                      int        p2,
<                      int        p3 )
< {
<    Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
<    EState* s;
<    
<     short s_10;
<     char s_9;
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    bz_stream *s_0;
< 
<    if (0)  
< 
<    if (    
<               
<              0)
<       
< 
<    if (  0)   
<    if (bzalloc  NULL)   default_bzalloc;
<    if (bzfree  NULL)   
< 
<      BZALLOC(  );
<    if (  NULL)  
<      
< 
<    arr1  NULL;
<    arr2  NULL;
<    ftab  NULL
< 
<             * 
<      BZALLOC(                     );
<       +  sizeof(UInt32) ;
<      (                sizeof(UInt32) );
< 
<    if (          NULL) 
< 
<                
<                  
<                   
<            
<          
<                  
<              
<             
< 
<                  ( char)
<                   ( short)s_4;
<    zbits              NULL;
<                    s_4
< 
<              = 
<       0;
<       0;
<      0;
<      
<    
<    
<    return BZ_OK;
< }
1249a914,916
> #define  ftabb1
> #    1
> #
1252a920
> #
1255d922
< #                \
1269,1270d935
<  handle_compress (   )
< ;
1274,1289d938
<  
< BZ_APIBZ2_bzCompress ( bz_stream *p1 )
< {
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<    
<      
<    return BZ_OK; 
< }
1291a941,943
> #define   zz0
> #define    zz1
> #define        zz3
1292a945,946
> #define                            \
>    WEIGHTOFzw1WEIGHTOFzw2                     \
1294,1306d947
< BZ_APIBZ2_bzCompressEnd  ( void )
< {
<    EState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
< 
<    if (arr1  NULL) (arr1);
<    if (arr2  NULL) (arr2);
<    if (ftab  NULL) (ftab)
<    ();
1308d948
<      ;   
1310,1311d949
<     
< }
1313a952
> #
1319d957
<  
1322,1363d959
< BZ_APIBZ2_bzDecompressInit 
<                      (  
<                        
<                        void )
< {
<    DState* s;
<    Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
<    
<    
<    
<    
<    
<    
<    bz_stream *s_0;
< 
<    if (0)  
< 
<    if (  NULL)  
<    if (      1)  
<    if (      4)  
< 
<    if (bzalloc  NULL)   default_bzalloc;
<    if (bzfree  NULL)   
< 
<      BZALLOC(  );
<    if (  NULL)  
<                       
<                   
<                      
<                     
<                     
<      0;
<           0;
<           0;
<          0;
<          
<            ;
<    ll4                    NULL;
<    ll16                   NULL;
<    tt                     NULL
<                
<                  ;
1365,1366d960
<     
< }
1371,1372d964
<  unRLE_obuf_to_output_FAST (   )
< ;
1385,1392d976
<  BZ_APIBZ2_bzDecompress ( bz_stream *p1 )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
1394d977
<      
1396d978
<    AssertH (   )
1398,1399d979
<     ;  
< }
1403,1410d982
<  BZ_APIBZ2_bzDecompressEnd  ( bz_stream *p1 )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (  NULL)  
<      ;
<    if (  NULL)  
<    if (  strm)  
1412,1414d983
<    if (tt    NULL) (tt);
<    if (ll16  NULL) (ll16);
<    if (ll4   NULL) (ll4)
1416,1417d984
<    ();
<      ;
1419,1420d985
<     
< }
1427d991
<                      \
1430,1440d993
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk
<    }
<    bzFile;
1448,1456d1000
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf  ;
1458d1001
<    
1460,1464d1002
<     (   
<               
<               
<              4)
<       ;
1466,1467d1003
<     (f)
<       
1469,1471d1004
<     =  ( sizeof(bzFile) );
<     (  NULL)
<       ;
1473,1486d1005
<    BZ_OK;
<      False;
<               0;
<             f
<           = 
<    bzf   
<        
<       = NULL;
< 
<    if (  0)   
<       (   
<                                workFactor );
<     (  BZ_OK)
<       ;
1488,1491d1006
<    bzf  
<      ;
<        
< }
1497,1513d1011
< void BZ_APIBZ2_bzWrite
<              ( int*    p1, 
<                BZFILE* p2, 
<                void*   p3 )
< {
<    Int32   ret,  bzf_4_5,  bzf_4_1;
<    bzFile* bzf = *p2;
<    char bzf_4_4,  bzf_4_0;
<     
<    
<     
<     0
<       ;
<     
<       ;
<     ((bzf))
<       ;
1515,1516d1012
<     (  0)
<       
1518,1519d1013
<      
<       ;
1521,1533d1014
<      {
<         
<         
<         
<          
<          
< 
<       if (   
< 
<        bzf_4_1  )
<          ;
<    }
< }
1537,1546d1017
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          p1, 
<                     BZFILE*       p2, 
<                     int           p3,
<                     unsigned * p4,
<                     unsigned * p5 )
< {
<     (    
<                            NULL );
< }
1549d1019
<  
1554,1568d1023
< BZ_APIBZ2_bzWriteClose64
<                   (            
<                             
<                     
<                      
<                      
<                      
<                      void )
< {
<    
<    bzFile* bzf = *b;
<     0
<       ;
<     ((bzf))
<       ;
1570,1573d1024
<    if (  NULL)   
<    if (  NULL)   
<    if (  NULL)   
<    if (  NULL)   
1575d1025
<    if (     
1577d1026
<        ferror ( bzf )  
1579,1583c1028,1586
<      != NULL)
<         bzf;
<    if (  NULL)
<         bzf;
<    if (  NULL)
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> EState * makeMaps_e_s,  * generateMTFValues_s;
> makeMaps_e ( void )
> {
>     Int32 i
>         = 0;
>     for (  ;   ;
>             makeMaps_e_s) {
>         makeMaps_e_s->unseqToSeq[i]
>         ++;
>     }
> }
> 
> 
> 
> 
> 
> generateMTFValues ( void )
> {
> 
>     char yy_1;
>     unsigned char yy_0;
>     Int32   i, j, zPend, wr, EOB, ptr_0
> 
> 
>     ;
> 
> 
> 
> 
> 
>     unsigned  block_0,   mtfv_0
> 
> 
>         = +1;
> 
> 
> 
>     for (  ;   ; ) generateMTFValues_s->mtfFreq[i]
> 
> 
>         ;
>     for (  ;   ; )     i;
> 
>     for (  ;   ; ) {
>         char ll_i;
>         (    "" )
>         -1;
>         if (  0)
>             generateMTFValues_s;
>         (    "" );
> 
>         if (  ll_i) {
> 
>         }  {
> 
>             if (  0)
>             {
>                 char  rtmp,   rll_i
> 
> 
> 
>                 ;
>                 unsigned char* ryy_j;
> 
>                 (   rtmp )
> 
> 
>                 ; ;
>                 generateMTFValues_s->mtfFreq[1];
>             }
> 
>         }
>     }
> 
>     if (  0)
> 
>         ;
>     generateMTFValues_s->mtfFreq;
> 
>     wr;
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> default_bzfree (   void  )
> ;
> 
> 
> 
> 
> s
> 
> 
> 
> 
> 
> 
> 
> 
> (   )
> ;
> 
> 
> 
> 
> BZ_APIBZ2_bzCompressInit
> ( bz_stream* p1,
>   int        p2,
>   int        p3 )
> {
>     Int32   n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
>     EState* s;
> 
>     short s_10;
>     char s_9;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     bz_stream *s_0;
> 
>     if (0)
> 
>         if (
> 
>             0)
> 
> 
>             if (  0)
>                 if (bzalloc  NULL)   default_bzalloc;
>     if (bzfree  NULL)
> 
>         BZALLOC(  );
>     if (  NULL)
> 
> 
>         arr1  NULL;
>     arr2  NULL;
>     ftab  NULL
> 
>     *
>     BZALLOC(                     );
>     +  sizeof(UInt32) ;
>     (                sizeof(UInt32) );
> 
>     if (          NULL)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         ( char)
>         ( short)s_4;
>     zbits              NULL;
>     s_4
> 
>         =
>             0;
>     0;
>     0;
> 
> 
> 
>     return BZ_OK;
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #                \
>  
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> handle_compress (   )
> ;
> 
> 
> 
> 
> BZ_APIBZ2_bzCompress ( bz_stream *p1 )
> {
> 
>     EState* s;
>     Int32 s_1;
>     bz_stream *s_0;
>     if (  NULL)
>         ;
>     if (  NULL)
>         if (  strm)
> 
> 
> 
>             return BZ_OK;
> }
> 
> 
> 
> 
> BZ_APIBZ2_bzCompressEnd  ( void )
> {
>     EState* s;
>     bz_stream *s_0;
>     if (  NULL)
>         ;
>     if (  NULL)
>         if (  strm)
> 
>             if (arr1  NULL) (arr1);
>     if (arr2  NULL) (arr2);
>     if (ftab  NULL) (ftab)
>         ();
> 
>     ;
> 
> 
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> BZ_APIBZ2_bzDecompressInit
> (
> 
>     void )
> {
>     DState* s;
>     Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
> 
> 
> 
> 
> 
> 
>     bz_stream *s_0;
> 
>     if (0)
> 
>         if (  NULL)
>             if (      1)
>                 if (      4)
> 
>                     if (bzalloc  NULL)   default_bzalloc;
>     if (bzfree  NULL)
> 
>         BZALLOC(  );
>     if (  NULL)
> 
> 
> 
> 
> 
>         0;
>     0;
>     0;
>     0;
> 
>     ;
>     ll4                    NULL;
>     ll16                   NULL;
>     tt                     NULL
> 
>     ;
> 
> 
> }
> 
> 
> 
> 
> unRLE_obuf_to_output_FAST (   )
> ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> BZ_APIBZ2_bzDecompress ( bz_stream *p1 )
> {
>     DState* s;
>     bz_stream *s_0;
>     if (  NULL)
>         ;
>     if (  NULL)
>         if (  strm)
> 
> 
> 
>             AssertH (   )
> 
>             ;
> }
> 
> 
> 
> BZ_APIBZ2_bzDecompressEnd  ( bz_stream *p1 )
> {
>     DState* s;
>     bz_stream *s_0;
>     if (  NULL)
>         ;
>     if (  NULL)
>         if (  strm)
> 
>             if (tt    NULL) (tt);
>     if (ll16  NULL) (ll16);
>     if (ll4   NULL) (ll4)
> 
>         ();
>     ;
> 
> 
> }
> 
> 
> 
> 
> 
> 
> \
> 
> 
> typedef
> struct {
>     FILE*     handle;
>     char      buf;
>     Int32     bufN;
>     Bool      writing;
>     bz_stream strm;
>     Int32     lastErr;
>     Bool      initialisedOk
> }
> bzFile;
> 
> 
> 
> 
> 
> 
> 
> * BZ_APIBZ2_bzWriteOpen
> ( int*  bzerror,
>   FILE* f,
>   int   blockSize100k,
>   int   verbosity,
>   int   workFactor )
> {
>     Int32   ret;
>     bzFile* bzf  ;
> 
> 
> 
>     (
> 
> 
>         4)
>     ;
> 
>     (f)
> 
> 
>         =  ( sizeof(bzFile) );
>     (  NULL)
>     ;
> 
>     BZ_OK;
>     False;
>     0;
>     f
>         =
>             bzf
> 
>             = NULL;
> 
>     if (  0)
>         (
>             workFactor );
>     (  BZ_OK)
>     ;
> 
>     bzf
>     ;
> 
> }
> 
> 
> 
> 
> 
> void BZ_APIBZ2_bzWrite
> ( int*    p1,
>   BZFILE* p2,
>   void*   p3 )
> {
>     Int32   ret,  bzf_4_5,  bzf_4_1;
>     bzFile* bzf = *p2;
>     char bzf_4_4,  bzf_4_0;
> 
> 
> 
>     0
>     ;
> 
>     ;
>     ((bzf))
>     ;
> 
>     (  0)
> 
> 
> 
>     ;
> 
>     {
> 
> 
> 
> 
> 
> 
>         if (
> 
>             bzf_4_1  )
>             ;
>     }
> }
> 
> 
> 
> void BZ_APIBZ2_bzWriteClose
> ( int*          p1,
>   BZFILE*       p2,
>   int           p3,
>   unsigned * p4,
>   unsigned * p5 )
> {
>     (
>         NULL );
> }
> 
> 
> 
> 
> 
> 
> 
> BZ_APIBZ2_bzWriteClose64
> (
> 
> 
> 
> 
> 
>     void )
> {
> 
>     bzFile* bzf = *b;
>     0
>     ;
>     ((bzf))
>     ;
> 
>     if (  NULL)
>         if (  NULL)
>             if (  NULL)
>                 if (  NULL)
> 
>                     if (
> 
>                         ferror ( bzf )
> 
>                         != NULL)
>                         bzf;
>     if (  NULL)
>         bzf;
>     if (  NULL)
1585c1588
<    if (  NULL)
---
>     if (  NULL)
1588,1590c1591,1593
<    
<    
<    ;
---
> 
> 
>     ;
1595,1601c1598,1604
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
> * BZ_APIBZ2_bzReadOpen
> ( int*  bzerror,
>   FILE* f,
>   int   verbosity,
>   int   small,
>   void* unused,
>   int   nUnused )
1603,1604c1606,1607
<    bzFile* bzf  ;
<    char bzf_4_0;
---
>     bzFile* bzf  ;
>     char bzf_4_0;
1606,1618c1609,1621
<    
<    
<    
<    
< 
<    
< 
<     (    
<               
<               
<               
<                  BZ_MAX_UNUSED)
<       ;
---
> 
> 
> 
> 
> 
> 
> 
>     (
> 
> 
> 
>         BZ_MAX_UNUSED)
>     ;
1621d1623
<       
1623,1637d1624
<     =  ( sizeof(bzFile) );
<     (  NULL) 
<       ;
< 
<    ;
< 
<      
<             
<               
<            False;
<    bzf   
<        
<       = NULL;
<    
<    while (  0) 
1639c1626,1642
<       (   small );
---
>         =  ( sizeof(bzFile) );
>     (  NULL)
>     ;
> 
>     ;
> 
> 
> 
> 
>     False;
>     bzf
> 
>         = NULL;
> 
>     while (  0)
> 
>         (   small );
1641d1643
<       
1643,1644d1644
<      ;
<       
1646,1647c1646,1650
<      
<     bzf;   
---
>     ;
> 
> 
> 
>     bzf;
1654,1655c1657,1658
<    bzFile* bzf = *p2;
<    Bool bzf_6;
---
>     bzFile* bzf = *p2;
>     Bool bzf_6;
1658,1660c1661,1663
<    (
<     bzf  )
<       ;
---
>     (
>         bzf  )
>     ;
1663c1666,1669
<       ;
---
>     ;
> 
> 
>     ;
1665,1667d1670
<     
<       ;
<    
1672,1680c1675,1683
<  
< BZ_APIBZ2_bzRead 
<            ( int*    p1, 
<              BZFILE* p2, 
<              void*   p3 )
< {
<    
<    bzFile* bzf = *p2;
<    char bzf_4_4;
---
> 
> BZ_APIBZ2_bzRead
> ( int*    p1,
>   BZFILE* p2,
>   void*   p3 )
> {
> 
>     bzFile* bzf = *p2;
>     char bzf_4_4;
1683c1686,1690
<       ;
---
>     ;
> 
> 
> 
> 
1685,1686d1691
<     
<       
1688,1689d1692
<       
<       
1691,1692d1693
<      
<      
1694d1694
<      
1696c1696,1699
<    return 0; 
---
> 
> 
> 
>     return 0;
1701,1705c1704,1708
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    p1, 
<                        BZFILE* p2, 
<                        void**  p3, 
<                        int*    p4 )
---
> void BZ_APIBZ2_bzReadGetUnused
> ( int*    p1,
>   BZFILE* p2,
>   void**  p3,
>   int*    p4 )
1707,1708c1710,1711
<    bzFile* bzf = *p2;
<    char bzf_4_0;
---
>     bzFile* bzf = *p2;
>     char bzf_4_0;
1711c1714
<       ;
---
>     ;
1713c1716
<       ;
---
>     ;
1715c1718,1720
<       ;
---
>     ;
> 
> 
1717,1719c1722
<    
<      
<      ;
---
>     ;
1728,1735c1731,1738
<  
< BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         p1, 
<                            unsigned * p2,
<                            char*         p3, 
<                            unsigned   p4,
<                            int           p5, 
<                            int           p6 )
---
> 
> BZ_APIBZ2_bzBuffToBuffCompress
> ( char*         p1,
>   unsigned * p2,
>   char*         p3,
>   unsigned   p4,
>   int           p5,
>   int           p6 )
1737c1740
<    bz_stream strm;
---
>     bz_stream strm;
1739,1778c1742,1781
<     
<    char strm_4,  strm_0;
<    
<    
< 
<    if (        
<           
<               
<               
<              0) 
<        
< 
<    if (  0)   
<    bzalloc  NULL;
<    bzfree  NULL;
<    opaque  NULL
<      ;
<    if (  BZ_OK)  
< 
<      
<      
<      
<      
< 
<      0;
<    if (  BZ_FINISH_OK)  ;
<    if (  BZ_STREAM_END)  
< 
<    
<         
<    
<     
< 
<    
<    
<     
< 
<    
<    
<     ret;
---
> 
>     char strm_4,  strm_0;
> 
> 
> 
>     if (
> 
> 
> 
>         0)
> 
> 
>         if (  0)
>             bzalloc  NULL;
>     bzfree  NULL;
>     opaque  NULL
>     ;
>     if (  BZ_OK)
> 
> 
> 
> 
> 
> 
>         0;
>     if (  BZ_FINISH_OK)  ;
>     if (  BZ_STREAM_END)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         ret;
1794c1797
<     
---
> 
1801,1805c1804,1808
<   bzopen_or_bzdopen
<                (  char ,   
<                  int ,             
<                   char ,
<                  int )      
---
> bzopen_or_bzdopen
> (  char ,
>    int ,
>    char ,
>    int )
1815,1817c1818,1820
<  * BZ_APIBZ2_bzdopen
<                ( int p1,
<                  const char *p2 )
---
> * BZ_APIBZ2_bzdopen
> ( int p1,
>   const char *p2 )
1824c1827
<  
---
> 
1827,1834c1830,1837
<    int bzerr, nread;
<    if (((bzFile*)p1)  )  
<      
<    if (    bzerr == BZ_STREAM_END) {
<        
<      
<        ;
<    }
---
>     int bzerr, nread;
>     if (((bzFile*)p1)  )
> 
>         if (    bzerr == BZ_STREAM_END) {
> 
> 
>             ;
>         }
1849,1861c1852,1864
<    int bzerr;
<    FILE *fp = ((bzFile *)b);
<    
<    if ( 
<    ((bzFile*)p1)){
<       (NULL);
<       if(  BZ_OK){
<          (NULL);
<       }
<    }
<    if(  stdout){
<       fp;
<    }
---
>     int bzerr;
>     FILE *fp = ((bzFile *)b);
> 
>     if (
>         ((bzFile*)p1)) {
>         (NULL);
>         if(  BZ_OK) {
>             (NULL);
>         }
>     }
>     if(  stdout) {
>         fp;
>     }
1867,1868c1870,1871
<   
<   
---
> 
> 
1873c1876,1878
<    int err = ((bzFile *)p1);
---
>     int err = ((bzFile *)p1);
> 
>     if(0)
1875,1877c1880
<    if(0)   
<      
<     bzerrorstrings_0;
---
>         bzerrorstrings_0;
1907d1909
<        
1910c1912,1913
<    
---
> 
> 
1919,1921c1922,1924
<         
<    
<   
---
> 
> 
> 
1930,1934c1933,1937
<         
<         
<          
<       
<       
---
> 
> 
> 
> 
> 
1942d1944
<      
1944d1945
<         
1950,1952d1950
<                                        
<    
<   
1969,1971d1966
<             
<             
<             
1974,1976d1968
<               
<             
<            
1981d1972
<   
2011,2012d2001
<      
<    
2138c2127,2141
<   
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2197c2200
<  main ( int , char *[] )
---
> main ( int , char *[] )
2203d2205
<  
\ No newline at end of file
(94.8 %, 10597 bytes)
19,30c19,31
<   ;
<   int avail_in;
<   int total_in_lo32;
<   int total_in_hi32;
<   int total_out_lo32;
<   int total_out_hi32;
< 
<   void *state;
< 
<   void ( *bzalloc ) (  );
<   void ( *bzfree ) ( void );
< void *opaque}
---
>     ;
>     int avail_in;
>     int total_in_lo32;
>     int total_in_hi32;
>     int total_out_lo32;
>     int total_out_hi32;
> 
>     void *state;
> 
>     void ( *bzalloc ) (  );
>     void ( *bzfree ) ( void );
>     void *opaque
> }
40,44c41,45
<   BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
<   BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
<   BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
<   BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
<   BZ_APIBZ2_bzread_len, bzerrorstrings_0;
---
>     BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
>     BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
>     BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
>     BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>     BZ_APIBZ2_bzread_len, bzerrorstrings_0;
62,64c63,65
<   *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
<   *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
<   *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
---
>     *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
>     *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
> *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
66c67
<   ""
---
>     ""
98c99
< 				 unsigned *, char *, unsigned, int, int p6 );
---
>                                  unsigned *, char *, unsigned, int, int p6 );
101c102
< 				   unsigned *, char *, unsigned, int p5 );
---
>                                    unsigned *, char *, unsigned, int p5 );
104c105
<   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5 )
---
> ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5 )
106,107c107,108
<   bz_stream strm;
<   int strm_5, strm_1, ret;
---
>     bz_stream strm;
>     int strm_5, strm_1, ret;
109c110
<   char strm_4, strm_0;
---
>     char strm_4, strm_0;
111c112
<   if ( 4 )
---
>     if ( 4 )
113,116c114,117
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   if ( BZ_OK )
---
>         bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     if ( BZ_OK )
118,120c119,121
<     0;
<   if ( BZ_OK ) ;
<   if ( BZ_STREAM_END )
---
>         0;
>     if ( BZ_OK ) ;
>     if ( BZ_STREAM_END )
122,123c123,124
<     if ( 0 )
<       {
---
>         if ( 0 )
>         {
125c126
<       }
---
>         }
145,146c146,147
<   int bzerr;
<   if ( BZ_OK )
---
>     int bzerr;
>     if ( BZ_OK )
166c167
< 
---
>  
168c169
< 
---
>  
194c195
< 
---
>  
198c199
< 
---
>  
202c203
< 
---
>  
207c208
< 
---
>  
221c222
<   ;
---
>     ;
223,242c224,243
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab;
< 
<   UInt32 ptr;
<   char block;
<   short mtfv;
<   char zbits;
< 
<   Int32 nblock;
< 
<   Int32 nInUse;
<   Bool inUse[6];
<   char unseqToSeq[6];
<   Int32 blockNo;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   char;
<   char;
---
>     UInt32 arr1;
>     UInt32 arr2;
>     UInt32 ftab;
> 
>     UInt32 ptr;
>     char block;
>     short mtfv;
>     char zbits;
> 
>     Int32 nblock;
> 
>     Int32 nInUse;
>     Bool inUse[6];
>     char unseqToSeq[6];
>     Int32 blockNo;
> 
>     Int32 nMTF;
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>     char;
>     char;
244c245,246
< char len}
---
>     char len
> }
255,256c257,258
<   char;
<    ;
---
>     char;
>     ;
260c262
<   UInt32 tt;
---
>     UInt32 tt;
262,263c264,265
<   short ll16;
<   char ll4;
---
>     short ll16;
>     char ll4;
266c268
<   char;
---
>     char;
268,269c270,271
<   char;
<   Int32 mtfbase[MTFL_SIZE]
---
>     char;
>     Int32 mtfbase[MTFL_SIZE]
278c280
< 
---
>  
286c288
< 
---
>  
292c294
< 
---
>  
299c301
< 
---
>  
302c304
< 
---
>  
321c323
< 
---
>  
334c336
< 
---
>  
352c354
< 
---
>  
359,360c361,362
<   Int32 i = 0;
<   for ( ;; makeMaps_e_s )
---
>     Int32 i = 0;
>     for ( ;; makeMaps_e_s )
362c364
<       makeMaps_e_s->unseqToSeq[i]++;
---
>         makeMaps_e_s->unseqToSeq[i]++;
369,378c371,380
<   char yy_1;
<   unsigned char yy_0;
<   Int32 i, j, zPend, wr, EOB, ptr_0;
< 
<   unsigned block_0, mtfv_0 = +1;
< 
<   for ( ;; )
<     generateMTFValues_s->mtfFreq[i];
<   for ( ;; )
<     i;
---
>     char yy_1;
>     unsigned char yy_0;
>     Int32 i, j, zPend, wr, EOB, ptr_0;
> 
>     unsigned block_0, mtfv_0 = +1;
> 
>     for ( ;; )
>         generateMTFValues_s->mtfFreq[i];
>     for ( ;; )
>         i;
380c382
<   for ( ;; )
---
>     for ( ;; )
382,401c384,403
<       char ll_i;
<       ( "" ) - 1;
<       if ( 0 )
< 	generateMTFValues_s;
<       ( "" );
< 
<       if ( ll_i )
< 	{
< 
< 	}
<       {
< 
< 	if ( 0 )
< 	  {
< 	    char rtmp, rll_i;
< 	    unsigned char *ryy_j;
< 
< 	    ( rtmp );;
< 	    generateMTFValues_s->mtfFreq[1];
< 	  }
---
>         char ll_i;
>         ( "" ) - 1;
>         if ( 0 )
>             generateMTFValues_s;
>         ( "" );
> 
>         if ( ll_i )
>         {
> 
>         }
>         {
> 
>             if ( 0 )
>             {
>                 char rtmp, rll_i;
>                 unsigned char *ryy_j;
> 
>                 ( rtmp );;
>                 generateMTFValues_s->mtfFreq[1];
>             }
403c405
<       }
---
>         }
406c408
<   if ( 0 )
---
>     if ( 0 )
408,409c410,411
<     ;
<   generateMTFValues_s->mtfFreq;
---
>         ;
>     generateMTFValues_s->mtfFreq;
411c413
<   wr;
---
>     wr;
420,424c422,423
<   Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
<   EState *s;
< 
<   short s_10;
<   char s_9;
---
>     Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
>     EState *s;
426c425,426
<   bz_stream *s_0;
---
>     short s_10;
>     char s_9;
428c428
<   if ( 0 )
---
>     bz_stream *s_0;
432,452c432,440
<       if ( 0 )
< 	if ( bzalloc NULL )
< 	  default_bzalloc;
<   if ( bzfree NULL )
< 
<     BZALLOC (  );
<   if ( NULL )
< 
<     arr1 NULL;
<   arr2 NULL;
<   ftab NULL * BZALLOC (  );
<   +sizeof ( UInt32 );
<   ( sizeof ( UInt32 ) );
< 
<   if ( NULL )
< 
<     ( char ) ( short ) s_4;
<   zbits NULL;
<   s_4 = 0;
<   0;
<   0;
---
>         if ( 0 )
> 
>             if ( 0 )
>                 if ( bzalloc NULL )
>                     default_bzalloc;
>     if ( bzfree NULL )
> 
>         BZALLOC (  );
>     if ( NULL )
454c442,456
<   return BZ_OK;
---
>         arr1 NULL;
>     arr2 NULL;
>     ftab NULL * BZALLOC (  );
>     +sizeof ( UInt32 );
>     ( sizeof ( UInt32 ) );
> 
>     if ( NULL )
> 
>         ( char ) ( short ) s_4;
>     zbits NULL;
>     s_4 = 0;
>     0;
>     0;
> 
>     return BZ_OK;
458c460
< 
---
>  
465,471c467,473
<   EState *s;
<   Int32 s_1;
<   bz_stream *s_0;
<   if ( NULL )
<     ;
<   if ( NULL )
<     if ( strm )
---
>     EState *s;
>     Int32 s_1;
>     bz_stream *s_0;
>     if ( NULL )
>         ;
>     if ( NULL )
>         if ( strm )
473c475
<       return BZ_OK;
---
>             return BZ_OK;
478,490c480,485
<   EState *s;
<   bz_stream *s_0;
<   if ( NULL )
<     ;
<   if ( NULL )
<     if ( strm )
< 
<       if ( arr1 NULL )
< 	( arr1 );
<   if ( arr2 NULL )
<     ( arr2 );
<   if ( ftab NULL )
<     ( ftab ) (  );
---
>     EState *s;
>     bz_stream *s_0;
>     if ( NULL )
>         ;
>     if ( NULL )
>         if ( strm )
492c487,494
<   ;
---
>             if ( arr1 NULL )
>                 ( arr1 );
>     if ( arr2 NULL )
>         ( arr2 );
>     if ( ftab NULL )
>         ( ftab ) (  );
> 
>     ;
498,501c500,501
<   DState *s;
<   Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
< 
<   bz_stream *s_0;
---
>     DState *s;
>     Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
503c503
<   if ( 0 )
---
>     bz_stream *s_0;
505,507c505
<     if ( NULL )
<       if ( 1 )
< 	if ( 4 )
---
>     if ( 0 )
509,511c507,513
< 	  if ( bzalloc NULL )
< 	    default_bzalloc;
<   if ( bzfree NULL )
---
>         if ( NULL )
>             if ( 1 )
>                 if ( 4 )
> 
>                     if ( bzalloc NULL )
>                         default_bzalloc;
>     if ( bzfree NULL )
513,514c515,516
<     BZALLOC (  );
<   if ( NULL )
---
>         BZALLOC (  );
>     if ( NULL )
515a518,520
>         0;
>     0;
>     0;
517,524c522,526
<   0;
<   0;
<   0;
< 
<   ;
<   ll4 NULL;
<   ll16 NULL;
<   tt NULL;
---
> 
>     ;
>     ll4 NULL;
>     ll16 NULL;
>     tt NULL;
532,537c534,539
<   DState *s;
<   bz_stream *s_0;
<   if ( NULL )
<     ;
<   if ( NULL )
<     if ( strm )
---
>     DState *s;
>     bz_stream *s_0;
>     if ( NULL )
>         ;
>     if ( NULL )
>         if ( strm )
539c541
<       AssertH (  );
---
>             AssertH (  );
544,557c546,559
<   DState *s;
<   bz_stream *s_0;
<   if ( NULL )
<     ;
<   if ( NULL )
<     if ( strm )
< 
<       if ( tt NULL )
< 	( tt );
<   if ( ll16 NULL )
<     ( ll16 );
<   if ( ll4 NULL )
<     ( ll4 ) (  );
<   ;
---
>     DState *s;
>     bz_stream *s_0;
>     if ( NULL )
>         ;
>     if ( NULL )
>         if ( strm )
> 
>             if ( tt NULL )
>                 ( tt );
>     if ( ll16 NULL )
>         ( ll16 );
>     if ( ll4 NULL )
>         ( ll4 ) (  );
>     ;
563,569c565,572
<   FILE *handle;
<   char buf;
<   Int32 bufN;
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
< Bool initialisedOk}
---
>     FILE *handle;
>     char buf;
>     Int32 bufN;
>     Bool writing;
>     bz_stream strm;
>     Int32 lastErr;
>     Bool initialisedOk
> }
573c576
<   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
---
> ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
575,576c578,579
<   Int32 ret;
<   bzFile *bzf;
---
>     Int32 ret;
>     bzFile *bzf;
578c581
<   ( 4 );
---
>     ( 4 );
580,581c583,584
<   ( f ) = ( sizeof ( bzFile ) );
<   ( NULL );
---
>     ( f ) = ( sizeof ( bzFile ) );
>     ( NULL );
583,586c586,589
<   BZ_OK;
<   False;
<   0;
<   f = bzf = NULL;
---
>     BZ_OK;
>     False;
>     0;
>     f = bzf = NULL;
588,590c591,593
<   if ( 0 )
<     ( workFactor );
<   ( BZ_OK );
---
>     if ( 0 )
>         ( workFactor );
>     ( BZ_OK );
592c595
<   bzf;
---
>     bzf;
598,600c601,603
<   Int32 ret, bzf_4_5, bzf_4_1;
<   bzFile *bzf = *p2;
<   char bzf_4_4, bzf_4_0;
---
>     Int32 ret, bzf_4_5, bzf_4_1;
>     bzFile *bzf = *p2;
>     char bzf_4_4, bzf_4_0;
602c605
<   0;
---
>     0;
604,605c607,608
<   ;
<   ( ( bzf ) );
---
>     ;
>     ( ( bzf ) );
607c610
<   ( 0 );
---
>     ( 0 );
609c612
<   {
---
>     {
611,613c614,616
<     if ( bzf_4_1 )
<       ;
<   }
---
>         if ( bzf_4_1 )
>             ;
>     }
617c620
<   ( int *p1, BZFILE * p2, int p3, unsigned *p4, unsigned *p5 )
---
> ( int *p1, BZFILE * p2, int p3, unsigned *p4, unsigned *p5 )
619c622
<   ( NULL );
---
>     ( NULL );
625,641c628,644
<   bzFile *bzf = *b;
<   0;
<   ( ( bzf ) );
< 
<   if ( NULL )
<     if ( NULL )
<       if ( NULL )
< 	if ( NULL )
< 
< 	  if ( ferror ( bzf ) != NULL )
< 	    bzf;
<   if ( NULL )
<     bzf;
<   if ( NULL )
<     bzf;
<   if ( NULL )
<     bzf;
---
>     bzFile *bzf = *b;
>     0;
>     ( ( bzf ) );
> 
>     if ( NULL )
>         if ( NULL )
>             if ( NULL )
>                 if ( NULL )
> 
>                     if ( ferror ( bzf ) != NULL )
>                         bzf;
>     if ( NULL )
>         bzf;
>     if ( NULL )
>         bzf;
>     if ( NULL )
>         bzf;
643c646
<   ;
---
>     ;
647,648c650,651
<   ( int *bzerror,
<     FILE * f, int verbosity, int small, void *unused, int nUnused )
---
> ( int *bzerror,
>   FILE * f, int verbosity, int small, void *unused, int nUnused )
650,652c653,655
<   bzFile *bzf;
<   char bzf_4_0;
<   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
---
>     bzFile *bzf;
>     char bzf_4_0;
>     int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
654c657
<   ( BZ_MAX_UNUSED );
---
>     ( BZ_MAX_UNUSED );
656,657c659,660
<   ( f ) = ( sizeof ( bzFile ) );
<   ( NULL );
---
>     ( f ) = ( sizeof ( bzFile ) );
>     ( NULL );
659c662
<   ;
---
>     ;
661,662c664,665
<   False;
<   bzf = NULL;
---
>     False;
>     bzf = NULL;
664c667
<   while ( 0 )
---
>     while ( 0 )
666,667c669,670
<     ( small );
<   ( BZ_OK );
---
>         ( small );
>     ( BZ_OK );
669c672
<   bzf;
---
>     bzf;
675,677c678,680
<   bzFile *bzf = *p2;
<   Bool bzf_6;
<   bzf_3 ( bzf );
---
>     bzFile *bzf = *p2;
>     Bool bzf_6;
>     bzf_3 ( bzf );
679c682
<   bzf_3;
---
>     bzf_3;
681c684
<   ;
---
>     ;
688,691c691,694
<   bzFile *bzf = *p2;
<   char bzf_4_4;
<   int bzf_4_5;
<   0;
---
>     bzFile *bzf = *p2;
>     char bzf_4_4;
>     int bzf_4_5;
>     0;
693c696
<   return 0;
---
>     return 0;
698,703c701,706
<   bzFile *bzf = *p2;
<   char bzf_4_0;
<   int bzf_4_1;
<   0;
<   ( BZ_STREAM_END );
<   ( NULL );
---
>     bzFile *bzf = *p2;
>     char bzf_4_0;
>     int bzf_4_1;
>     0;
>     ( BZ_STREAM_END );
>     ( NULL );
705c708
<   ;
---
>     ;
709c712
<   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5, int p6 )
---
> ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5, int p6 )
711,714c714,715
<   bz_stream strm;
<   int strm_5, strm_1, ret;
< 
<   char strm_4, strm_0;
---
>     bz_stream strm;
>     int strm_5, strm_1, ret;
716c717
<   if ( 0 )
---
>     char strm_4, strm_0;
719,722d719
<       bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
<   if ( BZ_OK )
724,726c721,729
<     0;
<   if ( BZ_FINISH_OK ) ;
<   if ( BZ_STREAM_END )
---
>         if ( 0 )
>             bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
>     if ( BZ_OK )
> 
>         0;
>     if ( BZ_FINISH_OK ) ;
>     if ( BZ_STREAM_END )
728c731
<     ret;
---
>         ret;
741c744
<   ( 1 );
---
>     ( 1 );
746,747c749,750
<   int bzerr, nread;
<   if ( ( ( bzFile * ) p1 ) )
---
>     int bzerr, nread;
>     if ( ( ( bzFile * ) p1 ) )
749,750c752,753
<     if ( bzerr == BZ_STREAM_END )
<       {
---
>         if ( bzerr == BZ_STREAM_END )
>         {
752,753c755,756
< 	;
<       }
---
>             ;
>         }
759,760c762,763
<   int bzerr;
<   FILE *fp = ( ( bzFile * ) b );
---
>     int bzerr;
>     FILE *fp = ( ( bzFile * ) b );
762c765
<   if ( ( ( bzFile * ) p1 ) )
---
>     if ( ( ( bzFile * ) p1 ) )
764,768c767,771
<       ( NULL );
<       if ( BZ_OK )
< 	{
< 	  ( NULL );
< 	}
---
>         ( NULL );
>         if ( BZ_OK )
>         {
>             ( NULL );
>         }
770c773
<   if ( stdout )
---
>     if ( stdout )
772c775
<       fp;
---
>         fp;
779c782
<   int err = ( ( bzFile * ) p1 );
---
>     int err = ( ( bzFile * ) p1 );
781c784
<   if ( 0 )
---
>     if ( 0 )
783c786
<     bzerrorstrings_0;
---
>         bzerrorstrings_0;
2,3c2,3
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK 0
> #define BZ_RUN_OK 1
5,15c5,15
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #1
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         3
< #4
< #5
< #6
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      9
---
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> # 1
> #define BZ_PARAM_ERROR 2
> #define BZ_MEM_ERROR 3
> # 4
> # 5
> # 6
> #define BZ_UNEXPECTED_EOF 7
> #define BZ_OUTBUFF_FULL 8
> #define BZ_CONFIG_ERROR 9
17,18c17
< typedef struct
< {
---
> typedef struct {
28,31c27,30
<   void ( *bzalloc ) (  );
<   void ( *bzfree ) ( void );
< void *opaque}
< bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;
---
>   void (*bzalloc)();
>   void (*bzfree)(void);
>   void *opaque
> } bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;
40,44c39,43
<   BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
<   BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
<   BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
<   BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
<   BZ_APIBZ2_bzread_len, bzerrorstrings_0;
---
>     BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
>     BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
>     BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
>     BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>     BZ_APIBZ2_bzread_len, bzerrorstrings_0;
50,51c49
< #define                      \
<        lll
---
> #define lll
53,54c51
< #define                         \
<    GET_BITSllluuu8
---
> #define GET_BITSllluuu8
56,57c53
< #define                           \
<    GET_BITSllluuu1
---
> #define GET_BITSllluuu1
62,64c58,60
<   *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
<   *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
<   *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
---
>     *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
>     *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>     *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
66,69c62,64
<   ""
< };
< static default_bzalloc ( Int32 );
< BZ_APIBZ2_bzCompressInit ( bz_stream *, int, int p3 );
---
>                                                    ""};
> static default_bzalloc(Int32);
> BZ_APIBZ2_bzCompressInit(bz_stream *, int, int p3);
71c66
< BZ_APIBZ2_bzCompress ( bz_stream * p1 );
---
> BZ_APIBZ2_bzCompress(bz_stream *p1);
73c68
< strm ( int );
---
> strm(int);
75c70
< BZ_APIBZ2_bzDecompress (  );
---
> BZ_APIBZ2_bzDecompress();
77c72
< BZ_APIBZ2_bzDecompressEnd (  );
---
> BZ_APIBZ2_bzDecompressEnd();
81c76
< *BZ_APIBZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
83c78
< void BZ_APIBZ2_bzReadClose ( int *, BZFILE * );
---
> void BZ_APIBZ2_bzReadClose(int *, BZFILE *);
85c80
< void BZ_APIBZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
87c82
< BZ_APIBZ2_bzRead ( int *, BZFILE *, void *p3 );
---
> BZ_APIBZ2_bzRead(int *, BZFILE *, void *p3);
89c84
< *BZ_APIBZ2_bzWriteOpen ( int *, FILE *, int, int, int );
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
91c86
< void BZ_APIBZ2_bzWrite ( int *, BZFILE *, void *p3 );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE *, void *p3);
93c88
< void BZ_APIBZ2_bzWriteClose ( int *, BZFILE *, int, unsigned *, unsigned * );
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
95c90
< BZ2_bzWriteClose64 ( int, BZFILE, int, int, int, int, int );
---
> BZ2_bzWriteClose64(int, BZFILE, int, int, int, int, int);
97,98c92,93
< BZ_APIBZ2_bzBuffToBuffCompress ( char *,
< 				 unsigned *, char *, unsigned, int, int p6 );
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int,
>                                int p6);
100,101c95
< BZ_APIBZ2_bzBuffToBuffDecompress ( char *,
< 				   unsigned *, char *, unsigned, int p5 );
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int p5);
103,105c97,98
< BZ_APIBZ2_bzBuffToBuffDecompress
<   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5 )
< {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *p1, unsigned *p2, char *p3, unsigned p4,
>                                  int p5) {
111c104
<   if ( 4 )
---
>   if (4)
116c109
<   if ( BZ_OK )
---
>   if (BZ_OK)
119,125c112,114
<   if ( BZ_OK ) ;
<   if ( BZ_STREAM_END )
< 
<     if ( 0 )
<       {
< 
<       }
---
>   if (BZ_OK)
>     ;
>   if (BZ_STREAM_END)
126a116,117
>     if (0) {
>     }
129c120
< const char *BZ_APIBZ2_bzlibVersion (  );
---
> const char *BZ_APIBZ2_bzlibVersion();
131,133c122,123
< *BZ_APIBZ2_bzopen ( const char *, const char * );
< *BZ_APIBZ2_bzopen ( const char *p1, const char *p2 )
< {
---
> *BZ_APIBZ2_bzopen(const char *, const char *);
> *BZ_APIBZ2_bzopen(const char *p1, const char *p2){
137c127
< *BZ_APIBZ2_bzdopen ( int, const char * );
---
>     * BZ_APIBZ2_bzdopen(int, const char *);
139c129
< BZ_APIBZ2_bzread ( BZFILE *, void *p2 );
---
> BZ_APIBZ2_bzread(BZFILE *, void *p2);
141c131
< BZ_APIBZ2_bzwrite ( BZFILE *, void *p2 );
---
> BZ_APIBZ2_bzwrite(BZFILE *, void *p2);
143,144c133
< BZ_APIBZ2_bzwrite ( BZFILE * p1, void *p2 )
< {
---
> BZ_APIBZ2_bzwrite(BZFILE *p1, void *p2) {
146,149c135,136
<   if ( BZ_OK )
<     {
< 
<     }
---
>   if (BZ_OK) {
>   }
152c139
< b (  );
---
> b();
154c141
< void BZ_APIBZ2_bzclose (  );
---
> void BZ_APIBZ2_bzclose();
156c143
< const char *BZ_APIBZ2_bzerror ( BZFILE *, int * );
---
> const char *BZ_APIBZ2_bzerror(BZFILE *, int *);
160c147
< #define BZ_VERSION  ""
---
> #define BZ_VERSION ""
162c149
< #define True  1
---
> #define True 1
165c152
< #\
---
> #
167c154
< #\
---
> #
169,180c156,161
< #define  \
<    zf
< #define  \
<    za1
< #define  \
<    za2
< #define  \
<    za3
< #define  \
<    za4
< #define  \
<    za5
---
> #define zf
> #define za1
> #define za2
> #define za3
> #define za4
> #define za5
182,183c163,164
< #define  opaquennn1
< #define   opaqueppp
---
> #define opaquennn1
> #define opaqueppp
188,190c169
< #define BZ_G_SIZE   50
< 
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_G_SIZE 50
192,193c171
< #define BZ_RAND_DECLS                          \
<                                    \
---
> #define BZ_MAX_SELECTORS BZ_G_SIZE
194a173
> #define BZ_RAND_DECLS
196,201c175
< #define                       \
<    srNToGo                                \
< 
< 
< #define BZ_RAND_UPD_MASK                       \
<                                                   \
---
> #define srNToGo
202a177
> #define BZ_RAND_UPD_MASK
206,207c181
< #\
< 
---
> #
209c183
< #define BZ_M_RUNNING   2
---
> #define BZ_M_RUNNING 2
211c185
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT 2
216c190
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT 2
218,219c192
< typedef struct
< {
---
> typedef struct {
244,245c217,218
< char len}
< EState;
---
>   char len
> } EState;
247c220
< #define BZ_X_MAGIC_1     0
---
> #define BZ_X_MAGIC_1 0
252,253c225
< typedef struct
< {
---
> typedef struct {
256,258c228,230
<    ;
<     Int32;
<     Int32;
---
>   ;
>   Int32;
>   Int32;
264,265c236,237
<     Bool;
<     Bool;
---
>   Bool;
>   Bool;
269,273c241,242
<   Int32 mtfbase[MTFL_SIZE]
<     [BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
< 
< }
< DState;
---
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
275,277c244
< #define                      \
<       stPos                 \
<                    \
---
> } DState;
278a246
> #define stPos
280,282c248,249
< #define                    \
<                           \
<                     \
---
> #define                                                                        \
>                                                                                \
285,292c252
< #\
< 
< 
< #define                              \
<    ll4i
< 
< #\
< 
---
> #
294,295c254
< #define  \
<    ll16i
---
> #define ll4i
297,298c256
< #define                             \
<            scftab     \
---
> #
299a258
> #define ll16i
301c260
< #\
---
> #define scftab
302a262
> #
304c264
< #define   zzn
---
> #define zzn
306c266
< #define      a
---
> #define a
314,320c274,278
< #define         zz
< #define       zz
< #define       zz
< #define        zz
< #define   zz
< 
< #\
---
> #define zz
> #define zz
> #define zz
> #define zz
> #define zz
321a280
> #
323c282
< #define   zzn
---
> #define zzn
325c284
< #define      a
---
> #define a
331,333c290
< #define  az
< 
< #\
---
> #define az
334a292
> #
336c294
< #define    BZ_N_QSORT
---
> #define BZ_N_QSORT
340,341c298,299
< #define  ftabb1
< #1
---
> #define ftabb1
> # 1
346,351c304,306
< #define   zz0
< #define    zz1
< #define        zz3
< 
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2                     \
---
> #define zz0
> #define zz1
> #define zz3
352a308
> #define WEIGHTOFzw1WEIGHTOFzw2
357,358c313
< makeMaps_e ( void )
< {
---
> makeMaps_e(void) {
360,363c315,317
<   for ( ;; makeMaps_e_s )
<     {
<       makeMaps_e_s->unseqToSeq[i]++;
<     }
---
>   for (;; makeMaps_e_s) {
>     makeMaps_e_s->unseqToSeq[i]++;
>   }
366,367c320
< generateMTFValues ( void )
< {
---
> generateMTFValues(void) {
375c328
<   for ( ;; )
---
>   for (;;)
377c330
<   for ( ;; )
---
>   for (;;)
380c333,341
<   for ( ;; )
---
>   for (;;) {
>     char ll_i;
>     ("") - 1;
>     if (0)
>       generateMTFValues_s;
>     ("");
> 
>     if (ll_i) {
>     }
382,401d342
<       char ll_i;
<       ( "" ) - 1;
<       if ( 0 )
< 	generateMTFValues_s;
<       ( "" );
< 
<       if ( ll_i )
< 	{
< 
< 	}
<       {
< 
< 	if ( 0 )
< 	  {
< 	    char rtmp, rll_i;
< 	    unsigned char *ryy_j;
< 
< 	    ( rtmp );;
< 	    generateMTFValues_s->mtfFreq[1];
< 	  }
402a344,350
>       if (0) {
>         char rtmp, rll_i;
>         unsigned char *ryy_j;
> 
>         (rtmp);
>         ;
>         generateMTFValues_s->mtfFreq[1];
404a353
>   }
406c355
<   if ( 0 )
---
>   if (0)
414c363
< default_bzfree ( void );
---
> default_bzfree(void);
416c365
< s (  );
---
> s();
418,419c367
< BZ_APIBZ2_bzCompressInit ( bz_stream * p1, int p2, int p3 )
< {
---
> BZ_APIBZ2_bzCompressInit(bz_stream *p1, int p2, int p3) {
428c376
<   if ( 0 )
---
>   if (0)
430c378
<     if ( 0 )
---
>     if (0)
432,435c380,383
<       if ( 0 )
< 	if ( bzalloc NULL )
< 	  default_bzalloc;
<   if ( bzfree NULL )
---
>       if (0)
>         if (bzalloc NULL)
>           default_bzalloc;
>   if (bzfree NULL)
437,438c385,386
<     BZALLOC (  );
<   if ( NULL )
---
>     BZALLOC();
>   if (NULL)
442,444c390,392
<   ftab NULL * BZALLOC (  );
<   +sizeof ( UInt32 );
<   ( sizeof ( UInt32 ) );
---
>   ftab NULL *BZALLOC();
>   +sizeof(UInt32);
>   (sizeof(UInt32));
446c394
<   if ( NULL )
---
>   if (NULL)
448c396
<     ( char ) ( short ) s_4;
---
>     (char)(short)s_4;
457,458c405
< #\
< 
---
> #
460c407
< handle_compress (  );
---
> handle_compress();
462,463c409
< BZ_APIBZ2_bzCompress ( bz_stream * p1 )
< {
---
> BZ_APIBZ2_bzCompress(bz_stream *p1) {
468c414
<   if ( NULL )
---
>   if (NULL)
470,471c416,417
<   if ( NULL )
<     if ( strm )
---
>   if (NULL)
>     if (strm)
476,477c422
< BZ_APIBZ2_bzCompressEnd ( void )
< {
---
> BZ_APIBZ2_bzCompressEnd(void) {
480c425
<   if ( NULL )
---
>   if (NULL)
482,483c427,428
<   if ( NULL )
<     if ( strm )
---
>   if (NULL)
>     if (strm)
485,490c430,435
<       if ( arr1 NULL )
< 	( arr1 );
<   if ( arr2 NULL )
<     ( arr2 );
<   if ( ftab NULL )
<     ( ftab ) (  );
---
>       if (arr1 NULL)
>         (arr1);
>   if (arr2 NULL)
>     (arr2);
>   if (ftab NULL)
>     (ftab)();
493d437
< 
496,497c440
< BZ_APIBZ2_bzDecompressInit ( void )
< {
---
> BZ_APIBZ2_bzDecompressInit(void) {
503c446
<   if ( 0 )
---
>   if (0)
505,511c448,454
<     if ( NULL )
<       if ( 1 )
< 	if ( 4 )
< 
< 	  if ( bzalloc NULL )
< 	    default_bzalloc;
<   if ( bzfree NULL )
---
>     if (NULL)
>       if (1)
>         if (4)
> 
>           if (bzalloc NULL)
>             default_bzalloc;
>   if (bzfree NULL)
513,514c456,457
<     BZALLOC (  );
<   if ( NULL )
---
>     BZALLOC();
>   if (NULL)
525d467
< 
528c470
< unRLE_obuf_to_output_FAST (  );
---
> unRLE_obuf_to_output_FAST();
530,531c472
< BZ_APIBZ2_bzDecompress ( bz_stream * p1 )
< {
---
> BZ_APIBZ2_bzDecompress(bz_stream *p1) {
534c475
<   if ( NULL )
---
>   if (NULL)
536,537c477,478
<   if ( NULL )
<     if ( strm )
---
>   if (NULL)
>     if (strm)
539c480
<       AssertH (  );
---
>       AssertH();
542,543c483
< BZ_APIBZ2_bzDecompressEnd ( bz_stream * p1 )
< {
---
> BZ_APIBZ2_bzDecompressEnd(bz_stream *p1) {
546c486
<   if ( NULL )
---
>   if (NULL)
548,549c488,489
<   if ( NULL )
<     if ( strm )
---
>   if (NULL)
>     if (strm)
551,556c491,496
<       if ( tt NULL )
< 	( tt );
<   if ( ll16 NULL )
<     ( ll16 );
<   if ( ll4 NULL )
<     ( ll4 ) (  );
---
>       if (tt NULL)
>         (tt);
>   if (ll16 NULL)
>     (ll16);
>   if (ll4 NULL)
>     (ll4)();
558d497
< 
561,562c500
< typedef struct
< {
---
> typedef struct {
569,570c507,508
< Bool initialisedOk}
< bzFile;
---
>   Bool initialisedOk
> } bzFile;
572,574c510,511
< *BZ_APIBZ2_bzWriteOpen
<   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
< {
---
> *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                        int workFactor) {
578c515
<   ( 4 );
---
>   (4);
580,581c517,518
<   ( f ) = ( sizeof ( bzFile ) );
<   ( NULL );
---
>   (f) = (sizeof(bzFile));
>   (NULL);
588,590c525,527
<   if ( 0 )
<     ( workFactor );
<   ( BZ_OK );
---
>   if (0)
>     (workFactor);
>   (BZ_OK);
593d529
< 
596,597c532
< void BZ_APIBZ2_bzWrite ( int *p1, BZFILE * p2, void *p3 )
< {
---
> void BZ_APIBZ2_bzWrite(int *p1, BZFILE *p2, void *p3) {
605c540
<   ( ( bzf ) );
---
>   ((bzf));
607c542
<   ( 0 );
---
>   (0);
611c546
<     if ( bzf_4_1 )
---
>     if (bzf_4_1)
616,619c551,553
< void BZ_APIBZ2_bzWriteClose
<   ( int *p1, BZFILE * p2, int p3, unsigned *p4, unsigned *p5 )
< {
<   ( NULL );
---
> void BZ_APIBZ2_bzWriteClose(int *p1, BZFILE *p2, int p3, unsigned *p4,
>                             unsigned *p5) {
>   (NULL);
622,623c556
< BZ_APIBZ2_bzWriteClose64 ( void )
< {
---
> BZ_APIBZ2_bzWriteClose64(void) {
627c560
<   ( ( bzf ) );
---
>   ((bzf));
629,636c562,569
<   if ( NULL )
<     if ( NULL )
<       if ( NULL )
< 	if ( NULL )
< 
< 	  if ( ferror ( bzf ) != NULL )
< 	    bzf;
<   if ( NULL )
---
>   if (NULL)
>     if (NULL)
>       if (NULL)
>         if (NULL)
> 
>           if (ferror(bzf) != NULL)
>             bzf;
>   if (NULL)
638c571
<   if ( NULL )
---
>   if (NULL)
640c573
<   if ( NULL )
---
>   if (NULL)
646,649c579,580
< *BZ_APIBZ2_bzReadOpen
<   ( int *bzerror,
<     FILE * f, int verbosity, int small, void *unused, int nUnused )
< {
---
> *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
>                       void *unused, int nUnused) {
654c585
<   ( BZ_MAX_UNUSED );
---
>   (BZ_MAX_UNUSED);
656,657c587,588
<   ( f ) = ( sizeof ( bzFile ) );
<   ( NULL );
---
>   (f) = (sizeof(bzFile));
>   (NULL);
664c595
<   while ( 0 )
---
>   while (0)
666,667c597,598
<     ( small );
<   ( BZ_OK );
---
>     (small);
>   (BZ_OK);
672,674c603
< void
< BZ_APIBZ2_bzReadClose ( int *p1, BZFILE * p2 )
< {
---
> void BZ_APIBZ2_bzReadClose(int *p1, BZFILE *p2) {
677c606
<   bzf_3 ( bzf );
---
>   bzf_3(bzf);
682d610
< 
685,686c613
< BZ_APIBZ2_bzRead ( int *p1, BZFILE * p2, void *p3 )
< {
---
> BZ_APIBZ2_bzRead(int *p1, BZFILE *p2, void *p3) {
696,697c623
< void BZ_APIBZ2_bzReadGetUnused ( int *p1, BZFILE * p2, void **p3, int *p4 )
< {
---
> void BZ_APIBZ2_bzReadGetUnused(int *p1, BZFILE *p2, void **p3, int *p4) {
702,703c628,629
<   ( BZ_STREAM_END );
<   ( NULL );
---
>   (BZ_STREAM_END);
>   (NULL);
708,710c634,635
< BZ_APIBZ2_bzBuffToBuffCompress
<   ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5, int p6 )
< {
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *p1, unsigned *p2, char *p3, unsigned p4,
>                                int p5, int p6) {
716c641
<   if ( 0 )
---
>   if (0)
718c643
<     if ( 0 )
---
>     if (0)
722c647
<   if ( BZ_OK )
---
>   if (BZ_OK)
725,726c650,652
<   if ( BZ_FINISH_OK ) ;
<   if ( BZ_STREAM_END )
---
>   if (BZ_FINISH_OK)
>     ;
>   if (BZ_STREAM_END)
731,733c657
< const char *
< BZ_APIBZ2_bzlibVersion (  )
< {
---
> const char *BZ_APIBZ2_bzlibVersion() {}
735c659
< }
---
> bzopen_or_bzdopen(char, int, char, int);
737c661
< bzopen_or_bzdopen ( char, int, char, int );
---
> *BZ_APIBZ2_bzdopen(int p1, const char *p2) { (1); }
739,745c663
< *BZ_APIBZ2_bzdopen ( int p1, const char *p2 )
< {
<   ( 1 );
< }
< 
< BZ_APIBZ2_bzread ( BZFILE * p1, void *p2 )
< {
---
> BZ_APIBZ2_bzread(BZFILE *p1, void *p2) {
747c665
<   if ( ( ( bzFile * ) p1 ) )
---
>   if (((bzFile *)p1))
749,750c667
<     if ( bzerr == BZ_STREAM_END )
<       {
---
>     if (bzerr == BZ_STREAM_END) {
752,753c669,670
< 	;
<       }
---
>       ;
>     }
756,758c673
< void
< BZ_APIBZ2_bzclose ( p1 )
< {
---
> void BZ_APIBZ2_bzclose(p1) {
760c675
<   FILE *fp = ( ( bzFile * ) b );
---
>   FILE *fp = ((bzFile *)b);
762,772c677,680
<   if ( ( ( bzFile * ) p1 ) )
<     {
<       ( NULL );
<       if ( BZ_OK )
< 	{
< 	  ( NULL );
< 	}
<     }
<   if ( stdout )
<     {
<       fp;
---
>   if (((bzFile *)p1)) {
>     (NULL);
>     if (BZ_OK) {
>       (NULL);
773a682,685
>   }
>   if (stdout) {
>     fp;
>   }
776,779c688,689
< const char *
< BZ_APIBZ2_bzerror ( BZFILE * p1, int *p2 )
< {
<   int err = ( ( bzFile * ) p1 );
---
> const char *BZ_APIBZ2_bzerror(BZFILE *p1, int *p2) {
>   int err = ((bzFile *)p1);
781c691
<   if ( 0 )
---
>   if (0)
792,793c702
< #define   \
<        name
---
> #define name
795,796c704
< #define   \
<        name
---
> #define name
798c706
< #define   s0
---
> #define s0
800c708
< main ( int, char *[] );
---
> main(int, char *[]);
(94.3 %, 11600 bytes)
2,3c2,3
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK 0
> #define BZ_RUN_OK 1
5,32c5,30
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #1
< #define BZ_PARAM_ERROR       2
< #define BZ_MEM_ERROR         3
< #4
< #5
< #6
< #define BZ_UNEXPECTED_EOF    7
< #define BZ_OUTBUFF_FULL      8
< #define BZ_CONFIG_ERROR      9
< 
< typedef struct
< {
<     ;
<     int avail_in;
<     int total_in_lo32;
<     int total_in_hi32;
<     int total_out_lo32;
<     int total_out_hi32;
< 
<     void *state;
< 
<     void ( *bzalloc ) (  );
<     void ( *bzfree ) ( void );
<     void *opaque
< }
< bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;
---
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> # 1
> #define BZ_PARAM_ERROR 2
> #define BZ_MEM_ERROR 3
> # 4
> # 5
> # 6
> #define BZ_UNEXPECTED_EOF 7
> #define BZ_OUTBUFF_FULL 8
> #define BZ_CONFIG_ERROR 9
> 
> typedef struct {
>   ;
>   int avail_in;
>   int total_in_lo32;
>   int total_in_hi32;
>   int total_out_lo32;
>   int total_out_hi32;
> 
>   void *state;
> 
>   void (*bzalloc)();
>   void (*bzfree)(void);
>   void *opaque
> } bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;
51,52c49
< #define                      \
<        lll
---
> #define lll
54,55c51
< #define                         \
<    GET_BITSllluuu8
---
> #define GET_BITSllluuu8
57,58c53
< #define                           \
<    GET_BITSllluuu1
---
> #define GET_BITSllluuu1
65c60
< *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
---
>     *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {
67,70c62,64
<     ""
< };
< static default_bzalloc ( Int32 );
< BZ_APIBZ2_bzCompressInit ( bz_stream *, int, int p3 );
---
>                                                    ""};
> static default_bzalloc(Int32);
> BZ_APIBZ2_bzCompressInit(bz_stream *, int, int p3);
72c66
< BZ_APIBZ2_bzCompress ( bz_stream * p1 );
---
> BZ_APIBZ2_bzCompress(bz_stream *p1);
74c68
< strm ( int );
---
> strm(int);
76c70
< BZ_APIBZ2_bzDecompress (  );
---
> BZ_APIBZ2_bzDecompress();
78c72
< BZ_APIBZ2_bzDecompressEnd (  );
---
> BZ_APIBZ2_bzDecompressEnd();
82c76
< *BZ_APIBZ2_bzReadOpen ( int *, FILE *, int, int, void *, int );
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
84c78
< void BZ_APIBZ2_bzReadClose ( int *, BZFILE * );
---
> void BZ_APIBZ2_bzReadClose(int *, BZFILE *);
86c80
< void BZ_APIBZ2_bzReadGetUnused ( int *, BZFILE *, void **, int * );
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);
88c82
< BZ_APIBZ2_bzRead ( int *, BZFILE *, void *p3 );
---
> BZ_APIBZ2_bzRead(int *, BZFILE *, void *p3);
90c84
< *BZ_APIBZ2_bzWriteOpen ( int *, FILE *, int, int, int );
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
92c86
< void BZ_APIBZ2_bzWrite ( int *, BZFILE *, void *p3 );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE *, void *p3);
94c88
< void BZ_APIBZ2_bzWriteClose ( int *, BZFILE *, int, unsigned *, unsigned * );
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);
96c90
< BZ2_bzWriteClose64 ( int, BZFILE, int, int, int, int, int );
---
> BZ2_bzWriteClose64(int, BZFILE, int, int, int, int, int);
98,99c92,93
< BZ_APIBZ2_bzBuffToBuffCompress ( char *,
<                                  unsigned *, char *, unsigned, int, int p6 );
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int,
>                                int p6);
101,102c95
< BZ_APIBZ2_bzBuffToBuffDecompress ( char *,
<                                    unsigned *, char *, unsigned, int p5 );
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int p5);
104,108c97,100
< BZ_APIBZ2_bzBuffToBuffDecompress
< ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5 )
< {
<     bz_stream strm;
<     int strm_5, strm_1, ret;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *p1, unsigned *p2, char *p3, unsigned p4,
>                                  int p5) {
>   bz_stream strm;
>   int strm_5, strm_1, ret;
110c102
<     char strm_4, strm_0;
---
>   char strm_4, strm_0;
112c104
<     if ( 4 )
---
>   if (4)
114,117c106,109
<         bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
<     if ( BZ_OK )
---
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   if (BZ_OK)
119,126c111,114
<         0;
<     if ( BZ_OK ) ;
<     if ( BZ_STREAM_END )
< 
<         if ( 0 )
<         {
< 
<         }
---
>     0;
>   if (BZ_OK)
>     ;
>   if (BZ_STREAM_END)
127a116,117
>     if (0) {
>     }
130c120
< const char *BZ_APIBZ2_bzlibVersion (  );
---
> const char *BZ_APIBZ2_bzlibVersion();
132,134c122,123
< *BZ_APIBZ2_bzopen ( const char *, const char * );
< *BZ_APIBZ2_bzopen ( const char *p1, const char *p2 )
< {
---
> *BZ_APIBZ2_bzopen(const char *, const char *);
> *BZ_APIBZ2_bzopen(const char *p1, const char *p2){
138c127
< *BZ_APIBZ2_bzdopen ( int, const char * );
---
>     * BZ_APIBZ2_bzdopen(int, const char *);
140c129
< BZ_APIBZ2_bzread ( BZFILE *, void *p2 );
---
> BZ_APIBZ2_bzread(BZFILE *, void *p2);
142c131
< BZ_APIBZ2_bzwrite ( BZFILE *, void *p2 );
---
> BZ_APIBZ2_bzwrite(BZFILE *, void *p2);
144,150c133,136
< BZ_APIBZ2_bzwrite ( BZFILE * p1, void *p2 )
< {
<     int bzerr;
<     if ( BZ_OK )
<     {
< 
<     }
---
> BZ_APIBZ2_bzwrite(BZFILE *p1, void *p2) {
>   int bzerr;
>   if (BZ_OK) {
>   }
153c139
< b (  );
---
> b();
155c141
< void BZ_APIBZ2_bzclose (  );
---
> void BZ_APIBZ2_bzclose();
157c143
< const char *BZ_APIBZ2_bzerror ( BZFILE *, int * );
---
> const char *BZ_APIBZ2_bzerror(BZFILE *, int *);
161c147
< #define BZ_VERSION  ""
---
> #define BZ_VERSION ""
163c149
< #define True  1
---
> #define True 1
166,181c152,154
< #\
<  
< #\
<  
< #define  \
<    zf
< #define  \
<    za1
< #define  \
<    za2
< #define  \
<    za3
< #define  \
<    za4
< #define  \
<    za5
---
> #
> 
> #
183,184c156,164
< #define  opaquennn1
< #define   opaqueppp
---
> #define zf
> #define za1
> #define za2
> #define za3
> #define za4
> #define za5
> 
> #define opaquennn1
> #define opaqueppp
189c169
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE 50
191c171
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS BZ_G_SIZE
193,195c173
< #define BZ_RAND_DECLS                          \
<                                    \
<  
---
> #define BZ_RAND_DECLS
197,199c175
< #define                       \
<    srNToGo                                \
<  
---
> #define srNToGo
201,203c177
< #define BZ_RAND_UPD_MASK                       \
<                                                   \
<  
---
> #define BZ_RAND_UPD_MASK
207,208c181
< #\
<  
---
> #
210c183
< #define BZ_M_RUNNING   2
---
> #define BZ_M_RUNNING 2
212c185
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT 2
217c190
< #define BZ_N_OVERSHOOT       2
---
> #define BZ_N_OVERSHOOT 2
219,220c192
< typedef struct
< {
---
> typedef struct {
222c194
<     ;
---
>   ;
224,226c196,198
<     UInt32 arr1;
<     UInt32 arr2;
<     UInt32 ftab;
---
>   UInt32 arr1;
>   UInt32 arr2;
>   UInt32 ftab;
228,231c200,203
<     UInt32 ptr;
<     char block;
<     short mtfv;
<     char zbits;
---
>   UInt32 ptr;
>   char block;
>   short mtfv;
>   char zbits;
233c205
<     Int32 nblock;
---
>   Int32 nblock;
235,238c207,210
<     Int32 nInUse;
<     Bool inUse[6];
<     char unseqToSeq[6];
<     Int32 blockNo;
---
>   Int32 nInUse;
>   Bool inUse[6];
>   char unseqToSeq[6];
>   Int32 blockNo;
240,243c212,215
<     Int32 nMTF;
<     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<     char;
<     char;
---
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   char;
>   char;
245,247c217,218
<     char len
< }
< EState;
---
>   char len
> } EState;
249c220
< #define BZ_X_MAGIC_1     0
---
> #define BZ_X_MAGIC_1 0
254,255c225
< typedef struct
< {
---
> typedef struct {
257,260c227,230
<     char;
<     ;
<     Int32;
<     Int32;
---
>   char;
>   ;
>   Int32;
>   Int32;
262c232
<     UInt32 tt;
---
>   UInt32 tt;
264,268c234,238
<     short ll16;
<     char ll4;
<     Bool;
<     Bool;
<     char;
---
>   short ll16;
>   char ll4;
>   Bool;
>   Bool;
>   char;
270,272c240,242
<     char;
<     Int32 mtfbase[MTFL_SIZE]
<     [BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
---
>   char;
>   Int32
>       mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];
274,275c244
< }
< DState;
---
> } DState;
277,280c246
< #define                      \
<       stPos                 \
<                    \
<  
---
> #define stPos
282,284c248,249
< #define                    \
<                           \
<                     \
---
> #define                                                                        \
>                                                                                \
287,288c252
< #\
<  
---
> #
290,291c254
< #define                              \
<    ll4i
---
> #define ll4i
293,294c256
< #\
<  
---
> #
296,297c258
< #define  \
<    ll16i
---
> #define ll16i
299,301c260
< #define                             \
<            scftab     \
<  
---
> #define scftab
303,304c262
< #\
<  
---
> #
306c264
< #define   zzn
---
> #define zzn
308c266
< #define      a
---
> #define a
316,320c274,278
< #define         zz
< #define       zz
< #define       zz
< #define        zz
< #define   zz
---
> #define zz
> #define zz
> #define zz
> #define zz
> #define zz
322,323c280
< #\
<  
---
> #
325c282
< #define   zzn
---
> #define zzn
327c284
< #define      a
---
> #define a
333c290
< #define  az
---
> #define az
335,336c292
< #\
<  
---
> #
338c294
< #define    BZ_N_QSORT
---
> #define BZ_N_QSORT
342,343c298,299
< #define  ftabb1
< #1
---
> #define ftabb1
> # 1
348,350c304,306
< #define   zz0
< #define    zz1
< #define        zz3
---
> #define zz0
> #define zz1
> #define zz3
352,354c308
< #define                            \
<    WEIGHTOFzw1WEIGHTOFzw2                     \
<  
---
> #define WEIGHTOFzw1WEIGHTOFzw2
359,375c313,338
< makeMaps_e ( void )
< {
<     Int32 i = 0;
<     for ( ;; makeMaps_e_s )
<     {
<         makeMaps_e_s->unseqToSeq[i]++;
<     }
< }
< 
< generateMTFValues ( void )
< {
< 
<     char yy_1;
<     unsigned char yy_0;
<     Int32 i, j, zPend, wr, EOB, ptr_0;
< 
<     unsigned block_0, mtfv_0 = +1;
---
> makeMaps_e(void) {
>   Int32 i = 0;
>   for (;; makeMaps_e_s) {
>     makeMaps_e_s->unseqToSeq[i]++;
>   }
> }
> 
> generateMTFValues(void) {
> 
>   char yy_1;
>   unsigned char yy_0;
>   Int32 i, j, zPend, wr, EOB, ptr_0;
> 
>   unsigned block_0, mtfv_0 = +1;
> 
>   for (;;)
>     generateMTFValues_s->mtfFreq[i];
>   for (;;)
>     i;
> 
>   for (;;) {
>     char ll_i;
>     ("") - 1;
>     if (0)
>       generateMTFValues_s;
>     ("");
377,382c340,341
<     for ( ;; )
<         generateMTFValues_s->mtfFreq[i];
<     for ( ;; )
<         i;
< 
<     for ( ;; )
---
>     if (ll_i) {
>     }
384,403d342
<         char ll_i;
<         ( "" ) - 1;
<         if ( 0 )
<             generateMTFValues_s;
<         ( "" );
< 
<         if ( ll_i )
<         {
< 
<         }
<         {
< 
<             if ( 0 )
<             {
<                 char rtmp, rll_i;
<                 unsigned char *ryy_j;
< 
<                 ( rtmp );;
<                 generateMTFValues_s->mtfFreq[1];
<             }
405c344,351
<         }
---
>       if (0) {
>         char rtmp, rll_i;
>         unsigned char *ryy_j;
> 
>         (rtmp);
>         ;
>         generateMTFValues_s->mtfFreq[1];
>       }
406a353
>   }
408c355
<     if ( 0 )
---
>   if (0)
410,411c357,358
<         ;
<     generateMTFValues_s->mtfFreq;
---
>     ;
>   generateMTFValues_s->mtfFreq;
413c360
<     wr;
---
>   wr;
416c363
< default_bzfree ( void );
---
> default_bzfree(void);
418c365
< s (  );
---
> s();
420,423c367,369
< BZ_APIBZ2_bzCompressInit ( bz_stream * p1, int p2, int p3 )
< {
<     Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
<     EState *s;
---
> BZ_APIBZ2_bzCompressInit(bz_stream *p1, int p2, int p3) {
>   Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
>   EState *s;
425,426c371,372
<     short s_10;
<     char s_9;
---
>   short s_10;
>   char s_9;
428c374
<     bz_stream *s_0;
---
>   bz_stream *s_0;
430c376
<     if ( 0 )
---
>   if (0)
432c378
<         if ( 0 )
---
>     if (0)
434,437c380,383
<             if ( 0 )
<                 if ( bzalloc NULL )
<                     default_bzalloc;
<     if ( bzfree NULL )
---
>       if (0)
>         if (bzalloc NULL)
>           default_bzalloc;
>   if (bzfree NULL)
439,440c385,386
<         BZALLOC (  );
<     if ( NULL )
---
>     BZALLOC();
>   if (NULL)
442,446c388,392
<         arr1 NULL;
<     arr2 NULL;
<     ftab NULL * BZALLOC (  );
<     +sizeof ( UInt32 );
<     ( sizeof ( UInt32 ) );
---
>     arr1 NULL;
>   arr2 NULL;
>   ftab NULL *BZALLOC();
>   +sizeof(UInt32);
>   (sizeof(UInt32));
448c394
<     if ( NULL )
---
>   if (NULL)
450,454c396,400
<         ( char ) ( short ) s_4;
<     zbits NULL;
<     s_4 = 0;
<     0;
<     0;
---
>     (char)(short)s_4;
>   zbits NULL;
>   s_4 = 0;
>   0;
>   0;
456c402
<     return BZ_OK;
---
>   return BZ_OK;
459,460c405
< #\
<  
---
> #
462c407
< handle_compress (  );
---
> handle_compress();
464,465c409
< BZ_APIBZ2_bzCompress ( bz_stream * p1 )
< {
---
> BZ_APIBZ2_bzCompress(bz_stream *p1) {
467,473c411,417
<     EState *s;
<     Int32 s_1;
<     bz_stream *s_0;
<     if ( NULL )
<         ;
<     if ( NULL )
<         if ( strm )
---
>   EState *s;
>   Int32 s_1;
>   bz_stream *s_0;
>   if (NULL)
>     ;
>   if (NULL)
>     if (strm)
475c419
<             return BZ_OK;
---
>       return BZ_OK;
478,493c422,425
< BZ_APIBZ2_bzCompressEnd ( void )
< {
<     EState *s;
<     bz_stream *s_0;
<     if ( NULL )
<         ;
<     if ( NULL )
<         if ( strm )
< 
<             if ( arr1 NULL )
<                 ( arr1 );
<     if ( arr2 NULL )
<         ( arr2 );
<     if ( ftab NULL )
<         ( ftab ) (  );
< 
---
> BZ_APIBZ2_bzCompressEnd(void) {
>   EState *s;
>   bz_stream *s_0;
>   if (NULL)
494a427,435
>   if (NULL)
>     if (strm)
> 
>       if (arr1 NULL)
>         (arr1);
>   if (arr2 NULL)
>     (arr2);
>   if (ftab NULL)
>     (ftab)();
495a437
>   ;
498,501c440,442
< BZ_APIBZ2_bzDecompressInit ( void )
< {
<     DState *s;
<     Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
---
> BZ_APIBZ2_bzDecompressInit(void) {
>   DState *s;
>   Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;
503c444
<     bz_stream *s_0;
---
>   bz_stream *s_0;
505c446
<     if ( 0 )
---
>   if (0)
507,509c448,450
<         if ( NULL )
<             if ( 1 )
<                 if ( 4 )
---
>     if (NULL)
>       if (1)
>         if (4)
511,513c452,454
<                     if ( bzalloc NULL )
<                         default_bzalloc;
<     if ( bzfree NULL )
---
>           if (bzalloc NULL)
>             default_bzalloc;
>   if (bzfree NULL)
515,516c456,457
<         BZALLOC (  );
<     if ( NULL )
---
>     BZALLOC();
>   if (NULL)
518,519d458
<         0;
<     0;
521,526c460,462
<     0;
< 
<     ;
<     ll4 NULL;
<     ll16 NULL;
<     tt NULL;
---
>   0;
>   0;
>   0;
527a464,467
>   ;
>   ll4 NULL;
>   ll16 NULL;
>   tt NULL;
530c470
< unRLE_obuf_to_output_FAST (  );
---
> unRLE_obuf_to_output_FAST();
532,539c472,478
< BZ_APIBZ2_bzDecompress ( bz_stream * p1 )
< {
<     DState *s;
<     bz_stream *s_0;
<     if ( NULL )
<         ;
<     if ( NULL )
<         if ( strm )
---
> BZ_APIBZ2_bzDecompress(bz_stream *p1) {
>   DState *s;
>   bz_stream *s_0;
>   if (NULL)
>     ;
>   if (NULL)
>     if (strm)
541c480
<             AssertH (  );
---
>       AssertH();
544,558c483,486
< BZ_APIBZ2_bzDecompressEnd ( bz_stream * p1 )
< {
<     DState *s;
<     bz_stream *s_0;
<     if ( NULL )
<         ;
<     if ( NULL )
<         if ( strm )
< 
<             if ( tt NULL )
<                 ( tt );
<     if ( ll16 NULL )
<         ( ll16 );
<     if ( ll4 NULL )
<         ( ll4 ) (  );
---
> BZ_APIBZ2_bzDecompressEnd(bz_stream *p1) {
>   DState *s;
>   bz_stream *s_0;
>   if (NULL)
559a488,489
>   if (NULL)
>     if (strm)
560a491,497
>       if (tt NULL)
>         (tt);
>   if (ll16 NULL)
>     (ll16);
>   if (ll4 NULL)
>     (ll4)();
>   ;
563,579c500,508
< typedef struct
< {
<     FILE *handle;
<     char buf;
<     Int32 bufN;
<     Bool writing;
<     bz_stream strm;
<     Int32 lastErr;
<     Bool initialisedOk
< }
< bzFile;
< 
< *BZ_APIBZ2_bzWriteOpen
< ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
< {
<     Int32 ret;
<     bzFile *bzf;
---
> typedef struct {
>   FILE *handle;
>   char buf;
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk
> } bzFile;
581c510,513
<     ( 4 );
---
> *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                        int workFactor) {
>   Int32 ret;
>   bzFile *bzf;
583,584c515
<     ( f ) = ( sizeof ( bzFile ) );
<     ( NULL );
---
>   (4);
586,589c517,518
<     BZ_OK;
<     False;
<     0;
<     f = bzf = NULL;
---
>   (f) = (sizeof(bzFile));
>   (NULL);
591,593c520,523
<     if ( 0 )
<         ( workFactor );
<     ( BZ_OK );
---
>   BZ_OK;
>   False;
>   0;
>   f = bzf = NULL;
595c525,527
<     bzf;
---
>   if (0)
>     (workFactor);
>   (BZ_OK);
596a529
>   bzf;
599,603c532,535
< void BZ_APIBZ2_bzWrite ( int *p1, BZFILE * p2, void *p3 )
< {
<     Int32 ret, bzf_4_5, bzf_4_1;
<     bzFile *bzf = *p2;
<     char bzf_4_4, bzf_4_0;
---
> void BZ_APIBZ2_bzWrite(int *p1, BZFILE *p2, void *p3) {
>   Int32 ret, bzf_4_5, bzf_4_1;
>   bzFile *bzf = *p2;
>   char bzf_4_4, bzf_4_0;
605c537
<     0;
---
>   0;
607,608c539,540
<     ;
<     ( ( bzf ) );
---
>   ;
>   ((bzf));
610c542
<     ( 0 );
---
>   (0);
612c544
<     {
---
>   {
614,616c546,548
<         if ( bzf_4_1 )
<             ;
<     }
---
>     if (bzf_4_1)
>       ;
>   }
619,622c551,553
< void BZ_APIBZ2_bzWriteClose
< ( int *p1, BZFILE * p2, int p3, unsigned *p4, unsigned *p5 )
< {
<     ( NULL );
---
> void BZ_APIBZ2_bzWriteClose(int *p1, BZFILE *p2, int p3, unsigned *p4,
>                             unsigned *p5) {
>   (NULL);
625,626c556
< BZ_APIBZ2_bzWriteClose64 ( void )
< {
---
> BZ_APIBZ2_bzWriteClose64(void) {
628,630c558,560
<     bzFile *bzf = *b;
<     0;
<     ( ( bzf ) );
---
>   bzFile *bzf = *b;
>   0;
>   ((bzf));
632,644c562,565
<     if ( NULL )
<         if ( NULL )
<             if ( NULL )
<                 if ( NULL )
< 
<                     if ( ferror ( bzf ) != NULL )
<                         bzf;
<     if ( NULL )
<         bzf;
<     if ( NULL )
<         bzf;
<     if ( NULL )
<         bzf;
---
>   if (NULL)
>     if (NULL)
>       if (NULL)
>         if (NULL)
646c567,576
<     ;
---
>           if (ferror(bzf) != NULL)
>             bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf;
> 
>   ;
649,655c579,583
< *BZ_APIBZ2_bzReadOpen
< ( int *bzerror,
<   FILE * f, int verbosity, int small, void *unused, int nUnused )
< {
<     bzFile *bzf;
<     char bzf_4_0;
<     int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
---
> *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
>                       void *unused, int nUnused) {
>   bzFile *bzf;
>   char bzf_4_0;
>   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
657c585
<     ( BZ_MAX_UNUSED );
---
>   (BZ_MAX_UNUSED);
659,660c587,588
<     ( f ) = ( sizeof ( bzFile ) );
<     ( NULL );
---
>   (f) = (sizeof(bzFile));
>   (NULL);
662c590
<     ;
---
>   ;
664,665c592,593
<     False;
<     bzf = NULL;
---
>   False;
>   bzf = NULL;
667c595
<     while ( 0 )
---
>   while (0)
669,670c597,598
<         ( small );
<     ( BZ_OK );
---
>     (small);
>   (BZ_OK);
672c600
<     bzf;
---
>   bzf;
675,680c603,606
< void
< BZ_APIBZ2_bzReadClose ( int *p1, BZFILE * p2 )
< {
<     bzFile *bzf = *p2;
<     Bool bzf_6;
<     bzf_3 ( bzf );
---
> void BZ_APIBZ2_bzReadClose(int *p1, BZFILE *p2) {
>   bzFile *bzf = *p2;
>   Bool bzf_6;
>   bzf_3(bzf);
682,684c608
<     bzf_3;
< 
<     ;
---
>   bzf_3;
685a610
>   ;
688,689c613
< BZ_APIBZ2_bzRead ( int *p1, BZFILE * p2, void *p3 )
< {
---
> BZ_APIBZ2_bzRead(int *p1, BZFILE *p2, void *p3) {
691,694c615,618
<     bzFile *bzf = *p2;
<     char bzf_4_4;
<     int bzf_4_5;
<     0;
---
>   bzFile *bzf = *p2;
>   char bzf_4_4;
>   int bzf_4_5;
>   0;
696c620
<     return 0;
---
>   return 0;
699,706c623,629
< void BZ_APIBZ2_bzReadGetUnused ( int *p1, BZFILE * p2, void **p3, int *p4 )
< {
<     bzFile *bzf = *p2;
<     char bzf_4_0;
<     int bzf_4_1;
<     0;
<     ( BZ_STREAM_END );
<     ( NULL );
---
> void BZ_APIBZ2_bzReadGetUnused(int *p1, BZFILE *p2, void **p3, int *p4) {
>   bzFile *bzf = *p2;
>   char bzf_4_0;
>   int bzf_4_1;
>   0;
>   (BZ_STREAM_END);
>   (NULL);
708c631
<     ;
---
>   ;
711,715c634,637
< BZ_APIBZ2_bzBuffToBuffCompress
< ( char *p1, unsigned *p2, char *p3, unsigned p4, int p5, int p6 )
< {
<     bz_stream strm;
<     int strm_5, strm_1, ret;
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *p1, unsigned *p2, char *p3, unsigned p4,
>                                int p5, int p6) {
>   bz_stream strm;
>   int strm_5, strm_1, ret;
717c639
<     char strm_4, strm_0;
---
>   char strm_4, strm_0;
719c641
<     if ( 0 )
---
>   if (0)
721,725c643,647
<         if ( 0 )
<             bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
<     if ( BZ_OK )
---
>     if (0)
>       bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
>   if (BZ_OK)
727,729c649,652
<         0;
<     if ( BZ_FINISH_OK ) ;
<     if ( BZ_STREAM_END )
---
>     0;
>   if (BZ_FINISH_OK)
>     ;
>   if (BZ_STREAM_END)
731c654
<         ret;
---
>     ret;
734,736c657
< const char *
< BZ_APIBZ2_bzlibVersion (  )
< {
---
> const char *BZ_APIBZ2_bzlibVersion() {}
738c659
< }
---
> bzopen_or_bzdopen(char, int, char, int);
740,745c661
< bzopen_or_bzdopen ( char, int, char, int );
< 
< *BZ_APIBZ2_bzdopen ( int p1, const char *p2 )
< {
<     ( 1 );
< }
---
> *BZ_APIBZ2_bzdopen(int p1, const char *p2) { (1); }
747,750c663,665
< BZ_APIBZ2_bzread ( BZFILE * p1, void *p2 )
< {
<     int bzerr, nread;
<     if ( ( ( bzFile * ) p1 ) )
---
> BZ_APIBZ2_bzread(BZFILE *p1, void *p2) {
>   int bzerr, nread;
>   if (((bzFile *)p1))
752,753c667
<         if ( bzerr == BZ_STREAM_END )
<         {
---
>     if (bzerr == BZ_STREAM_END) {
755,756c669,670
<             ;
<         }
---
>       ;
>     }
759,775c673,680
< void
< BZ_APIBZ2_bzclose ( p1 )
< {
<     int bzerr;
<     FILE *fp = ( ( bzFile * ) b );
< 
<     if ( ( ( bzFile * ) p1 ) )
<     {
<         ( NULL );
<         if ( BZ_OK )
<         {
<             ( NULL );
<         }
<     }
<     if ( stdout )
<     {
<         fp;
---
> void BZ_APIBZ2_bzclose(p1) {
>   int bzerr;
>   FILE *fp = ((bzFile *)b);
> 
>   if (((bzFile *)p1)) {
>     (NULL);
>     if (BZ_OK) {
>       (NULL);
776a682,685
>   }
>   if (stdout) {
>     fp;
>   }
779,782c688,689
< const char *
< BZ_APIBZ2_bzerror ( BZFILE * p1, int *p2 )
< {
<     int err = ( ( bzFile * ) p1 );
---
> const char *BZ_APIBZ2_bzerror(BZFILE *p1, int *p2) {
>   int err = ((bzFile *)p1);
784c691
<     if ( 0 )
---
>   if (0)
786c693
<         bzerrorstrings_0;
---
>     bzerrorstrings_0;
795,796c702
< #define   \
<        name
---
> #define name
798,799c704
< #define   \
<        name
---
> #define name
801c706
< #define   s0
---
> #define s0
803c708
< main ( int, char *[] );
---
> main(int, char *[]);
(95.2 %, 9742 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 12 times and failed 34 times
  method pass_balanced :: curly worked 69 times and failed 50 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: parens worked 0 times and failed 0 times
  method pass_balanced :: parens-only worked 240 times and failed 241 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 60 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 27 times and failed 1 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 17 times and failed 0 times
  method pass_clang :: combine-local-var worked 36 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-function-body worked 4 times and failed 17 times
  method pass_clang :: move-global-var worked 7 times and failed 4 times
  method pass_clang :: param-to-global worked 19 times and failed 42 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 1 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 0 times and failed 1 times
  method pass_clang :: rename-param worked 1 times and failed 0 times
  method pass_clang :: rename-var worked 0 times and failed 1 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 6 times and failed 7 times
  method pass_clang :: replace-undefined-function worked 4 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 1 times and failed 1 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 4 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 1529 times and failed 18112 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 164 times and failed 8 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 0 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 1 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454706358.41668/bzip2.c' reduced to:

#define BZ_OK 0
#define BZ_RUN_OK 1

#define BZ_FINISH_OK 3
#define BZ_STREAM_END 4
# 1
#define BZ_PARAM_ERROR 2
#define BZ_MEM_ERROR 3
# 4
# 5
# 6
#define BZ_UNEXPECTED_EOF 7
#define BZ_OUTBUFF_FULL 8
#define BZ_CONFIG_ERROR 9

typedef struct {
  ;
  int avail_in;
  int total_in_lo32;
  int total_in_hi32;
  int total_out_lo32;
  int total_out_hi32;

  void *state;

  void (*bzalloc)();
  void (*bzfree)(void);
  void *opaque
} bz_stream, *BZ_APIBZ2_bzCompressEnd_strm, *BZ_APIBZ2_bzDecompressInit_strm;

#include <stdio.h>

#define BZ_API
#define BZ_EXTERN

typedef BZFILE;
int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity, BZ_APIBZ2_bzwrite_len,
    BZ_APIBZ2_bzCompressInit_workFactor, BZ_APIBZ2_bzCompress_action,
    BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_small,
    BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWriteClose64_abandon,
    BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
    BZ_APIBZ2_bzread_len, bzerrorstrings_0;
typedef Bool;
typedef Int32;
typedef UInt32;
;

#define lll

#define GET_BITSllluuu8

#define GET_BITSllluuu1

#define lval

int *BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32,
    *BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,
    *BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
    *BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32, *bzerrorstrings = {

                                                   ""};
static default_bzalloc(Int32);
BZ_APIBZ2_bzCompressInit(bz_stream *, int, int p3);

BZ_APIBZ2_bzCompress(bz_stream *p1);

strm(int);

BZ_APIBZ2_bzDecompress();

BZ_APIBZ2_bzDecompressEnd();

#define BZ_MAX_UNUSED 0

*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);

void BZ_APIBZ2_bzReadClose(int *, BZFILE *);

void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE *, void **, int *);

BZ_APIBZ2_bzRead(int *, BZFILE *, void *p3);

*BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);

void BZ_APIBZ2_bzWrite(int *, BZFILE *, void *p3);

void BZ_APIBZ2_bzWriteClose(int *, BZFILE *, int, unsigned *, unsigned *);

BZ2_bzWriteClose64(int, BZFILE, int, int, int, int, int);

BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int,
                               int p6);

BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int p5);

BZ_APIBZ2_bzBuffToBuffDecompress(char *p1, unsigned *p2, char *p3, unsigned p4,
                                 int p5) {
  bz_stream strm;
  int strm_5, strm_1, ret;

  char strm_4, strm_0;

  if (4)

    bzalloc NULL;
  bzfree NULL;
  opaque NULL;
  if (BZ_OK)

    0;
  if (BZ_OK)
    ;
  if (BZ_STREAM_END)

    if (0) {
    }
}

const char *BZ_APIBZ2_bzlibVersion();

*BZ_APIBZ2_bzopen(const char *, const char *);
*BZ_APIBZ2_bzopen(const char *p1, const char *p2){

}

    * BZ_APIBZ2_bzdopen(int, const char *);

BZ_APIBZ2_bzread(BZFILE *, void *p2);

BZ_APIBZ2_bzwrite(BZFILE *, void *p2);

BZ_APIBZ2_bzwrite(BZFILE *p1, void *p2) {
  int bzerr;
  if (BZ_OK) {
  }
}

b();

void BZ_APIBZ2_bzclose();

const char *BZ_APIBZ2_bzerror(BZFILE *, int *);

#include <stdlib.h>

#define BZ_VERSION ""

#define True 1
#define False 0

#

#

#define zf
#define za1
#define za2
#define za3
#define za4
#define za5

#define opaquennn1
#define opaqueppp

#define BZ_MAX_ALPHA_SIZE 8

#define BZ_N_GROUPS 6
#define BZ_G_SIZE 50

#define BZ_MAX_SELECTORS BZ_G_SIZE

#define BZ_RAND_DECLS

#define srNToGo

#define BZ_RAND_UPD_MASK

#

#

#define BZ_M_RUNNING 2

#define BZ_S_INPUT 2

#define BZ_N_RADIX
#define BZ_N_QSORT
#define BZ_N_SHELL
#define BZ_N_OVERSHOOT 2

typedef struct {

  ;

  UInt32 arr1;
  UInt32 arr2;
  UInt32 ftab;

  UInt32 ptr;
  char block;
  short mtfv;
  char zbits;

  Int32 nblock;

  Int32 nInUse;
  Bool inUse[6];
  char unseqToSeq[6];
  Int32 blockNo;

  Int32 nMTF;
  Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
  char;
  char;

  char len
} EState;

#define BZ_X_MAGIC_1 0

#define MTFA_SIZE 4096
#define MTFL_SIZE 6

typedef struct {

  char;
  ;
  Int32;
  Int32;

  UInt32 tt;

  short ll16;
  char ll4;
  Bool;
  Bool;
  char;

  char;
  Int32
      mtfbase[MTFL_SIZE][BZ_MAX_SELECTORS][BZ_MAX_SELECTORS][BZ_MAX_ALPHA_SIZE];

} DState;

#define stPos

#define                                                                        \
                                                                               \
    c_tPos

#

#define ll4i

#

#define ll16i

#define scftab

#

#define zzn

#define a

#

#

#

#define zz
#define zz
#define zz
#define zz
#define zz

#

#define zzn

#define a

#define dz

#define dz

#define az

#

#define BZ_N_QSORT

#

#define ftabb1
# 1
#

#

#define zz0
#define zz1
#define zz3

#define WEIGHTOFzw1WEIGHTOFzw2

#

EState *makeMaps_e_s, *generateMTFValues_s;
makeMaps_e(void) {
  Int32 i = 0;
  for (;; makeMaps_e_s) {
    makeMaps_e_s->unseqToSeq[i]++;
  }
}

generateMTFValues(void) {

  char yy_1;
  unsigned char yy_0;
  Int32 i, j, zPend, wr, EOB, ptr_0;

  unsigned block_0, mtfv_0 = +1;

  for (;;)
    generateMTFValues_s->mtfFreq[i];
  for (;;)
    i;

  for (;;) {
    char ll_i;
    ("") - 1;
    if (0)
      generateMTFValues_s;
    ("");

    if (ll_i) {
    }
    {

      if (0) {
        char rtmp, rll_i;
        unsigned char *ryy_j;

        (rtmp);
        ;
        generateMTFValues_s->mtfFreq[1];
      }
    }
  }

  if (0)

    ;
  generateMTFValues_s->mtfFreq;

  wr;
}

default_bzfree(void);

s();

BZ_APIBZ2_bzCompressInit(bz_stream *p1, int p2, int p3) {
  Int32 n, s_8, s_12, s_28, s_18, s_30, s_27, s_1, s_2, s_6, s_5, s_4;
  EState *s;

  short s_10;
  char s_9;

  bz_stream *s_0;

  if (0)

    if (0)

      if (0)
        if (bzalloc NULL)
          default_bzalloc;
  if (bzfree NULL)

    BZALLOC();
  if (NULL)

    arr1 NULL;
  arr2 NULL;
  ftab NULL *BZALLOC();
  +sizeof(UInt32);
  (sizeof(UInt32));

  if (NULL)

    (char)(short)s_4;
  zbits NULL;
  s_4 = 0;
  0;
  0;

  return BZ_OK;
}

#

handle_compress();

BZ_APIBZ2_bzCompress(bz_stream *p1) {

  EState *s;
  Int32 s_1;
  bz_stream *s_0;
  if (NULL)
    ;
  if (NULL)
    if (strm)

      return BZ_OK;
}

BZ_APIBZ2_bzCompressEnd(void) {
  EState *s;
  bz_stream *s_0;
  if (NULL)
    ;
  if (NULL)
    if (strm)

      if (arr1 NULL)
        (arr1);
  if (arr2 NULL)
    (arr2);
  if (ftab NULL)
    (ftab)();

  ;
}

BZ_APIBZ2_bzDecompressInit(void) {
  DState *s;
  Int32 s_12, s_11, s_10, s_26, s_7, s_8, s_1;

  bz_stream *s_0;

  if (0)

    if (NULL)
      if (1)
        if (4)

          if (bzalloc NULL)
            default_bzalloc;
  if (bzfree NULL)

    BZALLOC();
  if (NULL)

    0;
  0;
  0;
  0;

  ;
  ll4 NULL;
  ll16 NULL;
  tt NULL;
}

unRLE_obuf_to_output_FAST();

BZ_APIBZ2_bzDecompress(bz_stream *p1) {
  DState *s;
  bz_stream *s_0;
  if (NULL)
    ;
  if (NULL)
    if (strm)

      AssertH();
}

BZ_APIBZ2_bzDecompressEnd(bz_stream *p1) {
  DState *s;
  bz_stream *s_0;
  if (NULL)
    ;
  if (NULL)
    if (strm)

      if (tt NULL)
        (tt);
  if (ll16 NULL)
    (ll16);
  if (ll4 NULL)
    (ll4)();
  ;
}

typedef struct {
  FILE *handle;
  char buf;
  Int32 bufN;
  Bool writing;
  bz_stream strm;
  Int32 lastErr;
  Bool initialisedOk
} bzFile;

*BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
                       int workFactor) {
  Int32 ret;
  bzFile *bzf;

  (4);

  (f) = (sizeof(bzFile));
  (NULL);

  BZ_OK;
  False;
  0;
  f = bzf = NULL;

  if (0)
    (workFactor);
  (BZ_OK);

  bzf;
}

void BZ_APIBZ2_bzWrite(int *p1, BZFILE *p2, void *p3) {
  Int32 ret, bzf_4_5, bzf_4_1;
  bzFile *bzf = *p2;
  char bzf_4_4, bzf_4_0;

  0;

  ;
  ((bzf));

  (0);

  {

    if (bzf_4_1)
      ;
  }
}

void BZ_APIBZ2_bzWriteClose(int *p1, BZFILE *p2, int p3, unsigned *p4,
                            unsigned *p5) {
  (NULL);
}

BZ_APIBZ2_bzWriteClose64(void) {

  bzFile *bzf = *b;
  0;
  ((bzf));

  if (NULL)
    if (NULL)
      if (NULL)
        if (NULL)

          if (ferror(bzf) != NULL)
            bzf;
  if (NULL)
    bzf;
  if (NULL)
    bzf;
  if (NULL)
    bzf;

  ;
}

*BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
                      void *unused, int nUnused) {
  bzFile *bzf;
  char bzf_4_0;
  int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;

  (BZ_MAX_UNUSED);

  (f) = (sizeof(bzFile));
  (NULL);

  ;

  False;
  bzf = NULL;

  while (0)

    (small);
  (BZ_OK);

  bzf;
}

void BZ_APIBZ2_bzReadClose(int *p1, BZFILE *p2) {
  bzFile *bzf = *p2;
  Bool bzf_6;
  bzf_3(bzf);

  bzf_3;

  ;
}

BZ_APIBZ2_bzRead(int *p1, BZFILE *p2, void *p3) {

  bzFile *bzf = *p2;
  char bzf_4_4;
  int bzf_4_5;
  0;

  return 0;
}

void BZ_APIBZ2_bzReadGetUnused(int *p1, BZFILE *p2, void **p3, int *p4) {
  bzFile *bzf = *p2;
  char bzf_4_0;
  int bzf_4_1;
  0;
  (BZ_STREAM_END);
  (NULL);

  ;
}

BZ_APIBZ2_bzBuffToBuffCompress(char *p1, unsigned *p2, char *p3, unsigned p4,
                               int p5, int p6) {
  bz_stream strm;
  int strm_5, strm_1, ret;

  char strm_4, strm_0;

  if (0)

    if (0)
      bzalloc NULL;
  bzfree NULL;
  opaque NULL;
  if (BZ_OK)

    0;
  if (BZ_FINISH_OK)
    ;
  if (BZ_STREAM_END)

    ret;
}

const char *BZ_APIBZ2_bzlibVersion() {}

bzopen_or_bzdopen(char, int, char, int);

*BZ_APIBZ2_bzdopen(int p1, const char *p2) { (1); }

BZ_APIBZ2_bzread(BZFILE *p1, void *p2) {
  int bzerr, nread;
  if (((bzFile *)p1))

    if (bzerr == BZ_STREAM_END) {

      ;
    }
}

void BZ_APIBZ2_bzclose(p1) {
  int bzerr;
  FILE *fp = ((bzFile *)b);

  if (((bzFile *)p1)) {
    (NULL);
    if (BZ_OK) {
      (NULL);
    }
  }
  if (stdout) {
    fp;
  }
}

const char *BZ_APIBZ2_bzerror(BZFILE *p1, int *p2) {
  int err = ((bzFile *)p1);

  if (0)

    bzerrorstrings_0;
}

#include <signal.h>
#include <errno.h>

#include <fcntl.h>
#include <utime.h>

#define name

#define name

#define s0

main(int, char *[]);
3180.84user 932.59system 48:37.95elapsed 140%CPU (0avgtext+0avgdata 59988maxresident)k
111856inputs+58904152outputs (626major+306002371minor)pagefaults 0swaps
